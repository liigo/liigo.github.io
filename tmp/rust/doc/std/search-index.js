var searchIndex = [{ty:"mod",name:"",path:"std",desc:"# The Rust standard library"},{ty:"mod",name:"macros",path:"std",desc:"Standard library macros"},{ty:"macro",name:"fail",path:"std::macros",desc:"The entry point for failure of rust tasks."},{ty:"macro",name:"assert",path:"std::macros",desc:"Ensure that a boolean expression is `true` at runtime."},{ty:"macro",name:"assert_eq",path:"std::macros",desc:"Asserts that two expressions are equal to each other, testing equality in\nboth directions."},{ty:"macro",name:"unreachable",path:"std::macros",desc:"A utility macro for indicating unreachable code. It will fail if\nexecuted. This is occasionally useful to put after loops that never\nterminate normally, but instead directly return from a function."},{ty:"macro",name:"unimplemented",path:"std::macros",desc:"A standardised placeholder for marking unfinished code. It fails with the\nmessage `\"not yet implemented\"` when executed."},{ty:"macro",name:"format",path:"std::macros",desc:"Use the syntax described in `std::fmt` to create a value of type `~str`.\nSee `std::fmt` for more information."},{ty:"macro",name:"write",path:"std::macros",desc:"Use the `format!` syntax to write data into a buffer of type `&mut Writer`.\nSee `std::fmt` for more information."},{ty:"macro",name:"writeln",path:"std::macros",desc:"Equivalent to the `write!` macro, except that a newline is appended after\nthe message is written."},{ty:"macro",name:"print",path:"std::macros",desc:"Equivalent to the `println!` macro except that a newline is not printed at\nthe end of the message."},{ty:"macro",name:"println",path:"std::macros",desc:"Macro for printing to a task's stdout handle."},{ty:"macro",name:"local_data_key",path:"std::macros",desc:"Declare a task-local key with a specific type."},{ty:"macro",name:"try",path:"std::macros",desc:"Helper macro for unwrapping `Result` values while returning early with an\nerror if the value of the expression is `Err`. For more information, see\n`std::io`."},{ty:"macro",name:"vec",path:"std::macros",desc:"Create a `std::vec_ng::Vec` containing the arguments."},{ty:"macro",name:"select",path:"std::macros",desc:"A macro to select an event from a number of ports."},{ty:"mod",name:"prelude",path:"std",desc:"The standard module imported by default into all Rust modules"},{ty:"mod",name:"int",path:"std",desc:"Operations and constants for architecture-sized signed integers (`int` type)"},{ty:"fn",name:"parse_bytes",path:"std::int",desc:"Parse a byte slice as a number in the given base."},{ty:"fn",name:"to_str_bytes",path:"std::int",desc:"Convert to a string as a byte slice in a given base."},{ty:"static",name:"BITS",path:"std::int",desc:""},{ty:"static",name:"BYTES",path:"std::int",desc:""},{ty:"static",name:"MIN",path:"std::int",desc:""},{ty:"static",name:"MAX",path:"std::int",desc:""},{ty:"mod",name:"i8",path:"std",desc:"Operations and constants for signed 8-bits integers (`i8` type)"},{ty:"fn",name:"parse_bytes",path:"std::i8",desc:"Parse a byte slice as a number in the given base."},{ty:"fn",name:"to_str_bytes",path:"std::i8",desc:"Convert to a string as a byte slice in a given base."},{ty:"static",name:"BITS",path:"std::i8",desc:""},{ty:"static",name:"BYTES",path:"std::i8",desc:""},{ty:"static",name:"MIN",path:"std::i8",desc:""},{ty:"static",name:"MAX",path:"std::i8",desc:""},{ty:"mod",name:"i16",path:"std",desc:"Operations and constants for signed 16-bits integers (`i16` type)"},{ty:"fn",name:"parse_bytes",path:"std::i16",desc:"Parse a byte slice as a number in the given base."},{ty:"fn",name:"to_str_bytes",path:"std::i16",desc:"Convert to a string as a byte slice in a given base."},{ty:"static",name:"BITS",path:"std::i16",desc:""},{ty:"static",name:"BYTES",path:"std::i16",desc:""},{ty:"static",name:"MIN",path:"std::i16",desc:""},{ty:"static",name:"MAX",path:"std::i16",desc:""},{ty:"mod",name:"i32",path:"std",desc:"Operations and constants for signed 32-bits integers (`i32` type)"},{ty:"fn",name:"parse_bytes",path:"std::i32",desc:"Parse a byte slice as a number in the given base."},{ty:"fn",name:"to_str_bytes",path:"std::i32",desc:"Convert to a string as a byte slice in a given base."},{ty:"static",name:"BITS",path:"std::i32",desc:""},{ty:"static",name:"BYTES",path:"std::i32",desc:""},{ty:"static",name:"MIN",path:"std::i32",desc:""},{ty:"static",name:"MAX",path:"std::i32",desc:""},{ty:"mod",name:"i64",path:"std",desc:"Operations and constants for signed 64-bits integers (`i64` type)"},{ty:"fn",name:"parse_bytes",path:"std::i64",desc:"Parse a byte slice as a number in the given base."},{ty:"fn",name:"to_str_bytes",path:"std::i64",desc:"Convert to a string as a byte slice in a given base."},{ty:"static",name:"BITS",path:"std::i64",desc:""},{ty:"static",name:"BYTES",path:"std::i64",desc:""},{ty:"static",name:"MIN",path:"std::i64",desc:""},{ty:"static",name:"MAX",path:"std::i64",desc:""},{ty:"mod",name:"uint",path:"std",desc:"Operations and constants for architecture-sized unsigned integers (`uint` type)"},{ty:"fn",name:"parse_bytes",path:"std::uint",desc:"Parse a byte slice as a number in the given base."},{ty:"fn",name:"to_str_bytes",path:"std::uint",desc:"Convert to a string as a byte slice in a given base."},{ty:"static",name:"BITS",path:"std::uint",desc:""},{ty:"static",name:"BYTES",path:"std::uint",desc:""},{ty:"static",name:"MIN",path:"std::uint",desc:""},{ty:"static",name:"MAX",path:"std::uint",desc:""},{ty:"mod",name:"u8",path:"std",desc:"Operations and constants for unsigned 8-bits integers (`u8` type)"},{ty:"fn",name:"parse_bytes",path:"std::u8",desc:"Parse a byte slice as a number in the given base."},{ty:"fn",name:"to_str_bytes",path:"std::u8",desc:"Convert to a string as a byte slice in a given base."},{ty:"static",name:"BITS",path:"std::u8",desc:""},{ty:"static",name:"BYTES",path:"std::u8",desc:""},{ty:"static",name:"MIN",path:"std::u8",desc:""},{ty:"static",name:"MAX",path:"std::u8",desc:""},{ty:"mod",name:"u16",path:"std",desc:"Operations and constants for unsigned 16-bits integers (`u16` type)"},{ty:"fn",name:"parse_bytes",path:"std::u16",desc:"Parse a byte slice as a number in the given base."},{ty:"fn",name:"to_str_bytes",path:"std::u16",desc:"Convert to a string as a byte slice in a given base."},{ty:"static",name:"BITS",path:"std::u16",desc:""},{ty:"static",name:"BYTES",path:"std::u16",desc:""},{ty:"static",name:"MIN",path:"std::u16",desc:""},{ty:"static",name:"MAX",path:"std::u16",desc:""},{ty:"mod",name:"u32",path:"std",desc:"Operations and constants for unsigned 32-bits integers (`u32` type)"},{ty:"fn",name:"parse_bytes",path:"std::u32",desc:"Parse a byte slice as a number in the given base."},{ty:"fn",name:"to_str_bytes",path:"std::u32",desc:"Convert to a string as a byte slice in a given base."},{ty:"static",name:"BITS",path:"std::u32",desc:""},{ty:"static",name:"BYTES",path:"std::u32",desc:""},{ty:"static",name:"MIN",path:"std::u32",desc:""},{ty:"static",name:"MAX",path:"std::u32",desc:""},{ty:"mod",name:"u64",path:"std",desc:"Operations and constants for unsigned 64-bits integer (`u64` type)"},{ty:"fn",name:"parse_bytes",path:"std::u64",desc:"Parse a byte slice as a number in the given base."},{ty:"fn",name:"to_str_bytes",path:"std::u64",desc:"Convert to a string as a byte slice in a given base."},{ty:"static",name:"BITS",path:"std::u64",desc:""},{ty:"static",name:"BYTES",path:"std::u64",desc:""},{ty:"static",name:"MIN",path:"std::u64",desc:""},{ty:"static",name:"MAX",path:"std::u64",desc:""},{ty:"mod",name:"f32",path:"std",desc:"Operations and constants for 32-bits floats (`f32` type)"},{ty:"fn",name:"sqrt",path:"std::f32",desc:""},{ty:"fn",name:"powi",path:"std::f32",desc:""},{ty:"fn",name:"sin",path:"std::f32",desc:""},{ty:"fn",name:"cos",path:"std::f32",desc:""},{ty:"fn",name:"pow",path:"std::f32",desc:""},{ty:"fn",name:"exp",path:"std::f32",desc:""},{ty:"fn",name:"exp2",path:"std::f32",desc:""},{ty:"fn",name:"ln",path:"std::f32",desc:""},{ty:"fn",name:"log10",path:"std::f32",desc:""},{ty:"fn",name:"log2",path:"std::f32",desc:""},{ty:"fn",name:"mul_add",path:"std::f32",desc:""},{ty:"fn",name:"abs",path:"std::f32",desc:""},{ty:"fn",name:"copysign",path:"std::f32",desc:""},{ty:"fn",name:"floor",path:"std::f32",desc:""},{ty:"fn",name:"ceil",path:"std::f32",desc:""},{ty:"fn",name:"trunc",path:"std::f32",desc:""},{ty:"fn",name:"rint",path:"std::f32",desc:""},{ty:"fn",name:"nearbyint",path:"std::f32",desc:""},{ty:"fn",name:"round",path:"std::f32",desc:""},{ty:"fn",name:"acos",path:"std::f32",desc:""},{ty:"fn",name:"asin",path:"std::f32",desc:""},{ty:"fn",name:"atan",path:"std::f32",desc:""},{ty:"fn",name:"atan2",path:"std::f32",desc:""},{ty:"fn",name:"cbrt",path:"std::f32",desc:""},{ty:"fn",name:"cosh",path:"std::f32",desc:""},{ty:"fn",name:"exp_m1",path:"std::f32",desc:""},{ty:"fn",name:"abs_sub",path:"std::f32",desc:""},{ty:"fn",name:"next_after",path:"std::f32",desc:""},{ty:"fn",name:"frexp",path:"std::f32",desc:""},{ty:"fn",name:"hypot",path:"std::f32",desc:""},{ty:"fn",name:"ldexp",path:"std::f32",desc:""},{ty:"fn",name:"ln_1p",path:"std::f32",desc:""},{ty:"fn",name:"sinh",path:"std::f32",desc:""},{ty:"fn",name:"tan",path:"std::f32",desc:""},{ty:"fn",name:"tanh",path:"std::f32",desc:""},{ty:"fn",name:"to_str",path:"std::f32",desc:"Converts a float to a string"},{ty:"fn",name:"to_str_hex",path:"std::f32",desc:"Converts a float to a string in hexadecimal format"},{ty:"fn",name:"to_str_radix_special",path:"std::f32",desc:"Converts a float to a string in a given radix, and a flag indicating\nwhether it's a special value"},{ty:"fn",name:"to_str_exact",path:"std::f32",desc:"Converts a float to a string with exactly the number of\nprovided significant digits"},{ty:"fn",name:"to_str_digits",path:"std::f32",desc:"Converts a float to a string with a maximum number of\nsignificant digits"},{ty:"fn",name:"to_str_exp_exact",path:"std::f32",desc:"Converts a float to a string using the exponential notation with exactly the number of\nprovided digits after the decimal point in the significand"},{ty:"fn",name:"to_str_exp_digits",path:"std::f32",desc:"Converts a float to a string using the exponential notation with the maximum number of\ndigits after the decimal point in the significand"},{ty:"fn",name:"from_str_hex",path:"std::f32",desc:"Convert a string in base 16 to a float.\nAccepts an optional binary exponent."},{ty:"mod",name:"consts",path:"std::f32",desc:""},{ty:"static",name:"PI",path:"std::f32::consts",desc:"Archimedes' constant"},{ty:"static",name:"FRAC_PI_2",path:"std::f32::consts",desc:"pi/2.0"},{ty:"static",name:"FRAC_PI_4",path:"std::f32::consts",desc:"pi/4.0"},{ty:"static",name:"FRAC_1_PI",path:"std::f32::consts",desc:"1.0/pi"},{ty:"static",name:"FRAC_2_PI",path:"std::f32::consts",desc:"2.0/pi"},{ty:"static",name:"FRAC_2_SQRTPI",path:"std::f32::consts",desc:"2.0/sqrt(pi)"},{ty:"static",name:"SQRT2",path:"std::f32::consts",desc:"sqrt(2.0)"},{ty:"static",name:"FRAC_1_SQRT2",path:"std::f32::consts",desc:"1.0/sqrt(2.0)"},{ty:"static",name:"E",path:"std::f32::consts",desc:"Euler's number"},{ty:"static",name:"LOG2_E",path:"std::f32::consts",desc:"log2(e)"},{ty:"static",name:"LOG10_E",path:"std::f32::consts",desc:"log10(e)"},{ty:"static",name:"LN_2",path:"std::f32::consts",desc:"ln(2.0)"},{ty:"static",name:"LN_10",path:"std::f32::consts",desc:"ln(10.0)"},{ty:"static",name:"RADIX",path:"std::f32",desc:""},{ty:"static",name:"MANTISSA_DIGITS",path:"std::f32",desc:""},{ty:"static",name:"DIGITS",path:"std::f32",desc:""},{ty:"static",name:"EPSILON",path:"std::f32",desc:""},{ty:"static",name:"MIN_VALUE",path:"std::f32",desc:""},{ty:"static",name:"MAX_VALUE",path:"std::f32",desc:""},{ty:"static",name:"MIN_EXP",path:"std::f32",desc:""},{ty:"static",name:"MAX_EXP",path:"std::f32",desc:""},{ty:"static",name:"MIN_10_EXP",path:"std::f32",desc:""},{ty:"static",name:"MAX_10_EXP",path:"std::f32",desc:""},{ty:"static",name:"NAN",path:"std::f32",desc:""},{ty:"static",name:"INFINITY",path:"std::f32",desc:""},{ty:"static",name:"NEG_INFINITY",path:"std::f32",desc:""},{ty:"mod",name:"f64",path:"std",desc:"Operations and constants for 64-bits floats (`f64` type)"},{ty:"fn",name:"sqrt",path:"std::f64",desc:""},{ty:"fn",name:"powi",path:"std::f64",desc:""},{ty:"fn",name:"sin",path:"std::f64",desc:""},{ty:"fn",name:"cos",path:"std::f64",desc:""},{ty:"fn",name:"pow",path:"std::f64",desc:""},{ty:"fn",name:"exp",path:"std::f64",desc:""},{ty:"fn",name:"exp2",path:"std::f64",desc:""},{ty:"fn",name:"ln",path:"std::f64",desc:""},{ty:"fn",name:"log10",path:"std::f64",desc:""},{ty:"fn",name:"log2",path:"std::f64",desc:""},{ty:"fn",name:"mul_add",path:"std::f64",desc:""},{ty:"fn",name:"abs",path:"std::f64",desc:""},{ty:"fn",name:"copysign",path:"std::f64",desc:""},{ty:"fn",name:"floor",path:"std::f64",desc:""},{ty:"fn",name:"ceil",path:"std::f64",desc:""},{ty:"fn",name:"trunc",path:"std::f64",desc:""},{ty:"fn",name:"rint",path:"std::f64",desc:""},{ty:"fn",name:"nearbyint",path:"std::f64",desc:""},{ty:"fn",name:"round",path:"std::f64",desc:""},{ty:"fn",name:"acos",path:"std::f64",desc:""},{ty:"fn",name:"asin",path:"std::f64",desc:""},{ty:"fn",name:"atan",path:"std::f64",desc:""},{ty:"fn",name:"atan2",path:"std::f64",desc:""},{ty:"fn",name:"cbrt",path:"std::f64",desc:""},{ty:"fn",name:"cosh",path:"std::f64",desc:""},{ty:"fn",name:"exp_m1",path:"std::f64",desc:""},{ty:"fn",name:"abs_sub",path:"std::f64",desc:""},{ty:"fn",name:"next_after",path:"std::f64",desc:""},{ty:"fn",name:"frexp",path:"std::f64",desc:""},{ty:"fn",name:"hypot",path:"std::f64",desc:""},{ty:"fn",name:"ldexp",path:"std::f64",desc:""},{ty:"fn",name:"ln_1p",path:"std::f64",desc:""},{ty:"fn",name:"sinh",path:"std::f64",desc:""},{ty:"fn",name:"tan",path:"std::f64",desc:""},{ty:"fn",name:"tanh",path:"std::f64",desc:""},{ty:"fn",name:"to_str",path:"std::f64",desc:"Converts a float to a string"},{ty:"fn",name:"to_str_hex",path:"std::f64",desc:"Converts a float to a string in hexadecimal format"},{ty:"fn",name:"to_str_radix_special",path:"std::f64",desc:"Converts a float to a string in a given radix, and a flag indicating\nwhether it's a special value"},{ty:"fn",name:"to_str_exact",path:"std::f64",desc:"Converts a float to a string with exactly the number of\nprovided significant digits"},{ty:"fn",name:"to_str_digits",path:"std::f64",desc:"Converts a float to a string with a maximum number of\nsignificant digits"},{ty:"fn",name:"to_str_exp_exact",path:"std::f64",desc:"Converts a float to a string using the exponential notation with exactly the number of\nprovided digits after the decimal point in the significand"},{ty:"fn",name:"to_str_exp_digits",path:"std::f64",desc:"Converts a float to a string using the exponential notation with the maximum number of\ndigits after the decimal point in the significand"},{ty:"fn",name:"from_str_hex",path:"std::f64",desc:"Convert a string in base 16 to a float.\nAccepts an optional binary exponent."},{ty:"mod",name:"consts",path:"std::f64",desc:""},{ty:"static",name:"PI",path:"std::f64::consts",desc:"Archimedes' constant"},{ty:"static",name:"FRAC_PI_2",path:"std::f64::consts",desc:"pi/2.0"},{ty:"static",name:"FRAC_PI_4",path:"std::f64::consts",desc:"pi/4.0"},{ty:"static",name:"FRAC_1_PI",path:"std::f64::consts",desc:"1.0/pi"},{ty:"static",name:"FRAC_2_PI",path:"std::f64::consts",desc:"2.0/pi"},{ty:"static",name:"FRAC_2_SQRTPI",path:"std::f64::consts",desc:"2.0/sqrt(pi)"},{ty:"static",name:"SQRT2",path:"std::f64::consts",desc:"sqrt(2.0)"},{ty:"static",name:"FRAC_1_SQRT2",path:"std::f64::consts",desc:"1.0/sqrt(2.0)"},{ty:"static",name:"E",path:"std::f64::consts",desc:"Euler's number"},{ty:"static",name:"LOG2_E",path:"std::f64::consts",desc:"log2(e)"},{ty:"static",name:"LOG10_E",path:"std::f64::consts",desc:"log10(e)"},{ty:"static",name:"LN_2",path:"std::f64::consts",desc:"ln(2.0)"},{ty:"static",name:"LN_10",path:"std::f64::consts",desc:"ln(10.0)"},{ty:"static",name:"RADIX",path:"std::f64",desc:""},{ty:"static",name:"MANTISSA_DIGITS",path:"std::f64",desc:""},{ty:"static",name:"DIGITS",path:"std::f64",desc:""},{ty:"static",name:"EPSILON",path:"std::f64",desc:""},{ty:"static",name:"MIN_VALUE",path:"std::f64",desc:""},{ty:"static",name:"MAX_VALUE",path:"std::f64",desc:""},{ty:"static",name:"MIN_EXP",path:"std::f64",desc:""},{ty:"static",name:"MAX_EXP",path:"std::f64",desc:""},{ty:"static",name:"MIN_10_EXP",path:"std::f64",desc:""},{ty:"static",name:"MAX_10_EXP",path:"std::f64",desc:""},{ty:"static",name:"NAN",path:"std::f64",desc:""},{ty:"static",name:"INFINITY",path:"std::f64",desc:""},{ty:"static",name:"NEG_INFINITY",path:"std::f64",desc:""},{ty:"mod",name:"unit",path:"std",desc:"Functions for the unit type."},{ty:"mod",name:"bool",path:"std",desc:"Operations on boolean values (`bool` type)"},{ty:"fn",name:"to_bit",path:"std::bool",desc:"Convert a `bool` to an integer."},{ty:"mod",name:"char",path:"std",desc:"Character manipulation (`char` type, Unicode Scalar Value)"},{ty:"fn",name:"from_u32",path:"std::char",desc:"Converts from `u32` to a `char`"},{ty:"fn",name:"is_alphabetic",path:"std::char",desc:"Returns whether the specified `char` is considered a Unicode alphabetic\ncode point"},{ty:"fn",name:"is_XID_start",path:"std::char",desc:"Returns whether the specified `char` satisfies the 'XID_Start' Unicode property"},{ty:"fn",name:"is_XID_continue",path:"std::char",desc:"Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property"},{ty:"fn",name:"is_lowercase",path:"std::char",desc:"\nIndicates whether a `char` is in lower case"},{ty:"fn",name:"is_uppercase",path:"std::char",desc:"\nIndicates whether a `char` is in upper case"},{ty:"fn",name:"is_whitespace",path:"std::char",desc:"\nIndicates whether a `char` is whitespace"},{ty:"fn",name:"is_alphanumeric",path:"std::char",desc:"\nIndicates whether a `char` is alphanumeric"},{ty:"fn",name:"is_control",path:"std::char",desc:"\nIndicates whether a `char` is a control code point"},{ty:"fn",name:"is_digit",path:"std::char",desc:"Indicates whether the `char` is numeric (Nd, Nl, or No)"},{ty:"fn",name:"is_digit_radix",path:"std::char",desc:"\nChecks if a `char` parses as a numeric digit in the given radix"},{ty:"fn",name:"to_digit",path:"std::char",desc:"\nConverts a `char` to the corresponding digit"},{ty:"fn",name:"to_uppercase",path:"std::char",desc:"Convert a char to its uppercase equivalent"},{ty:"fn",name:"to_lowercase",path:"std::char",desc:"Convert a char to its lowercase equivalent"},{ty:"fn",name:"from_digit",path:"std::char",desc:"\nConverts a number to the character representing it"},{ty:"fn",name:"decompose_canonical",path:"std::char",desc:"Returns the canonical decomposition of a character"},{ty:"fn",name:"decompose_compatible",path:"std::char",desc:"Returns the compatibility decomposition of a character"},{ty:"fn",name:"escape_unicode",path:"std::char",desc:"\nReturns the hexadecimal Unicode escape of a `char`"},{ty:"fn",name:"escape_default",path:"std::char",desc:"\nReturns a 'default' ASCII and C++11-like literal escape of a `char`"},{ty:"fn",name:"len_utf8_bytes",path:"std::char",desc:"Returns the amount of bytes this `char` would need if encoded in UTF-8"},{ty:"static",name:"MAX",path:"std::char",desc:"The highest valid code point"},{ty:"trait",name:"Char",path:"std::char",desc:""},{ty:"tymethod",name:"is_alphabetic",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"is_XID_start",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"is_XID_continue",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"is_lowercase",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"is_uppercase",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"is_whitespace",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"is_alphanumeric",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"is_control",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"is_digit",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"is_digit_radix",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"to_digit",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"to_lowercase",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"to_uppercase",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"from_digit",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"escape_unicode",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"escape_default",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"len_utf8_bytes",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"encode_utf8",path:"std::char",desc:"Encodes this `char` as utf-8 into the provided byte-buffer",parent:'15418'},{ty:"mod",name:"tuple",path:"std",desc:"Operations on tuples"},{ty:"trait",name:"Tuple1",path:"std::tuple",desc:""},{ty:"tymethod",name:"val0",path:"std::tuple",desc:"",parent:'16051'},{ty:"tymethod",name:"ref0",path:"std::tuple",desc:"",parent:'16051'},{ty:"tymethod",name:"mut0",path:"std::tuple",desc:"",parent:'16051'},{ty:"trait",name:"Tuple2",path:"std::tuple",desc:""},{ty:"tymethod",name:"val0",path:"std::tuple",desc:"",parent:'16466'},{ty:"tymethod",name:"val1",path:"std::tuple",desc:"",parent:'16466'},{ty:"tymethod",name:"ref0",path:"std::tuple",desc:"",parent:'16466'},{ty:"tymethod",name:"ref1",path:"std::tuple",desc:"",parent:'16466'},{ty:"tymethod",name:"mut0",path:"std::tuple",desc:"",parent:'16466'},{ty:"tymethod",name:"mut1",path:"std::tuple",desc:"",parent:'16466'},{ty:"trait",name:"Tuple3",path:"std::tuple",desc:""},{ty:"tymethod",name:"val0",path:"std::tuple",desc:"",parent:'17357'},{ty:"tymethod",name:"val1",path:"std::tuple",desc:"",parent:'17357'},{ty:"tymethod",name:"val2",path:"std::tuple",desc:"",parent:'17357'},{ty:"tymethod",name:"ref0",path:"std::tuple",desc:"",parent:'17357'},{ty:"tymethod",name:"ref1",path:"std::tuple",desc:"",parent:'17357'},{ty:"tymethod",name:"ref2",path:"std::tuple",desc:"",parent:'17357'},{ty:"tymethod",name:"mut0",path:"std::tuple",desc:"",parent:'17357'},{ty:"tymethod",name:"mut1",path:"std::tuple",desc:"",parent:'17357'},{ty:"tymethod",name:"mut2",path:"std::tuple",desc:"",parent:'17357'},{ty:"trait",name:"Tuple4",path:"std::tuple",desc:""},{ty:"tymethod",name:"val0",path:"std::tuple",desc:"",parent:'18598'},{ty:"tymethod",name:"val1",path:"std::tuple",desc:"",parent:'18598'},{ty:"tymethod",name:"val2",path:"std::tuple",desc:"",parent:'18598'},{ty:"tymethod",name:"val3",path:"std::tuple",desc:"",parent:'18598'},{ty:"tymethod",name:"ref0",path:"std::tuple",desc:"",parent:'18598'},{ty:"tymethod",name:"ref1",path:"std::tuple",desc:"",parent:'18598'},{ty:"tymethod",name:"ref2",path:"std::tuple",desc:"",parent:'18598'},{ty:"tymethod",name:"ref3",path:"std::tuple",desc:"",parent:'18598'},{ty:"tymethod",name:"mut0",path:"std::tuple",desc:"",parent:'18598'},{ty:"tymethod",name:"mut1",path:"std::tuple",desc:"",parent:'18598'},{ty:"tymethod",name:"mut2",path:"std::tuple",desc:"",parent:'18598'},{ty:"tymethod",name:"mut3",path:"std::tuple",desc:"",parent:'18598'},{ty:"trait",name:"Tuple5",path:"std::tuple",desc:""},{ty:"tymethod",name:"val0",path:"std::tuple",desc:"",parent:'20195'},{ty:"tymethod",name:"val1",path:"std::tuple",desc:"",parent:'20195'},{ty:"tymethod",name:"val2",path:"std::tuple",desc:"",parent:'20195'},{ty:"tymethod",name:"val3",path:"std::tuple",desc:"",parent:'20195'},{ty:"tymethod",name:"val4",path:"std::tuple",desc:"",parent:'20195'},{ty:"tymethod",name:"ref0",path:"std::tuple",desc:"",parent:'20195'},{ty:"tymethod",name:"ref1",path:"std::tuple",desc:"",parent:'20195'},{ty:"tymethod",name:"ref2",path:"std::tuple",desc:"",parent:'20195'},{ty:"tymethod",name:"ref3",path:"std::tuple",desc:"",parent:'20195'},{ty:"tymethod",name:"ref4",path:"std::tuple",desc:"",parent:'20195'},{ty:"tymethod",name:"mut0",path:"std::tuple",desc:"",parent:'20195'},{ty:"tymethod",name:"mut1",path:"std::tuple",desc:"",parent:'20195'},{ty:"tymethod",name:"mut2",path:"std::tuple",desc:"",parent:'20195'},{ty:"tymethod",name:"mut3",path:"std::tuple",desc:"",parent:'20195'},{ty:"tymethod",name:"mut4",path:"std::tuple",desc:"",parent:'20195'},{ty:"trait",name:"Tuple6",path:"std::tuple",desc:""},{ty:"tymethod",name:"val0",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"val1",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"val2",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"val3",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"val4",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"val5",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"ref0",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"ref1",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"ref2",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"ref3",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"ref4",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"ref5",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"mut0",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"mut1",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"mut2",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"mut3",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"mut4",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"mut5",path:"std::tuple",desc:"",parent:'22154'},{ty:"trait",name:"Tuple7",path:"std::tuple",desc:""},{ty:"tymethod",name:"val0",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"val1",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"val2",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"val3",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"val4",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"val5",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"val6",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"ref0",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"ref1",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"ref2",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"ref3",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"ref4",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"ref5",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"ref6",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"mut0",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"mut1",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"mut2",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"mut3",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"mut4",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"mut5",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"mut6",path:"std::tuple",desc:"",parent:'24481'},{ty:"trait",name:"Tuple8",path:"std::tuple",desc:""},{ty:"tymethod",name:"val0",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"val1",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"val2",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"val3",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"val4",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"val5",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"val6",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"val7",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"ref0",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"ref1",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"ref2",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"ref3",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"ref4",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"ref5",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"ref6",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"ref7",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"mut0",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"mut1",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"mut2",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"mut3",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"mut4",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"mut5",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"mut6",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"mut7",path:"std::tuple",desc:"",parent:'27182'},{ty:"trait",name:"Tuple9",path:"std::tuple",desc:""},{ty:"tymethod",name:"val0",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"val1",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"val2",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"val3",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"val4",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"val5",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"val6",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"val7",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"val8",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"ref0",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"ref1",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"ref2",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"ref3",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"ref4",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"ref5",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"ref6",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"ref7",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"ref8",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"mut0",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"mut1",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"mut2",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"mut3",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"mut4",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"mut5",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"mut6",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"mut7",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"mut8",path:"std::tuple",desc:"",parent:'30263'},{ty:"trait",name:"Tuple10",path:"std::tuple",desc:""},{ty:"tymethod",name:"val0",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"val1",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"val2",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"val3",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"val4",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"val5",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"val6",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"val7",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"val8",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"val9",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"ref0",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"ref1",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"ref2",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"ref3",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"ref4",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"ref5",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"ref6",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"ref7",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"ref8",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"ref9",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"mut0",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"mut1",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"mut2",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"mut3",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"mut4",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"mut5",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"mut6",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"mut7",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"mut8",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"mut9",path:"std::tuple",desc:"",parent:'33730'},{ty:"trait",name:"Tuple11",path:"std::tuple",desc:""},{ty:"tymethod",name:"val0",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"val1",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"val2",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"val3",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"val4",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"val5",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"val6",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"val7",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"val8",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"val9",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"val10",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"ref0",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"ref1",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"ref2",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"ref3",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"ref4",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"ref5",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"ref6",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"ref7",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"ref8",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"ref9",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"ref10",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"mut0",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"mut1",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"mut2",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"mut3",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"mut4",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"mut5",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"mut6",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"mut7",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"mut8",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"mut9",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"mut10",path:"std::tuple",desc:"",parent:'37589'},{ty:"trait",name:"Tuple12",path:"std::tuple",desc:""},{ty:"tymethod",name:"val0",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"val1",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"val2",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"val3",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"val4",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"val5",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"val6",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"val7",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"val8",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"val9",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"val10",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"val11",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"ref0",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"ref1",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"ref2",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"ref3",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"ref4",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"ref5",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"ref6",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"ref7",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"ref8",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"ref9",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"ref10",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"ref11",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"mut0",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"mut1",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"mut2",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"mut3",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"mut4",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"mut5",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"mut6",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"mut7",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"mut8",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"mut9",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"mut10",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"mut11",path:"std::tuple",desc:"",parent:'41846'},{ty:"mod",name:"vec",path:"std",desc:"Utilities for vector manipulation"},{ty:"struct",name:"Splits",path:"std::vec",desc:"An iterator over the slices of a vector separated by elements that\nmatch a predicate function."},{ty:"struct",name:"RevSplits",path:"std::vec",desc:"An iterator over the slices of a vector separated by elements that\nmatch a predicate function, from back to front."},{ty:"struct",name:"ElementSwaps",path:"std::vec",desc:"An Iterator that yields the element swaps needed to produce\na sequence of all possible permutations for an indexed sequence of\nelements. Each permutation is only a single swap apart."},{ty:"struct",name:"Permutations",path:"std::vec",desc:"An Iterator that uses `ElementSwaps` to iterate through\nall possible permutations of a vector."},{ty:"struct",name:"Windows",path:"std::vec",desc:"An iterator over the (overlapping) slices of length `size` within\na vector."},{ty:"struct",name:"Chunks",path:"std::vec",desc:"An iterator over a vector in (non-overlapping) chunks (`size`\nelements at a time)."},{ty:"struct",name:"Items",path:"std::vec",desc:"Immutable slice iterator"},{ty:"struct",name:"MutItems",path:"std::vec",desc:"Mutable slice iterator"},{ty:"struct",name:"MutSplits",path:"std::vec",desc:"An iterator over the subslices of the vector which are separated\nby elements that match `pred`."},{ty:"struct",name:"MutChunks",path:"std::vec",desc:"An iterator over a vector in (non-overlapping) mutable chunks (`size`  elements at a time). When\nthe vector len is not evenly divided by the chunk size, the last slice of the iteration will be\nthe remainder."},{ty:"struct",name:"MoveItems",path:"std::vec",desc:"An iterator that moves out of a vector."},{ty:"fn",name:"from_fn",path:"std::vec",desc:"Creates and initializes an owned vector."},{ty:"fn",name:"from_elem",path:"std::vec",desc:"Creates and initializes an owned vector."},{ty:"fn",name:"with_capacity",path:"std::vec",desc:"Creates a new vector with a capacity of `capacity`"},{ty:"fn",name:"build",path:"std::vec",desc:"Builds a vector by calling a provided function with an argument\nfunction that pushes an element to the back of a vector.\nThe initial capacity for the vector may optionally be specified."},{ty:"fn",name:"ref_slice",path:"std::vec",desc:"Converts a pointer to A into a slice of length 1 (without copying)."},{ty:"fn",name:"mut_ref_slice",path:"std::vec",desc:"Converts a pointer to A into a slice of length 1 (without copying)."},{ty:"fn",name:"append",path:"std::vec",desc:"Iterates over the `rhs` vector, copying each element and appending it to the\n`lhs`. Afterwards, the `lhs` is then returned for use again."},{ty:"fn",name:"append_one",path:"std::vec",desc:"Appends one element to the vector provided. The vector itself is then\nreturned for use again."},{ty:"fn",name:"flat_map",path:"std::vec",desc:"Apply a function to each element of a vector and return a concatenation\nof each result vector"},{ty:"fn",name:"unzip",path:"std::vec",desc:"Convert an iterator of pairs into a pair of vectors."},{ty:"fn",name:"from_buf",path:"std::vec",desc:"Constructs a vector from an unsafe pointer to a buffer"},{ty:"mod",name:"traits",path:"std::vec",desc:""},{ty:"mod",name:"raw",path:"std::vec",desc:"Unsafe operations"},{ty:"fn",name:"buf_as_slice",path:"std::vec::raw",desc:"Form a slice from a pointer and length (as a number of units,\nnot bytes)."},{ty:"fn",name:"mut_buf_as_slice",path:"std::vec::raw",desc:"Form a slice from a pointer and length (as a number of units,\nnot bytes)."},{ty:"fn",name:"from_buf_raw",path:"std::vec::raw",desc:"Constructs a vector from an unsafe pointer to a buffer"},{ty:"fn",name:"shift_ptr",path:"std::vec::raw",desc:"Returns a pointer to first element in slice and adjusts\nslice so it no longer contains that element. Fails if\nslice is empty. O(1)."},{ty:"fn",name:"pop_ptr",path:"std::vec::raw",desc:"Returns a pointer to last element in slice and adjusts\nslice so it no longer contains that element. Fails if\nslice is empty. O(1)."},{ty:"mod",name:"bytes",path:"std::vec",desc:"Operations on `[u8]`."},{ty:"fn",name:"copy_memory",path:"std::vec::bytes",desc:"Copies data from `src` to `dst`"},{ty:"fn",name:"push_bytes",path:"std::vec::bytes",desc:"Allocate space in `dst` and append the data to `src`."},{ty:"trait",name:"MutableByteVector",path:"std::vec::bytes",desc:"A trait for operations on mutable `[u8]`s."},{ty:"tymethod",name:"set_memory",path:"std::vec::bytes",desc:"Sets all bytes of the receiver to the given value.",parent:'55232'},{ty:"typedef",name:"RevItems",path:"std::vec",desc:""},{ty:"typedef",name:"RevMutItems",path:"std::vec",desc:""},{ty:"typedef",name:"RevMoveItems",path:"std::vec",desc:"An iterator that moves out of a vector in reverse order."},{ty:"trait",name:"VectorVector",path:"std::vec",desc:""},{ty:"tymethod",name:"concat_vec",path:"std::vec",desc:"Flattens a vector of vectors of T into a single vector of T.",parent:'47504'},{ty:"tymethod",name:"connect_vec",path:"std::vec",desc:"Concatenate a vector of vectors, placing a given separator between each.",parent:'47504'},{ty:"trait",name:"Vector",path:"std::vec",desc:"Any vector that can be represented as a slice."},{ty:"tymethod",name:"as_slice",path:"std::vec",desc:"Work with `self` as a slice.",parent:'49175'},{ty:"trait",name:"CloneableVector",path:"std::vec",desc:"Extension methods for vector slices with cloneable elements"},{ty:"tymethod",name:"to_owned",path:"std::vec",desc:"Copy `self` into a new owned vector",parent:'49281'},{ty:"tymethod",name:"into_owned",path:"std::vec",desc:"Convert `self` into an owned vector, not making a copy if possible.",parent:'49281'},{ty:"trait",name:"ImmutableVector",path:"std::vec",desc:"Extension methods for vectors"},{ty:"tymethod",name:"slice",path:"std::vec",desc:"Returns a slice of self between `start` and `end`.",parent:'49395'},{ty:"tymethod",name:"slice_from",path:"std::vec",desc:"Returns a slice of self from `start` to the end of the vec.",parent:'49395'},{ty:"tymethod",name:"slice_to",path:"std::vec",desc:"Returns a slice of self from the start of the vec to `end`.",parent:'49395'},{ty:"tymethod",name:"iter",path:"std::vec",desc:"Returns an iterator over the vector",parent:'49395'},{ty:"tymethod",name:"rev_iter",path:"std::vec",desc:"Returns a reversed iterator over a vector",parent:'49395'},{ty:"tymethod",name:"split",path:"std::vec",desc:"Returns an iterator over the subslices of the vector which are\nseparated by elements that match `pred`.  The matched element\nis not contained in the subslices.",parent:'49395'},{ty:"tymethod",name:"splitn",path:"std::vec",desc:"Returns an iterator over the subslices of the vector which are\nseparated by elements that match `pred`, limited to splitting\nat most `n` times.  The matched element is not contained in\nthe subslices.",parent:'49395'},{ty:"tymethod",name:"rsplit",path:"std::vec",desc:"Returns an iterator over the subslices of the vector which are\nseparated by elements that match `pred`. This starts at the\nend of the vector and works backwards.  The matched element is\nnot contained in the subslices.",parent:'49395'},{ty:"tymethod",name:"rsplitn",path:"std::vec",desc:"Returns an iterator over the subslices of the vector which are\nseparated by elements that match `pred` limited to splitting\nat most `n` times. This starts at the end of the vector and\nworks backwards.  The matched element is not contained in the\nsubslices.",parent:'49395'},{ty:"tymethod",name:"windows",path:"std::vec",desc:"Returns an iterator over all contiguous windows of length\n`size`. The windows overlap. If the vector is shorter than\n`size`, the iterator returns no values.",parent:'49395'},{ty:"tymethod",name:"chunks",path:"std::vec",desc:"\nReturns an iterator over `size` elements of the vector at a\ntime. The chunks do not overlap. If `size` does not divide the\nlength of the vector, then the last chunk will not have length\n`size`.",parent:'49395'},{ty:"tymethod",name:"get",path:"std::vec",desc:"Returns the element of a vector at the given index, or `None` if the\nindex is out of bounds",parent:'49395'},{ty:"tymethod",name:"head",path:"std::vec",desc:"Returns the first element of a vector, or `None` if it is empty",parent:'49395'},{ty:"tymethod",name:"tail",path:"std::vec",desc:"Returns all but the first element of a vector",parent:'49395'},{ty:"tymethod",name:"tailn",path:"std::vec",desc:"Returns all but the first `n' elements of a vector",parent:'49395'},{ty:"tymethod",name:"init",path:"std::vec",desc:"Returns all but the last element of a vector",parent:'49395'},{ty:"tymethod",name:"initn",path:"std::vec",desc:"Returns all but the last `n' elements of a vector",parent:'49395'},{ty:"tymethod",name:"last",path:"std::vec",desc:"Returns the last element of a vector, or `None` if it is empty.",parent:'49395'},{ty:"tymethod",name:"flat_map",path:"std::vec",desc:"Apply a function to each element of a vector and return a concatenation\nof each result vector",parent:'49395'},{ty:"tymethod",name:"unsafe_ref",path:"std::vec",desc:"Returns a pointer to the element at the given index, without doing\nbounds checking.",parent:'49395'},{ty:"tymethod",name:"as_ptr",path:"std::vec",desc:"Returns an unsafe pointer to the vector's buffer",parent:'49395'},{ty:"tymethod",name:"bsearch",path:"std::vec",desc:"Binary search a sorted vector with a comparator function.",parent:'49395'},{ty:"tymethod",name:"map",path:"std::vec",desc:"Deprecated, use iterators where possible\n(`self.iter().map(f)`). Apply a function to each element\nof a vector and return the results.",parent:'49395'},{ty:"tymethod",name:"shift_ref",path:"std::vec",desc:"Returns a mutable reference to the first element in this slice\nand adjusts the slice in place so that it no longer contains\nthat element. O(1).",parent:'49395'},{ty:"tymethod",name:"pop_ref",path:"std::vec",desc:"Returns a mutable reference to the last element in this slice\nand adjusts the slice in place so that it no longer contains\nthat element. O(1).",parent:'49395'},{ty:"trait",name:"ImmutableEqVector",path:"std::vec",desc:"Extension methods for vectors contain `Eq` elements."},{ty:"tymethod",name:"position_elem",path:"std::vec",desc:"Find the first index containing a matching value",parent:'50760'},{ty:"tymethod",name:"rposition_elem",path:"std::vec",desc:"Find the last index containing a matching value",parent:'50760'},{ty:"tymethod",name:"contains",path:"std::vec",desc:"Return true if a vector contains an element with the given value",parent:'50760'},{ty:"tymethod",name:"starts_with",path:"std::vec",desc:"Returns true if `needle` is a prefix of the vector.",parent:'50760'},{ty:"tymethod",name:"ends_with",path:"std::vec",desc:"Returns true if `needle` is a suffix of the vector.",parent:'50760'},{ty:"trait",name:"ImmutableTotalOrdVector",path:"std::vec",desc:"Extension methods for vectors containing `TotalOrd` elements."},{ty:"tymethod",name:"bsearch_elem",path:"std::vec",desc:"Binary search a sorted vector for a given element.",parent:'50982'},{ty:"trait",name:"ImmutableCloneableVector",path:"std::vec",desc:"Extension methods for vectors containing `Clone` elements."},{ty:"tymethod",name:"partitioned",path:"std::vec",desc:"Partitions the vector into two vectors `(A,B)`, where all\nelements of `A` satisfy `f` and all elements of `B` do not.",parent:'51035'},{ty:"tymethod",name:"permutations",path:"std::vec",desc:"Create an iterator that yields every possible permutation of the\nvector in succession.",parent:'51035'},{ty:"trait",name:"OwnedVector",path:"std::vec",desc:"Extension methods for owned vectors."},{ty:"tymethod",name:"move_iter",path:"std::vec",desc:"Creates a consuming iterator, that is, one that moves each\nvalue out of the vector (from start to end). The vector cannot\nbe used after calling this.",parent:'51173'},{ty:"tymethod",name:"move_rev_iter",path:"std::vec",desc:"Creates a consuming iterator that moves out of the vector in\nreverse order.",parent:'51173'},{ty:"tymethod",name:"reserve_exact",path:"std::vec",desc:"Reserves capacity for exactly `n` elements in the given vector.",parent:'51173'},{ty:"tymethod",name:"reserve",path:"std::vec",desc:"Reserves capacity for at least `n` elements in the given vector.",parent:'51173'},{ty:"tymethod",name:"reserve_additional",path:"std::vec",desc:"Reserves capacity for at least `n` additional elements in the given vector.",parent:'51173'},{ty:"tymethod",name:"capacity",path:"std::vec",desc:"Returns the number of elements the vector can hold without reallocating.",parent:'51173'},{ty:"tymethod",name:"shrink_to_fit",path:"std::vec",desc:"Shrink the capacity of the vector to match the length",parent:'51173'},{ty:"tymethod",name:"push",path:"std::vec",desc:"Append an element to a vector",parent:'51173'},{ty:"tymethod",name:"push_all_move",path:"std::vec",desc:"Takes ownership of the vector `rhs`, moving all elements into\nthe current vector. This does not copy any elements, and it is\nillegal to use the `rhs` vector after calling this method\n(because it is moved here).",parent:'51173'},{ty:"tymethod",name:"pop",path:"std::vec",desc:"Remove the last element from a vector and return it, or `None` if it is empty",parent:'51173'},{ty:"tymethod",name:"shift",path:"std::vec",desc:"Removes the first element from a vector and return it, or `None` if it is empty",parent:'51173'},{ty:"tymethod",name:"unshift",path:"std::vec",desc:"Prepend an element to the vector",parent:'51173'},{ty:"tymethod",name:"insert",path:"std::vec",desc:"Insert an element at position i within v, shifting all\nelements after position i one position to the right.",parent:'51173'},{ty:"tymethod",name:"remove",path:"std::vec",desc:"Remove and return the element at position `i` within `v`,\nshifting all elements after position `i` one position to the\nleft. Returns `None` if `i` is out of bounds.",parent:'51173'},{ty:"tymethod",name:"swap_remove",path:"std::vec",desc:"Remove an element from anywhere in the vector and return it, replacing it\nwith the last element. This does not preserve ordering, but is O(1).",parent:'51173'},{ty:"tymethod",name:"truncate",path:"std::vec",desc:"Shorten a vector, dropping excess elements.",parent:'51173'},{ty:"tymethod",name:"retain",path:"std::vec",desc:"Like `filter()`, but in place.  Preserves order of `v`.  Linear time.",parent:'51173'},{ty:"tymethod",name:"partition",path:"std::vec",desc:"Partitions the vector into two vectors `(A,B)`, where all\nelements of `A` satisfy `f` and all elements of `B` do not.",parent:'51173'},{ty:"tymethod",name:"grow_fn",path:"std::vec",desc:"Expands a vector in place, initializing the new elements to the result of\na function.",parent:'51173'},{ty:"tymethod",name:"set_len",path:"std::vec",desc:"Sets the length of a vector",parent:'51173'},{ty:"trait",name:"OwnedCloneableVector",path:"std::vec",desc:"Extension methods for owned vectors containing `Clone` elements."},{ty:"tymethod",name:"push_all",path:"std::vec",desc:"Iterates over the slice `rhs`, copies each element, and then appends it to\nthe vector provided `v`. The `rhs` vector is traversed in-order.",parent:'52675'},{ty:"tymethod",name:"grow",path:"std::vec",desc:"Expands a vector in place, initializing the new elements to a given value",parent:'52675'},{ty:"tymethod",name:"grow_set",path:"std::vec",desc:"Sets the value of a vector element at a given index, growing the vector as\nneeded",parent:'52675'},{ty:"trait",name:"OwnedEqVector",path:"std::vec",desc:"Extension methods for owned vectors containing `Eq` elements."},{ty:"tymethod",name:"dedup",path:"std::vec",desc:"Remove consecutive repeated elements from a vector; if the vector is\nsorted, this removes all duplicates.",parent:'52873'},{ty:"trait",name:"MutableVector",path:"std::vec",desc:"Extension methods for vectors such that their elements are\nmutable."},{ty:"tymethod",name:"as_mut_slice",path:"std::vec",desc:"Work with `self` as a mut slice.\nPrimarily intended for getting a &mut [T] from a [T, ..N].",parent:'53641'},{ty:"tymethod",name:"mut_slice",path:"std::vec",desc:"Return a slice that points into another slice.",parent:'53641'},{ty:"tymethod",name:"mut_slice_from",path:"std::vec",desc:"Returns a slice of self from `start` to the end of the vec.",parent:'53641'},{ty:"tymethod",name:"mut_slice_to",path:"std::vec",desc:"Returns a slice of self from the start of the vec to `end`.",parent:'53641'},{ty:"tymethod",name:"mut_iter",path:"std::vec",desc:"Returns an iterator that allows modifying each value",parent:'53641'},{ty:"tymethod",name:"mut_last",path:"std::vec",desc:"Returns a mutable pointer to the last item in the vector.",parent:'53641'},{ty:"tymethod",name:"mut_rev_iter",path:"std::vec",desc:"Returns a reversed iterator that allows modifying each value",parent:'53641'},{ty:"tymethod",name:"mut_split",path:"std::vec",desc:"Returns an iterator over the mutable subslices of the vector\nwhich are separated by elements that match `pred`.  The\nmatched element is not contained in the subslices.",parent:'53641'},{ty:"tymethod",name:"mut_chunks",path:"std::vec",desc:"Returns an iterator over `size` elements of the vector at a time.\nThe chunks are mutable and do not overlap. If `size` does not divide the\nlength of the vector, then the last chunk will not have length\n`size`.",parent:'53641'},{ty:"tymethod",name:"mut_shift_ref",path:"std::vec",desc:"Returns a mutable reference to the first element in this slice\nand adjusts the slice in place so that it no longer contains\nthat element. O(1).",parent:'53641'},{ty:"tymethod",name:"mut_pop_ref",path:"std::vec",desc:"Returns a mutable reference to the last element in this slice\nand adjusts the slice in place so that it no longer contains\nthat element. O(1).",parent:'53641'},{ty:"tymethod",name:"swap",path:"std::vec",desc:"Swaps two elements in a vector.",parent:'53641'},{ty:"tymethod",name:"mut_split_at",path:"std::vec",desc:"Divides one `&mut` into two at an index.",parent:'53641'},{ty:"tymethod",name:"reverse",path:"std::vec",desc:"Reverse the order of elements in a vector, in place.",parent:'53641'},{ty:"tymethod",name:"sort_by",path:"std::vec",desc:"Sort the vector, in place, using `compare` to compare\nelements.",parent:'53641'},{ty:"tymethod",name:"move_from",path:"std::vec",desc:"Consumes `src` and moves as many elements as it can into `self`\nfrom the range [start,end).",parent:'53641'},{ty:"tymethod",name:"unsafe_mut_ref",path:"std::vec",desc:"Returns an unsafe mutable pointer to the element in index",parent:'53641'},{ty:"tymethod",name:"as_mut_ptr",path:"std::vec",desc:"Return an unsafe mutable pointer to the vector's buffer.",parent:'53641'},{ty:"tymethod",name:"unsafe_set",path:"std::vec",desc:"Unsafely sets the element in index to the value.",parent:'53641'},{ty:"tymethod",name:"init_elem",path:"std::vec",desc:"Unchecked vector index assignment.  Does not drop the\nold value and hence is only suitable when the vector\nis newly allocated.",parent:'53641'},{ty:"tymethod",name:"copy_memory",path:"std::vec",desc:"Copies raw bytes from `src` to `self`.",parent:'53641'},{ty:"trait",name:"MutableCloneableVector",path:"std::vec",desc:"Trait for &[T] where T is Cloneable"},{ty:"tymethod",name:"copy_from",path:"std::vec",desc:"Copies as many elements from `src` as it can into `self` (the\nshorter of `self.len()` and `src.len()`). Returns the number\nof elements copied.",parent:'54883'},{ty:"trait",name:"MutableTotalOrdVector",path:"std::vec",desc:"Methods for mutable vectors with orderable elements, such as\nin-place sorting."},{ty:"tymethod",name:"sort",path:"std::vec",desc:"Sort the vector, in place.",parent:'54954'},{ty:"method",name:"next",path:"std::vec",desc:"",parent:'46986'},{ty:"method",name:"size_hint",path:"std::vec",desc:"",parent:'46986'},{ty:"method",name:"next",path:"std::vec",desc:"",parent:'47185'},{ty:"method",name:"size_hint",path:"std::vec",desc:"",parent:'47185'},{ty:"method",name:"new",path:"std::vec",desc:"Create an `ElementSwaps` iterator for a sequence of `length` elements",parent:'47764'},{ty:"method",name:"next",path:"std::vec",desc:"",parent:'47764'},{ty:"method",name:"next",path:"std::vec",desc:"",parent:'48003'},{ty:"method",name:"clone",path:"std::vec",desc:"",parent:'48064'},{ty:"method",name:"next",path:"std::vec",desc:"",parent:'48064'},{ty:"method",name:"size_hint",path:"std::vec",desc:"",parent:'48064'},{ty:"method",name:"clone",path:"std::vec",desc:"",parent:'48217'},{ty:"method",name:"next",path:"std::vec",desc:"",parent:'48217'},{ty:"method",name:"size_hint",path:"std::vec",desc:"",parent:'48217'},{ty:"method",name:"next_back",path:"std::vec",desc:"",parent:'48217'},{ty:"method",name:"indexable",path:"std::vec",desc:"",parent:'48217'},{ty:"method",name:"idx",path:"std::vec",desc:"",parent:'48217'},{ty:"method",name:"indexable",path:"std::vec",desc:"",parent:'55813'},{ty:"method",name:"idx",path:"std::vec",desc:"",parent:'55813'},{ty:"method",name:"next",path:"std::vec",desc:"",parent:'55813'},{ty:"method",name:"size_hint",path:"std::vec",desc:"",parent:'55813'},{ty:"method",name:"next_back",path:"std::vec",desc:"",parent:'55813'},{ty:"method",name:"clone",path:"std::vec",desc:"",parent:'55813'},{ty:"method",name:"next",path:"std::vec",desc:"",parent:'55828'},{ty:"method",name:"size_hint",path:"std::vec",desc:"",parent:'55828'},{ty:"method",name:"next_back",path:"std::vec",desc:"",parent:'55828'},{ty:"method",name:"next",path:"std::vec",desc:"",parent:'56353'},{ty:"method",name:"size_hint",path:"std::vec",desc:"",parent:'56353'},{ty:"method",name:"next_back",path:"std::vec",desc:"",parent:'56353'},{ty:"method",name:"next",path:"std::vec",desc:"",parent:'56639'},{ty:"method",name:"size_hint",path:"std::vec",desc:"",parent:'56639'},{ty:"method",name:"next_back",path:"std::vec",desc:"",parent:'56639'},{ty:"method",name:"next",path:"std::vec",desc:"",parent:'56881'},{ty:"method",name:"size_hint",path:"std::vec",desc:"",parent:'56881'},{ty:"method",name:"next_back",path:"std::vec",desc:"",parent:'56881'},{ty:"method",name:"drop",path:"std::vec",desc:"",parent:'56881'},{ty:"mod",name:"vec_ng",path:"std",desc:""},{ty:"struct",name:"Vec",path:"std::vec_ng",desc:""},{ty:"struct",name:"MoveItems",path:"std::vec_ng",desc:""},{ty:"fn",name:"append",path:"std::vec_ng",desc:""},{ty:"fn",name:"append_one",path:"std::vec_ng",desc:"Appends one element to the vector provided. The vector itself is then\nreturned for use again."},{ty:"method",name:"new",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"with_capacity",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"from_fn",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"partition",path:"std::vec_ng",desc:"Partitions the vector into two vectors `(A,B)`, where all\nelements of `A` satisfy `f` and all elements of `B` do not.",parent:'57199'},{ty:"method",name:"from_slice",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"from_elem",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"push_all",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"grow",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"grow_set",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"partitioned",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"clone",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"from_iterator",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"extend",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"eq",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"lt",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"equals",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"cmp",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"len",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"capacity",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"reserve_additional",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"reserve",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"reserve_exact",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"shrink_to_fit",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"pop",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"push",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"truncate",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"as_slice",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"as_mut_slice",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"move_iter",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"move_rev_iter",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"set_len",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"get",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"get_mut",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"iter",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"mut_iter",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"sort_by",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"slice",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"tail",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"tailn",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"last",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"mut_last",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"swap_remove",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"unshift",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"shift",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"insert",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"rev_iter",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"map",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"push_all_move",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"mut_slice",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"reverse",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"slice_from",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"slice_to",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"init",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"as_ptr",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"as_mut_ptr",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"clear",path:"std::vec_ng",desc:"Clear the vector, removing all values.",parent:'57199'},{ty:"method",name:"contains",path:"std::vec_ng",desc:"Return true if a vector contains an element with the given value",parent:'57199'},{ty:"method",name:"dedup",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"drop",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"default",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"fmt",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"next",path:"std::vec_ng",desc:"",parent:'59438'},{ty:"method",name:"size_hint",path:"std::vec_ng",desc:"",parent:'59438'},{ty:"method",name:"next_back",path:"std::vec_ng",desc:"",parent:'59438'},{ty:"method",name:"drop",path:"std::vec_ng",desc:"",parent:'59438'},{ty:"mod",name:"str",path:"std",desc:"Unicode string manipulation (`str` type)"},{ty:"struct",name:"Chars",path:"std::str",desc:"External iterator for a string's characters.\nUse with the `std::iter` module."},{ty:"struct",name:"CharOffsets",path:"std::str",desc:"External iterator for a string's characters and their byte offsets.\nUse with the `std::iter` module."},{ty:"struct",name:"CharSplits",path:"std::str",desc:"An iterator over the substrings of a string, separated by `sep`."},{ty:"struct",name:"CharSplitsN",path:"std::str",desc:"An iterator over the substrings of a string, separated by `sep`,\nsplitting at most `count` times."},{ty:"struct",name:"MatchIndices",path:"std::str",desc:"An iterator over the start and end indices of the matches of a\nsubstring within a larger string"},{ty:"struct",name:"StrSplits",path:"std::str",desc:"An iterator over the substrings of a string separated by a given\nsearch string"},{ty:"struct",name:"Normalizations",path:"std::str",desc:"External iterator for a string's normalization's characters.\nUse with the `std::iter` module."},{ty:"struct",name:"UTF16Items",path:"std::str",desc:"An iterator that decodes UTF-16 encoded codepoints from a vector\nof `u16`s."},{ty:"struct",name:"CharRange",path:"std::str",desc:"Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string."},{ty:"structfield",name:"ch",path:"std::str",desc:"Current `char`",parent:'63563'},{ty:"structfield",name:"next",path:"std::str",desc:"Index of the first byte of the next `char`",parent:'63563'},{ty:"enum",name:"UTF16Item",path:"std::str",desc:"The possibilities for values decoded from a `u16` stream."},{ty:"variant",name:"ScalarValue",path:"std::str",desc:"A valid codepoint.",parent:'62578'},{ty:"variant",name:"LoneSurrogate",path:"std::str",desc:"An invalid surrogate without its pair.",parent:'62578'},{ty:"enum",name:"MaybeOwned",path:"std::str",desc:"A MaybeOwned is a string that can hold either a ~str or a &str.\nThis can be useful as an optimization when an allocation is sometimes\nneeded but not always."},{ty:"variant",name:"Slice",path:"std::str",desc:"A borrowed string",parent:'64156'},{ty:"variant",name:"Owned",path:"std::str",desc:"An owned string",parent:'64156'},{ty:"fn",name:"from_utf8_owned",path:"std::str",desc:"Consumes a vector of bytes to create a new utf-8 string.\nReturns None if the vector contains invalid UTF-8."},{ty:"fn",name:"from_utf8",path:"std::str",desc:"Converts a vector to a string slice without performing any allocations."},{ty:"fn",name:"from_byte",path:"std::str",desc:"Convert a byte to a UTF-8 string"},{ty:"fn",name:"from_char",path:"std::str",desc:"Convert a char to a string"},{ty:"fn",name:"from_chars",path:"std::str",desc:"Convert a vector of chars to a string"},{ty:"fn",name:"replace",path:"std::str",desc:"Replace all occurrences of one string with another"},{ty:"fn",name:"eq_slice",path:"std::str",desc:"Bytewise slice equality"},{ty:"fn",name:"eq",path:"std::str",desc:"Bytewise string equality"},{ty:"fn",name:"is_utf8",path:"std::str",desc:"Determines if a vector of bytes contains valid UTF-8."},{ty:"fn",name:"is_utf16",path:"std::str",desc:"Determines if a vector of `u16` contains valid UTF-16"},{ty:"fn",name:"utf16_items",path:"std::str",desc:"Create an iterator over the UTF-16 encoded codepoints in `v`,\nreturning invalid surrogates as `LoneSurrogate`s."},{ty:"fn",name:"truncate_utf16_at_nul",path:"std::str",desc:"Return a slice of `v` ending at (and not including) the first NUL\n(0)."},{ty:"fn",name:"from_utf16",path:"std::str",desc:"Decode a UTF-16 encoded vector `v` into a string, returning `None`\nif `v` contains any invalid data."},{ty:"fn",name:"from_utf16_lossy",path:"std::str",desc:"Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD)."},{ty:"fn",name:"with_capacity",path:"std::str",desc:"Allocates a new string with the specified capacity. The string returned is\nthe empty string, but has capacity for much more."},{ty:"fn",name:"utf8_char_width",path:"std::str",desc:"Given a first byte, determine how many bytes are in this UTF-8 character"},{ty:"fn",name:"from_utf8_lossy",path:"std::str",desc:"Converts a vector of bytes to a new utf-8 string.\nAny invalid utf-8 sequences are replaced with U+FFFD REPLACEMENT CHARACTER."},{ty:"mod",name:"raw",path:"std::str",desc:"Unsafe operations"},{ty:"fn",name:"from_buf_len",path:"std::str::raw",desc:"Create a Rust string from a *u8 buffer of the given length"},{ty:"fn",name:"from_c_str",path:"std::str::raw",desc:"Create a Rust string from a null-terminated C string"},{ty:"fn",name:"from_utf8",path:"std::str::raw",desc:"Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8."},{ty:"fn",name:"from_utf8_owned",path:"std::str::raw",desc:"Converts an owned vector of bytes to a new owned string. This assumes\nthat the utf-8-ness of the vector has already been validated"},{ty:"fn",name:"from_byte",path:"std::str::raw",desc:"Converts a byte to a string."},{ty:"fn",name:"c_str_to_static_slice",path:"std::str::raw",desc:"Form a slice from a C string. Unsafe because the caller must ensure the\nC string has the static lifetime, or else the return value may be\ninvalidated later."},{ty:"fn",name:"slice_bytes",path:"std::str::raw",desc:"Takes a bytewise (not UTF-8) slice from a string."},{ty:"fn",name:"slice_unchecked",path:"std::str::raw",desc:"Takes a bytewise (not UTF-8) slice from a string."},{ty:"fn",name:"push_byte",path:"std::str::raw",desc:"Appends a byte to a string.\nThe caller must preserve the valid UTF-8 property."},{ty:"fn",name:"push_bytes",path:"std::str::raw",desc:"Appends a vector of bytes to a string.\nThe caller must preserve the valid UTF-8 property."},{ty:"fn",name:"pop_byte",path:"std::str::raw",desc:"Removes the last byte from a string and returns it.\nReturns None when an empty string is passed.\nThe caller must preserve the valid UTF-8 property."},{ty:"fn",name:"shift_byte",path:"std::str::raw",desc:"Removes the first byte from a string and returns it.\nReturns None when an empty string is passed.\nThe caller must preserve the valid UTF-8 property."},{ty:"fn",name:"as_owned_vec",path:"std::str::raw",desc:"Access the str in its vector representation.\nThe caller must preserve the valid UTF-8 property when modifying."},{ty:"mod",name:"traits",path:"std::str",desc:""},{ty:"typedef",name:"RevChars",path:"std::str",desc:"External iterator for a string's characters in reverse order.\nUse with the `std::iter` module."},{ty:"typedef",name:"RevCharOffsets",path:"std::str",desc:"External iterator for a string's characters and their byte offsets in reverse order.\nUse with the `std::iter` module."},{ty:"typedef",name:"Bytes",path:"std::str",desc:"External iterator for a string's bytes.\nUse with the `std::iter` module."},{ty:"typedef",name:"RevBytes",path:"std::str",desc:"External iterator for a string's bytes in reverse order.\nUse with the `std::iter` module."},{ty:"typedef",name:"RevCharSplits",path:"std::str",desc:"An iterator over the substrings of a string, separated by `sep`,\nstarting from the back of the string."},{ty:"typedef",name:"Words",path:"std::str",desc:"An iterator over the words of a string, separated by a sequence of whitespace"},{ty:"typedef",name:"AnyLines",path:"std::str",desc:"An iterator over the lines of a string, separated by either `\\n` or (`\\r\\n`)."},{ty:"typedef",name:"SendStr",path:"std::str",desc:"SendStr is a specialization of `MaybeOwned` to be sendable"},{ty:"trait",name:"StrVector",path:"std::str",desc:"Methods for vectors of strings"},{ty:"tymethod",name:"concat",path:"std::str",desc:"Concatenate a vector of strings.",parent:'59849'},{ty:"tymethod",name:"connect",path:"std::str",desc:"Concatenate a vector of strings, placing a given separator between each.",parent:'59849'},{ty:"trait",name:"CharEq",path:"std::str",desc:"Something that can be used to compare against a character"},{ty:"tymethod",name:"matches",path:"std::str",desc:"Determine if the splitter should split at the given character",parent:'60085'},{ty:"tymethod",name:"only_ascii",path:"std::str",desc:"Indicate if this is only concerned about ASCII characters,\nwhich can allow for a faster implementation.",parent:'60085'},{ty:"trait",name:"IntoMaybeOwned",path:"std::str",desc:"Trait for moving into a `MaybeOwned`"},{ty:"tymethod",name:"into_maybe_owned",path:"std::str",desc:"Moves self into a `MaybeOwned`",parent:'64210'},{ty:"trait",name:"Str",path:"std::str",desc:"Any string that can be represented as a slice"},{ty:"tymethod",name:"as_slice",path:"std::str",desc:"Work with `self` as a slice.",parent:'65704'},{ty:"tymethod",name:"into_owned",path:"std::str",desc:"Convert `self` into a ~str, not making a copy if possible",parent:'65704'},{ty:"trait",name:"StrSlice",path:"std::str",desc:"Methods for string slices"},{ty:"tymethod",name:"contains",path:"std::str",desc:"Returns true if one string contains another",parent:'65836'},{ty:"tymethod",name:"contains_char",path:"std::str",desc:"Returns true if a string contains a char.",parent:'65836'},{ty:"tymethod",name:"chars",path:"std::str",desc:"An iterator over the characters of `self`. Note, this iterates\nover unicode code-points, not unicode graphemes.",parent:'65836'},{ty:"tymethod",name:"chars_rev",path:"std::str",desc:"An iterator over the characters of `self`, in reverse order.",parent:'65836'},{ty:"tymethod",name:"bytes",path:"std::str",desc:"An iterator over the bytes of `self`",parent:'65836'},{ty:"tymethod",name:"bytes_rev",path:"std::str",desc:"An iterator over the bytes of `self`, in reverse order",parent:'65836'},{ty:"tymethod",name:"char_indices",path:"std::str",desc:"An iterator over the characters of `self` and their byte offsets.",parent:'65836'},{ty:"tymethod",name:"char_indices_rev",path:"std::str",desc:"An iterator over the characters of `self` and their byte offsets,\nin reverse order.",parent:'65836'},{ty:"tymethod",name:"split",path:"std::str",desc:"An iterator over substrings of `self`, separated by characters\nmatched by `sep`.",parent:'65836'},{ty:"tymethod",name:"splitn",path:"std::str",desc:"An iterator over substrings of `self`, separated by characters\nmatched by `sep`, restricted to splitting at most `count`\ntimes.",parent:'65836'},{ty:"tymethod",name:"split_terminator",path:"std::str",desc:"An iterator over substrings of `self`, separated by characters\nmatched by `sep`.",parent:'65836'},{ty:"tymethod",name:"rsplit",path:"std::str",desc:"An iterator over substrings of `self`, separated by characters\nmatched by `sep`, in reverse order.",parent:'65836'},{ty:"tymethod",name:"rsplitn",path:"std::str",desc:"An iterator over substrings of `self`, separated by characters\nmatched by `sep`, starting from the end of the string.\nRestricted to splitting at most `count` times.",parent:'65836'},{ty:"tymethod",name:"match_indices",path:"std::str",desc:"An iterator over the start and end indices of the disjoint\nmatches of `sep` within `self`.",parent:'65836'},{ty:"tymethod",name:"split_str",path:"std::str",desc:"An iterator over the substrings of `self` separated by `sep`.",parent:'65836'},{ty:"tymethod",name:"lines",path:"std::str",desc:"An iterator over the lines of a string (subsequences separated\nby `\\n`). This does not include the empty string after a\ntrailing `\\n`.",parent:'65836'},{ty:"tymethod",name:"lines_any",path:"std::str",desc:"An iterator over the lines of a string, separated by either\n`\\n` or `\\r\\n`. As with `.lines()`, this does not include an\nempty trailing line.",parent:'65836'},{ty:"tymethod",name:"words",path:"std::str",desc:"An iterator over the words of a string (subsequences separated\nby any sequence of whitespace). Sequences of whitespace are\ncollapsed, so empty \"words\" are not included.",parent:'65836'},{ty:"tymethod",name:"nfd_chars",path:"std::str",desc:"An Iterator over the string in Unicode Normalization Form D\n(canonical decomposition).",parent:'65836'},{ty:"tymethod",name:"nfkd_chars",path:"std::str",desc:"An Iterator over the string in Unicode Normalization Form KD\n(compatibility decomposition).",parent:'65836'},{ty:"tymethod",name:"is_whitespace",path:"std::str",desc:"Returns true if the string contains only whitespace.",parent:'65836'},{ty:"tymethod",name:"is_alphanumeric",path:"std::str",desc:"Returns true if the string contains only alphanumeric code\npoints.",parent:'65836'},{ty:"tymethod",name:"char_len",path:"std::str",desc:"Returns the number of Unicode code points (`char`) that a\nstring holds.",parent:'65836'},{ty:"tymethod",name:"slice",path:"std::str",desc:"Returns a slice of the given string from the byte range\n[`begin`..`end`).",parent:'65836'},{ty:"tymethod",name:"slice_from",path:"std::str",desc:"Returns a slice of the string from `begin` to its end.",parent:'65836'},{ty:"tymethod",name:"slice_to",path:"std::str",desc:"Returns a slice of the string from the beginning to byte\n`end`.",parent:'65836'},{ty:"tymethod",name:"slice_chars",path:"std::str",desc:"Returns a slice of the string from the character range\n[`begin`..`end`).",parent:'65836'},{ty:"tymethod",name:"starts_with",path:"std::str",desc:"Returns true if `needle` is a prefix of the string.",parent:'65836'},{ty:"tymethod",name:"ends_with",path:"std::str",desc:"Returns true if `needle` is a suffix of the string.",parent:'65836'},{ty:"tymethod",name:"escape_default",path:"std::str",desc:"Escape each char in `s` with `char::escape_default`.",parent:'65836'},{ty:"tymethod",name:"escape_unicode",path:"std::str",desc:"Escape each char in `s` with `char::escape_unicode`.",parent:'65836'},{ty:"tymethod",name:"trim",path:"std::str",desc:"Returns a string with leading and trailing whitespace removed.",parent:'65836'},{ty:"tymethod",name:"trim_left",path:"std::str",desc:"Returns a string with leading whitespace removed.",parent:'65836'},{ty:"tymethod",name:"trim_right",path:"std::str",desc:"Returns a string with trailing whitespace removed.",parent:'65836'},{ty:"tymethod",name:"trim_chars",path:"std::str",desc:"Returns a string with characters that match `to_trim` removed.",parent:'65836'},{ty:"tymethod",name:"trim_left_chars",path:"std::str",desc:"Returns a string with leading `chars_to_trim` removed.",parent:'65836'},{ty:"tymethod",name:"trim_right_chars",path:"std::str",desc:"Returns a string with trailing `chars_to_trim` removed.",parent:'65836'},{ty:"tymethod",name:"replace",path:"std::str",desc:"Replace all occurrences of one string with another.",parent:'65836'},{ty:"tymethod",name:"to_owned",path:"std::str",desc:"Copy a slice into a new owned str.",parent:'65836'},{ty:"tymethod",name:"to_utf16",path:"std::str",desc:"Converts to a vector of `u16` encoded as UTF-16.",parent:'65836'},{ty:"tymethod",name:"is_char_boundary",path:"std::str",desc:"Check that `index`-th byte lies at the start and/or end of a\nUTF-8 code point sequence.",parent:'65836'},{ty:"tymethod",name:"char_range_at",path:"std::str",desc:"Pluck a character out of a string and return the index of the next\ncharacter.",parent:'65836'},{ty:"tymethod",name:"char_range_at_reverse",path:"std::str",desc:"Given a byte position and a str, return the previous char and its position.",parent:'65836'},{ty:"tymethod",name:"char_at",path:"std::str",desc:"Plucks the character starting at the `i`th byte of a string",parent:'65836'},{ty:"tymethod",name:"char_at_reverse",path:"std::str",desc:"Plucks the character ending at the `i`th byte of a string",parent:'65836'},{ty:"tymethod",name:"as_bytes",path:"std::str",desc:"Work with the byte buffer of a string as a byte slice.",parent:'65836'},{ty:"tymethod",name:"find",path:"std::str",desc:"Returns the byte index of the first character of `self` that\nmatches `search`.",parent:'65836'},{ty:"tymethod",name:"rfind",path:"std::str",desc:"Returns the byte index of the last character of `self` that\nmatches `search`.",parent:'65836'},{ty:"tymethod",name:"find_str",path:"std::str",desc:"Returns the byte index of the first matching substring",parent:'65836'},{ty:"tymethod",name:"repeat",path:"std::str",desc:"Given a string, make a new string with repeated copies of it.",parent:'65836'},{ty:"tymethod",name:"slice_shift_char",path:"std::str",desc:"Retrieves the first character from a string slice and returns\nit. This does not allocate a new string; instead, it returns a\nslice that point one character beyond the character that was\nshifted. If the string does not contain any characters,\na tuple of None and an empty string is returned instead.",parent:'65836'},{ty:"tymethod",name:"lev_distance",path:"std::str",desc:"Levenshtein Distance between two strings.",parent:'65836'},{ty:"tymethod",name:"subslice_offset",path:"std::str",desc:"Returns the byte offset of an inner slice relative to an enclosing outer slice.",parent:'65836'},{ty:"tymethod",name:"as_ptr",path:"std::str",desc:"Return an unsafe pointer to the strings buffer.",parent:'65836'},{ty:"trait",name:"OwnedStr",path:"std::str",desc:"Methods for owned strings"},{ty:"tymethod",name:"push_str_no_overallocate",path:"std::str",desc:"Appends a string slice to the back of a string, without overallocating.",parent:'69309'},{ty:"tymethod",name:"push_str",path:"std::str",desc:"Appends a string slice to the back of a string",parent:'69309'},{ty:"tymethod",name:"push_char",path:"std::str",desc:"Appends a character to the back of a string",parent:'69309'},{ty:"tymethod",name:"pop_char",path:"std::str",desc:"Remove the final character from a string and return it. Return None\nwhen the string is empty.",parent:'69309'},{ty:"tymethod",name:"shift_char",path:"std::str",desc:"Remove the first character from a string and return it. Return None\nwhen the string is empty.",parent:'69309'},{ty:"tymethod",name:"unshift_char",path:"std::str",desc:"Prepend a char to a string",parent:'69309'},{ty:"tymethod",name:"insert",path:"std::str",desc:"Insert a new sub-string at the given position in a string, in O(n + m) time\n(with n and m the lengths of the string and the substring.)\nThis fails if `position` is not at a character boundary.",parent:'69309'},{ty:"tymethod",name:"insert_char",path:"std::str",desc:"Insert a char at the given position in a string, in O(n + m) time\n(with n and m the lengths of the string and the substring.)\nThis fails if `position` is not at a character boundary.",parent:'69309'},{ty:"tymethod",name:"append",path:"std::str",desc:"Concatenate two strings together.",parent:'69309'},{ty:"tymethod",name:"reserve_exact",path:"std::str",desc:"Reserves capacity for exactly `n` bytes in the given string.",parent:'69309'},{ty:"tymethod",name:"reserve",path:"std::str",desc:"Reserves capacity for at least `n` bytes in the given string.",parent:'69309'},{ty:"tymethod",name:"capacity",path:"std::str",desc:"Returns the number of single-byte characters the string can hold without\nreallocating",parent:'69309'},{ty:"tymethod",name:"truncate",path:"std::str",desc:"Shorten a string to the specified length (which must be <= the current length)",parent:'69309'},{ty:"tymethod",name:"into_bytes",path:"std::str",desc:"Consumes the string, returning the underlying byte buffer.",parent:'69309'},{ty:"tymethod",name:"set_len",path:"std::str",desc:"Sets the length of a string",parent:'69309'},{ty:"method",name:"concat",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"connect",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"clone",path:"std::str",desc:"",parent:'60255'},{ty:"method",name:"next",path:"std::str",desc:"",parent:'60255'},{ty:"method",name:"size_hint",path:"std::str",desc:"",parent:'60255'},{ty:"method",name:"next_back",path:"std::str",desc:"",parent:'60255'},{ty:"method",name:"clone",path:"std::str",desc:"",parent:'60421'},{ty:"method",name:"next",path:"std::str",desc:"",parent:'60421'},{ty:"method",name:"size_hint",path:"std::str",desc:"",parent:'60421'},{ty:"method",name:"next_back",path:"std::str",desc:"",parent:'60421'},{ty:"method",name:"clone",path:"std::str",desc:"",parent:'60628'},{ty:"method",name:"clone",path:"std::str",desc:"",parent:'60708'},{ty:"method",name:"next",path:"std::str",desc:"",parent:'60628'},{ty:"method",name:"next_back",path:"std::str",desc:"",parent:'60628'},{ty:"method",name:"next",path:"std::str",desc:"",parent:'60708'},{ty:"method",name:"clone",path:"std::str",desc:"",parent:'61272'},{ty:"method",name:"clone",path:"std::str",desc:"",parent:'61321'},{ty:"method",name:"next",path:"std::str",desc:"",parent:'61272'},{ty:"method",name:"next",path:"std::str",desc:"",parent:'61321'},{ty:"method",name:"clone",path:"std::str",desc:"",parent:'61701'},{ty:"method",name:"next",path:"std::str",desc:"",parent:'61701'},{ty:"method",name:"size_hint",path:"std::str",desc:"",parent:'61701'},{ty:"method",name:"clone",path:"std::str",desc:"",parent:'62546'},{ty:"method",name:"fmt",path:"std::str",desc:"",parent:'62578'},{ty:"method",name:"clone",path:"std::str",desc:"",parent:'62578'},{ty:"method",name:"equals",path:"std::str",desc:"",parent:'62578'},{ty:"method",name:"eq",path:"std::str",desc:"",parent:'62578'},{ty:"method",name:"ne",path:"std::str",desc:"",parent:'62578'},{ty:"method",name:"to_char_lossy",path:"std::str",desc:"Convert `self` to a `char`, taking `LoneSurrogate`s to the\nreplacement character (U+FFFD).",parent:'62578'},{ty:"method",name:"next",path:"std::str",desc:"",parent:'62546'},{ty:"method",name:"size_hint",path:"std::str",desc:"",parent:'62546'},{ty:"method",name:"is_owned",path:"std::str",desc:"Returns `true` if this `MaybeOwned` wraps an owned string",parent:'64156'},{ty:"method",name:"is_slice",path:"std::str",desc:"Returns `true` if this `MaybeOwned` wraps a borrowed string",parent:'64156'},{ty:"method",name:"into_maybe_owned",path:"std::str",desc:"",parent:'64156'},{ty:"method",name:"eq",path:"std::str",desc:"",parent:'64156'},{ty:"method",name:"equals",path:"std::str",desc:"",parent:'64156'},{ty:"method",name:"lt",path:"std::str",desc:"",parent:'64156'},{ty:"method",name:"cmp",path:"std::str",desc:"",parent:'64156'},{ty:"method",name:"equiv",path:"std::str",desc:"",parent:'64156'},{ty:"method",name:"as_slice",path:"std::str",desc:"",parent:'64156'},{ty:"method",name:"into_owned",path:"std::str",desc:"",parent:'64156'},{ty:"method",name:"len",path:"std::str",desc:"",parent:'64156'},{ty:"method",name:"clone",path:"std::str",desc:"",parent:'64156'},{ty:"method",name:"default",path:"std::str",desc:"",parent:'64156'},{ty:"method",name:"hash",path:"std::str",desc:"",parent:'64156'},{ty:"method",name:"fmt",path:"std::str",desc:"",parent:'64156'},{ty:"mod",name:"ascii",path:"std",desc:"Operations on ASCII strings and characters"},{ty:"struct",name:"Ascii",path:"std::ascii",desc:"Datatype to hold one ascii character. It wraps a `u8`, with the highest bit always zero."},{ty:"trait",name:"AsciiCast",path:"std::ascii",desc:"Trait for converting into an ascii type."},{ty:"method",name:"to_ascii",path:"std::ascii",desc:"Convert to an ascii type, fail on non-ASCII input.",parent:'70861'},{ty:"method",name:"to_ascii_opt",path:"std::ascii",desc:"Convert to an ascii type, return None on non-ASCII input.",parent:'70861'},{ty:"tymethod",name:"to_ascii_nocheck",path:"std::ascii",desc:"Convert to an ascii type, not doing any range asserts",parent:'70861'},{ty:"tymethod",name:"is_ascii",path:"std::ascii",desc:"Check if convertible to ascii",parent:'70861'},{ty:"trait",name:"OwnedAsciiCast",path:"std::ascii",desc:"Trait for copyless casting to an ascii vector."},{ty:"tymethod",name:"is_ascii",path:"std::ascii",desc:"Check if convertible to ascii",parent:'71162'},{ty:"method",name:"into_ascii",path:"std::ascii",desc:"Take ownership and cast to an ascii vector. Fail on non-ASCII input.",parent:'71162'},{ty:"method",name:"into_ascii_opt",path:"std::ascii",desc:"Take ownership and cast to an ascii vector. Return None on non-ASCII input.",parent:'71162'},{ty:"tymethod",name:"into_ascii_nocheck",path:"std::ascii",desc:"Take ownership and cast to an ascii vector.\nDoes not perform validation checks.",parent:'71162'},{ty:"trait",name:"AsciiStr",path:"std::ascii",desc:"Trait for converting an ascii type to a string. Needed to convert\n`&[Ascii]` to `&str`."},{ty:"tymethod",name:"as_str_ascii",path:"std::ascii",desc:"Convert to a string.",parent:'71345'},{ty:"tymethod",name:"to_lower",path:"std::ascii",desc:"Convert to vector representing a lower cased ascii string.",parent:'71345'},{ty:"tymethod",name:"to_upper",path:"std::ascii",desc:"Convert to vector representing a upper cased ascii string.",parent:'71345'},{ty:"tymethod",name:"eq_ignore_case",path:"std::ascii",desc:"Compares two Ascii strings ignoring case.",parent:'71345'},{ty:"trait",name:"IntoBytes",path:"std::ascii",desc:"Trait to convert to an owned byte array by consuming self"},{ty:"tymethod",name:"into_bytes",path:"std::ascii",desc:"Converts to an owned byte array by consuming self",parent:'71498'},{ty:"trait",name:"OwnedStrAsciiExt",path:"std::ascii",desc:"Extension methods for ASCII-subset only operations on owned strings"},{ty:"tymethod",name:"into_ascii_upper",path:"std::ascii",desc:"Convert the string to ASCII upper case:\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.",parent:'71527'},{ty:"tymethod",name:"into_ascii_lower",path:"std::ascii",desc:"Convert the string to ASCII lower case:\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.",parent:'71527'},{ty:"trait",name:"StrAsciiExt",path:"std::ascii",desc:"Extension methods for ASCII-subset only operations on string slices"},{ty:"tymethod",name:"to_ascii_upper",path:"std::ascii",desc:"Makes a copy of the string in ASCII upper case:\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.",parent:'71542'},{ty:"tymethod",name:"to_ascii_lower",path:"std::ascii",desc:"Makes a copy of the string in ASCII lower case:\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.",parent:'71542'},{ty:"tymethod",name:"eq_ignore_ascii_case",path:"std::ascii",desc:"Check that two strings are an ASCII case-insensitive match.\nSame as `to_ascii_lower(a) == to_ascii_lower(b)`,\nbut without allocating and copying temporary strings.",parent:'71542'},{ty:"method",name:"hash",path:"std::ascii",desc:"",parent:'70202'},{ty:"method",name:"equals",path:"std::ascii",desc:"",parent:'70202'},{ty:"method",name:"cmp",path:"std::ascii",desc:"",parent:'70202'},{ty:"method",name:"lt",path:"std::ascii",desc:"",parent:'70202'},{ty:"method",name:"le",path:"std::ascii",desc:"",parent:'70202'},{ty:"method",name:"gt",path:"std::ascii",desc:"",parent:'70202'},{ty:"method",name:"ge",path:"std::ascii",desc:"",parent:'70202'},{ty:"method",name:"eq",path:"std::ascii",desc:"",parent:'70202'},{ty:"method",name:"ne",path:"std::ascii",desc:"",parent:'70202'},{ty:"method",name:"clone",path:"std::ascii",desc:"",parent:'70202'},{ty:"method",name:"to_byte",path:"std::ascii",desc:"Converts an ascii character into a `u8`.",parent:'70202'},{ty:"method",name:"to_char",path:"std::ascii",desc:"Converts an ascii character into a `char`.",parent:'70202'},{ty:"method",name:"to_lower",path:"std::ascii",desc:"Convert to lowercase.",parent:'70202'},{ty:"method",name:"to_upper",path:"std::ascii",desc:"Convert to uppercase.",parent:'70202'},{ty:"method",name:"eq_ignore_case",path:"std::ascii",desc:"Compares two ascii characters of equality, ignoring case.",parent:'70202'},{ty:"method",name:"is_alpha",path:"std::ascii",desc:"Check if the character is a letter (a-z, A-Z)",parent:'70202'},{ty:"method",name:"is_digit",path:"std::ascii",desc:"Check if the character is a number (0-9)",parent:'70202'},{ty:"method",name:"is_alnum",path:"std::ascii",desc:"Check if the character is a letter or number",parent:'70202'},{ty:"method",name:"is_blank",path:"std::ascii",desc:"Check if the character is a space or horizontal tab",parent:'70202'},{ty:"method",name:"is_control",path:"std::ascii",desc:"Check if the character is a control character",parent:'70202'},{ty:"method",name:"is_graph",path:"std::ascii",desc:"Checks if the character is printable (except space)",parent:'70202'},{ty:"method",name:"is_print",path:"std::ascii",desc:"Checks if the character is printable (including space)",parent:'70202'},{ty:"method",name:"is_lower",path:"std::ascii",desc:"Checks if the character is lowercase",parent:'70202'},{ty:"method",name:"is_upper",path:"std::ascii",desc:"Checks if the character is uppercase",parent:'70202'},{ty:"method",name:"is_punctuation",path:"std::ascii",desc:"Checks if the character is punctuation",parent:'70202'},{ty:"method",name:"is_hex",path:"std::ascii",desc:"Checks if the character is a valid hex digit",parent:'70202'},{ty:"method",name:"fmt",path:"std::ascii",desc:"",parent:'70202'},{ty:"mod",name:"ptr",path:"std",desc:"Unsafe pointer utility functions"},{ty:"fn",name:"buf_len",path:"std::ptr",desc:"Return the offset of the first null pointer in `buf`."},{ty:"fn",name:"position",path:"std::ptr",desc:"Return the first offset `i` such that `f(buf[i]) == true`."},{ty:"fn",name:"null",path:"std::ptr",desc:"Create an unsafe null pointer"},{ty:"fn",name:"mut_null",path:"std::ptr",desc:"Create an unsafe mutable null pointer"},{ty:"fn",name:"copy_memory",path:"std::ptr",desc:"Copies data from one location to another."},{ty:"fn",name:"copy_nonoverlapping_memory",path:"std::ptr",desc:"Copies data from one location to another."},{ty:"fn",name:"set_memory",path:"std::ptr",desc:"Invokes memset on the specified pointer, setting `count * size_of::<T>()`\nbytes of memory starting at `dst` to `c`."},{ty:"fn",name:"zero_memory",path:"std::ptr",desc:"Zeroes out `count * size_of::<T>` bytes of memory at `dst`"},{ty:"fn",name:"swap",path:"std::ptr",desc:"Swap the values at two mutable locations of the same type, without\ndeinitialising either. They may overlap."},{ty:"fn",name:"replace",path:"std::ptr",desc:"Replace the value at a mutable location with a new one, returning the old\nvalue, without deinitialising either."},{ty:"fn",name:"read",path:"std::ptr",desc:"Reads the value from `*src` and returns it."},{ty:"fn",name:"read_and_zero",path:"std::ptr",desc:"Reads the value from `*src` and nulls it out.\nThis currently prevents destructors from executing."},{ty:"fn",name:"array_each_with_len",path:"std::ptr",desc:"Given a **T (pointer to an array of pointers),\niterate through each *T, up to the provided `len`,\npassing to the provided callback function"},{ty:"fn",name:"array_each",path:"std::ptr",desc:"Given a null-pointer-terminated **T (pointer to\nan array of pointers), iterate through each *T,\npassing to the provided callback function"},{ty:"trait",name:"RawPtr",path:"std::ptr",desc:"Extension methods for raw pointers."},{ty:"tymethod",name:"null",path:"std::ptr",desc:"Returns the null pointer.",parent:'72768'},{ty:"tymethod",name:"is_null",path:"std::ptr",desc:"Returns true if the pointer is equal to the null pointer.",parent:'72768'},{ty:"method",name:"is_not_null",path:"std::ptr",desc:"Returns true if the pointer is not equal to the null pointer.",parent:'72768'},{ty:"tymethod",name:"to_uint",path:"std::ptr",desc:"Returns the value of this pointer (ie, the address it points to)",parent:'72768'},{ty:"tymethod",name:"to_option",path:"std::ptr",desc:"Returns `None` if the pointer is null, or else returns the value wrapped\nin `Some`.",parent:'72768'},{ty:"tymethod",name:"offset",path:"std::ptr",desc:"Calculates the offset from a pointer. The offset *must* be in-bounds of\nthe object, or one-byte-past-the-end.  `count` is in units of T; e.g. a\n`count` of 3 represents a pointer offset of `3 * sizeof::<T>()` bytes.",parent:'72768'},{ty:"mod",name:"owned",path:"std",desc:"Operations on unique pointer types"},{ty:"static",name:"HEAP",path:"std::owned",desc:"A value that represents the global exchange heap. This is the default\nplace that the `box` keyword allocates into when no place is supplied."},{ty:"mod",name:"managed",path:"std",desc:"Operations on managed box types"},{ty:"fn",name:"refcount",path:"std::managed",desc:"Returns the refcount of a shared box (as just before calling this)"},{ty:"fn",name:"ptr_eq",path:"std::managed",desc:"Determine if two shared boxes point to the same object"},{ty:"mod",name:"rc",path:"std",desc:"Task-local reference-counted boxes (`Rc` type)"},{ty:"struct",name:"Rc",path:"std::rc",desc:"Immutable reference counted pointer type"},{ty:"struct",name:"Weak",path:"std::rc",desc:"Weak reference to a reference-counted box"},{ty:"method",name:"new",path:"std::rc",desc:"Construct a new reference-counted box",parent:'74541'},{ty:"method",name:"downgrade",path:"std::rc",desc:"Downgrade the reference-counted pointer to a weak reference",parent:'74541'},{ty:"method",name:"deref",path:"std::rc",desc:"Borrow the value contained in the reference-counted box",parent:'74541'},{ty:"method",name:"drop",path:"std::rc",desc:"",parent:'74541'},{ty:"method",name:"clone",path:"std::rc",desc:"",parent:'74541'},{ty:"method",name:"eq",path:"std::rc",desc:"",parent:'74541'},{ty:"method",name:"ne",path:"std::rc",desc:"",parent:'74541'},{ty:"method",name:"lt",path:"std::rc",desc:"",parent:'74541'},{ty:"method",name:"le",path:"std::rc",desc:"",parent:'74541'},{ty:"method",name:"gt",path:"std::rc",desc:"",parent:'74541'},{ty:"method",name:"ge",path:"std::rc",desc:"",parent:'74541'},{ty:"method",name:"upgrade",path:"std::rc",desc:"Upgrade a weak reference to a strong reference",parent:'74882'},{ty:"method",name:"drop",path:"std::rc",desc:"",parent:'74882'},{ty:"method",name:"clone",path:"std::rc",desc:"",parent:'74882'},{ty:"mod",name:"gc",path:"std",desc:"Task-local garbage-collected boxes"},{ty:"struct",name:"Gc",path:"std::gc",desc:"Immutable garbage-collected pointer type"},{ty:"static",name:"GC",path:"std::gc",desc:"An value that represents the task-local managed heap."},{ty:"method",name:"new",path:"std::gc",desc:"Construct a new garbage-collected box",parent:'75024'},{ty:"method",name:"borrow",path:"std::gc",desc:"Borrow the value contained in the garbage-collected box",parent:'75024'},{ty:"method",name:"ptr_eq",path:"std::gc",desc:"Determine if two garbage-collected boxes point to the same object",parent:'75024'},{ty:"method",name:"clone",path:"std::gc",desc:"Clone the pointer only",parent:'75024'},{ty:"mod",name:"kinds",path:"std",desc:"Primitive traits representing basic 'kinds' of types"},{ty:"mod",name:"marker",path:"std::kinds",desc:"Marker types are special types that are used with unsafe code to\ninform the compiler of special constraints. Marker types should\nonly be needed when you are creating an abstraction that is\nimplemented using unsafe code. In that case, you may want to embed\nsome of the marker types below into your type."},{ty:"struct",name:"CovariantType",path:"std::kinds::marker",desc:"A marker type whose type parameter `T` is considered to be\ncovariant with respect to the type itself. This is (typically)\nused to indicate that an instance of the type `T` is being stored\ninto memory and read from, even though that may not be apparent."},{ty:"struct",name:"ContravariantType",path:"std::kinds::marker",desc:"A marker type whose type parameter `T` is considered to be\ncontravariant with respect to the type itself. This is (typically)\nused to indicate that an instance of the type `T` will be consumed\n(but not read from), even though that may not be apparent."},{ty:"struct",name:"InvariantType",path:"std::kinds::marker",desc:"A marker type whose type parameter `T` is considered to be\ninvariant with respect to the type itself. This is (typically)\nused to indicate that instances of the type `T` may be read or\nwritten, even though that may not be apparent."},{ty:"struct",name:"CovariantLifetime",path:"std::kinds::marker",desc:"As `CovariantType`, but for lifetime parameters. Using\n`CovariantLifetime<'a>` indicates that it is ok to substitute\na *longer* lifetime for `'a` than the one you originally\nstarted with (e.g., you could convert any lifetime `'foo` to\n`'static`). You almost certainly want `ContravariantLifetime`\ninstead, or possibly `InvariantLifetime`. The only case where\nit would be appropriate is that you have a (type-casted, and\nhence hidden from the type system) function pointer with a\nsignature like `fn(&'a T)` (and no other uses of `'a`). In\nthis case, it is ok to substitute a larger lifetime for `'a`\n(e.g., `fn(&'static T)`), because the function is only\nbecoming more selective in terms of what it accepts as\nargument."},{ty:"struct",name:"ContravariantLifetime",path:"std::kinds::marker",desc:"As `ContravariantType`, but for lifetime parameters. Using\n`ContravariantLifetime<'a>` indicates that it is ok to\nsubstitute a *shorter* lifetime for `'a` than the one you\noriginally started with (e.g., you could convert `'static` to\nany lifetime `'foo`). This is appropriate for cases where you\nhave an unsafe pointer that is actually a pointer into some\nmemory with lifetime `'a`, and thus you want to limit the\nlifetime of your data structure to `'a`. An example of where\nthis is used is the iterator for vectors."},{ty:"struct",name:"InvariantLifetime",path:"std::kinds::marker",desc:"As `InvariantType`, but for lifetime parameters. Using\n`InvariantLifetime<'a>` indicates that it is not ok to\nsubstitute any other lifetime for `'a` besides its original\nvalue. This is appropriate for cases where you have an unsafe\npointer that is actually a pointer into memory with lifetime `'a`,\nand this pointer is itself stored in an inherently mutable\nlocation (such as a `Cell`)."},{ty:"struct",name:"NoFreeze",path:"std::kinds::marker",desc:"A type which is considered \"not freezable\", meaning that\nits contents could change even if stored in an immutable\ncontext or it is the referent of an `&T` pointer. This is\ntypically embedded in other types, such as `Cell`."},{ty:"struct",name:"NoSend",path:"std::kinds::marker",desc:"A type which is considered \"not sendable\", meaning that it cannot\nbe safely sent between tasks, even if it is owned. This is\ntypically embedded in other types, such as `Gc`, to ensure that\ntheir instances remain thread-local."},{ty:"struct",name:"NoPod",path:"std::kinds::marker",desc:"A type which is considered \"not POD\", meaning that it is not\nimplicitly copyable. This is typically embedded in other types to\nensure that they are never copied, even if they lack a destructor."},{ty:"struct",name:"Managed",path:"std::kinds::marker",desc:"A type which is considered managed by the GC. This is typically\nembedded in other types."},{ty:"method",name:"clone",path:"std::kinds::marker",desc:"",parent:'75117'},{ty:"method",name:"eq",path:"std::kinds::marker",desc:"",parent:'75117'},{ty:"method",name:"ne",path:"std::kinds::marker",desc:"",parent:'75117'},{ty:"method",name:"clone",path:"std::kinds::marker",desc:"",parent:'75196'},{ty:"method",name:"eq",path:"std::kinds::marker",desc:"",parent:'75196'},{ty:"method",name:"ne",path:"std::kinds::marker",desc:"",parent:'75196'},{ty:"method",name:"clone",path:"std::kinds::marker",desc:"",parent:'75275'},{ty:"method",name:"eq",path:"std::kinds::marker",desc:"",parent:'75275'},{ty:"method",name:"ne",path:"std::kinds::marker",desc:"",parent:'75275'},{ty:"method",name:"clone",path:"std::kinds::marker",desc:"",parent:'75354'},{ty:"method",name:"eq",path:"std::kinds::marker",desc:"",parent:'75354'},{ty:"method",name:"ne",path:"std::kinds::marker",desc:"",parent:'75354'},{ty:"method",name:"clone",path:"std::kinds::marker",desc:"",parent:'75426'},{ty:"method",name:"eq",path:"std::kinds::marker",desc:"",parent:'75426'},{ty:"method",name:"ne",path:"std::kinds::marker",desc:"",parent:'75426'},{ty:"method",name:"clone",path:"std::kinds::marker",desc:"",parent:'75498'},{ty:"method",name:"eq",path:"std::kinds::marker",desc:"",parent:'75498'},{ty:"method",name:"ne",path:"std::kinds::marker",desc:"",parent:'75498'},{ty:"method",name:"clone",path:"std::kinds::marker",desc:"",parent:'75570'},{ty:"method",name:"eq",path:"std::kinds::marker",desc:"",parent:'75570'},{ty:"method",name:"ne",path:"std::kinds::marker",desc:"",parent:'75570'},{ty:"method",name:"clone",path:"std::kinds::marker",desc:"",parent:'75634'},{ty:"method",name:"eq",path:"std::kinds::marker",desc:"",parent:'75634'},{ty:"method",name:"ne",path:"std::kinds::marker",desc:"",parent:'75634'},{ty:"method",name:"clone",path:"std::kinds::marker",desc:"",parent:'75698'},{ty:"method",name:"eq",path:"std::kinds::marker",desc:"",parent:'75698'},{ty:"method",name:"ne",path:"std::kinds::marker",desc:"",parent:'75698'},{ty:"method",name:"clone",path:"std::kinds::marker",desc:"",parent:'75762'},{ty:"method",name:"eq",path:"std::kinds::marker",desc:"",parent:'75762'},{ty:"method",name:"ne",path:"std::kinds::marker",desc:"",parent:'75762'},{ty:"trait",name:"Send",path:"std::kinds",desc:"Types able to be transferred across task boundaries."},{ty:"trait",name:"Freeze",path:"std::kinds",desc:"Types that are either immutable or have inherited mutability."},{ty:"trait",name:"Sized",path:"std::kinds",desc:"Types with a constant size known at compile-time."},{ty:"trait",name:"Pod",path:"std::kinds",desc:"Types that can be copied by simply copying bits (i.e. `memcpy`)."},{ty:"mod",name:"ops",path:"std",desc:"\nTraits representing built-in operators, useful for overloading"},{ty:"trait",name:"Drop",path:"std::ops",desc:"\nThe `Drop` trait is used to run some code when a value goes out of scope. This\nis sometimes called a 'destructor'."},{ty:"tymethod",name:"drop",path:"std::ops",desc:"",parent:'75827'},{ty:"trait",name:"Add",path:"std::ops",desc:"\nThe `Add` trait is used to specify the functionality of `+`."},{ty:"tymethod",name:"add",path:"std::ops",desc:"",parent:'75833'},{ty:"trait",name:"Sub",path:"std::ops",desc:"\nThe `Sub` trait is used to specify the functionality of `-`."},{ty:"tymethod",name:"sub",path:"std::ops",desc:"",parent:'75847'},{ty:"trait",name:"Mul",path:"std::ops",desc:"\nThe `Mul` trait is used to specify the functionality of `*`."},{ty:"tymethod",name:"mul",path:"std::ops",desc:"",parent:'75861'},{ty:"trait",name:"Div",path:"std::ops",desc:"\nThe `Div` trait is used to specify the functionality of `/`."},{ty:"tymethod",name:"div",path:"std::ops",desc:"",parent:'75875'},{ty:"trait",name:"Rem",path:"std::ops",desc:"\nThe `Rem` trait is used to specify the functionality of `%`."},{ty:"tymethod",name:"rem",path:"std::ops",desc:"",parent:'75889'},{ty:"trait",name:"Neg",path:"std::ops",desc:"\nThe `Neg` trait is used to specify the functionality of unary `-`."},{ty:"tymethod",name:"neg",path:"std::ops",desc:"",parent:'75903'},{ty:"trait",name:"Not",path:"std::ops",desc:"\nThe `Not` trait is used to specify the functionality of unary `!`."},{ty:"tymethod",name:"not",path:"std::ops",desc:"",parent:'75911'},{ty:"trait",name:"BitAnd",path:"std::ops",desc:"\nThe `BitAnd` trait is used to specify the functionality of `&`."},{ty:"tymethod",name:"bitand",path:"std::ops",desc:"",parent:'75919'},{ty:"trait",name:"BitOr",path:"std::ops",desc:"\nThe `BitOr` trait is used to specify the functionality of `|`."},{ty:"tymethod",name:"bitor",path:"std::ops",desc:"",parent:'75933'},{ty:"trait",name:"BitXor",path:"std::ops",desc:"\nThe `BitXor` trait is used to specify the functionality of `^`."},{ty:"tymethod",name:"bitxor",path:"std::ops",desc:"",parent:'75947'},{ty:"trait",name:"Shl",path:"std::ops",desc:"\nThe `Shl` trait is used to specify the functionality of `<<`."},{ty:"tymethod",name:"shl",path:"std::ops",desc:"",parent:'75961'},{ty:"trait",name:"Shr",path:"std::ops",desc:"\nThe `Shr` trait is used to specify the functionality of `>>`."},{ty:"tymethod",name:"shr",path:"std::ops",desc:"",parent:'75975'},{ty:"trait",name:"Index",path:"std::ops",desc:"\nThe `Index` trait is used to specify the functionality of indexing operations\nlike `arr[idx]`."},{ty:"tymethod",name:"index",path:"std::ops",desc:"",parent:'75989'},{ty:"trait",name:"Deref",path:"std::ops",desc:""},{ty:"tymethod",name:"deref",path:"std::ops",desc:"",parent:'76003'},{ty:"trait",name:"DerefMut",path:"std::ops",desc:""},{ty:"tymethod",name:"deref_mut",path:"std::ops",desc:"",parent:'76015'},{ty:"mod",name:"cmp",path:"std",desc:"The `Ord` and `Eq` comparison traits"},{ty:"enum",name:"Ordering",path:"std::cmp",desc:""},{ty:"variant",name:"Less",path:"std::cmp",desc:"",parent:'76328'},{ty:"variant",name:"Equal",path:"std::cmp",desc:"",parent:'76328'},{ty:"variant",name:"Greater",path:"std::cmp",desc:"",parent:'76328'},{ty:"fn",name:"lexical_ordering",path:"std::cmp",desc:"Return `o1` if it is not `Equal`, otherwise `o2`. Simulates the\nlexical ordering on a type `(int, int)`."},{ty:"fn",name:"min",path:"std::cmp",desc:""},{ty:"fn",name:"max",path:"std::cmp",desc:""},{ty:"trait",name:"Eq",path:"std::cmp",desc:"Trait for values that can be compared for equality and inequality."},{ty:"tymethod",name:"eq",path:"std::cmp",desc:"",parent:'76031'},{ty:"method",name:"ne",path:"std::cmp",desc:"",parent:'76031'},{ty:"trait",name:"TotalEq",path:"std::cmp",desc:"Trait for equality comparisons where `a == b` and `a != b` are strict inverses."},{ty:"method",name:"equals",path:"std::cmp",desc:"This method must return the same value as `eq`. It exists to prevent\nderiving `TotalEq` from fields not implementing the `TotalEq` trait.",parent:'76059'},{ty:"trait",name:"TotalOrd",path:"std::cmp",desc:"Trait for types that form a total order"},{ty:"tymethod",name:"cmp",path:"std::cmp",desc:"",parent:'76598'},{ty:"trait",name:"Ord",path:"std::cmp",desc:"Trait for values that can be compared for a sort-order."},{ty:"tymethod",name:"lt",path:"std::cmp",desc:"",parent:'77095'},{ty:"method",name:"le",path:"std::cmp",desc:"",parent:'77095'},{ty:"method",name:"gt",path:"std::cmp",desc:"",parent:'77095'},{ty:"method",name:"ge",path:"std::cmp",desc:"",parent:'77095'},{ty:"trait",name:"Equiv",path:"std::cmp",desc:"The equivalence relation. Two values may be equivalent even if they are\nof different types. The most common use case for this relation is\ncontainer types; e.g. it is often desirable to be able to use `&str`\nvalues to look up entries in a container with `~str` keys."},{ty:"tymethod",name:"equiv",path:"std::cmp",desc:"",parent:'77155'},{ty:"method",name:"fmt",path:"std::cmp",desc:"",parent:'76328'},{ty:"method",name:"eq",path:"std::cmp",desc:"",parent:'76328'},{ty:"method",name:"ne",path:"std::cmp",desc:"",parent:'76328'},{ty:"method",name:"clone",path:"std::cmp",desc:"",parent:'76328'},{ty:"method",name:"equals",path:"std::cmp",desc:"",parent:'76328'},{ty:"method",name:"cmp",path:"std::cmp",desc:"",parent:'76328'},{ty:"method",name:"lt",path:"std::cmp",desc:"",parent:'76328'},{ty:"mod",name:"from_str",path:"std",desc:"The `FromStr` trait for types that can be created from strings"},{ty:"fn",name:"from_str",path:"std::from_str",desc:"A utility function that just calls FromStr::from_str"},{ty:"trait",name:"FromStr",path:"std::from_str",desc:"A trait to abstract the idea of creating a new instance of a type from a\nstring."},{ty:"tymethod",name:"from_str",path:"std::from_str",desc:"Parses a string `s` to return an optional value of this type. If the\nstring is ill-formatted, the None is returned.",parent:'77216'},{ty:"mod",name:"num",path:"std",desc:"Numeric traits and functions for generic mathematics"},{ty:"enum",name:"FPCategory",path:"std::num",desc:"Used for representing the classification of floating point numbers"},{ty:"variant",name:"FPNaN",path:"std::num",desc:"\"Not a Number\", often obtained by dividing by zero",parent:'81193'},{ty:"variant",name:"FPInfinite",path:"std::num",desc:"Positive or negative infinity",parent:'81193'},{ty:"variant",name:"FPZero",path:"std::num",desc:"Positive or negative zero",parent:'81193'},{ty:"variant",name:"FPSubnormal",path:"std::num",desc:"De-normalized floating point representation (less precise than `FPNormal`)",parent:'81193'},{ty:"variant",name:"FPNormal",path:"std::num",desc:"A regular floating point number",parent:'81193'},{ty:"fn",name:"div_rem",path:"std::num",desc:"Simultaneous division and remainder"},{ty:"fn",name:"zero",path:"std::num",desc:"Returns the additive identity, `0`."},{ty:"fn",name:"one",path:"std::num",desc:"Returns the multiplicative identity, `1`."},{ty:"fn",name:"abs",path:"std::num",desc:"Computes the absolute value."},{ty:"fn",name:"abs_sub",path:"std::num",desc:"The positive difference of two numbers."},{ty:"fn",name:"signum",path:"std::num",desc:"Returns the sign of the number."},{ty:"fn",name:"pow",path:"std::num",desc:"Raises a value to the power of exp, using exponentiation by squaring."},{ty:"fn",name:"next_power_of_two",path:"std::num",desc:"Returns the smallest power of 2 greater than or equal to `n`."},{ty:"fn",name:"checked_next_power_of_two",path:"std::num",desc:"Returns the smallest power of 2 greater than or equal to `n`. If the next\npower of two is greater than the type's maximum value, `None` is returned,\notherwise the power of 2 is wrapped in `Some`."},{ty:"fn",name:"exp_m1",path:"std::num",desc:"Returns the exponential of the number, minus `1`, `exp(n) - 1`, in a way\nthat is accurate even if the number is close to zero."},{ty:"fn",name:"ln_1p",path:"std::num",desc:"Returns the natural logarithm of the number plus `1`, `ln(n + 1)`, more\naccurately than if the operations were performed separately."},{ty:"fn",name:"mul_add",path:"std::num",desc:"Fused multiply-add. Computes `(a * b) + c` with only one rounding error."},{ty:"fn",name:"powf",path:"std::num",desc:"Raise a number to a power."},{ty:"fn",name:"sqrt",path:"std::num",desc:"Take the square root of a number."},{ty:"fn",name:"rsqrt",path:"std::num",desc:"Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`."},{ty:"fn",name:"cbrt",path:"std::num",desc:"Take the cubic root of a number."},{ty:"fn",name:"hypot",path:"std::num",desc:"Calculate the length of the hypotenuse of a right-angle triangle given legs\nof length `x` and `y`."},{ty:"fn",name:"sin",path:"std::num",desc:"Sine function."},{ty:"fn",name:"cos",path:"std::num",desc:"Cosine function."},{ty:"fn",name:"tan",path:"std::num",desc:"Tangent function."},{ty:"fn",name:"asin",path:"std::num",desc:"Compute the arcsine of the number."},{ty:"fn",name:"acos",path:"std::num",desc:"Compute the arccosine of the number."},{ty:"fn",name:"atan",path:"std::num",desc:"Compute the arctangent of the number."},{ty:"fn",name:"atan2",path:"std::num",desc:"Compute the arctangent with 2 arguments."},{ty:"fn",name:"sin_cos",path:"std::num",desc:"Simultaneously computes the sine and cosine of the number."},{ty:"fn",name:"exp",path:"std::num",desc:"Returns `e^(value)`, (the exponential function)."},{ty:"fn",name:"exp2",path:"std::num",desc:"Returns 2 raised to the power of the number, `2^(value)`."},{ty:"fn",name:"ln",path:"std::num",desc:"Returns the natural logarithm of the number."},{ty:"fn",name:"log",path:"std::num",desc:"Returns the logarithm of the number with respect to an arbitrary base."},{ty:"fn",name:"log2",path:"std::num",desc:"Returns the base 2 logarithm of the number."},{ty:"fn",name:"log10",path:"std::num",desc:"Returns the base 10 logarithm of the number."},{ty:"fn",name:"sinh",path:"std::num",desc:"Hyperbolic sine function."},{ty:"fn",name:"cosh",path:"std::num",desc:"Hyperbolic cosine function."},{ty:"fn",name:"tanh",path:"std::num",desc:"Hyperbolic tangent function."},{ty:"fn",name:"asinh",path:"std::num",desc:"Inverse hyperbolic sine function."},{ty:"fn",name:"acosh",path:"std::num",desc:"Inverse hyperbolic cosine function."},{ty:"fn",name:"atanh",path:"std::num",desc:"Inverse hyperbolic tangent function."},{ty:"fn",name:"from_int",path:"std::num",desc:"A utility function that just calls `FromPrimitive::from_int`."},{ty:"fn",name:"from_i8",path:"std::num",desc:"A utility function that just calls `FromPrimitive::from_i8`."},{ty:"fn",name:"from_i16",path:"std::num",desc:"A utility function that just calls `FromPrimitive::from_i16`."},{ty:"fn",name:"from_i32",path:"std::num",desc:"A utility function that just calls `FromPrimitive::from_i32`."},{ty:"fn",name:"from_i64",path:"std::num",desc:"A utility function that just calls `FromPrimitive::from_i64`."},{ty:"fn",name:"from_uint",path:"std::num",desc:"A utility function that just calls `FromPrimitive::from_uint`."},{ty:"fn",name:"from_u8",path:"std::num",desc:"A utility function that just calls `FromPrimitive::from_u8`."},{ty:"fn",name:"from_u16",path:"std::num",desc:"A utility function that just calls `FromPrimitive::from_u16`."},{ty:"fn",name:"from_u32",path:"std::num",desc:"A utility function that just calls `FromPrimitive::from_u32`."},{ty:"fn",name:"from_u64",path:"std::num",desc:"A utility function that just calls `FromPrimitive::from_u64`."},{ty:"fn",name:"from_f32",path:"std::num",desc:"A utility function that just calls `FromPrimitive::from_f32`."},{ty:"fn",name:"from_f64",path:"std::num",desc:"A utility function that just calls `FromPrimitive::from_f64`."},{ty:"fn",name:"cast",path:"std::num",desc:"Cast from one machine scalar to another."},{ty:"fn",name:"from_str_radix",path:"std::num",desc:"A utility function that just calls FromStrRadix::from_str_radix."},{ty:"mod",name:"strconv",path:"std::num",desc:""},{ty:"enum",name:"ExponentFormat",path:"std::num::strconv",desc:""},{ty:"variant",name:"ExpNone",path:"std::num::strconv",desc:"",parent:'77313'},{ty:"variant",name:"ExpDec",path:"std::num::strconv",desc:"",parent:'77313'},{ty:"variant",name:"ExpBin",path:"std::num::strconv",desc:"",parent:'77313'},{ty:"enum",name:"SignificantDigits",path:"std::num::strconv",desc:""},{ty:"variant",name:"DigAll",path:"std::num::strconv",desc:"",parent:'77317'},{ty:"variant",name:"DigMax",path:"std::num::strconv",desc:"",parent:'77317'},{ty:"variant",name:"DigExact",path:"std::num::strconv",desc:"",parent:'77317'},{ty:"enum",name:"SignFormat",path:"std::num::strconv",desc:""},{ty:"variant",name:"SignNone",path:"std::num::strconv",desc:"",parent:'77327'},{ty:"variant",name:"SignNeg",path:"std::num::strconv",desc:"",parent:'77327'},{ty:"variant",name:"SignAll",path:"std::num::strconv",desc:"",parent:'77327'},{ty:"fn",name:"int_to_str_bytes_common",path:"std::num::strconv",desc:"Converts an integral number to its string representation as a byte vector.\nThis is meant to be a common base implementation for all integral string\nconversion functions like `to_str()` or `to_str_radix()`."},{ty:"fn",name:"float_to_str_bytes_common",path:"std::num::strconv",desc:"Converts a number to its string representation as a byte vector.\nThis is meant to be a common base implementation for all numeric string\nconversion functions like `to_str()` or `to_str_radix()`."},{ty:"fn",name:"float_to_str_common",path:"std::num::strconv",desc:"Converts a number to its string representation. This is a wrapper for\n`to_str_bytes_common()`, for details see there."},{ty:"fn",name:"from_str_bytes_common",path:"std::num::strconv",desc:"Parses a byte slice as a number. This is meant to\nbe a common base implementation for all numeric string conversion\nfunctions like `from_str()` or `from_str_radix()`."},{ty:"fn",name:"from_str_common",path:"std::num::strconv",desc:"Parses a string as a number. This is a wrapper for\n`from_str_bytes_common()`, for details see there."},{ty:"trait",name:"NumStrConv",path:"std::num::strconv",desc:""},{ty:"tymethod",name:"nan",path:"std::num::strconv",desc:"",parent:'77331'},{ty:"tymethod",name:"inf",path:"std::num::strconv",desc:"",parent:'77331'},{ty:"tymethod",name:"neg_inf",path:"std::num::strconv",desc:"",parent:'77331'},{ty:"tymethod",name:"neg_zero",path:"std::num::strconv",desc:"",parent:'77331'},{ty:"tymethod",name:"round_to_zero",path:"std::num::strconv",desc:"",parent:'77331'},{ty:"tymethod",name:"fractional_part",path:"std::num::strconv",desc:"",parent:'77331'},{ty:"trait",name:"Num",path:"std::num",desc:"The base trait for numeric types"},{ty:"trait",name:"Zero",path:"std::num",desc:"Defines an additive identity element for `Self`."},{ty:"tymethod",name:"zero",path:"std::num",desc:"Returns the additive identity element of `Self`, `0`.",parent:'80746'},{ty:"tymethod",name:"is_zero",path:"std::num",desc:"Returns `true` if `self` is equal to the additive identity.",parent:'80746'},{ty:"trait",name:"One",path:"std::num",desc:"Defines a multiplicative identity element for `Self`."},{ty:"tymethod",name:"one",path:"std::num",desc:"Returns the multiplicative identity element of `Self`, `1`.",parent:'80769'},{ty:"trait",name:"Signed",path:"std::num",desc:""},{ty:"tymethod",name:"abs",path:"std::num",desc:"",parent:'80786'},{ty:"tymethod",name:"abs_sub",path:"std::num",desc:"",parent:'80786'},{ty:"tymethod",name:"signum",path:"std::num",desc:"",parent:'80786'},{ty:"tymethod",name:"is_positive",path:"std::num",desc:"",parent:'80786'},{ty:"tymethod",name:"is_negative",path:"std::num",desc:"",parent:'80786'},{ty:"trait",name:"Unsigned",path:"std::num",desc:""},{ty:"trait",name:"Round",path:"std::num",desc:"A collection of rounding operations."},{ty:"tymethod",name:"floor",path:"std::num",desc:"Return the largest integer less than or equal to a number.",parent:'80870'},{ty:"tymethod",name:"ceil",path:"std::num",desc:"Return the smallest integer greater than or equal to a number.",parent:'80870'},{ty:"tymethod",name:"round",path:"std::num",desc:"Return the nearest integer to a number. Round half-way cases away from\n`0.0`.",parent:'80870'},{ty:"tymethod",name:"trunc",path:"std::num",desc:"Return the integer part of a number.",parent:'80870'},{ty:"tymethod",name:"fract",path:"std::num",desc:"Return the fractional part of a number.",parent:'80870'},{ty:"trait",name:"Bounded",path:"std::num",desc:""},{ty:"tymethod",name:"min_value",path:"std::num",desc:"",parent:'80970'},{ty:"tymethod",name:"max_value",path:"std::num",desc:"",parent:'80970'},{ty:"trait",name:"Bitwise",path:"std::num",desc:"Numbers with a fixed binary representation."},{ty:"tymethod",name:"count_ones",path:"std::num",desc:"Returns the number of ones in the binary representation of the number.",parent:'80977'},{ty:"method",name:"count_zeros",path:"std::num",desc:"Returns the number of zeros in the binary representation of the number.",parent:'80977'},{ty:"tymethod",name:"leading_zeros",path:"std::num",desc:"Returns the number of leading zeros in the in the binary representation\nof the number.",parent:'80977'},{ty:"tymethod",name:"trailing_zeros",path:"std::num",desc:"Returns the number of trailing zeros in the in the binary representation\nof the number.",parent:'80977'},{ty:"trait",name:"Primitive",path:"std::num",desc:"Specifies the available operations common to all of Rust's core numeric primitives.\nThese may not always make sense from a purely mathematical point of view, but\nmay be useful for systems programming."},{ty:"trait",name:"Int",path:"std::num",desc:"A collection of traits relevant to primitive signed and unsigned integers"},{ty:"trait",name:"Float",path:"std::num",desc:"Primitive floating point numbers"},{ty:"tymethod",name:"max",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"min",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"nan",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"infinity",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"neg_infinity",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"neg_zero",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"is_nan",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"is_infinite",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"is_finite",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"is_normal",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"classify",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"mantissa_digits",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"digits",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"epsilon",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"min_exp",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"max_exp",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"min_10_exp",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"max_10_exp",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"ldexp",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"frexp",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"exp_m1",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"ln_1p",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"mul_add",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"next_after",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"integer_decode",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"pi",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"two_pi",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"frac_pi_2",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"frac_pi_3",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"frac_pi_4",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"frac_pi_6",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"frac_pi_8",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"frac_1_pi",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"frac_2_pi",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"frac_2_sqrtpi",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"sqrt2",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"frac_1_sqrt2",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"e",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"log2_e",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"log10_e",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"ln_2",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"ln_10",path:"std::num",desc:"",parent:'81567'},{ty:"tymethod",name:"recip",path:"std::num",desc:"Take the reciprocal (inverse) of a number, `1/x`.",parent:'81567'},{ty:"tymethod",name:"powf",path:"std::num",desc:"Raise a number to a power.",parent:'81567'},{ty:"tymethod",name:"sqrt",path:"std::num",desc:"Take the square root of a number.",parent:'81567'},{ty:"tymethod",name:"rsqrt",path:"std::num",desc:"Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.",parent:'81567'},{ty:"tymethod",name:"cbrt",path:"std::num",desc:"Take the cubic root of a number.",parent:'81567'},{ty:"tymethod",name:"hypot",path:"std::num",desc:"Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",parent:'81567'},{ty:"tymethod",name:"sin",path:"std::num",desc:"Computes the sine of a number (in radians).",parent:'81567'},{ty:"tymethod",name:"cos",path:"std::num",desc:"Computes the cosine of a number (in radians).",parent:'81567'},{ty:"tymethod",name:"tan",path:"std::num",desc:"Computes the tangent of a number (in radians).",parent:'81567'},{ty:"tymethod",name:"asin",path:"std::num",desc:"Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",parent:'81567'},{ty:"tymethod",name:"acos",path:"std::num",desc:"Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",parent:'81567'},{ty:"tymethod",name:"atan",path:"std::num",desc:"Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",parent:'81567'},{ty:"tymethod",name:"atan2",path:"std::num",desc:"Computes the four quadrant arctangent of a number, `y`, and another\nnumber `x`. Return value is in radians in the range [-pi, pi].",parent:'81567'},{ty:"tymethod",name:"sin_cos",path:"std::num",desc:"Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",parent:'81567'},{ty:"tymethod",name:"exp",path:"std::num",desc:"Returns `e^(self)`, (the exponential function).",parent:'81567'},{ty:"tymethod",name:"exp2",path:"std::num",desc:"Returns 2 raised to the power of the number, `2^(self)`.",parent:'81567'},{ty:"tymethod",name:"ln",path:"std::num",desc:"Returns the natural logarithm of the number.",parent:'81567'},{ty:"tymethod",name:"log",path:"std::num",desc:"Returns the logarithm of the number with respect to an arbitrary base.",parent:'81567'},{ty:"tymethod",name:"log2",path:"std::num",desc:"Returns the base 2 logarithm of the number.",parent:'81567'},{ty:"tymethod",name:"log10",path:"std::num",desc:"Returns the base 10 logarithm of the number.",parent:'81567'},{ty:"tymethod",name:"sinh",path:"std::num",desc:"Hyperbolic sine function.",parent:'81567'},{ty:"tymethod",name:"cosh",path:"std::num",desc:"Hyperbolic cosine function.",parent:'81567'},{ty:"tymethod",name:"tanh",path:"std::num",desc:"Hyperbolic tangent function.",parent:'81567'},{ty:"tymethod",name:"asinh",path:"std::num",desc:"Inverse hyperbolic sine function.",parent:'81567'},{ty:"tymethod",name:"acosh",path:"std::num",desc:"Inverse hyperbolic cosine function.",parent:'81567'},{ty:"tymethod",name:"atanh",path:"std::num",desc:"Inverse hyperbolic tangent function.",parent:'81567'},{ty:"tymethod",name:"to_degrees",path:"std::num",desc:"Convert radians to degrees.",parent:'81567'},{ty:"tymethod",name:"to_radians",path:"std::num",desc:"Convert degrees to radians.",parent:'81567'},{ty:"trait",name:"ToPrimitive",path:"std::num",desc:"A generic trait for converting a value to a number."},{ty:"method",name:"to_int",path:"std::num",desc:"Converts the value of `self` to an `int`.",parent:'82372'},{ty:"method",name:"to_i8",path:"std::num",desc:"Converts the value of `self` to an `i8`.",parent:'82372'},{ty:"method",name:"to_i16",path:"std::num",desc:"Converts the value of `self` to an `i16`.",parent:'82372'},{ty:"method",name:"to_i32",path:"std::num",desc:"Converts the value of `self` to an `i32`.",parent:'82372'},{ty:"tymethod",name:"to_i64",path:"std::num",desc:"Converts the value of `self` to an `i64`.",parent:'82372'},{ty:"method",name:"to_uint",path:"std::num",desc:"Converts the value of `self` to an `uint`.",parent:'82372'},{ty:"method",name:"to_u8",path:"std::num",desc:"Converts the value of `self` to an `u8`.",parent:'82372'},{ty:"method",name:"to_u16",path:"std::num",desc:"Converts the value of `self` to an `u16`.",parent:'82372'},{ty:"method",name:"to_u32",path:"std::num",desc:"Converts the value of `self` to an `u32`.",parent:'82372'},{ty:"tymethod",name:"to_u64",path:"std::num",desc:"Converts the value of `self` to an `u64`.",parent:'82372'},{ty:"method",name:"to_f32",path:"std::num",desc:"Converts the value of `self` to an `f32`.",parent:'82372'},{ty:"method",name:"to_f64",path:"std::num",desc:"Converts the value of `self` to an `f64`.",parent:'82372'},{ty:"trait",name:"FromPrimitive",path:"std::num",desc:"A generic trait for converting a number to a value."},{ty:"method",name:"from_int",path:"std::num",desc:"Convert an `int` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",parent:'89636'},{ty:"method",name:"from_i8",path:"std::num",desc:"Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",parent:'89636'},{ty:"method",name:"from_i16",path:"std::num",desc:"Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",parent:'89636'},{ty:"method",name:"from_i32",path:"std::num",desc:"Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",parent:'89636'},{ty:"tymethod",name:"from_i64",path:"std::num",desc:"Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",parent:'89636'},{ty:"method",name:"from_uint",path:"std::num",desc:"Convert an `uint` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",parent:'89636'},{ty:"method",name:"from_u8",path:"std::num",desc:"Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",parent:'89636'},{ty:"method",name:"from_u16",path:"std::num",desc:"Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",parent:'89636'},{ty:"method",name:"from_u32",path:"std::num",desc:"Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",parent:'89636'},{ty:"tymethod",name:"from_u64",path:"std::num",desc:"Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",parent:'89636'},{ty:"method",name:"from_f32",path:"std::num",desc:"Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",parent:'89636'},{ty:"method",name:"from_f64",path:"std::num",desc:"Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",parent:'89636'},{ty:"trait",name:"NumCast",path:"std::num",desc:"An interface for casting between machine scalars"},{ty:"tymethod",name:"from",path:"std::num",desc:"",parent:'91788'},{ty:"trait",name:"ToStrRadix",path:"std::num",desc:""},{ty:"tymethod",name:"to_str_radix",path:"std::num",desc:"",parent:'92017'},{ty:"trait",name:"FromStrRadix",path:"std::num",desc:""},{ty:"tymethod",name:"from_str_radix",path:"std::num",desc:"",parent:'92029'},{ty:"trait",name:"Saturating",path:"std::num",desc:"Saturating math operations"},{ty:"tymethod",name:"saturating_add",path:"std::num",desc:"Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",parent:'92065'},{ty:"tymethod",name:"saturating_sub",path:"std::num",desc:"Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",parent:'92065'},{ty:"trait",name:"CheckedAdd",path:"std::num",desc:""},{ty:"tymethod",name:"checked_add",path:"std::num",desc:"",parent:'92160'},{ty:"trait",name:"CheckedSub",path:"std::num",desc:""},{ty:"tymethod",name:"checked_sub",path:"std::num",desc:"",parent:'92179'},{ty:"trait",name:"CheckedMul",path:"std::num",desc:""},{ty:"tymethod",name:"checked_mul",path:"std::num",desc:"",parent:'92198'},{ty:"trait",name:"CheckedDiv",path:"std::num",desc:""},{ty:"tymethod",name:"checked_div",path:"std::num",desc:"",parent:'92217'},{ty:"method",name:"fmt",path:"std::num",desc:"",parent:'81193'},{ty:"method",name:"eq",path:"std::num",desc:"",parent:'81193'},{ty:"method",name:"ne",path:"std::num",desc:"",parent:'81193'},{ty:"mod",name:"iter",path:"std",desc:"Composable external iterators"},{ty:"struct",name:"Rev",path:"std::iter",desc:"An double-ended iterator with the direction inverted"},{ty:"struct",name:"ByRef",path:"std::iter",desc:"A mutable reference to an iterator"},{ty:"struct",name:"Cycle",path:"std::iter",desc:"An iterator that repeats endlessly"},{ty:"struct",name:"Chain",path:"std::iter",desc:"An iterator which strings two iterators together"},{ty:"struct",name:"Zip",path:"std::iter",desc:"An iterator which iterates two other iterators simultaneously"},{ty:"struct",name:"Map",path:"std::iter",desc:"An iterator which maps the values of `iter` with `f`"},{ty:"struct",name:"Filter",path:"std::iter",desc:"An iterator which filters the elements of `iter` with `predicate`"},{ty:"struct",name:"FilterMap",path:"std::iter",desc:"An iterator which uses `f` to both filter and map elements from `iter`"},{ty:"struct",name:"Enumerate",path:"std::iter",desc:"An iterator which yields the current count and the element during iteration"},{ty:"struct",name:"Peekable",path:"std::iter",desc:"An iterator with a `peek()` that returns an optional reference to the next element."},{ty:"struct",name:"SkipWhile",path:"std::iter",desc:"An iterator which rejects elements while `predicate` is true"},{ty:"struct",name:"TakeWhile",path:"std::iter",desc:"An iterator which only accepts elements while `predicate` is true"},{ty:"struct",name:"Skip",path:"std::iter",desc:"An iterator which skips over `n` elements of `iter`."},{ty:"struct",name:"Take",path:"std::iter",desc:"An iterator which only iterates over the first `n` iterations of `iter`."},{ty:"struct",name:"Scan",path:"std::iter",desc:"An iterator to maintain state while iterating another iterator"},{ty:"structfield",name:"state",path:"std::iter",desc:"The current internal state to be passed to the closure next.",parent:'97519'},{ty:"struct",name:"FlatMap",path:"std::iter",desc:"An iterator that maps each element to an iterator,\nand yields the elements of the produced iterators\n"},{ty:"struct",name:"Fuse",path:"std::iter",desc:"An iterator that yields `None` forever after the underlying iterator\nyields `None` once."},{ty:"struct",name:"Inspect",path:"std::iter",desc:"An iterator that calls a function with a reference to each\nelement before yielding it."},{ty:"struct",name:"Unfold",path:"std::iter",desc:"An iterator which just modifies the contained state throughout iteration."},{ty:"structfield",name:"state",path:"std::iter",desc:"Internal state that will be yielded on the next iteration",parent:'98343'},{ty:"struct",name:"Counter",path:"std::iter",desc:"An infinite iterator starting at `start` and advancing by `step` with each\niteration"},{ty:"struct",name:"Range",path:"std::iter",desc:"An iterator over the range [start, stop)"},{ty:"struct",name:"RangeInclusive",path:"std::iter",desc:"An iterator over the range [start, stop]"},{ty:"struct",name:"RangeStep",path:"std::iter",desc:"An iterator over the range [start, stop) by `step`. It handles overflow by stopping."},{ty:"struct",name:"RangeStepInclusive",path:"std::iter",desc:"An iterator over the range [start, stop] by `step`. It handles overflow by stopping."},{ty:"struct",name:"Repeat",path:"std::iter",desc:"An iterator that repeats an element endlessly"},{ty:"enum",name:"MinMaxResult",path:"std::iter",desc:"`MinMaxResult` is an enum returned by `min_max`. See `OrdIterator::min_max` for more detail."},{ty:"variant",name:"NoElements",path:"std::iter",desc:"Empty iterator",parent:'94244'},{ty:"variant",name:"OneElement",path:"std::iter",desc:"Iterator with one element, so the minimum and maximum are the same",parent:'94244'},{ty:"variant",name:"MinMax",path:"std::iter",desc:"More than one element in the iterator, the first element is not larger than the second",parent:'94244'},{ty:"fn",name:"count",path:"std::iter",desc:"Creates a new counter with the specified start/step"},{ty:"fn",name:"range",path:"std::iter",desc:"Return an iterator over the range [start, stop)"},{ty:"fn",name:"range_inclusive",path:"std::iter",desc:"Return an iterator over the range [start, stop]"},{ty:"fn",name:"range_step",path:"std::iter",desc:"Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping."},{ty:"fn",name:"range_step_inclusive",path:"std::iter",desc:"Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping."},{ty:"mod",name:"order",path:"std::iter",desc:"Functions for lexicographical ordering of sequences."},{ty:"fn",name:"equals",path:"std::iter::order",desc:"Compare `a` and `b` for equality using `TotalOrd`"},{ty:"fn",name:"cmp",path:"std::iter::order",desc:"Order `a` and `b` lexicographically using `TotalOrd`"},{ty:"fn",name:"eq",path:"std::iter::order",desc:"Compare `a` and `b` for equality (Using partial equality, `Eq`)"},{ty:"fn",name:"ne",path:"std::iter::order",desc:"Compare `a` and `b` for nonequality (Using partial equality, `Eq`)"},{ty:"fn",name:"lt",path:"std::iter::order",desc:"Return `a` < `b` lexicographically (Using partial order, `Ord`)"},{ty:"fn",name:"le",path:"std::iter::order",desc:"Return `a` <= `b` lexicographically (Using partial order, `Ord`)"},{ty:"fn",name:"gt",path:"std::iter::order",desc:"Return `a` > `b` lexicographically (Using partial order, `Ord`)"},{ty:"fn",name:"ge",path:"std::iter::order",desc:"Return `a` >= `b` lexicographically (Using partial order, `Ord`)"},{ty:"trait",name:"FromIterator",path:"std::iter",desc:"Conversion from an `Iterator`"},{ty:"tymethod",name:"from_iterator",path:"std::iter",desc:"Build a container with elements from an external iterator.",parent:'92261'},{ty:"trait",name:"Extendable",path:"std::iter",desc:"A type growable from an `Iterator` implementation"},{ty:"tymethod",name:"extend",path:"std::iter",desc:"Extend a container with the elements yielded by an iterator",parent:'92275'},{ty:"trait",name:"Iterator",path:"std::iter",desc:"An interface for dealing with \"external iterators\". These types of iterators\ncan be resumed at any time as all state is stored internally as opposed to\nbeing located on the call stack."},{ty:"tymethod",name:"next",path:"std::iter",desc:"Advance the iterator and return the next value. Return `None` when the end is reached.",parent:'92294'},{ty:"method",name:"size_hint",path:"std::iter",desc:"Return a lower bound and upper bound on the remaining length of the iterator.",parent:'92294'},{ty:"method",name:"chain",path:"std::iter",desc:"Chain this iterator with another, returning a new iterator which will\nfinish iterating over the current iterator, and then it will iterate\nover the other specified iterator.",parent:'92294'},{ty:"method",name:"zip",path:"std::iter",desc:"Creates an iterator which iterates over both this and the specified\niterators simultaneously, yielding the two elements as pairs. When\neither iterator returns None, all further invocations of next() will\nreturn None.",parent:'92294'},{ty:"method",name:"map",path:"std::iter",desc:"Creates a new iterator which will apply the specified function to each\nelement returned by the first, yielding the mapped element instead.",parent:'92294'},{ty:"method",name:"filter",path:"std::iter",desc:"Creates an iterator which applies the predicate to each element returned\nby this iterator. Only elements which have the predicate evaluate to\n`true` will be yielded.",parent:'92294'},{ty:"method",name:"filter_map",path:"std::iter",desc:"Creates an iterator which both filters and maps elements.\nIf the specified function returns None, the element is skipped.\nOtherwise the option is unwrapped and the new value is yielded.",parent:'92294'},{ty:"method",name:"enumerate",path:"std::iter",desc:"Creates an iterator which yields a pair of the value returned by this\niterator plus the current index of iteration.",parent:'92294'},{ty:"method",name:"peekable",path:"std::iter",desc:"Creates an iterator that has a `.peek()` method\nthat returns an optional reference to the next element.",parent:'92294'},{ty:"method",name:"skip_while",path:"std::iter",desc:"Creates an iterator which invokes the predicate on elements until it\nreturns false. Once the predicate returns false, all further elements are\nyielded.",parent:'92294'},{ty:"method",name:"take_while",path:"std::iter",desc:"Creates an iterator which yields elements so long as the predicate\nreturns true. After the predicate returns false for the first time, no\nfurther elements will be yielded.",parent:'92294'},{ty:"method",name:"skip",path:"std::iter",desc:"Creates an iterator which skips the first `n` elements of this iterator,\nand then it yields all further items.",parent:'92294'},{ty:"method",name:"take",path:"std::iter",desc:"Creates an iterator which yields the first `n` elements of this\niterator, and then it will always return None.",parent:'92294'},{ty:"method",name:"scan",path:"std::iter",desc:"Creates a new iterator which behaves in a similar fashion to foldl.\nThere is a state which is passed between each iteration and can be\nmutated as necessary. The yielded values from the closure are yielded\nfrom the Scan instance when not None.",parent:'92294'},{ty:"method",name:"flat_map",path:"std::iter",desc:"Creates an iterator that maps each element to an iterator,\nand yields the elements of the produced iterators",parent:'92294'},{ty:"method",name:"fuse",path:"std::iter",desc:"Creates an iterator that yields `None` forever after the underlying\niterator yields `None`. Random-access iterator behavior is not\naffected, only single and double-ended iterator behavior.",parent:'92294'},{ty:"method",name:"inspect",path:"std::iter",desc:"Creates an iterator that calls a function with a reference to each\nelement before yielding it. This is often useful for debugging an\niterator pipeline.",parent:'92294'},{ty:"method",name:"by_ref",path:"std::iter",desc:"Creates a wrapper around a mutable reference to the iterator.",parent:'92294'},{ty:"method",name:"advance",path:"std::iter",desc:"Apply a function to each element, or stop iterating if the\nfunction returns `false`.",parent:'92294'},{ty:"method",name:"collect",path:"std::iter",desc:"Loops through the entire iterator, collecting all of the elements into\na container implementing `FromIterator`.",parent:'92294'},{ty:"method",name:"to_owned_vec",path:"std::iter",desc:"Loops through the entire iterator, collecting all of the elements into\na unique vector. This is simply collect() specialized for vectors.",parent:'92294'},{ty:"method",name:"nth",path:"std::iter",desc:"Loops through `n` iterations, returning the `n`th element of the\niterator.",parent:'92294'},{ty:"method",name:"last",path:"std::iter",desc:"Loops through the entire iterator, returning the last element of the\niterator.",parent:'92294'},{ty:"method",name:"fold",path:"std::iter",desc:"Performs a fold operation over the entire iterator, returning the\neventual state at the end of the iteration.",parent:'92294'},{ty:"method",name:"len",path:"std::iter",desc:"Counts the number of elements in this iterator.",parent:'92294'},{ty:"method",name:"all",path:"std::iter",desc:"Tests whether the predicate holds true for all elements in the iterator.",parent:'92294'},{ty:"method",name:"any",path:"std::iter",desc:"Tests whether any element of an iterator satisfies the specified\npredicate.",parent:'92294'},{ty:"method",name:"find",path:"std::iter",desc:"Return the first element satisfying the specified predicate",parent:'92294'},{ty:"method",name:"position",path:"std::iter",desc:"Return the index of the first element satisfying the specified predicate",parent:'92294'},{ty:"method",name:"count",path:"std::iter",desc:"Count the number of elements satisfying the specified predicate",parent:'92294'},{ty:"method",name:"max_by",path:"std::iter",desc:"Return the element that gives the maximum value from the\nspecified function.",parent:'92294'},{ty:"method",name:"min_by",path:"std::iter",desc:"Return the element that gives the minimum value from the\nspecified function.",parent:'92294'},{ty:"trait",name:"DoubleEndedIterator",path:"std::iter",desc:"A range iterator able to yield elements from both ends"},{ty:"tymethod",name:"next_back",path:"std::iter",desc:"Yield an element from the end of the range, returning `None` if the range is empty.",parent:'93323'},{ty:"method",name:"rev",path:"std::iter",desc:"Change the direction of the iterator",parent:'93323'},{ty:"trait",name:"MutableDoubleEndedIterator",path:"std::iter",desc:"A double-ended iterator yielding mutable references"},{ty:"tymethod",name:"reverse_",path:"std::iter",desc:"Use an iterator to reverse a container in-place",parent:'93347'},{ty:"trait",name:"RandomAccessIterator",path:"std::iter",desc:"An object implementing random access indexing by `uint`"},{ty:"tymethod",name:"indexable",path:"std::iter",desc:"Return the number of indexable elements. At most `std::uint::MAX`\nelements are indexable, even if the iterator represents a longer range.",parent:'93390'},{ty:"tymethod",name:"idx",path:"std::iter",desc:"Return an element at an index",parent:'93390'},{ty:"trait",name:"ExactSize",path:"std::iter",desc:"An iterator that knows its exact length"},{ty:"method",name:"rposition",path:"std::iter",desc:"Return the index of the last element satisfying the specified predicate",parent:'93413'},{ty:"trait",name:"AdditiveIterator",path:"std::iter",desc:"A trait for iterators over elements which can be added together"},{ty:"tymethod",name:"sum",path:"std::iter",desc:"Iterates over the entire iterator, summing up all the elements",parent:'93878'},{ty:"trait",name:"MultiplicativeIterator",path:"std::iter",desc:"A trait for iterators over elements whose elements can be multiplied\ntogether."},{ty:"tymethod",name:"product",path:"std::iter",desc:"Iterates over the entire iterator, multiplying all the elements",parent:'93932'},{ty:"trait",name:"OrdIterator",path:"std::iter",desc:"A trait for iterators over elements which can be compared to one another.\nThe type of each element must ascribe to the `Ord` trait."},{ty:"tymethod",name:"max",path:"std::iter",desc:"Consumes the entire iterator to return the maximum element.",parent:'93986'},{ty:"tymethod",name:"min",path:"std::iter",desc:"Consumes the entire iterator to return the minimum element.",parent:'93986'},{ty:"tymethod",name:"min_max",path:"std::iter",desc:"`min_max` finds the minimum and maximum elements in the iterator.",parent:'93986'},{ty:"trait",name:"CloneableIterator",path:"std::iter",desc:"A trait for iterators that are cloneable."},{ty:"tymethod",name:"cycle",path:"std::iter",desc:"Repeats an iterator endlessly",parent:'94732'},{ty:"method",name:"clone",path:"std::iter",desc:"",parent:'93656'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'93656'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'93656'},{ty:"method",name:"next_back",path:"std::iter",desc:"",parent:'93656'},{ty:"method",name:"indexable",path:"std::iter",desc:"",parent:'93656'},{ty:"method",name:"idx",path:"std::iter",desc:"",parent:'93656'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'93801'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'93801'},{ty:"method",name:"next_back",path:"std::iter",desc:"",parent:'93801'},{ty:"method",name:"fmt",path:"std::iter",desc:"",parent:'94244'},{ty:"method",name:"eq",path:"std::iter",desc:"",parent:'94244'},{ty:"method",name:"ne",path:"std::iter",desc:"",parent:'94244'},{ty:"method",name:"clone",path:"std::iter",desc:"",parent:'94244'},{ty:"method",name:"into_option",path:"std::iter",desc:"`into_option` creates an `Option` of type `(T,T)`. The returned `Option` has variant\n`None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise variant\n`Some(x,y)` is returned where `x <= y`. If `MinMaxResult` has variant `OneElement(x)`,\nperforming this operation will make one clone of `x`.",parent:'94244'},{ty:"method",name:"clone",path:"std::iter",desc:"",parent:'94764'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'94764'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'94764'},{ty:"method",name:"indexable",path:"std::iter",desc:"",parent:'94764'},{ty:"method",name:"idx",path:"std::iter",desc:"",parent:'94764'},{ty:"method",name:"clone",path:"std::iter",desc:"",parent:'94966'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'94966'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'94966'},{ty:"method",name:"next_back",path:"std::iter",desc:"",parent:'94966'},{ty:"method",name:"indexable",path:"std::iter",desc:"",parent:'94966'},{ty:"method",name:"idx",path:"std::iter",desc:"",parent:'94966'},{ty:"method",name:"clone",path:"std::iter",desc:"",parent:'95258'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'95258'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'95258'},{ty:"method",name:"next_back",path:"std::iter",desc:"",parent:'95258'},{ty:"method",name:"indexable",path:"std::iter",desc:"",parent:'95258'},{ty:"method",name:"idx",path:"std::iter",desc:"",parent:'95258'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'95901'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'95901'},{ty:"method",name:"next_back",path:"std::iter",desc:"",parent:'95901'},{ty:"method",name:"indexable",path:"std::iter",desc:"",parent:'95901'},{ty:"method",name:"idx",path:"std::iter",desc:"",parent:'95901'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'96102'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'96102'},{ty:"method",name:"next_back",path:"std::iter",desc:"",parent:'96102'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'96258'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'96258'},{ty:"method",name:"next_back",path:"std::iter",desc:"",parent:'96258'},{ty:"method",name:"clone",path:"std::iter",desc:"",parent:'96418'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'96418'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'96418'},{ty:"method",name:"next_back",path:"std::iter",desc:"",parent:'96418'},{ty:"method",name:"indexable",path:"std::iter",desc:"",parent:'96418'},{ty:"method",name:"idx",path:"std::iter",desc:"",parent:'96418'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'96720'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'96720'},{ty:"method",name:"peek",path:"std::iter",desc:"Return a reference to the next element of the iterator with out advancing it,\nor None if the iterator is exhausted.",parent:'96720'},{ty:"method",name:"is_empty",path:"std::iter",desc:"Check whether peekable iterator is empty or not.",parent:'96720'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'96881'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'96881'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'97002'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'97002'},{ty:"method",name:"clone",path:"std::iter",desc:"",parent:'97108'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'97108'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'97108'},{ty:"method",name:"indexable",path:"std::iter",desc:"",parent:'97108'},{ty:"method",name:"idx",path:"std::iter",desc:"",parent:'97108'},{ty:"method",name:"clone",path:"std::iter",desc:"",parent:'97334'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'97334'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'97334'},{ty:"method",name:"indexable",path:"std::iter",desc:"",parent:'97334'},{ty:"method",name:"idx",path:"std::iter",desc:"",parent:'97334'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'97519'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'97519'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'97621'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'97621'},{ty:"method",name:"next_back",path:"std::iter",desc:"",parent:'97621'},{ty:"method",name:"clone",path:"std::iter",desc:"",parent:'97945'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'97945'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'97945'},{ty:"method",name:"next_back",path:"std::iter",desc:"",parent:'97945'},{ty:"method",name:"indexable",path:"std::iter",desc:"",parent:'97945'},{ty:"method",name:"idx",path:"std::iter",desc:"",parent:'97945'},{ty:"method",name:"reset_fuse",path:"std::iter",desc:"Resets the fuse such that the next call to .next() or .next_back() will\ncall the underlying iterator again even if it previously returned None.",parent:'97945'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'98155'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'98155'},{ty:"method",name:"next_back",path:"std::iter",desc:"",parent:'98155'},{ty:"method",name:"indexable",path:"std::iter",desc:"",parent:'98155'},{ty:"method",name:"idx",path:"std::iter",desc:"",parent:'98155'},{ty:"method",name:"new",path:"std::iter",desc:"Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the iterator",parent:'98343'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'98343'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'98343'},{ty:"method",name:"clone",path:"std::iter",desc:"",parent:'98448'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'98448'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'98448'},{ty:"method",name:"clone",path:"std::iter",desc:"",parent:'98564'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'98564'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'98564'},{ty:"method",name:"next_back",path:"std::iter",desc:"",parent:'98564'},{ty:"method",name:"clone",path:"std::iter",desc:"",parent:'98843'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'98843'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'98843'},{ty:"method",name:"next_back",path:"std::iter",desc:"",parent:'98843'},{ty:"method",name:"clone",path:"std::iter",desc:"",parent:'99120'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'99120'},{ty:"method",name:"clone",path:"std::iter",desc:"",parent:'99289'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'99289'},{ty:"method",name:"clone",path:"std::iter",desc:"",parent:'99471'},{ty:"method",name:"new",path:"std::iter",desc:"Create a new `Repeat` that endlessly repeats the element `elt`.",parent:'99471'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'99471'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'99471'},{ty:"method",name:"next_back",path:"std::iter",desc:"",parent:'99471'},{ty:"method",name:"indexable",path:"std::iter",desc:"",parent:'99471'},{ty:"method",name:"idx",path:"std::iter",desc:"",parent:'99471'},{ty:"mod",name:"to_str",path:"std",desc:"The `ToStr` trait for converting to strings"},{ty:"trait",name:"ToStr",path:"std::to_str",desc:"A generic trait for converting a value to a string"},{ty:"tymethod",name:"to_str",path:"std::to_str",desc:"Converts the value of `self` to an owned string",parent:'100072'},{ty:"trait",name:"IntoStr",path:"std::to_str",desc:"Trait for converting a type to a string, consuming it in the process."},{ty:"tymethod",name:"into_str",path:"std::to_str",desc:"Consume and convert to a string.",parent:'100080'},{ty:"mod",name:"clone",path:"std",desc:"The `Clone` trait for types that cannot be 'implicitly copied'"},{ty:"trait",name:"Clone",path:"std::clone",desc:"A common trait for cloning an object."},{ty:"tymethod",name:"clone",path:"std::clone",desc:"Returns a copy of the value. The contents of owned pointers\nare copied to maintain uniqueness, while the contents of\nmanaged pointers are not copied.",parent:'100155'},{ty:"method",name:"clone_from",path:"std::clone",desc:"Perform copy-assignment from `source`.",parent:'100155'},{ty:"mod",name:"hash",path:"std",desc:"Generic hashing support."},{ty:"mod",name:"sip",path:"std::hash",desc:"Implementation of SipHash 2-4"},{ty:"struct",name:"SipState",path:"std::hash::sip",desc:"`SipState` computes a SipHash 2-4 hash over a stream of bytes."},{ty:"struct",name:"SipHasher",path:"std::hash::sip",desc:"`SipHasher` computes the SipHash algorithm from a stream of bytes."},{ty:"fn",name:"hash",path:"std::hash::sip",desc:"Hash a value using the SipHash algorithm."},{ty:"fn",name:"hash_with_keys",path:"std::hash::sip",desc:"Hash a value with the SipHash algorithm with the provided keys."},{ty:"method",name:"new",path:"std::hash::sip",desc:"Create a `SipState` that is keyed off the provided keys.",parent:'100986'},{ty:"method",name:"new_with_keys",path:"std::hash::sip",desc:"Create a `SipState` that is keyed off the provided keys.",parent:'100986'},{ty:"method",name:"reset",path:"std::hash::sip",desc:"Reset the state back to it's initial state.",parent:'100986'},{ty:"method",name:"result",path:"std::hash::sip",desc:"Return the computed hash.",parent:'100986'},{ty:"method",name:"write",path:"std::hash::sip",desc:"",parent:'100986'},{ty:"method",name:"clone",path:"std::hash::sip",desc:"",parent:'100986'},{ty:"method",name:"default",path:"std::hash::sip",desc:"",parent:'100986'},{ty:"method",name:"clone",path:"std::hash::sip",desc:"",parent:'103120'},{ty:"method",name:"new",path:"std::hash::sip",desc:"Create a `Sip`.",parent:'103120'},{ty:"method",name:"new_with_keys",path:"std::hash::sip",desc:"Create a `Sip` that is keyed off the provided keys.",parent:'103120'},{ty:"method",name:"hash",path:"std::hash::sip",desc:"",parent:'103120'},{ty:"method",name:"default",path:"std::hash::sip",desc:"",parent:'103120'},{ty:"trait",name:"Hash",path:"std::hash",desc:"A trait that represents a hashable type. The `S` type parameter is an\nabstract hash state that is used by the `Hash` to compute the hash.\nIt defaults to `std::hash::sip::SipState`."},{ty:"tymethod",name:"hash",path:"std::hash",desc:"Compute a hash of the value.",parent:'103290'},{ty:"trait",name:"Hasher",path:"std::hash",desc:"A trait that computes a hash for a value. The main users of this trait are\ncontainers like `HashMap`, which need a generic way hash multiple types."},{ty:"tymethod",name:"hash",path:"std::hash",desc:"Compute a hash of the value.",parent:'103304'},{ty:"method",name:"hash",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"hash",path:"std::rc",desc:"",parent:'74541'},{ty:"mod",name:"container",path:"std",desc:"Traits for generic containers (including `Map` and `Set`)"},{ty:"trait",name:"Container",path:"std::container",desc:"A trait to represent the abstract idea of a container. The only concrete\nknowledge known is the number of elements contained within."},{ty:"tymethod",name:"len",path:"std::container",desc:"Return the number of elements in the container",parent:'104694'},{ty:"method",name:"is_empty",path:"std::container",desc:"Return true if the container contains no elements",parent:'104694'},{ty:"trait",name:"Mutable",path:"std::container",desc:"A trait to represent mutable containers"},{ty:"tymethod",name:"clear",path:"std::container",desc:"Clear the container, removing all values.",parent:'104712'},{ty:"trait",name:"Map",path:"std::container",desc:"A map is a key-value store where values may be looked up by their keys. This\ntrait provides basic operations to operate on these stores."},{ty:"tymethod",name:"find",path:"std::container",desc:"Return a reference to the value corresponding to the key",parent:'104719'},{ty:"method",name:"contains_key",path:"std::container",desc:"Return true if the map contains a value for the specified key",parent:'104719'},{ty:"trait",name:"MutableMap",path:"std::container",desc:"This trait provides basic operations to modify the contents of a map."},{ty:"method",name:"insert",path:"std::container",desc:"Insert a key-value pair into the map. An existing value for a\nkey is replaced by the new value. Return true if the key did\nnot already exist in the map.",parent:'104756'},{ty:"method",name:"remove",path:"std::container",desc:"Remove a key-value pair from the map. Return true if the key\nwas present in the map, otherwise false.",parent:'104756'},{ty:"tymethod",name:"swap",path:"std::container",desc:"Insert a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise None is returned.",parent:'104756'},{ty:"tymethod",name:"pop",path:"std::container",desc:"Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",parent:'104756'},{ty:"tymethod",name:"find_mut",path:"std::container",desc:"Return a mutable reference to the value corresponding to the key",parent:'104756'},{ty:"trait",name:"Set",path:"std::container",desc:"A set is a group of objects which are each distinct from one another. This\ntrait represents actions which can be performed on sets to iterate over\nthem."},{ty:"tymethod",name:"contains",path:"std::container",desc:"Return true if the set contains a value",parent:'104847'},{ty:"tymethod",name:"is_disjoint",path:"std::container",desc:"Return true if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",parent:'104847'},{ty:"tymethod",name:"is_subset",path:"std::container",desc:"Return true if the set is a subset of another",parent:'104847'},{ty:"tymethod",name:"is_superset",path:"std::container",desc:"Return true if the set is a superset of another",parent:'104847'},{ty:"trait",name:"MutableSet",path:"std::container",desc:"This trait represents actions which can be performed on sets to mutate\nthem."},{ty:"tymethod",name:"insert",path:"std::container",desc:"Add a value to the set. Return true if the value was not already\npresent in the set.",parent:'104894'},{ty:"tymethod",name:"remove",path:"std::container",desc:"Remove a value from the set. Return true if the value was\npresent in the set.",parent:'104894'},{ty:"mod",name:"default",path:"std",desc:"The `Default` trait for types which may have meaningful default values"},{ty:"trait",name:"Default",path:"std::default",desc:"A trait that types which have a useful default value should implement."},{ty:"tymethod",name:"default",path:"std::default",desc:"Return the \"default value\" for a type.",parent:'104922'},{ty:"mod",name:"any",path:"std",desc:"Traits for dynamic typing of any type (through runtime reflection)"},{ty:"enum",name:"Void",path:"std::any",desc:"A type with no inhabitants"},{ty:"trait",name:"Any",path:"std::any",desc:"The `Any` trait is implemented by all types, and can be used as a trait object\nfor dynamic typing"},{ty:"tymethod",name:"get_type_id",path:"std::any",desc:"Get the `TypeId` of `self`",parent:'104973'},{ty:"trait",name:"AnyRefExt",path:"std::any",desc:"Extension methods for a referenced `Any` trait object"},{ty:"tymethod",name:"is",path:"std::any",desc:"Returns true if the boxed type is the same as `T`",parent:'104996'},{ty:"tymethod",name:"as_ref",path:"std::any",desc:"Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",parent:'104996'},{ty:"trait",name:"AnyMutRefExt",path:"std::any",desc:"Extension methods for a mutable referenced `Any` trait object"},{ty:"tymethod",name:"as_mut",path:"std::any",desc:"Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",parent:'105087'},{ty:"trait",name:"AnyOwnExt",path:"std::any",desc:"Extension methods for an owning `Any` trait object"},{ty:"tymethod",name:"move",path:"std::any",desc:"Returns the boxed value if it is of type `T`, or\n`Err(Self)` if it isn't.",parent:'105146'},{ty:"mod",name:"option",path:"std",desc:"Optionally nullable values (`Option` type)"},{ty:"struct",name:"Item",path:"std::option",desc:"An iterator that yields either one or zero elements"},{ty:"enum",name:"Option",path:"std::option",desc:"The option type"},{ty:"variant",name:"None",path:"std::option",desc:"No value",parent:'105268'},{ty:"variant",name:"Some",path:"std::option",desc:"Some value `T`",parent:'105268'},{ty:"fn",name:"collect",path:"std::option",desc:"Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\nvector containing the values of each `Option` is returned."},{ty:"method",name:"fmt",path:"std::option",desc:"",parent:'105268'},{ty:"method",name:"cmp",path:"std::option",desc:"",parent:'105268'},{ty:"method",name:"equals",path:"std::option",desc:"",parent:'105268'},{ty:"method",name:"lt",path:"std::option",desc:"",parent:'105268'},{ty:"method",name:"le",path:"std::option",desc:"",parent:'105268'},{ty:"method",name:"gt",path:"std::option",desc:"",parent:'105268'},{ty:"method",name:"ge",path:"std::option",desc:"",parent:'105268'},{ty:"method",name:"eq",path:"std::option",desc:"",parent:'105268'},{ty:"method",name:"ne",path:"std::option",desc:"",parent:'105268'},{ty:"method",name:"clone",path:"std::option",desc:"",parent:'105268'},{ty:"method",name:"is_some",path:"std::option",desc:"Returns true if the option contains a `Some` value",parent:'105268'},{ty:"method",name:"is_none",path:"std::option",desc:"Returns true if the option equals `None`",parent:'105268'},{ty:"method",name:"as_ref",path:"std::option",desc:"Convert from `Option<T>` to `Option<&T>`",parent:'105268'},{ty:"method",name:"as_mut",path:"std::option",desc:"Convert from `Option<T>` to `Option<&mut T>`",parent:'105268'},{ty:"method",name:"as_slice",path:"std::option",desc:"Convert from `Option<T>` to `&[T]` (without copying)",parent:'105268'},{ty:"method",name:"as_mut_slice",path:"std::option",desc:"Convert from `Option<T>` to `&mut [T]` (without copying)",parent:'105268'},{ty:"method",name:"expect",path:"std::option",desc:"Unwraps an option, yielding the content of a `Some`\nFails if the value is a `None` with a custom failure message provided by `msg`.",parent:'105268'},{ty:"method",name:"unwrap",path:"std::option",desc:"Moves a value out of an option type and returns it.",parent:'105268'},{ty:"method",name:"unwrap_or",path:"std::option",desc:"Returns the contained value or a default",parent:'105268'},{ty:"method",name:"unwrap_or_else",path:"std::option",desc:"Returns the contained value or computes it from a closure",parent:'105268'},{ty:"method",name:"map",path:"std::option",desc:"Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",parent:'105268'},{ty:"method",name:"map_or",path:"std::option",desc:"Applies a function to the contained value or returns a default.",parent:'105268'},{ty:"method",name:"mutate",path:"std::option",desc:"Apply a function to the contained value or do nothing.\nReturns true if the contained value was mutated.",parent:'105268'},{ty:"method",name:"mutate_or_set",path:"std::option",desc:"Apply a function to the contained value or set it to a default.\nReturns true if the contained value was mutated, or false if set to the default.",parent:'105268'},{ty:"method",name:"iter",path:"std::option",desc:"Return an iterator over the possibly contained value",parent:'105268'},{ty:"method",name:"mut_iter",path:"std::option",desc:"Return a mutable iterator over the possibly contained value",parent:'105268'},{ty:"method",name:"move_iter",path:"std::option",desc:"Return a consuming iterator over the possibly contained value",parent:'105268'},{ty:"method",name:"and",path:"std::option",desc:"Returns `None` if the option is `None`, otherwise returns `optb`.",parent:'105268'},{ty:"method",name:"and_then",path:"std::option",desc:"Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",parent:'105268'},{ty:"method",name:"or",path:"std::option",desc:"Returns the option if it contains a value, otherwise returns `optb`.",parent:'105268'},{ty:"method",name:"or_else",path:"std::option",desc:"Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",parent:'105268'},{ty:"method",name:"take",path:"std::option",desc:"Take the value out of the option, leaving a `None` in its place.",parent:'105268'},{ty:"method",name:"filtered",path:"std::option",desc:"Filters an optional value using a given function.",parent:'105268'},{ty:"method",name:"while_some",path:"std::option",desc:"Applies a function zero or more times until the result is `None`.",parent:'105268'},{ty:"method",name:"take_unwrap",path:"std::option",desc:"The option dance. Moves a value out of an option type and returns it,\nreplacing the original with `None`.",parent:'105268'},{ty:"method",name:"get_ref",path:"std::option",desc:"Gets an immutable reference to the value inside an option.",parent:'105268'},{ty:"method",name:"get_mut_ref",path:"std::option",desc:"Gets a mutable reference to the value inside an option.",parent:'105268'},{ty:"method",name:"unwrap_or_default",path:"std::option",desc:"Returns the contained value or default (for this type)",parent:'105268'},{ty:"method",name:"default",path:"std::option",desc:"",parent:'105268'},{ty:"method",name:"clone",path:"std::option",desc:"",parent:'106551'},{ty:"method",name:"next",path:"std::option",desc:"",parent:'106551'},{ty:"method",name:"size_hint",path:"std::option",desc:"",parent:'106551'},{ty:"method",name:"next_back",path:"std::option",desc:"",parent:'106551'},{ty:"mod",name:"result",path:"std",desc:"Signaling success or failure states (`Result` type)"},{ty:"enum",name:"Result",path:"std::result",desc:"`Result` is a type that represents either success (`Ok`) or failure (`Err`)."},{ty:"variant",name:"Ok",path:"std::result",desc:"Contains the success value",parent:'106748'},{ty:"variant",name:"Err",path:"std::result",desc:"Contains the error value",parent:'106748'},{ty:"fn",name:"collect",path:"std::result",desc:"Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\nvector containing the values of each `Result` is returned."},{ty:"fn",name:"fold",path:"std::result",desc:"Perform a fold operation over the result values from an iterator."},{ty:"fn",name:"fold_",path:"std::result",desc:"Perform a trivial fold operation over the result values\nfrom an iterator."},{ty:"method",name:"fmt",path:"std::result",desc:"",parent:'106748'},{ty:"method",name:"cmp",path:"std::result",desc:"",parent:'106748'},{ty:"method",name:"equals",path:"std::result",desc:"",parent:'106748'},{ty:"method",name:"lt",path:"std::result",desc:"",parent:'106748'},{ty:"method",name:"le",path:"std::result",desc:"",parent:'106748'},{ty:"method",name:"gt",path:"std::result",desc:"",parent:'106748'},{ty:"method",name:"ge",path:"std::result",desc:"",parent:'106748'},{ty:"method",name:"eq",path:"std::result",desc:"",parent:'106748'},{ty:"method",name:"ne",path:"std::result",desc:"",parent:'106748'},{ty:"method",name:"clone",path:"std::result",desc:"",parent:'106748'},{ty:"method",name:"is_ok",path:"std::result",desc:"Returns true if the result is `Ok`",parent:'106748'},{ty:"method",name:"is_err",path:"std::result",desc:"Returns true if the result is `Err`",parent:'106748'},{ty:"method",name:"ok",path:"std::result",desc:"Convert from `Result<T, E>` to `Option<T>`",parent:'106748'},{ty:"method",name:"err",path:"std::result",desc:"Convert from `Result<T, E>` to `Option<E>`",parent:'106748'},{ty:"method",name:"as_ref",path:"std::result",desc:"Convert from `Result<T, E>` to `Result<&T, &E>`",parent:'106748'},{ty:"method",name:"as_mut",path:"std::result",desc:"Convert from `Result<T, E>` to `Result<&mut T, &mut E>`",parent:'106748'},{ty:"method",name:"map",path:"std::result",desc:"Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",parent:'106748'},{ty:"method",name:"map_err",path:"std::result",desc:"Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",parent:'106748'},{ty:"method",name:"and",path:"std::result",desc:"Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",parent:'106748'},{ty:"method",name:"and_then",path:"std::result",desc:"Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",parent:'106748'},{ty:"method",name:"or",path:"std::result",desc:"Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",parent:'106748'},{ty:"method",name:"or_else",path:"std::result",desc:"Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",parent:'106748'},{ty:"method",name:"unwrap",path:"std::result",desc:"Unwraps a result, yielding the content of an `Ok`.\nFails if the value is an `Err`.",parent:'106748'},{ty:"method",name:"unwrap_err",path:"std::result",desc:"Unwraps a result, yielding the content of an `Err`.\nFails if the value is an `Ok`.",parent:'106748'},{ty:"mod",name:"cell",path:"std",desc:"Types dealing with dynamic mutability"},{ty:"struct",name:"Cell",path:"std::cell",desc:"A mutable memory location that admits only `Pod` data."},{ty:"struct",name:"RefCell",path:"std::cell",desc:"A mutable memory location with dynamically checked borrow rules"},{ty:"struct",name:"Ref",path:"std::cell",desc:"Wraps a borrowed reference to a value in a `RefCell` box."},{ty:"struct",name:"RefMut",path:"std::cell",desc:"Wraps a mutable borrowed reference to a value in a `RefCell` box."},{ty:"method",name:"new",path:"std::cell",desc:"Creates a new `Cell` containing the given value.",parent:'108156'},{ty:"method",name:"get",path:"std::cell",desc:"Returns a copy of the contained value.",parent:'108156'},{ty:"method",name:"set",path:"std::cell",desc:"Sets the contained value.",parent:'108156'},{ty:"method",name:"clone",path:"std::cell",desc:"",parent:'108156'},{ty:"method",name:"eq",path:"std::cell",desc:"",parent:'108156'},{ty:"method",name:"fmt",path:"std::cell",desc:"",parent:'108156'},{ty:"method",name:"new",path:"std::cell",desc:"Create a new `RefCell` containing `value`",parent:'108375'},{ty:"method",name:"unwrap",path:"std::cell",desc:"Consumes the `RefCell`, returning the wrapped value.",parent:'108375'},{ty:"method",name:"try_borrow",path:"std::cell",desc:"Attempts to immutably borrow the wrapped value.",parent:'108375'},{ty:"method",name:"borrow",path:"std::cell",desc:"Immutably borrows the wrapped value.",parent:'108375'},{ty:"method",name:"try_borrow_mut",path:"std::cell",desc:"Mutably borrows the wrapped value.",parent:'108375'},{ty:"method",name:"borrow_mut",path:"std::cell",desc:"Mutably borrows the wrapped value.",parent:'108375'},{ty:"method",name:"with",path:"std::cell",desc:"Immutably borrows the wrapped value and applies `blk` to it.",parent:'108375'},{ty:"method",name:"with_mut",path:"std::cell",desc:"Mutably borrows the wrapped value and applies `blk` to it.",parent:'108375'},{ty:"method",name:"set",path:"std::cell",desc:"Sets the value, replacing what was there.",parent:'108375'},{ty:"method",name:"get",path:"std::cell",desc:"Returns a copy of the contained value.",parent:'108375'},{ty:"method",name:"clone",path:"std::cell",desc:"",parent:'108375'},{ty:"method",name:"eq",path:"std::cell",desc:"",parent:'108375'},{ty:"method",name:"drop",path:"std::cell",desc:"",parent:'108822'},{ty:"method",name:"get",path:"std::cell",desc:"Retrieve an immutable reference to the stored value.",parent:'108822'},{ty:"method",name:"deref",path:"std::cell",desc:"",parent:'108822'},{ty:"method",name:"drop",path:"std::cell",desc:"",parent:'108990'},{ty:"method",name:"get",path:"std::cell",desc:"Retrieve a mutable reference to the stored value.",parent:'108990'},{ty:"method",name:"deref",path:"std::cell",desc:"",parent:'108990'},{ty:"method",name:"deref_mut",path:"std::cell",desc:"",parent:'108990'},{ty:"mod",name:"task",path:"std",desc:"Utilities for managing and scheduling tasks"},{ty:"struct",name:"TaskOpts",path:"std::task",desc:"Task configuration options"},{ty:"structfield",name:"notify_chan",path:"std::task",desc:"Enable lifecycle notifications on the given channel",parent:'109206'},{ty:"structfield",name:"name",path:"std::task",desc:"A name for the task-to-be, for identification in failure messages",parent:'109206'},{ty:"structfield",name:"stack_size",path:"std::task",desc:"The size of the stack for the spawned task",parent:'109206'},{ty:"structfield",name:"stdout",path:"std::task",desc:"Task-local stdout",parent:'109206'},{ty:"structfield",name:"stderr",path:"std::task",desc:"Task-local stderr",parent:'109206'},{ty:"struct",name:"TaskBuilder",path:"std::task",desc:"The task builder type."},{ty:"structfield",name:"opts",path:"std::task",desc:"Options to spawn the new task with",parent:'109236'},{ty:"fn",name:"task",path:"std::task",desc:"Generate the base configuration for spawning a task, off of which more\nconfiguration methods can be chained."},{ty:"fn",name:"spawn",path:"std::task",desc:"Creates and executes a new child task"},{ty:"fn",name:"try",path:"std::task",desc:"Execute a function in another task and return either the return value\nof the function or result::err."},{ty:"fn",name:"with_task_name",path:"std::task",desc:"Read the name of the current task."},{ty:"fn",name:"deschedule",path:"std::task",desc:"Yield control to the task scheduler"},{ty:"fn",name:"failing",path:"std::task",desc:"True if the running task has failed"},{ty:"typedef",name:"TaskResult",path:"std::task",desc:"Indicates the manner in which a task exited."},{ty:"method",name:"future_result",path:"std::task",desc:"Get a future representing the exit status of the task.",parent:'109236'},{ty:"method",name:"named",path:"std::task",desc:"Name the task-to-be. Currently the name is used for identification\nonly in failure messages.",parent:'109236'},{ty:"method",name:"with_wrapper",path:"std::task",desc:"Add a wrapper to the body of the spawned task.",parent:'109236'},{ty:"method",name:"spawn",path:"std::task",desc:"Creates and executes a new child task",parent:'109236'},{ty:"method",name:"try",path:"std::task",desc:"Execute a function in another task and return either the return value\nof the function or result::err.",parent:'109236'},{ty:"method",name:"new",path:"std::task",desc:"The default task options",parent:'109206'},{ty:"mod",name:"comm",path:"std",desc:"Communication primitives for concurrent tasks"},{ty:"struct",name:"Select",path:"std::comm",desc:"The \"receiver set\" of the select interface. This structure is used to manage\na set of receivers which are being selected over."},{ty:"struct",name:"Handle",path:"std::comm",desc:"A handle to a receiver which is currently a member of a `Select` set of\nreceivers.  This handle is used to keep the receiver in the set as well as\ninteract with the underlying receiver."},{ty:"struct",name:"Receiver",path:"std::comm",desc:"The receiving-half of Rust's channel type. This half can only be owned by\none task"},{ty:"struct",name:"Messages",path:"std::comm",desc:"An iterator over messages on a receiver, this iterator will block\nwhenever `next` is called, waiting for a new message, and `None` will be\nreturned when the corresponding channel has hung up."},{ty:"struct",name:"Sender",path:"std::comm",desc:"The sending-half of Rust's channel type. This half can only be owned by one\ntask"},{ty:"enum",name:"TryRecvResult",path:"std::comm",desc:"This enumeration is the list of the possible reasons that try_recv could not\nreturn data when called."},{ty:"variant",name:"Empty",path:"std::comm",desc:"This channel is currently empty, but the sender(s) have not yet\ndisconnected, so data may yet become available.",parent:'117036'},{ty:"variant",name:"Disconnected",path:"std::comm",desc:"This channel's sending half has become disconnected, and there will\nnever be any more data received on this channel",parent:'117036'},{ty:"variant",name:"Data",path:"std::comm",desc:"The channel had some data and we successfully popped it",parent:'117036'},{ty:"fn",name:"channel",path:"std::comm",desc:"Creates a new channel, returning the sender/receiver halves. All data sent\non the sender will become available on the receiver. See the documentation\nof `Receiver` and `Sender` to see what's possible with them."},{ty:"method",name:"fmt",path:"std::comm",desc:"",parent:'117036'},{ty:"method",name:"clone",path:"std::comm",desc:"",parent:'117036'},{ty:"method",name:"eq",path:"std::comm",desc:"",parent:'117036'},{ty:"method",name:"ne",path:"std::comm",desc:"",parent:'117036'},{ty:"method",name:"send",path:"std::comm",desc:"Sends a value along this channel to be received by the corresponding\nreceiver.",parent:'117021'},{ty:"method",name:"try_send",path:"std::comm",desc:"Attempts to send a value on this channel, returning whether it was\nsuccessfully sent.",parent:'117021'},{ty:"method",name:"clone",path:"std::comm",desc:"",parent:'117021'},{ty:"method",name:"drop",path:"std::comm",desc:"",parent:'117021'},{ty:"method",name:"recv",path:"std::comm",desc:"Blocks waiting for a value on this receiver",parent:'116996'},{ty:"method",name:"try_recv",path:"std::comm",desc:"Attempts to return a pending value on this receiver without blocking",parent:'116996'},{ty:"method",name:"recv_opt",path:"std::comm",desc:"Attempt to wait for a value on this receiver, but does not fail if the\ncorresponding channel has hung up.",parent:'116996'},{ty:"method",name:"iter",path:"std::comm",desc:"Returns an iterator which will block waiting for messages, but never\n`fail!`. It will return `None` when the channel has hung up.",parent:'116996'},{ty:"method",name:"next",path:"std::comm",desc:"",parent:'117011'},{ty:"method",name:"drop",path:"std::comm",desc:"",parent:'116996'},{ty:"mod",name:"local_data",path:"std",desc:"Task local data management"},{ty:"enum",name:"KeyValue",path:"std::local_data",desc:""},{ty:"variant",name:"Key",path:"std::local_data",desc:"",parent:'118628'},{ty:"fn",name:"pop",path:"std::local_data",desc:"Removes a task-local value from task-local storage. This will return\nSome(value) if the key was present in TLS, otherwise it will return None."},{ty:"fn",name:"get",path:"std::local_data",desc:"Retrieves a value from TLS. The closure provided is yielded `Some` of a\nreference to the value located in TLS if one exists, or `None` if the key\nprovided is not present in TLS currently."},{ty:"fn",name:"get_mut",path:"std::local_data",desc:"Retrieves a mutable value from TLS. The closure provided is yielded `Some`\nof a reference to the mutable value located in TLS if one exists, or `None`\nif the key provided is not present in TLS currently."},{ty:"fn",name:"set",path:"std::local_data",desc:"Inserts a value into task local storage. If the key is already present in\nTLS, then the previous value is removed and replaced with the provided data."},{ty:"fn",name:"modify",path:"std::local_data",desc:"Modifies a task-local value by temporarily removing it from task-local\nstorage and then re-inserting if `Some` is returned from the closure."},{ty:"typedef",name:"Key",path:"std::local_data",desc:"Indexes a task-local data slot. This pointer is used for comparison to\ndifferentiate keys from one another. The actual type `T` is not used anywhere\nas a member of this type, except that it is parameterized with it to define\nthe type of each key's value."},{ty:"trait",name:"LocalData",path:"std::local_data",desc:""},{ty:"mod",name:"sync",path:"std",desc:"Useful synchronization primitives"},{ty:"mod",name:"arc",path:"std::sync",desc:"Atomically reference counted data"},{ty:"struct",name:"UnsafeArc",path:"std::sync::arc",desc:"An atomically reference counted pointer."},{ty:"method",name:"new",path:"std::sync::arc",desc:"Creates a new `UnsafeArc` which wraps the given data.",parent:'119684'},{ty:"method",name:"new2",path:"std::sync::arc",desc:"As new(), but returns an extra pre-cloned handle.",parent:'119684'},{ty:"method",name:"newN",path:"std::sync::arc",desc:"As new(), but returns a vector of as many pre-cloned handles as\nrequested.",parent:'119684'},{ty:"method",name:"get",path:"std::sync::arc",desc:"Gets a pointer to the inner shared data. Note that care must be taken to\nensure that the outer `UnsafeArc` does not fall out of scope while this\npointer is in use, otherwise it could possibly contain a use-after-free.",parent:'119684'},{ty:"method",name:"get_immut",path:"std::sync::arc",desc:"Gets an immutable pointer to the inner shared data. This has the same\ncaveats as the `get` method.",parent:'119684'},{ty:"method",name:"is_owned",path:"std::sync::arc",desc:"checks if this is the only reference to the arc protected data",parent:'119684'},{ty:"method",name:"clone",path:"std::sync::arc",desc:"",parent:'119684'},{ty:"method",name:"drop",path:"std::sync::arc",desc:"",parent:'119684'},{ty:"mod",name:"atomics",path:"std::sync",desc:"Atomic types"},{ty:"struct",name:"AtomicBool",path:"std::sync::atomics",desc:"An atomic boolean type."},{ty:"struct",name:"AtomicInt",path:"std::sync::atomics",desc:"A signed atomic integer type, supporting basic atomic arithmetic operations"},{ty:"struct",name:"AtomicUint",path:"std::sync::atomics",desc:"An unsigned atomic integer type, supporting basic atomic arithmetic operations"},{ty:"struct",name:"AtomicU64",path:"std::sync::atomics",desc:"An unsigned atomic integer type that is forced to be 64-bits. This does not\nsupport all operations."},{ty:"struct",name:"AtomicPtr",path:"std::sync::atomics",desc:"An unsafe atomic pointer. Only supports basic atomic operations"},{ty:"struct",name:"AtomicOption",path:"std::sync::atomics",desc:"An owned atomic pointer. Ensures that only a single reference to the data is held at any time."},{ty:"enum",name:"Ordering",path:"std::sync::atomics",desc:""},{ty:"variant",name:"Relaxed",path:"std::sync::atomics",desc:"",parent:'120365'},{ty:"variant",name:"Release",path:"std::sync::atomics",desc:"",parent:'120365'},{ty:"variant",name:"Acquire",path:"std::sync::atomics",desc:"",parent:'120365'},{ty:"variant",name:"AcqRel",path:"std::sync::atomics",desc:"",parent:'120365'},{ty:"variant",name:"SeqCst",path:"std::sync::atomics",desc:"",parent:'120365'},{ty:"fn",name:"atomic_store",path:"std::sync::atomics",desc:""},{ty:"fn",name:"atomic_load",path:"std::sync::atomics",desc:""},{ty:"fn",name:"atomic_swap",path:"std::sync::atomics",desc:""},{ty:"fn",name:"atomic_add",path:"std::sync::atomics",desc:"Returns the old value (like __sync_fetch_and_add)."},{ty:"fn",name:"atomic_sub",path:"std::sync::atomics",desc:"Returns the old value (like __sync_fetch_and_sub)."},{ty:"fn",name:"atomic_compare_and_swap",path:"std::sync::atomics",desc:""},{ty:"fn",name:"atomic_and",path:"std::sync::atomics",desc:""},{ty:"fn",name:"atomic_nand",path:"std::sync::atomics",desc:""},{ty:"fn",name:"atomic_or",path:"std::sync::atomics",desc:""},{ty:"fn",name:"atomic_xor",path:"std::sync::atomics",desc:""},{ty:"fn",name:"fence",path:"std::sync::atomics",desc:"An atomic fence."},{ty:"static",name:"INIT_ATOMIC_BOOL",path:"std::sync::atomics",desc:""},{ty:"static",name:"INIT_ATOMIC_INT",path:"std::sync::atomics",desc:""},{ty:"static",name:"INIT_ATOMIC_UINT",path:"std::sync::atomics",desc:""},{ty:"static",name:"INIT_ATOMIC_U64",path:"std::sync::atomics",desc:""},{ty:"method",name:"new",path:"std::sync::atomics",desc:"",parent:'120324'},{ty:"method",name:"load",path:"std::sync::atomics",desc:"",parent:'120324'},{ty:"method",name:"store",path:"std::sync::atomics",desc:"",parent:'120324'},{ty:"method",name:"swap",path:"std::sync::atomics",desc:"",parent:'120324'},{ty:"method",name:"compare_and_swap",path:"std::sync::atomics",desc:"",parent:'120324'},{ty:"method",name:"fetch_and",path:"std::sync::atomics",desc:"Returns the old value",parent:'120324'},{ty:"method",name:"fetch_nand",path:"std::sync::atomics",desc:"Returns the old value",parent:'120324'},{ty:"method",name:"fetch_or",path:"std::sync::atomics",desc:"Returns the old value",parent:'120324'},{ty:"method",name:"fetch_xor",path:"std::sync::atomics",desc:"Returns the old value",parent:'120324'},{ty:"method",name:"new",path:"std::sync::atomics",desc:"",parent:'120331'},{ty:"method",name:"load",path:"std::sync::atomics",desc:"",parent:'120331'},{ty:"method",name:"store",path:"std::sync::atomics",desc:"",parent:'120331'},{ty:"method",name:"swap",path:"std::sync::atomics",desc:"",parent:'120331'},{ty:"method",name:"compare_and_swap",path:"std::sync::atomics",desc:"",parent:'120331'},{ty:"method",name:"fetch_add",path:"std::sync::atomics",desc:"Returns the old value (like __sync_fetch_and_add).",parent:'120331'},{ty:"method",name:"fetch_sub",path:"std::sync::atomics",desc:"Returns the old value (like __sync_fetch_and_sub).",parent:'120331'},{ty:"method",name:"new",path:"std::sync::atomics",desc:"",parent:'120345'},{ty:"method",name:"load",path:"std::sync::atomics",desc:"",parent:'120345'},{ty:"method",name:"store",path:"std::sync::atomics",desc:"",parent:'120345'},{ty:"method",name:"swap",path:"std::sync::atomics",desc:"",parent:'120345'},{ty:"method",name:"compare_and_swap",path:"std::sync::atomics",desc:"",parent:'120345'},{ty:"method",name:"fetch_add",path:"std::sync::atomics",desc:"",parent:'120345'},{ty:"method",name:"fetch_sub",path:"std::sync::atomics",desc:"",parent:'120345'},{ty:"method",name:"new",path:"std::sync::atomics",desc:"",parent:'120338'},{ty:"method",name:"load",path:"std::sync::atomics",desc:"",parent:'120338'},{ty:"method",name:"store",path:"std::sync::atomics",desc:"",parent:'120338'},{ty:"method",name:"swap",path:"std::sync::atomics",desc:"",parent:'120338'},{ty:"method",name:"compare_and_swap",path:"std::sync::atomics",desc:"",parent:'120338'},{ty:"method",name:"fetch_add",path:"std::sync::atomics",desc:"Returns the old value (like __sync_fetch_and_add).",parent:'120338'},{ty:"method",name:"fetch_sub",path:"std::sync::atomics",desc:"Returns the old value (like __sync_fetch_and_sub)..",parent:'120338'},{ty:"method",name:"new",path:"std::sync::atomics",desc:"",parent:'120352'},{ty:"method",name:"load",path:"std::sync::atomics",desc:"",parent:'120352'},{ty:"method",name:"store",path:"std::sync::atomics",desc:"",parent:'120352'},{ty:"method",name:"swap",path:"std::sync::atomics",desc:"",parent:'120352'},{ty:"method",name:"compare_and_swap",path:"std::sync::atomics",desc:"",parent:'120352'},{ty:"method",name:"new",path:"std::sync::atomics",desc:"",parent:'120360'},{ty:"method",name:"empty",path:"std::sync::atomics",desc:"",parent:'120360'},{ty:"method",name:"swap",path:"std::sync::atomics",desc:"",parent:'120360'},{ty:"method",name:"take",path:"std::sync::atomics",desc:"",parent:'120360'},{ty:"method",name:"fill",path:"std::sync::atomics",desc:"A compare-and-swap. Succeeds if the option is 'None' and returns 'None'\nif so. If the option was already 'Some', returns 'Some' of the rejected\nvalue.",parent:'120360'},{ty:"method",name:"is_empty",path:"std::sync::atomics",desc:"Be careful: The caller must have some external method of ensuring the\nresult does not get invalidated by another task after this returns.",parent:'120360'},{ty:"method",name:"drop",path:"std::sync::atomics",desc:"",parent:'120360'},{ty:"mod",name:"deque",path:"std::sync",desc:"A (mostly) lock-free concurrent work-stealing deque"},{ty:"struct",name:"Worker",path:"std::sync::deque",desc:"Worker half of the work-stealing deque. This worker has exclusive access to\none side of the deque, and uses `push` and `pop` method to manipulate it."},{ty:"struct",name:"Stealer",path:"std::sync::deque",desc:"The stealing half of the work-stealing deque. Stealers have access to the\nopposite end of the deque from the worker, and they only have access to the\n`steal` method."},{ty:"struct",name:"BufferPool",path:"std::sync::deque",desc:"The allocation pool for buffers used by work-stealing deques. Right now this\nstructure is used for reclamation of memory after it is no longer in use by\ndeques."},{ty:"enum",name:"Stolen",path:"std::sync::deque",desc:"When stealing some data, this is an enumeration of the possible outcomes."},{ty:"variant",name:"Empty",path:"std::sync::deque",desc:"The deque was empty at the time of stealing",parent:'122070'},{ty:"variant",name:"Abort",path:"std::sync::deque",desc:"The stealer lost the race for stealing data, and a retry may return more\ndata.",parent:'122070'},{ty:"variant",name:"Data",path:"std::sync::deque",desc:"The stealer has successfully stolen some data.",parent:'122070'},{ty:"method",name:"fmt",path:"std::sync::deque",desc:"",parent:'122070'},{ty:"method",name:"eq",path:"std::sync::deque",desc:"",parent:'122070'},{ty:"method",name:"ne",path:"std::sync::deque",desc:"",parent:'122070'},{ty:"method",name:"new",path:"std::sync::deque",desc:"Allocates a new buffer pool which in turn can be used to allocate new\ndeques.",parent:'122378'},{ty:"method",name:"deque",path:"std::sync::deque",desc:"Allocates a new work-stealing deque which will send/receiving memory to\nand from this buffer pool.",parent:'122378'},{ty:"method",name:"clone",path:"std::sync::deque",desc:"",parent:'122378'},{ty:"method",name:"push",path:"std::sync::deque",desc:"Pushes data onto the front of this work queue.",parent:'122052'},{ty:"method",name:"pop",path:"std::sync::deque",desc:"Pops data off the front of the work queue, returning `None` on an empty\nqueue.",parent:'122052'},{ty:"method",name:"pool",path:"std::sync::deque",desc:"Gets access to the buffer pool that this worker is attached to. This can\nbe used to create more deques which share the same buffer pool as this\ndeque.",parent:'122052'},{ty:"method",name:"steal",path:"std::sync::deque",desc:"Steals work off the end of the queue (opposite of the worker's end)",parent:'122061'},{ty:"method",name:"pool",path:"std::sync::deque",desc:"Gets access to the buffer pool that this stealer is attached to. This\ncan be used to create more deques which share the same buffer pool as\nthis deque.",parent:'122061'},{ty:"method",name:"clone",path:"std::sync::deque",desc:"",parent:'122061'},{ty:"mod",name:"mpmc_bounded_queue",path:"std::sync",desc:""},{ty:"struct",name:"Queue",path:"std::sync::mpmc_bounded_queue",desc:""},{ty:"method",name:"with_capacity",path:"std::sync::mpmc_bounded_queue",desc:"",parent:'123691'},{ty:"method",name:"push",path:"std::sync::mpmc_bounded_queue",desc:"",parent:'123691'},{ty:"method",name:"pop",path:"std::sync::mpmc_bounded_queue",desc:"",parent:'123691'},{ty:"method",name:"clone",path:"std::sync::mpmc_bounded_queue",desc:"",parent:'123691'},{ty:"mod",name:"mpsc_queue",path:"std::sync",desc:"A mostly lock-free multi-producer, single consumer queue."},{ty:"struct",name:"Queue",path:"std::sync::mpsc_queue",desc:"The multi-producer single-consumer structure. This is not cloneable, but it\nmay be safely shared so long as it is guaranteed that there is only one\npopper at a time (many pushers are allowed)."},{ty:"enum",name:"PopResult",path:"std::sync::mpsc_queue",desc:"A result of the `pop` function."},{ty:"variant",name:"Data",path:"std::sync::mpsc_queue",desc:"Some data has been popped",parent:'124136'},{ty:"variant",name:"Empty",path:"std::sync::mpsc_queue",desc:"The queue is empty",parent:'124136'},{ty:"variant",name:"Inconsistent",path:"std::sync::mpsc_queue",desc:"The queue is in an inconsistent state. Popping data should succeed, but\nsome pushers have yet to make enough progress in order allow a pop to\nsucceed. It is recommended that a pop() occur \"in the near future\" in\norder to see if the sender has made progress or not",parent:'124136'},{ty:"method",name:"new",path:"std::sync::mpsc_queue",desc:"Creates a new queue that is safe to share among multiple producers and\none consumer.",parent:'124158'},{ty:"method",name:"push",path:"std::sync::mpsc_queue",desc:"Pushes a new value onto this queue.",parent:'124158'},{ty:"method",name:"pop",path:"std::sync::mpsc_queue",desc:"Pops some data from this queue.",parent:'124158'},{ty:"method",name:"casual_pop",path:"std::sync::mpsc_queue",desc:"Attempts to pop data from this queue, but doesn't attempt too hard. This\nwill canonicalize inconsistent states to a `None` value.",parent:'124158'},{ty:"method",name:"drop",path:"std::sync::mpsc_queue",desc:"",parent:'124158'},{ty:"mod",name:"spsc_queue",path:"std::sync",desc:"A single-producer single-consumer concurrent queue"},{ty:"struct",name:"Queue",path:"std::sync::spsc_queue",desc:"The single-producer single-consumer queue. This structure is not cloneable,\nbut it can be safely shared in an UnsafeArc if it is guaranteed that there\nis only one popper and one pusher touching the queue at any one point in\ntime."},{ty:"method",name:"new",path:"std::sync::spsc_queue",desc:"Creates a new queue. The producer returned is connected to the consumer\nto push all data to the consumer.",parent:'124605'},{ty:"method",name:"push",path:"std::sync::spsc_queue",desc:"Pushes a new value onto this queue. Note that to use this function\nsafely, it must be externally guaranteed that there is only one pusher.",parent:'124605'},{ty:"method",name:"pop",path:"std::sync::spsc_queue",desc:"Attempts to pop a value from this queue. Remember that to use this type\nsafely you must ensure that there is only one popper at a time.",parent:'124605'},{ty:"method",name:"peek",path:"std::sync::spsc_queue",desc:"Attempts to peek at the head of the queue, returning `None` if the queue\nhas no data currently",parent:'124605'},{ty:"method",name:"drop",path:"std::sync::spsc_queue",desc:"",parent:'124605'},{ty:"mod",name:"libc",path:"std",desc:"Bindings for the C standard library and other platform libraries"},{ty:"mod",name:"types",path:"std::libc",desc:""},{ty:"mod",name:"common",path:"std::libc::types",desc:""},{ty:"mod",name:"c95",path:"std::libc::types::common",desc:""},{ty:"enum",name:"c_void",path:"std::libc::types::common::c95",desc:"Type used to construct void pointers for use with C."},{ty:"enum",name:"FILE",path:"std::libc::types::common::c95",desc:""},{ty:"enum",name:"fpos_t",path:"std::libc::types::common::c95",desc:""},{ty:"mod",name:"c99",path:"std::libc::types::common",desc:""},{ty:"typedef",name:"int8_t",path:"std::libc::types::common::c99",desc:""},{ty:"typedef",name:"int16_t",path:"std::libc::types::common::c99",desc:""},{ty:"typedef",name:"int32_t",path:"std::libc::types::common::c99",desc:""},{ty:"typedef",name:"int64_t",path:"std::libc::types::common::c99",desc:""},{ty:"typedef",name:"uint8_t",path:"std::libc::types::common::c99",desc:""},{ty:"typedef",name:"uint16_t",path:"std::libc::types::common::c99",desc:""},{ty:"typedef",name:"uint32_t",path:"std::libc::types::common::c99",desc:""},{ty:"typedef",name:"uint64_t",path:"std::libc::types::common::c99",desc:""},{ty:"mod",name:"posix88",path:"std::libc::types::common",desc:""},{ty:"enum",name:"DIR",path:"std::libc::types::common::posix88",desc:""},{ty:"enum",name:"dirent_t",path:"std::libc::types::common::posix88",desc:""},{ty:"mod",name:"os",path:"std::libc::types",desc:""},{ty:"mod",name:"common",path:"std::libc::types::os",desc:""},{ty:"mod",name:"posix01",path:"std::libc::types::os::common",desc:""},{ty:"struct",name:"stat",path:"std::libc::types::os::common::posix01",desc:""},{ty:"structfield",name:"st_dev",path:"std::libc::types::os::common::posix01",desc:"",parent:'125608'},{ty:"structfield",name:"st_ino",path:"std::libc::types::os::common::posix01",desc:"",parent:'125608'},{ty:"structfield",name:"st_mode",path:"std::libc::types::os::common::posix01",desc:"",parent:'125608'},{ty:"structfield",name:"st_nlink",path:"std::libc::types::os::common::posix01",desc:"",parent:'125608'},{ty:"structfield",name:"st_uid",path:"std::libc::types::os::common::posix01",desc:"",parent:'125608'},{ty:"structfield",name:"st_gid",path:"std::libc::types::os::common::posix01",desc:"",parent:'125608'},{ty:"structfield",name:"st_rdev",path:"std::libc::types::os::common::posix01",desc:"",parent:'125608'},{ty:"structfield",name:"st_size",path:"std::libc::types::os::common::posix01",desc:"",parent:'125608'},{ty:"structfield",name:"st_atime",path:"std::libc::types::os::common::posix01",desc:"",parent:'125608'},{ty:"structfield",name:"st_mtime",path:"std::libc::types::os::common::posix01",desc:"",parent:'125608'},{ty:"structfield",name:"st_ctime",path:"std::libc::types::os::common::posix01",desc:"",parent:'125608'},{ty:"struct",name:"utimbuf",path:"std::libc::types::os::common::posix01",desc:""},{ty:"structfield",name:"actime",path:"std::libc::types::os::common::posix01",desc:"",parent:'125642'},{ty:"structfield",name:"modtime",path:"std::libc::types::os::common::posix01",desc:"",parent:'125642'},{ty:"struct",name:"timeval",path:"std::libc::types::os::common::posix01",desc:""},{ty:"structfield",name:"tv_sec",path:"std::libc::types::os::common::posix01",desc:"",parent:'125649'},{ty:"structfield",name:"tv_usec",path:"std::libc::types::os::common::posix01",desc:"",parent:'125649'},{ty:"struct",name:"timespec",path:"std::libc::types::os::common::posix01",desc:""},{ty:"structfield",name:"tv_sec",path:"std::libc::types::os::common::posix01",desc:"",parent:'125656'},{ty:"structfield",name:"tv_nsec",path:"std::libc::types::os::common::posix01",desc:"",parent:'125656'},{ty:"enum",name:"timezone",path:"std::libc::types::os::common::posix01",desc:""},{ty:"mod",name:"bsd44",path:"std::libc::types::os::common",desc:""},{ty:"struct",name:"sockaddr",path:"std::libc::types::os::common::bsd44",desc:""},{ty:"structfield",name:"sa_family",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125685'},{ty:"structfield",name:"sa_data",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125685'},{ty:"struct",name:"sockaddr_storage",path:"std::libc::types::os::common::bsd44",desc:""},{ty:"structfield",name:"ss_family",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125694'},{ty:"structfield",name:"__ss_align",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125694'},{ty:"structfield",name:"__ss_pad2",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125694'},{ty:"struct",name:"sockaddr_in",path:"std::libc::types::os::common::bsd44",desc:""},{ty:"structfield",name:"sin_family",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125706'},{ty:"structfield",name:"sin_port",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125706'},{ty:"structfield",name:"sin_addr",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125706'},{ty:"structfield",name:"sin_zero",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125706'},{ty:"struct",name:"in_addr",path:"std::libc::types::os::common::bsd44",desc:""},{ty:"structfield",name:"s_addr",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125721'},{ty:"struct",name:"sockaddr_in6",path:"std::libc::types::os::common::bsd44",desc:""},{ty:"structfield",name:"sin6_family",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125725'},{ty:"structfield",name:"sin6_port",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125725'},{ty:"structfield",name:"sin6_flowinfo",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125725'},{ty:"structfield",name:"sin6_addr",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125725'},{ty:"structfield",name:"sin6_scope_id",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125725'},{ty:"struct",name:"in6_addr",path:"std::libc::types::os::common::bsd44",desc:""},{ty:"structfield",name:"s6_addr",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125741'},{ty:"struct",name:"ip_mreq",path:"std::libc::types::os::common::bsd44",desc:""},{ty:"structfield",name:"imr_multiaddr",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125747'},{ty:"structfield",name:"imr_interface",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125747'},{ty:"struct",name:"ip6_mreq",path:"std::libc::types::os::common::bsd44",desc:""},{ty:"structfield",name:"ipv6mr_multiaddr",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125754'},{ty:"structfield",name:"ipv6mr_interface",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125754'},{ty:"struct",name:"addrinfo",path:"std::libc::types::os::common::bsd44",desc:""},{ty:"structfield",name:"ai_flags",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125761'},{ty:"structfield",name:"ai_family",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125761'},{ty:"structfield",name:"ai_socktype",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125761'},{ty:"structfield",name:"ai_protocol",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125761'},{ty:"structfield",name:"ai_addrlen",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125761'},{ty:"structfield",name:"ai_canonname",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125761'},{ty:"structfield",name:"ai_addr",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125761'},{ty:"structfield",name:"ai_next",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125761'},{ty:"struct",name:"sockaddr_un",path:"std::libc::types::os::common::bsd44",desc:""},{ty:"structfield",name:"sun_family",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125789'},{ty:"structfield",name:"sun_path",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125789'},{ty:"typedef",name:"SOCKET",path:"std::libc::types::os::common::bsd44",desc:""},{ty:"typedef",name:"socklen_t",path:"std::libc::types::os::common::bsd44",desc:""},{ty:"typedef",name:"sa_family_t",path:"std::libc::types::os::common::bsd44",desc:""},{ty:"typedef",name:"in_port_t",path:"std::libc::types::os::common::bsd44",desc:""},{ty:"typedef",name:"in_addr_t",path:"std::libc::types::os::common::bsd44",desc:""},{ty:"mod",name:"arch",path:"std::libc::types::os",desc:""},{ty:"mod",name:"c95",path:"std::libc::types::os::arch",desc:""},{ty:"typedef",name:"c_char",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"c_schar",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"c_uchar",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"c_short",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"c_ushort",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"c_int",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"c_uint",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"c_long",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"c_ulong",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"c_float",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"c_double",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"size_t",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"ptrdiff_t",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"clock_t",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"time_t",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"suseconds_t",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"wchar_t",path:"std::libc::types::os::arch::c95",desc:""},{ty:"mod",name:"c99",path:"std::libc::types::os::arch",desc:""},{ty:"typedef",name:"c_longlong",path:"std::libc::types::os::arch::c99",desc:""},{ty:"typedef",name:"c_ulonglong",path:"std::libc::types::os::arch::c99",desc:""},{ty:"typedef",name:"intptr_t",path:"std::libc::types::os::arch::c99",desc:""},{ty:"typedef",name:"uintptr_t",path:"std::libc::types::os::arch::c99",desc:""},{ty:"mod",name:"posix88",path:"std::libc::types::os::arch",desc:""},{ty:"typedef",name:"off_t",path:"std::libc::types::os::arch::posix88",desc:""},{ty:"typedef",name:"dev_t",path:"std::libc::types::os::arch::posix88",desc:""},{ty:"typedef",name:"ino_t",path:"std::libc::types::os::arch::posix88",desc:""},{ty:"typedef",name:"pid_t",path:"std::libc::types::os::arch::posix88",desc:""},{ty:"typedef",name:"useconds_t",path:"std::libc::types::os::arch::posix88",desc:""},{ty:"typedef",name:"mode_t",path:"std::libc::types::os::arch::posix88",desc:""},{ty:"typedef",name:"ssize_t",path:"std::libc::types::os::arch::posix88",desc:""},{ty:"mod",name:"extra",path:"std::libc::types::os::arch",desc:""},{ty:"struct",name:"STARTUPINFO",path:"std::libc::types::os::arch::extra",desc:""},{ty:"structfield",name:"cb",path:"std::libc::types::os::arch::extra",desc:"",parent:'126025'},{ty:"structfield",name:"lpReserved",path:"std::libc::types::os::arch::extra",desc:"",parent:'126025'},{ty:"structfield",name:"lpDesktop",path:"std::libc::types::os::arch::extra",desc:"",parent:'126025'},{ty:"structfield",name:"lpTitle",path:"std::libc::types::os::arch::extra",desc:"",parent:'126025'},{ty:"structfield",name:"dwX",path:"std::libc::types::os::arch::extra",desc:"",parent:'126025'},{ty:"structfield",name:"dwY",path:"std::libc::types::os::arch::extra",desc:"",parent:'126025'},{ty:"structfield",name:"dwXSize",path:"std::libc::types::os::arch::extra",desc:"",parent:'126025'},{ty:"structfield",name:"dwYSize",path:"std::libc::types::os::arch::extra",desc:"",parent:'126025'},{ty:"structfield",name:"dwXCountChars",path:"std::libc::types::os::arch::extra",desc:"",parent:'126025'},{ty:"structfield",name:"dwYCountCharts",path:"std::libc::types::os::arch::extra",desc:"",parent:'126025'},{ty:"structfield",name:"dwFillAttribute",path:"std::libc::types::os::arch::extra",desc:"",parent:'126025'},{ty:"structfield",name:"dwFlags",path:"std::libc::types::os::arch::extra",desc:"",parent:'126025'},{ty:"structfield",name:"wShowWindow",path:"std::libc::types::os::arch::extra",desc:"",parent:'126025'},{ty:"structfield",name:"cbReserved2",path:"std::libc::types::os::arch::extra",desc:"",parent:'126025'},{ty:"structfield",name:"lpReserved2",path:"std::libc::types::os::arch::extra",desc:"",parent:'126025'},{ty:"structfield",name:"hStdInput",path:"std::libc::types::os::arch::extra",desc:"",parent:'126025'},{ty:"structfield",name:"hStdOutput",path:"std::libc::types::os::arch::extra",desc:"",parent:'126025'},{ty:"structfield",name:"hStdError",path:"std::libc::types::os::arch::extra",desc:"",parent:'126025'},{ty:"struct",name:"PROCESS_INFORMATION",path:"std::libc::types::os::arch::extra",desc:""},{ty:"structfield",name:"hProcess",path:"std::libc::types::os::arch::extra",desc:"",parent:'126084'},{ty:"structfield",name:"hThread",path:"std::libc::types::os::arch::extra",desc:"",parent:'126084'},{ty:"structfield",name:"dwProcessId",path:"std::libc::types::os::arch::extra",desc:"",parent:'126084'},{ty:"structfield",name:"dwThreadId",path:"std::libc::types::os::arch::extra",desc:"",parent:'126084'},{ty:"struct",name:"SYSTEM_INFO",path:"std::libc::types::os::arch::extra",desc:""},{ty:"structfield",name:"wProcessorArchitecture",path:"std::libc::types::os::arch::extra",desc:"",parent:'126101'},{ty:"structfield",name:"wReserved",path:"std::libc::types::os::arch::extra",desc:"",parent:'126101'},{ty:"structfield",name:"dwPageSize",path:"std::libc::types::os::arch::extra",desc:"",parent:'126101'},{ty:"structfield",name:"lpMinimumApplicationAddress",path:"std::libc::types::os::arch::extra",desc:"",parent:'126101'},{ty:"structfield",name:"lpMaximumApplicationAddress",path:"std::libc::types::os::arch::extra",desc:"",parent:'126101'},{ty:"structfield",name:"dwActiveProcessorMask",path:"std::libc::types::os::arch::extra",desc:"",parent:'126101'},{ty:"structfield",name:"dwNumberOfProcessors",path:"std::libc::types::os::arch::extra",desc:"",parent:'126101'},{ty:"structfield",name:"dwProcessorType",path:"std::libc::types::os::arch::extra",desc:"",parent:'126101'},{ty:"structfield",name:"dwAllocationGranularity",path:"std::libc::types::os::arch::extra",desc:"",parent:'126101'},{ty:"structfield",name:"wProcessorLevel",path:"std::libc::types::os::arch::extra",desc:"",parent:'126101'},{ty:"structfield",name:"wProcessorRevision",path:"std::libc::types::os::arch::extra",desc:"",parent:'126101'},{ty:"struct",name:"MEMORY_BASIC_INFORMATION",path:"std::libc::types::os::arch::extra",desc:""},{ty:"structfield",name:"BaseAddress",path:"std::libc::types::os::arch::extra",desc:"",parent:'126160'},{ty:"structfield",name:"AllocationBase",path:"std::libc::types::os::arch::extra",desc:"",parent:'126160'},{ty:"structfield",name:"AllocationProtect",path:"std::libc::types::os::arch::extra",desc:"",parent:'126160'},{ty:"structfield",name:"RegionSize",path:"std::libc::types::os::arch::extra",desc:"",parent:'126160'},{ty:"structfield",name:"State",path:"std::libc::types::os::arch::extra",desc:"",parent:'126160'},{ty:"structfield",name:"Protect",path:"std::libc::types::os::arch::extra",desc:"",parent:'126160'},{ty:"structfield",name:"Type",path:"std::libc::types::os::arch::extra",desc:"",parent:'126160'},{ty:"struct",name:"OVERLAPPED",path:"std::libc::types::os::arch::extra",desc:""},{ty:"structfield",name:"Internal",path:"std::libc::types::os::arch::extra",desc:"",parent:'126186'},{ty:"structfield",name:"InternalHigh",path:"std::libc::types::os::arch::extra",desc:"",parent:'126186'},{ty:"structfield",name:"Offset",path:"std::libc::types::os::arch::extra",desc:"",parent:'126186'},{ty:"structfield",name:"OffsetHigh",path:"std::libc::types::os::arch::extra",desc:"",parent:'126186'},{ty:"structfield",name:"hEvent",path:"std::libc::types::os::arch::extra",desc:"",parent:'126186'},{ty:"struct",name:"FILETIME",path:"std::libc::types::os::arch::extra",desc:""},{ty:"structfield",name:"dwLowDateTime",path:"std::libc::types::os::arch::extra",desc:"",parent:'126208'},{ty:"structfield",name:"dwHighDateTime",path:"std::libc::types::os::arch::extra",desc:"",parent:'126208'},{ty:"struct",name:"GUID",path:"std::libc::types::os::arch::extra",desc:""},{ty:"structfield",name:"Data1",path:"std::libc::types::os::arch::extra",desc:"",parent:'126219'},{ty:"structfield",name:"Data2",path:"std::libc::types::os::arch::extra",desc:"",parent:'126219'},{ty:"structfield",name:"Data3",path:"std::libc::types::os::arch::extra",desc:"",parent:'126219'},{ty:"structfield",name:"Data4",path:"std::libc::types::os::arch::extra",desc:"",parent:'126219'},{ty:"struct",name:"WSAPROTOCOLCHAIN",path:"std::libc::types::os::arch::extra",desc:""},{ty:"structfield",name:"ChainLen",path:"std::libc::types::os::arch::extra",desc:"",parent:'126234'},{ty:"structfield",name:"ChainEntries",path:"std::libc::types::os::arch::extra",desc:"",parent:'126234'},{ty:"struct",name:"WSAPROTOCOL_INFO",path:"std::libc::types::os::arch::extra",desc:""},{ty:"structfield",name:"dwServiceFlags1",path:"std::libc::types::os::arch::extra",desc:"",parent:'126247'},{ty:"structfield",name:"dwServiceFlags2",path:"std::libc::types::os::arch::extra",desc:"",parent:'126247'},{ty:"structfield",name:"dwServiceFlags3",path:"std::libc::types::os::arch::extra",desc:"",parent:'126247'},{ty:"structfield",name:"dwServiceFlags4",path:"std::libc::types::os::arch::extra",desc:"",parent:'126247'},{ty:"structfield",name:"dwProviderFlags",path:"std::libc::types::os::arch::extra",desc:"",parent:'126247'},{ty:"structfield",name:"ProviderId",path:"std::libc::types::os::arch::extra",desc:"",parent:'126247'},{ty:"structfield",name:"dwCatalogEntryId",path:"std::libc::types::os::arch::extra",desc:"",parent:'126247'},{ty:"structfield",name:"ProtocolChain",path:"std::libc::types::os::arch::extra",desc:"",parent:'126247'},{ty:"structfield",name:"iVersion",path:"std::libc::types::os::arch::extra",desc:"",parent:'126247'},{ty:"structfield",name:"iAddressFamily",path:"std::libc::types::os::arch::extra",desc:"",parent:'126247'},{ty:"structfield",name:"iMaxSockAddr",path:"std::libc::types::os::arch::extra",desc:"",parent:'126247'},{ty:"structfield",name:"iMinSockAddr",path:"std::libc::types::os::arch::extra",desc:"",parent:'126247'},{ty:"structfield",name:"iSocketType",path:"std::libc::types::os::arch::extra",desc:"",parent:'126247'},{ty:"structfield",name:"iProtocol",path:"std::libc::types::os::arch::extra",desc:"",parent:'126247'},{ty:"structfield",name:"iProtocolMaxOffset",path:"std::libc::types::os::arch::extra",desc:"",parent:'126247'},{ty:"structfield",name:"iNetworkByteOrder",path:"std::libc::types::os::arch::extra",desc:"",parent:'126247'},{ty:"structfield",name:"iSecurityScheme",path:"std::libc::types::os::arch::extra",desc:"",parent:'126247'},{ty:"structfield",name:"dwMessageSize",path:"std::libc::types::os::arch::extra",desc:"",parent:'126247'},{ty:"structfield",name:"dwProviderReserved",path:"std::libc::types::os::arch::extra",desc:"",parent:'126247'},{ty:"structfield",name:"szProtocol",path:"std::libc::types::os::arch::extra",desc:"",parent:'126247'},{ty:"typedef",name:"BOOL",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"BYTE",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"BOOLEAN",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"CCHAR",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"CHAR",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"DWORD",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"DWORDLONG",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"HANDLE",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"HMODULE",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LONG",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"PLONG",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LONG_PTR",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LARGE_INTEGER",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"PLARGE_INTEGER",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPCWSTR",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPCSTR",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPWSTR",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPSTR",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPWCH",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPCH",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPSECURITY_ATTRIBUTES",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPVOID",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPCVOID",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPBYTE",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPWORD",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPDWORD",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPHANDLE",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LRESULT",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"PBOOL",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"WCHAR",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"WORD",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"SIZE_T",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"time64_t",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"int64",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPSTARTUPINFO",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPPROCESS_INFORMATION",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPSYSTEM_INFO",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPMEMORY_BASIC_INFORMATION",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPOVERLAPPED",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPFILETIME",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPWSAPROTOCOLCHAIN",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPWSAPROTOCOL_INFO",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"GROUP",path:"std::libc::types::os::arch::extra",desc:""},{ty:"method",name:"new",path:"std::libc::types::os::arch::extra",desc:"",parent:'126101'},{ty:"mod",name:"consts",path:"std::libc",desc:""},{ty:"mod",name:"os",path:"std::libc::consts",desc:""},{ty:"mod",name:"c95",path:"std::libc::consts::os",desc:""},{ty:"static",name:"EXIT_FAILURE",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"EXIT_SUCCESS",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"RAND_MAX",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"EOF",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"SEEK_SET",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"SEEK_CUR",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"SEEK_END",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"_IOFBF",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"_IONBF",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"_IOLBF",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"BUFSIZ",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"FOPEN_MAX",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"FILENAME_MAX",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"L_tmpnam",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"TMP_MAX",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEINTR",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEBADF",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEACCES",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEFAULT",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEINVAL",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEMFILE",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEWOULDBLOCK",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEINPROGRESS",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEALREADY",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAENOTSOCK",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEDESTADDRREQ",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEMSGSIZE",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEPROTOTYPE",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAENOPROTOOPT",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEPROTONOSUPPORT",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAESOCKTNOSUPPORT",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEOPNOTSUPP",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEPFNOSUPPORT",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEAFNOSUPPORT",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEADDRINUSE",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEADDRNOTAVAIL",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAENETDOWN",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAENETUNREACH",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAENETRESET",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAECONNABORTED",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAECONNRESET",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAENOBUFS",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEISCONN",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAENOTCONN",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAESHUTDOWN",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAETOOMANYREFS",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAETIMEDOUT",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAECONNREFUSED",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAELOOP",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAENAMETOOLONG",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEHOSTDOWN",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEHOSTUNREACH",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAENOTEMPTY",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEPROCLIM",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEUSERS",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEDQUOT",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAESTALE",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEREMOTE",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSASYSNOTREADY",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAVERNOTSUPPORTED",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSANOTINITIALISED",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEDISCON",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAENOMORE",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAECANCELLED",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEINVALIDPROCTABLE",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEINVALIDPROVIDER",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEPROVIDERFAILEDINIT",path:"std::libc::consts::os::c95",desc:""},{ty:"mod",name:"posix88",path:"std::libc::consts::os",desc:""},{ty:"static",name:"O_RDONLY",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"O_WRONLY",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"O_RDWR",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"O_APPEND",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"O_CREAT",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"O_EXCL",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"O_TRUNC",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"S_IFIFO",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"S_IFCHR",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"S_IFBLK",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"S_IFDIR",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"S_IFREG",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"S_IFLNK",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"S_IFMT",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"S_IEXEC",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"S_IWRITE",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"S_IREAD",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"S_IRWXU",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"S_IXUSR",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"S_IWUSR",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"S_IRUSR",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"F_OK",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"R_OK",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"W_OK",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"X_OK",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"STDIN_FILENO",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"STDOUT_FILENO",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"STDERR_FILENO",path:"std::libc::consts::os::posix88",desc:""},{ty:"mod",name:"bsd44",path:"std::libc::consts::os",desc:""},{ty:"static",name:"AF_INET",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"AF_INET6",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"SOCK_STREAM",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"SOCK_DGRAM",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"IPPROTO_TCP",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"IPPROTO_IP",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"IPPROTO_IPV6",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"IP_MULTICAST_TTL",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"IP_MULTICAST_LOOP",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"IP_ADD_MEMBERSHIP",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"IP_DROP_MEMBERSHIP",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"IPV6_ADD_MEMBERSHIP",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"IPV6_DROP_MEMBERSHIP",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"IP_TTL",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"TCP_NODELAY",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"SOL_SOCKET",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"SO_KEEPALIVE",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"SO_BROADCAST",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"SO_REUSEADDR",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"SHUT_RD",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"SHUT_WR",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"SHUT_RDWR",path:"std::libc::consts::os::bsd44",desc:""},{ty:"mod",name:"extra",path:"std::libc::consts::os",desc:""},{ty:"static",name:"TRUE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FALSE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"O_TEXT",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"O_BINARY",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"O_NOINHERIT",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_SUCCESS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_INVALID_FUNCTION",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_FILE_NOT_FOUND",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_ACCESS_DENIED",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_INVALID_HANDLE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_BROKEN_PIPE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_DISK_FULL",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_INSUFFICIENT_BUFFER",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_INVALID_NAME",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_ALREADY_EXISTS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_PIPE_BUSY",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_NO_DATA",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_INVALID_ADDRESS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_PIPE_CONNECTED",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_IO_PENDING",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_FILE_INVALID",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"INVALID_HANDLE_VALUE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"DELETE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"READ_CONTROL",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"SYNCHRONIZE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"WRITE_DAC",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"WRITE_OWNER",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESS_CREATE_PROCESS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESS_CREATE_THREAD",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESS_DUP_HANDLE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESS_QUERY_INFORMATION",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESS_QUERY_LIMITED_INFORMATION",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESS_SET_INFORMATION",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESS_SET_QUOTA",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESS_SUSPEND_RESUME",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESS_TERMINATE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESS_VM_OPERATION",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESS_VM_READ",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESS_VM_WRITE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STARTF_FORCEONFEEDBACK",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STARTF_FORCEOFFFEEDBACK",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STARTF_PREVENTPINNING",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STARTF_RUNFULLSCREEN",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STARTF_TITLEISAPPID",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STARTF_TITLEISLINKNAME",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STARTF_USECOUNTCHARS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STARTF_USEFILLATTRIBUTE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STARTF_USEHOTKEY",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STARTF_USEPOSITION",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STARTF_USESHOWWINDOW",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STARTF_USESIZE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STARTF_USESTDHANDLES",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"WAIT_ABANDONED",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"WAIT_OBJECT_0",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"WAIT_TIMEOUT",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"WAIT_FAILED",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"DUPLICATE_CLOSE_SOURCE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"DUPLICATE_SAME_ACCESS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"INFINITE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STILL_ACTIVE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MEM_COMMIT",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MEM_RESERVE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MEM_DECOMMIT",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MEM_RELEASE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MEM_RESET",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MEM_RESET_UNDO",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MEM_LARGE_PAGES",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MEM_PHYSICAL",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MEM_TOP_DOWN",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MEM_WRITE_WATCH",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PAGE_EXECUTE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PAGE_EXECUTE_READ",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PAGE_EXECUTE_READWRITE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PAGE_EXECUTE_WRITECOPY",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PAGE_NOACCESS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PAGE_READONLY",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PAGE_READWRITE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PAGE_WRITECOPY",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PAGE_GUARD",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PAGE_NOCACHE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PAGE_WRITECOMBINE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"SEC_COMMIT",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"SEC_IMAGE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"SEC_IMAGE_NO_EXECUTE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"SEC_LARGE_PAGES",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"SEC_NOCACHE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"SEC_RESERVE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"SEC_WRITECOMBINE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_MAP_ALL_ACCESS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_MAP_READ",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_MAP_WRITE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_MAP_COPY",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_MAP_EXECUTE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESSOR_ARCHITECTURE_INTEL",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESSOR_ARCHITECTURE_ARM",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESSOR_ARCHITECTURE_IA64",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESSOR_ARCHITECTURE_AMD64",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESSOR_ARCHITECTURE_UNKNOWN",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MOVEFILE_COPY_ALLOWED",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MOVEFILE_CREATE_HARDLINK",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MOVEFILE_DELAY_UNTIL_REBOOT",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MOVEFILE_FAIL_IF_NOT_TRACKABLE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MOVEFILE_REPLACE_EXISTING",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MOVEFILE_WRITE_THROUGH",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"SYMBOLIC_LINK_FLAG_DIRECTORY",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_SHARE_DELETE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_SHARE_READ",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_SHARE_WRITE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"CREATE_ALWAYS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"CREATE_NEW",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"OPEN_ALWAYS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"OPEN_EXISTING",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"TRUNCATE_EXISTING",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_APPEND_DATA",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_READ_DATA",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_WRITE_DATA",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_ARCHIVE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_COMPRESSED",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_DEVICE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_DIRECTORY",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_ENCRYPTED",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_HIDDEN",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_INTEGRITY_STREAM",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_NORMAL",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_NOT_CONTENT_INDEXED",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_NO_SCRUB_DATA",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_OFFLINE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_READONLY",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_REPARSE_POINT",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_SPARSE_FILE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_SYSTEM",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_TEMPORARY",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_VIRTUAL",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_FLAG_BACKUP_SEMANTICS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_FLAG_DELETE_ON_CLOSE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_FLAG_NO_BUFFERING",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_FLAG_OPEN_NO_RECALL",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_FLAG_OPEN_REPARSE_POINT",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_FLAG_OVERLAPPED",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_FLAG_POSIX_SEMANTICS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_FLAG_RANDOM_ACCESS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_FLAG_SESSION_AWARE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_FLAG_SEQUENTIAL_SCAN",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_FLAG_WRITE_THROUGH",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_FLAG_FIRST_PIPE_INSTANCE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_NAME_NORMALIZED",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_NAME_OPENED",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"VOLUME_NAME_DOS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"VOLUME_NAME_GUID",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"VOLUME_NAME_NONE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"VOLUME_NAME_NT",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"GENERIC_READ",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"GENERIC_WRITE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"GENERIC_EXECUTE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"GENERIC_ALL",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_WRITE_ATTRIBUTES",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_READ_ATTRIBUTES",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STANDARD_RIGHTS_READ",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STANDARD_RIGHTS_WRITE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_WRITE_EA",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_READ_EA",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_GENERIC_READ",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_GENERIC_WRITE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_BEGIN",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_CURRENT",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_END",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MAX_PROTOCOL_CHAIN",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"WSAPROTOCOL_LEN",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"INVALID_SOCKET",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"DETACHED_PROCESS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"CREATE_NEW_PROCESS_GROUP",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PIPE_ACCESS_DUPLEX",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PIPE_ACCESS_INBOUND",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PIPE_ACCESS_OUTBOUND",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PIPE_TYPE_BYTE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PIPE_TYPE_MESSAGE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PIPE_READMODE_BYTE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PIPE_READMODE_MESSAGE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PIPE_WAIT",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PIPE_NOWAIT",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PIPE_ACCEPT_REMOTE_CLIENTS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PIPE_REJECT_REMOTE_CLIENTS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PIPE_UNLIMITED_INSTANCES",path:"std::libc::consts::os::extra",desc:""},{ty:"mod",name:"funcs",path:"std::libc",desc:""},{ty:"mod",name:"c95",path:"std::libc::funcs",desc:""},{ty:"mod",name:"ctype",path:"std::libc::funcs::c95",desc:""},{ty:"ffi",name:"isalnum",path:"std::libc::funcs::c95::ctype",desc:""},{ty:"ffi",name:"isalpha",path:"std::libc::funcs::c95::ctype",desc:""},{ty:"ffi",name:"iscntrl",path:"std::libc::funcs::c95::ctype",desc:""},{ty:"ffi",name:"isdigit",path:"std::libc::funcs::c95::ctype",desc:""},{ty:"ffi",name:"isgraph",path:"std::libc::funcs::c95::ctype",desc:""},{ty:"ffi",name:"islower",path:"std::libc::funcs::c95::ctype",desc:""},{ty:"ffi",name:"isprint",path:"std::libc::funcs::c95::ctype",desc:""},{ty:"ffi",name:"ispunct",path:"std::libc::funcs::c95::ctype",desc:""},{ty:"ffi",name:"isspace",path:"std::libc::funcs::c95::ctype",desc:""},{ty:"ffi",name:"isupper",path:"std::libc::funcs::c95::ctype",desc:""},{ty:"ffi",name:"isxdigit",path:"std::libc::funcs::c95::ctype",desc:""},{ty:"ffi",name:"tolower",path:"std::libc::funcs::c95::ctype",desc:""},{ty:"ffi",name:"toupper",path:"std::libc::funcs::c95::ctype",desc:""},{ty:"mod",name:"stdio",path:"std::libc::funcs::c95",desc:""},{ty:"ffi",name:"fopen",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"freopen",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"fflush",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"fclose",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"remove",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"rename",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"tmpfile",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"setvbuf",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"setbuf",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"fgetc",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"fgets",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"fputc",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"fputs",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"puts",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"ungetc",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"fread",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"fwrite",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"fseek",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"ftell",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"rewind",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"fgetpos",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"fsetpos",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"feof",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"ferror",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"perror",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"mod",name:"stdlib",path:"std::libc::funcs::c95",desc:""},{ty:"ffi",name:"abs",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"labs",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"atof",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"atoi",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"strtod",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"strtol",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"strtoul",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"calloc",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"malloc",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"realloc",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"free",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"exit",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"_exit",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"system",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"getenv",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"rand",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"srand",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"mod",name:"string",path:"std::libc::funcs::c95",desc:""},{ty:"ffi",name:"strcpy",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strncpy",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strcat",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strncat",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strcmp",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strncmp",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strcoll",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strchr",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strrchr",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strspn",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strcspn",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strpbrk",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strstr",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strlen",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strerror",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strtok",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strxfrm",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"wcslen",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"memcmp",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"memchr",path:"std::libc::funcs::c95::string",desc:""},{ty:"mod",name:"posix88",path:"std::libc::funcs",desc:""},{ty:"mod",name:"stat_",path:"std::libc::funcs::posix88",desc:""},{ty:"ffi",name:"chmod",path:"std::libc::funcs::posix88::stat_",desc:""},{ty:"ffi",name:"wchmod",path:"std::libc::funcs::posix88::stat_",desc:""},{ty:"ffi",name:"mkdir",path:"std::libc::funcs::posix88::stat_",desc:""},{ty:"ffi",name:"wrmdir",path:"std::libc::funcs::posix88::stat_",desc:""},{ty:"ffi",name:"fstat",path:"std::libc::funcs::posix88::stat_",desc:""},{ty:"ffi",name:"stat",path:"std::libc::funcs::posix88::stat_",desc:""},{ty:"ffi",name:"wstat",path:"std::libc::funcs::posix88::stat_",desc:""},{ty:"ffi",name:"wutime",path:"std::libc::funcs::posix88::stat_",desc:""},{ty:"mod",name:"stdio",path:"std::libc::funcs::posix88",desc:""},{ty:"ffi",name:"popen",path:"std::libc::funcs::posix88::stdio",desc:""},{ty:"ffi",name:"pclose",path:"std::libc::funcs::posix88::stdio",desc:""},{ty:"ffi",name:"fdopen",path:"std::libc::funcs::posix88::stdio",desc:""},{ty:"ffi",name:"fileno",path:"std::libc::funcs::posix88::stdio",desc:""},{ty:"mod",name:"fcntl",path:"std::libc::funcs::posix88",desc:""},{ty:"ffi",name:"open",path:"std::libc::funcs::posix88::fcntl",desc:""},{ty:"ffi",name:"wopen",path:"std::libc::funcs::posix88::fcntl",desc:""},{ty:"ffi",name:"creat",path:"std::libc::funcs::posix88::fcntl",desc:""},{ty:"mod",name:"unistd",path:"std::libc::funcs::posix88",desc:""},{ty:"ffi",name:"access",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"chdir",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"close",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"dup",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"dup2",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"execv",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"execve",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"execvp",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"execvpe",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"getcwd",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"getpid",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"isatty",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"lseek",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"pipe",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"read",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"rmdir",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"unlink",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"write",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"mod",name:"bsd43",path:"std::libc::funcs",desc:""},{ty:"ffi",name:"socket",path:"std::libc::funcs::bsd43",desc:""},{ty:"ffi",name:"connect",path:"std::libc::funcs::bsd43",desc:""},{ty:"ffi",name:"bind",path:"std::libc::funcs::bsd43",desc:""},{ty:"ffi",name:"listen",path:"std::libc::funcs::bsd43",desc:""},{ty:"ffi",name:"accept",path:"std::libc::funcs::bsd43",desc:""},{ty:"ffi",name:"getpeername",path:"std::libc::funcs::bsd43",desc:""},{ty:"ffi",name:"getsockname",path:"std::libc::funcs::bsd43",desc:""},{ty:"ffi",name:"setsockopt",path:"std::libc::funcs::bsd43",desc:""},{ty:"ffi",name:"closesocket",path:"std::libc::funcs::bsd43",desc:""},{ty:"ffi",name:"recv",path:"std::libc::funcs::bsd43",desc:""},{ty:"ffi",name:"send",path:"std::libc::funcs::bsd43",desc:""},{ty:"ffi",name:"recvfrom",path:"std::libc::funcs::bsd43",desc:""},{ty:"ffi",name:"sendto",path:"std::libc::funcs::bsd43",desc:""},{ty:"ffi",name:"shutdown",path:"std::libc::funcs::bsd43",desc:""},{ty:"mod",name:"extra",path:"std::libc::funcs",desc:""},{ty:"mod",name:"kernel32",path:"std::libc::funcs::extra",desc:""},{ty:"ffi",name:"GetEnvironmentVariableW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"SetEnvironmentVariableW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"GetEnvironmentStringsA",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"FreeEnvironmentStringsA",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"GetModuleFileNameW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"CreateDirectoryW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"CopyFileW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"DeleteFileW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"RemoveDirectoryW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"GetCurrentDirectoryW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"SetCurrentDirectoryW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"GetLastError",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"FindFirstFileW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"FindNextFileW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"FindClose",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"DuplicateHandle",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"CloseHandle",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"OpenProcess",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"GetCurrentProcess",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"CreateProcessA",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"WaitForSingleObject",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"TerminateProcess",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"GetExitCodeProcess",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"GetSystemInfo",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"VirtualAlloc",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"VirtualFree",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"VirtualLock",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"VirtualUnlock",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"VirtualProtect",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"VirtualQuery",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"CreateFileMappingW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"MapViewOfFile",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"UnmapViewOfFile",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"MoveFileExW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"CreateSymbolicLinkW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"CreateHardLinkW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"FlushFileBuffers",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"CreateFileW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"GetFinalPathNameByHandleW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"ReadFile",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"WriteFile",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"SetFilePointerEx",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"SetEndOfFile",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"GetSystemTimeAsFileTime",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"QueryPerformanceFrequency",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"QueryPerformanceCounter",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"GetCurrentProcessId",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"CreateNamedPipeW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"ConnectNamedPipe",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"WaitNamedPipeW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"SetNamedPipeHandleState",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"CreateEventW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"GetOverlappedResult",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"DisconnectNamedPipe",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"mod",name:"msvcrt",path:"std::libc::funcs::extra",desc:""},{ty:"ffi",name:"commit",path:"std::libc::funcs::extra::msvcrt",desc:""},{ty:"ffi",name:"get_osfhandle",path:"std::libc::funcs::extra::msvcrt",desc:""},{ty:"ffi",name:"open_osfhandle",path:"std::libc::funcs::extra::msvcrt",desc:""},{ty:"mod",name:"c_str",path:"std",desc:"C-string manipulation and management"},{ty:"struct",name:"CString",path:"std::c_str",desc:"The representation of a C String."},{ty:"struct",name:"CChars",path:"std::c_str",desc:"External iterator for a CString's bytes."},{ty:"fn",name:"from_c_multistring",path:"std::c_str",desc:"Parses a C \"multistring\", eg windows env values or\nthe req->ptr result in a uv_fs_readdir() call."},{ty:"trait",name:"ToCStr",path:"std::c_str",desc:"A generic trait for converting a value to a CString."},{ty:"tymethod",name:"to_c_str",path:"std::c_str",desc:"Copy the receiver into a CString.",parent:'130397'},{ty:"tymethod",name:"to_c_str_unchecked",path:"std::c_str",desc:"Unsafe variant of `to_c_str()` that doesn't check for nulls.",parent:'130397'},{ty:"method",name:"with_c_str",path:"std::c_str",desc:"Work with a temporary CString constructed from the receiver.\nThe provided `*libc::c_char` will be freed immediately upon return.",parent:'130397'},{ty:"method",name:"with_c_str_unchecked",path:"std::c_str",desc:"Unsafe variant of `with_c_str()` that doesn't check for nulls.",parent:'130397'},{ty:"method",name:"clone",path:"std::c_str",desc:"Clone this CString into a new, uniquely owned CString. For safety\nreasons, this is always a deep clone, rather than the usual shallow\nclone.",parent:'129957'},{ty:"method",name:"eq",path:"std::c_str",desc:"",parent:'129957'},{ty:"method",name:"new",path:"std::c_str",desc:"Create a C String from a pointer.",parent:'129957'},{ty:"method",name:"unwrap",path:"std::c_str",desc:"Unwraps the wrapped `*libc::c_char` from the `CString` wrapper.\nAny ownership of the buffer by the `CString` wrapper is forgotten.",parent:'129957'},{ty:"method",name:"with_ref",path:"std::c_str",desc:"Calls a closure with a reference to the underlying `*libc::c_char`.",parent:'129957'},{ty:"method",name:"with_mut_ref",path:"std::c_str",desc:"Calls a closure with a mutable reference to the underlying `*libc::c_char`.",parent:'129957'},{ty:"method",name:"is_null",path:"std::c_str",desc:"Returns true if the CString is a null.",parent:'129957'},{ty:"method",name:"is_not_null",path:"std::c_str",desc:"Returns true if the CString is not null.",parent:'129957'},{ty:"method",name:"owns_buffer",path:"std::c_str",desc:"Returns whether or not the `CString` owns the buffer.",parent:'129957'},{ty:"method",name:"as_bytes",path:"std::c_str",desc:"Converts the CString into a `&[u8]` without copying.\nIncludes the terminating NUL byte.",parent:'129957'},{ty:"method",name:"as_bytes_no_nul",path:"std::c_str",desc:"Converts the CString into a `&[u8]` without copying.\nDoes not include the terminating NUL byte.",parent:'129957'},{ty:"method",name:"as_str",path:"std::c_str",desc:"Converts the CString into a `&str` without copying.\nReturns None if the CString is not UTF-8.",parent:'129957'},{ty:"method",name:"iter",path:"std::c_str",desc:"Return a CString iterator.",parent:'129957'},{ty:"method",name:"drop",path:"std::c_str",desc:"",parent:'129957'},{ty:"method",name:"len",path:"std::c_str",desc:"Return the number of bytes in the CString (not including the NUL terminator).",parent:'129957'},{ty:"method",name:"next",path:"std::c_str",desc:"",parent:'130878'},{ty:"mod",name:"c_vec",path:"std",desc:"Library to interface with chunks of memory allocated in C."},{ty:"struct",name:"CVec",path:"std::c_vec",desc:"The type representing a foreign chunk of memory"},{ty:"method",name:"drop",path:"std::c_vec",desc:"",parent:'131058'},{ty:"method",name:"new",path:"std::c_vec",desc:"Create a `CVec` from a raw pointer to a buffer with a given length.",parent:'131058'},{ty:"method",name:"new_with_dtor",path:"std::c_vec",desc:"Create a `CVec` from a foreign buffer, with a given length,\nand a function to run upon destruction.",parent:'131058'},{ty:"method",name:"as_slice",path:"std::c_vec",desc:"View the stored data as a slice.",parent:'131058'},{ty:"method",name:"as_mut_slice",path:"std::c_vec",desc:"View the stored data as a mutable slice.",parent:'131058'},{ty:"method",name:"get",path:"std::c_vec",desc:"Retrieves an element at a given index, returning `None` if the requested\nindex is greater than the length of the vector.",parent:'131058'},{ty:"method",name:"get_mut",path:"std::c_vec",desc:"Retrieves a mutable element at a given index, returning `None` if the\nrequested index is greater than the length of the vector.",parent:'131058'},{ty:"method",name:"unwrap",path:"std::c_vec",desc:"Unwrap the pointer without running the destructor",parent:'131058'},{ty:"method",name:"len",path:"std::c_vec",desc:"",parent:'131058'},{ty:"mod",name:"os",path:"std",desc:"Higher-level interfaces to libc::* functions and operating system services."},{ty:"struct",name:"Pipe",path:"std::os",desc:""},{ty:"structfield",name:"input",path:"std::os",desc:"",parent:'132296'},{ty:"structfield",name:"out",path:"std::os",desc:"",parent:'132296'},{ty:"struct",name:"MemoryMap",path:"std::os",desc:"A memory mapped file or chunk of memory. This is a very system-specific\ninterface to the OS's memory mapping facilities (`mmap` on POSIX,\n`VirtualAlloc`/`CreateFileMapping` on win32). It makes no attempt at\nabstracting platform differences, besides in error values returned. Consider\nyourself warned."},{ty:"structfield",name:"data",path:"std::os",desc:"Pointer to the memory created or modified by this map.",parent:'133532'},{ty:"structfield",name:"len",path:"std::os",desc:"Number of bytes this map applies to",parent:'133532'},{ty:"structfield",name:"kind",path:"std::os",desc:"Type of mapping",parent:'133532'},{ty:"enum",name:"MemoryMapKind",path:"std::os",desc:"Type of memory map"},{ty:"variant",name:"MapFile",path:"std::os",desc:"Virtual memory map. Usually used to change the permissions of a given\nchunk of memory.  Corresponds to `VirtualAlloc` on Windows.",parent:'133543'},{ty:"variant",name:"MapVirtual",path:"std::os",desc:"Virtual memory map. Usually used to change the permissions of a given\nchunk of memory, or for allocation. Corresponds to `VirtualAlloc` on\nWindows.",parent:'133543'},{ty:"enum",name:"MapOption",path:"std::os",desc:"Options the memory map is created with"},{ty:"variant",name:"MapReadable",path:"std::os",desc:"The memory should be readable",parent:'133550'},{ty:"variant",name:"MapWritable",path:"std::os",desc:"The memory should be writable",parent:'133550'},{ty:"variant",name:"MapExecutable",path:"std::os",desc:"The memory should be executable",parent:'133550'},{ty:"variant",name:"MapAddr",path:"std::os",desc:"Create a map for a specific address range. Corresponds to `MAP_FIXED` on\nPOSIX.",parent:'133550'},{ty:"variant",name:"MapFd",path:"std::os",desc:"Create a memory mapping for a file with a given fd.",parent:'133550'},{ty:"variant",name:"MapOffset",path:"std::os",desc:"When using `MapFd`, the start of the map is `uint` bytes from the start\nof the file.",parent:'133550'},{ty:"variant",name:"MapNonStandardFlags",path:"std::os",desc:"On POSIX, this can be used to specify the default flags passed to\n`mmap`. By default it uses `MAP_PRIVATE` and, if not using `MapFd`,\n`MAP_ANON`. This will override both of those. This is platform-specific\n(the exact values used) and ignored on Windows.",parent:'133550'},{ty:"enum",name:"MapError",path:"std::os",desc:"Possible errors when creating a map."},{ty:"variant",name:"ErrFdNotAvail",path:"std::os",desc:"## The following are POSIX-specific",parent:'133571'},{ty:"variant",name:"ErrInvalidFd",path:"std::os",desc:"fd was not valid",parent:'133571'},{ty:"variant",name:"ErrUnaligned",path:"std::os",desc:"Either the address given by `MapAddr` or offset given by `MapOffset` was\nnot a multiple of `MemoryMap::granularity` (unaligned to page size).",parent:'133571'},{ty:"variant",name:"ErrNoMapSupport",path:"std::os",desc:"With `MapFd`, the fd does not support mapping.",parent:'133571'},{ty:"variant",name:"ErrNoMem",path:"std::os",desc:"If using `MapAddr`, the address + `min_len` was outside of the process's\naddress space. If using `MapFd`, the target of the fd didn't have enough\nresources to fulfill the request.",parent:'133571'},{ty:"variant",name:"ErrZeroLength",path:"std::os",desc:"A zero-length map was requested. This is invalid according to\n[POSIX](http://pubs.opengroup.org/onlinepubs/9699919799/functions/mmap.html).\nNot all platforms obey this, but this wrapper does.",parent:'133571'},{ty:"variant",name:"ErrUnknown",path:"std::os",desc:"Unrecognized error. The inner value is the unrecognized errno.",parent:'133571'},{ty:"variant",name:"ErrUnsupProt",path:"std::os",desc:"## The following are win32-specific",parent:'133571'},{ty:"variant",name:"ErrUnsupOffset",path:"std::os",desc:"When using `MapFd`, `MapOffset` was given (Windows does not support this\nat all)",parent:'133571'},{ty:"variant",name:"ErrAlreadyExists",path:"std::os",desc:"When using `MapFd`, there was already a mapping to the file.",parent:'133571'},{ty:"variant",name:"ErrVirtualAlloc",path:"std::os",desc:"Unrecognized error from `VirtualAlloc`. The inner value is the return\nvalue of GetLastError.",parent:'133571'},{ty:"variant",name:"ErrCreateFileMappingW",path:"std::os",desc:"Unrecognized error from `CreateFileMapping`. The inner value is the\nreturn value of `GetLastError`.",parent:'133571'},{ty:"variant",name:"ErrMapViewOfFile",path:"std::os",desc:"Unrecognized error from `MapViewOfFile`. The inner value is the return\nvalue of `GetLastError`.",parent:'133571'},{ty:"fn",name:"close",path:"std::os",desc:"Delegates to the libc close() function, returning the same return value."},{ty:"fn",name:"getcwd",path:"std::os",desc:""},{ty:"fn",name:"env",path:"std::os",desc:"Returns a vector of (variable, value) pairs for all the environment\nvariables of the current process."},{ty:"fn",name:"env_as_bytes",path:"std::os",desc:"Returns a vector of (variable, value) byte-vector pairs for all the\nenvironment variables of the current process."},{ty:"fn",name:"getenv",path:"std::os",desc:"Fetches the environment variable `n` from the current process, returning\nNone if the variable isn't set."},{ty:"fn",name:"getenv_as_bytes",path:"std::os",desc:"Fetches the environment variable `n` byte vector from the current process,\nreturning None if the variable isn't set."},{ty:"fn",name:"setenv",path:"std::os",desc:"Sets the environment variable `n` to the value `v` for the currently running\nprocess"},{ty:"fn",name:"unsetenv",path:"std::os",desc:"Remove a variable from the environment entirely"},{ty:"fn",name:"pipe",path:"std::os",desc:""},{ty:"fn",name:"dll_filename",path:"std::os",desc:"Returns the proper dll filename for the given basename of a file."},{ty:"fn",name:"self_exe_name",path:"std::os",desc:"Optionally returns the filesystem path of the current executable which is\nrunning. If any failure occurs, None is returned."},{ty:"fn",name:"self_exe_path",path:"std::os",desc:"Optionally returns the filesystem path to the current executable which is\nrunning. Like self_exe_name() but without the binary's name.\nIf any failure occurs, None is returned."},{ty:"fn",name:"homedir",path:"std::os",desc:"Returns the path to the user's home directory, if known."},{ty:"fn",name:"tmpdir",path:"std::os",desc:"Returns the path to a temporary directory."},{ty:"fn",name:"make_absolute",path:"std::os",desc:"Convert a relative path to an absolute path"},{ty:"fn",name:"change_dir",path:"std::os",desc:"Changes the current working directory to the specified path, returning\nwhether the change was completed successfully or not."},{ty:"fn",name:"errno",path:"std::os",desc:"Returns the platform-specific value of errno"},{ty:"fn",name:"last_os_error",path:"std::os",desc:"Get a string representing the platform-dependent last error"},{ty:"fn",name:"set_exit_status",path:"std::os",desc:"Sets the process exit code"},{ty:"fn",name:"get_exit_status",path:"std::os",desc:"Fetches the process's current exit code. This defaults to 0 and can change\nby calling `set_exit_status`."},{ty:"fn",name:"args",path:"std::os",desc:"Returns the arguments which this program was started with (normally passed\nvia the command line)."},{ty:"fn",name:"args_as_bytes",path:"std::os",desc:"Returns the arguments which this program was started with (normally passed\nvia the command line) as byte vectors."},{ty:"fn",name:"page_size",path:"std::os",desc:""},{ty:"mod",name:"win32",path:"std::os",desc:""},{ty:"fn",name:"fill_utf16_buf_and_decode",path:"std::os::win32",desc:""},{ty:"fn",name:"as_utf16_p",path:"std::os::win32",desc:""},{ty:"mod",name:"consts",path:"std::os",desc:""},{ty:"mod",name:"unix",path:"std::os::consts",desc:""},{ty:"static",name:"FAMILY",path:"std::os::consts::unix",desc:""},{ty:"mod",name:"windows",path:"std::os::consts",desc:""},{ty:"static",name:"FAMILY",path:"std::os::consts::windows",desc:""},{ty:"mod",name:"macos",path:"std::os::consts",desc:""},{ty:"static",name:"SYSNAME",path:"std::os::consts::macos",desc:""},{ty:"static",name:"DLL_PREFIX",path:"std::os::consts::macos",desc:""},{ty:"static",name:"DLL_SUFFIX",path:"std::os::consts::macos",desc:""},{ty:"static",name:"DLL_EXTENSION",path:"std::os::consts::macos",desc:""},{ty:"static",name:"EXE_SUFFIX",path:"std::os::consts::macos",desc:""},{ty:"static",name:"EXE_EXTENSION",path:"std::os::consts::macos",desc:""},{ty:"mod",name:"freebsd",path:"std::os::consts",desc:""},{ty:"static",name:"SYSNAME",path:"std::os::consts::freebsd",desc:""},{ty:"static",name:"DLL_PREFIX",path:"std::os::consts::freebsd",desc:""},{ty:"static",name:"DLL_SUFFIX",path:"std::os::consts::freebsd",desc:""},{ty:"static",name:"DLL_EXTENSION",path:"std::os::consts::freebsd",desc:""},{ty:"static",name:"EXE_SUFFIX",path:"std::os::consts::freebsd",desc:""},{ty:"static",name:"EXE_EXTENSION",path:"std::os::consts::freebsd",desc:""},{ty:"mod",name:"linux",path:"std::os::consts",desc:""},{ty:"static",name:"SYSNAME",path:"std::os::consts::linux",desc:""},{ty:"static",name:"DLL_PREFIX",path:"std::os::consts::linux",desc:""},{ty:"static",name:"DLL_SUFFIX",path:"std::os::consts::linux",desc:""},{ty:"static",name:"DLL_EXTENSION",path:"std::os::consts::linux",desc:""},{ty:"static",name:"EXE_SUFFIX",path:"std::os::consts::linux",desc:""},{ty:"static",name:"EXE_EXTENSION",path:"std::os::consts::linux",desc:""},{ty:"mod",name:"android",path:"std::os::consts",desc:""},{ty:"static",name:"SYSNAME",path:"std::os::consts::android",desc:""},{ty:"static",name:"DLL_PREFIX",path:"std::os::consts::android",desc:""},{ty:"static",name:"DLL_SUFFIX",path:"std::os::consts::android",desc:""},{ty:"static",name:"DLL_EXTENSION",path:"std::os::consts::android",desc:""},{ty:"static",name:"EXE_SUFFIX",path:"std::os::consts::android",desc:""},{ty:"static",name:"EXE_EXTENSION",path:"std::os::consts::android",desc:""},{ty:"mod",name:"win32",path:"std::os::consts",desc:""},{ty:"static",name:"SYSNAME",path:"std::os::consts::win32",desc:""},{ty:"static",name:"DLL_PREFIX",path:"std::os::consts::win32",desc:""},{ty:"static",name:"DLL_SUFFIX",path:"std::os::consts::win32",desc:""},{ty:"static",name:"DLL_EXTENSION",path:"std::os::consts::win32",desc:""},{ty:"static",name:"EXE_SUFFIX",path:"std::os::consts::win32",desc:""},{ty:"static",name:"EXE_EXTENSION",path:"std::os::consts::win32",desc:""},{ty:"mod",name:"x86",path:"std::os::consts",desc:""},{ty:"static",name:"ARCH",path:"std::os::consts::x86",desc:""},{ty:"mod",name:"x86_64",path:"std::os::consts",desc:""},{ty:"static",name:"ARCH",path:"std::os::consts::x86_64",desc:""},{ty:"mod",name:"arm",path:"std::os::consts",desc:""},{ty:"static",name:"ARCH",path:"std::os::consts::arm",desc:""},{ty:"mod",name:"mips",path:"std::os::consts",desc:""},{ty:"static",name:"ARCH",path:"std::os::consts::mips",desc:""},{ty:"static",name:"TMPBUF_SZ",path:"std::os",desc:""},{ty:"method",name:"fmt",path:"std::os",desc:"",parent:'133571'},{ty:"method",name:"new",path:"std::os",desc:"Create a new mapping with the given `options`, at least `min_len` bytes long.",parent:'133532'},{ty:"method",name:"granularity",path:"std::os",desc:"Granularity of MapAddr() and MapOffset() parameter values.\nThis may be greater than the value returned by page_size().",parent:'133532'},{ty:"method",name:"drop",path:"std::os",desc:"Unmap the mapping. Fails the task if any of `VirtualFree`,\n`UnmapViewOfFile`, or `CloseHandle` fail.",parent:'133532'},{ty:"mod",name:"io",path:"std",desc:"I/O, including files, networking, timers, and processes"},{ty:"struct",name:"TempDir",path:"std::io",desc:"A wrapper for a path to temporary directory implementing automatic\nscope-based deletion."},{ty:"struct",name:"MemReader",path:"std::io",desc:"Reads from an owned byte vector"},{ty:"struct",name:"BufReader",path:"std::io",desc:"Reads from a fixed-size byte slice"},{ty:"struct",name:"MemWriter",path:"std::io",desc:"Writes to an owned, growable byte vector"},{ty:"struct",name:"BufWriter",path:"std::io",desc:"Writes to a fixed-size byte slice"},{ty:"struct",name:"BufferedReader",path:"std::io",desc:"Wraps a Reader and buffers input from it"},{ty:"struct",name:"BufferedWriter",path:"std::io",desc:"Wraps a Writer and buffers output to it"},{ty:"struct",name:"BufferedStream",path:"std::io",desc:"Wraps a Stream and buffers input and output to and from it."},{ty:"struct",name:"LineBufferedWriter",path:"std::io",desc:"Wraps a Writer and buffers output to it, flushing whenever a newline (`0x0a`,\n`'\\n'`) is detected."},{ty:"struct",name:"ChanReader",path:"std::io",desc:"Allows reading from a rx."},{ty:"struct",name:"ChanWriter",path:"std::io",desc:"Allows writing to a tx."},{ty:"struct",name:"IoError",path:"std::io",desc:"The type passed to I/O condition handlers to indicate error"},{ty:"structfield",name:"kind",path:"std::io",desc:"An enumeration which can be matched against for determining the flavor\nof error.",parent:'148463'},{ty:"structfield",name:"desc",path:"std::io",desc:"A human-readable description about the error",parent:'148463'},{ty:"structfield",name:"detail",path:"std::io",desc:"Detailed information about this error, not always available",parent:'148463'},{ty:"struct",name:"RefReader",path:"std::io",desc:"A `RefReader` is a struct implementing `Reader` which contains a reference\nto another reader. This is often useful when composing streams."},{ty:"structfield",name:"inner",path:"std::io",desc:"The underlying reader which this is referencing",parent:'151141'},{ty:"struct",name:"RefWriter",path:"std::io",desc:"A `RefWriter` is a struct implementing `Writer` which contains a reference\nto another writer. This is often useful when composing streams."},{ty:"structfield",name:"inner",path:"std::io",desc:"The underlying writer which this is referencing",parent:'152113'},{ty:"struct",name:"Lines",path:"std::io",desc:"An iterator that reads a line on each iteration,\nuntil `.read_line()` encounters `EndOfFile`."},{ty:"struct",name:"Chars",path:"std::io",desc:"An iterator that reads a utf8-encoded character on each iteration,\nuntil `.read_char()` encounters `EndOfFile`."},{ty:"struct",name:"IncomingConnections",path:"std::io",desc:"An infinite iterator over incoming connection attempts.\nCalling `next` will block the task until a connection is attempted."},{ty:"struct",name:"FileStat",path:"std::io",desc:"A structure used to describe metadata information about a file. This\nstructure is created through the `stat` method on a `Path`."},{ty:"structfield",name:"path",path:"std::io",desc:"The path that this stat structure is describing",parent:'153281'},{ty:"structfield",name:"size",path:"std::io",desc:"The size of the file, in bytes",parent:'153281'},{ty:"structfield",name:"kind",path:"std::io",desc:"The kind of file this path points to (directory, file, pipe, etc.)",parent:'153281'},{ty:"structfield",name:"perm",path:"std::io",desc:"The file permissions currently on the file",parent:'153281'},{ty:"structfield",name:"created",path:"std::io",desc:"The time that the file was created at, in platform-dependent\nmilliseconds",parent:'153281'},{ty:"structfield",name:"modified",path:"std::io",desc:"The time that this file was last modified, in platform-dependent\nmilliseconds",parent:'153281'},{ty:"structfield",name:"accessed",path:"std::io",desc:"The time that this file was last accessed, in platform-dependent\nmilliseconds",parent:'153281'},{ty:"structfield",name:"unstable",path:"std::io",desc:"Information returned by stat() which is not guaranteed to be\nplatform-independent. This information may be useful on some platforms,\nbut it may have different meanings or no meaning at all on other\nplatforms.",parent:'153281'},{ty:"struct",name:"UnstableFileStat",path:"std::io",desc:"This structure represents all of the possible information which can be\nreturned from a `stat` syscall which is not contained in the `FileStat`\nstructure. This information is not necessarily platform independent, and may\nhave different meanings or no meaning at all on some platforms."},{ty:"structfield",name:"device",path:"std::io",desc:"",parent:'153387'},{ty:"structfield",name:"inode",path:"std::io",desc:"",parent:'153387'},{ty:"structfield",name:"rdev",path:"std::io",desc:"",parent:'153387'},{ty:"structfield",name:"nlink",path:"std::io",desc:"",parent:'153387'},{ty:"structfield",name:"uid",path:"std::io",desc:"",parent:'153387'},{ty:"structfield",name:"gid",path:"std::io",desc:"",parent:'153387'},{ty:"structfield",name:"blksize",path:"std::io",desc:"",parent:'153387'},{ty:"structfield",name:"blocks",path:"std::io",desc:"",parent:'153387'},{ty:"structfield",name:"flags",path:"std::io",desc:"",parent:'153387'},{ty:"structfield",name:"gen",path:"std::io",desc:"",parent:'153387'},{ty:"enum",name:"IoErrorKind",path:"std::io",desc:""},{ty:"variant",name:"OtherIoError",path:"std::io",desc:"",parent:'148741'},{ty:"variant",name:"EndOfFile",path:"std::io",desc:"",parent:'148741'},{ty:"variant",name:"FileNotFound",path:"std::io",desc:"",parent:'148741'},{ty:"variant",name:"PermissionDenied",path:"std::io",desc:"",parent:'148741'},{ty:"variant",name:"ConnectionFailed",path:"std::io",desc:"",parent:'148741'},{ty:"variant",name:"Closed",path:"std::io",desc:"",parent:'148741'},{ty:"variant",name:"ConnectionRefused",path:"std::io",desc:"",parent:'148741'},{ty:"variant",name:"ConnectionReset",path:"std::io",desc:"",parent:'148741'},{ty:"variant",name:"ConnectionAborted",path:"std::io",desc:"",parent:'148741'},{ty:"variant",name:"NotConnected",path:"std::io",desc:"",parent:'148741'},{ty:"variant",name:"BrokenPipe",path:"std::io",desc:"",parent:'148741'},{ty:"variant",name:"PathAlreadyExists",path:"std::io",desc:"",parent:'148741'},{ty:"variant",name:"PathDoesntExist",path:"std::io",desc:"",parent:'148741'},{ty:"variant",name:"MismatchedFileTypeForOperation",path:"std::io",desc:"",parent:'148741'},{ty:"variant",name:"ResourceUnavailable",path:"std::io",desc:"",parent:'148741'},{ty:"variant",name:"IoUnavailable",path:"std::io",desc:"",parent:'148741'},{ty:"variant",name:"InvalidInput",path:"std::io",desc:"",parent:'148741'},{ty:"enum",name:"SeekStyle",path:"std::io",desc:"When seeking, the resulting cursor is offset from a base by the offset given\nto the `seek` function. The base used is specified by this enumeration."},{ty:"variant",name:"SeekSet",path:"std::io",desc:"Seek from the beginning of the stream",parent:'152634'},{ty:"variant",name:"SeekEnd",path:"std::io",desc:"Seek from the end of the stream",parent:'152634'},{ty:"variant",name:"SeekCur",path:"std::io",desc:"Seek from the current position",parent:'152634'},{ty:"enum",name:"FileMode",path:"std::io",desc:"A mode specifies how a file should be opened or created. These modes are\npassed to `File::open_mode` and are used to control where the file is\npositioned when it is initially opened."},{ty:"variant",name:"Open",path:"std::io",desc:"Opens a file positioned at the beginning.",parent:'152771'},{ty:"variant",name:"Append",path:"std::io",desc:"Opens a file positioned at EOF.",parent:'152771'},{ty:"variant",name:"Truncate",path:"std::io",desc:"Opens a file, truncating it if it already exists.",parent:'152771'},{ty:"enum",name:"FileAccess",path:"std::io",desc:"Access permissions with which the file should be opened. `File`s\nopened with `Read` will return an error if written to."},{ty:"variant",name:"Read",path:"std::io",desc:"Read-only access, requests to write will result in an error",parent:'152775'},{ty:"variant",name:"Write",path:"std::io",desc:"Write-only access, requests to read will result in an error",parent:'152775'},{ty:"variant",name:"ReadWrite",path:"std::io",desc:"Read-write access, no requests are denied by default",parent:'152775'},{ty:"enum",name:"FileType",path:"std::io",desc:"Different kinds of files which can be identified by a call to stat"},{ty:"variant",name:"TypeFile",path:"std::io",desc:"This is a normal file, corresponding to `S_IFREG`",parent:'152779'},{ty:"variant",name:"TypeDirectory",path:"std::io",desc:"This file is a directory, corresponding to `S_IFDIR`",parent:'152779'},{ty:"variant",name:"TypeNamedPipe",path:"std::io",desc:"This file is a named pipe, corresponding to `S_IFIFO`",parent:'152779'},{ty:"variant",name:"TypeBlockSpecial",path:"std::io",desc:"This file is a block device, corresponding to `S_IFBLK`",parent:'152779'},{ty:"variant",name:"TypeSymlink",path:"std::io",desc:"This file is a symbolic link to another file, corresponding to `S_IFLNK`",parent:'152779'},{ty:"variant",name:"TypeUnknown",path:"std::io",desc:"The type of this file is not recognized as one of the other categories",parent:'152779'},{ty:"fn",name:"standard_error",path:"std::io",desc:"Creates a standard error for a commonly used flavor of error. The `detail`\nfield of the returned error will always be `None`."},{ty:"mod",name:"test",path:"std::io",desc:"Various utility functions useful for writing I/O tests"},{ty:"fn",name:"next_test_port",path:"std::io::test",desc:"Get a port number, starting at 9600, for use in tests"},{ty:"fn",name:"next_test_unix",path:"std::io::test",desc:"Get a temporary path which could be the location of a unix socket"},{ty:"fn",name:"next_test_ip4",path:"std::io::test",desc:"Get a unique IPv4 localhost:port pair starting at 9600"},{ty:"fn",name:"next_test_ip6",path:"std::io::test",desc:"Get a unique IPv6 localhost:port pair starting at 9600"},{ty:"fn",name:"raise_fd_limit",path:"std::io::test",desc:"Raises the file descriptor limit when running tests if necessary"},{ty:"mod",name:"extensions",path:"std::io",desc:"Utility mixins that apply to all Readers and Writers"},{ty:"struct",name:"Bytes",path:"std::io::extensions",desc:"An iterator that reads a single byte on each iteration,\nuntil `.read_byte()` returns `EndOfFile`."},{ty:"fn",name:"u64_to_le_bytes",path:"std::io::extensions",desc:""},{ty:"fn",name:"u64_to_be_bytes",path:"std::io::extensions",desc:""},{ty:"fn",name:"u64_from_be_bytes",path:"std::io::extensions",desc:""},{ty:"method",name:"new",path:"std::io::extensions",desc:"",parent:'138710'},{ty:"method",name:"next",path:"std::io::extensions",desc:"",parent:'138710'},{ty:"mod",name:"fs",path:"std::io",desc:"Synchronous File I/O"},{ty:"struct",name:"File",path:"std::io::fs",desc:"Unconstrained file access type that exposes read and write operations"},{ty:"struct",name:"Directories",path:"std::io::fs",desc:"An iterator which walks over a directory"},{ty:"fn",name:"unlink",path:"std::io::fs",desc:"Unlink a file from the underlying filesystem."},{ty:"fn",name:"stat",path:"std::io::fs",desc:"Given a path, query the file system to get information about a file,\ndirectory, etc. This function will traverse symlinks to query\ninformation about the destination file."},{ty:"fn",name:"lstat",path:"std::io::fs",desc:"Perform the same operation as the `stat` function, except that this\nfunction does not traverse through symlinks. This will return\ninformation about the symlink file instead of the file that it points\nto."},{ty:"fn",name:"rename",path:"std::io::fs",desc:"Rename a file or directory to a new name."},{ty:"fn",name:"copy",path:"std::io::fs",desc:"Copies the contents of one file to another. This function will also\ncopy the permission bits of the original file to the destination file."},{ty:"fn",name:"chmod",path:"std::io::fs",desc:"Changes the permission mode bits found on a file or a directory. This\nfunction takes a mask from the `io` module"},{ty:"fn",name:"chown",path:"std::io::fs",desc:"Change the user and group owners of a file at the specified path."},{ty:"fn",name:"link",path:"std::io::fs",desc:"Creates a new hard link on the filesystem. The `dst` path will be a\nlink pointing to the `src` path. Note that systems often require these\ntwo paths to both be located on the same filesystem."},{ty:"fn",name:"symlink",path:"std::io::fs",desc:"Creates a new symbolic link on the filesystem. The `dst` path will be a\nsymlink pointing to the `src` path."},{ty:"fn",name:"readlink",path:"std::io::fs",desc:"Reads a symlink, returning the file that the symlink points to."},{ty:"fn",name:"mkdir",path:"std::io::fs",desc:"Create a new, empty directory at the provided path"},{ty:"fn",name:"rmdir",path:"std::io::fs",desc:"Remove an existing, empty directory"},{ty:"fn",name:"readdir",path:"std::io::fs",desc:"Retrieve a vector containing all entries within a provided directory"},{ty:"fn",name:"walk_dir",path:"std::io::fs",desc:"Returns an iterator which will recursively walk the directory structure\nrooted at `path`. The path given will not be iterated over, and this will\nperform iteration in a top-down order."},{ty:"fn",name:"mkdir_recursive",path:"std::io::fs",desc:"Recursively create a directory and all of its parent components if they\nare missing."},{ty:"fn",name:"rmdir_recursive",path:"std::io::fs",desc:"Removes a directory at this path, after removing all its contents. Use\ncarefully!"},{ty:"fn",name:"change_file_times",path:"std::io::fs",desc:"Changes the timestamps for a file's last modification and access time.\nThe file at the path specified will have its last access time set to\n`atime` and its modification time set to `mtime`. The times specified should\nbe in milliseconds."},{ty:"method",name:"open_mode",path:"std::io::fs",desc:"Open a file at `path` in the mode specified by the `mode` and `access`\narguments",parent:'139455'},{ty:"method",name:"open",path:"std::io::fs",desc:"Attempts to open a file in read-only mode. This function is equivalent to\n`File::open_mode(path, Open, Read)`, and will raise all of the same\nerrors that `File::open_mode` does.",parent:'139455'},{ty:"method",name:"create",path:"std::io::fs",desc:"Attempts to create a file in write-only mode. This function is\nequivalent to `File::open_mode(path, Truncate, Write)`, and will\nraise all of the same errors that `File::open_mode` does.",parent:'139455'},{ty:"method",name:"path",path:"std::io::fs",desc:"Returns the original path which was used to open this file.",parent:'139455'},{ty:"method",name:"fsync",path:"std::io::fs",desc:"Synchronizes all modifications to this file to its permanent storage\ndevice. This will flush any internal buffers necessary to perform this\noperation.",parent:'139455'},{ty:"method",name:"datasync",path:"std::io::fs",desc:"This function is similar to `fsync`, except that it may not synchronize\nfile metadata to the filesystem. This is intended for use case which\nmust synchronize content, but don't need the metadata on disk. The goal\nof this method is to reduce disk operations.",parent:'139455'},{ty:"method",name:"truncate",path:"std::io::fs",desc:"Either truncates or extends the underlying file, updating the size of\nthis file to become `size`. This is equivalent to unix's `truncate`\nfunction.",parent:'139455'},{ty:"method",name:"eof",path:"std::io::fs",desc:"Tests whether this stream has reached EOF.",parent:'139455'},{ty:"method",name:"next",path:"std::io::fs",desc:"",parent:'140105'},{ty:"method",name:"read",path:"std::io::fs",desc:"",parent:'139455'},{ty:"method",name:"write",path:"std::io::fs",desc:"",parent:'139455'},{ty:"method",name:"tell",path:"std::io::fs",desc:"",parent:'139455'},{ty:"method",name:"seek",path:"std::io::fs",desc:"",parent:'139455'},{ty:"mod",name:"net",path:"std::io",desc:"Networking I/O"},{ty:"mod",name:"addrinfo",path:"std::io::net",desc:"Synchronous DNS Resolution"},{ty:"struct",name:"Hint",path:"std::io::net::addrinfo",desc:"This structure is used to provide hints when fetching addresses for a\nremote host to control how the lookup is performed."},{ty:"structfield",name:"family",path:"std::io::net::addrinfo",desc:"",parent:'140693'},{ty:"structfield",name:"socktype",path:"std::io::net::addrinfo",desc:"",parent:'140693'},{ty:"structfield",name:"protocol",path:"std::io::net::addrinfo",desc:"",parent:'140693'},{ty:"structfield",name:"flags",path:"std::io::net::addrinfo",desc:"",parent:'140693'},{ty:"struct",name:"Info",path:"std::io::net::addrinfo",desc:""},{ty:"structfield",name:"address",path:"std::io::net::addrinfo",desc:"",parent:'140710'},{ty:"structfield",name:"family",path:"std::io::net::addrinfo",desc:"",parent:'140710'},{ty:"structfield",name:"socktype",path:"std::io::net::addrinfo",desc:"",parent:'140710'},{ty:"structfield",name:"protocol",path:"std::io::net::addrinfo",desc:"",parent:'140710'},{ty:"structfield",name:"flags",path:"std::io::net::addrinfo",desc:"",parent:'140710'},{ty:"enum",name:"SocketType",path:"std::io::net::addrinfo",desc:"Hints to the types of sockets that are desired when looking up hosts"},{ty:"variant",name:"Stream",path:"std::io::net::addrinfo",desc:"",parent:'140678'},{ty:"variant",name:"Datagram",path:"std::io::net::addrinfo",desc:"",parent:'140678'},{ty:"variant",name:"Raw",path:"std::io::net::addrinfo",desc:"",parent:'140678'},{ty:"enum",name:"Flag",path:"std::io::net::addrinfo",desc:"Flags which can be or'd into the `flags` field of a `Hint`. These are used\nto manipulate how a query is performed."},{ty:"variant",name:"AddrConfig",path:"std::io::net::addrinfo",desc:"",parent:'140682'},{ty:"variant",name:"All",path:"std::io::net::addrinfo",desc:"",parent:'140682'},{ty:"variant",name:"CanonName",path:"std::io::net::addrinfo",desc:"",parent:'140682'},{ty:"variant",name:"NumericHost",path:"std::io::net::addrinfo",desc:"",parent:'140682'},{ty:"variant",name:"NumericServ",path:"std::io::net::addrinfo",desc:"",parent:'140682'},{ty:"variant",name:"Passive",path:"std::io::net::addrinfo",desc:"",parent:'140682'},{ty:"variant",name:"V4Mapped",path:"std::io::net::addrinfo",desc:"",parent:'140682'},{ty:"enum",name:"Protocol",path:"std::io::net::addrinfo",desc:"A transport protocol associated with either a hint or a return value of\n`lookup`"},{ty:"variant",name:"TCP",path:"std::io::net::addrinfo",desc:"",parent:'140690'},{ty:"variant",name:"UDP",path:"std::io::net::addrinfo",desc:"",parent:'140690'},{ty:"fn",name:"get_host_addresses",path:"std::io::net::addrinfo",desc:"Easy name resolution. Given a hostname, returns the list of IP addresses for\nthat hostname."},{ty:"mod",name:"tcp",path:"std::io::net",desc:"TCP network connections"},{ty:"struct",name:"TcpStream",path:"std::io::net::tcp",desc:"A structure which represents a TCP stream between a local socket and a\nremote socket."},{ty:"struct",name:"TcpListener",path:"std::io::net::tcp",desc:"A structure representing a socket server. This listener is used to create a\n`TcpAcceptor` which can be used to accept sockets on a local port."},{ty:"struct",name:"TcpAcceptor",path:"std::io::net::tcp",desc:"The accepting half of a TCP socket server. This structure is created through\na `TcpListener`'s `listen` method, and this object can be used to accept new\n`TcpStream` instances."},{ty:"method",name:"connect",path:"std::io::net::tcp",desc:"Creates a TCP connection to a remote socket address.",parent:'140826'},{ty:"method",name:"peer_name",path:"std::io::net::tcp",desc:"Returns the socket address of the remote peer of this TCP connection.",parent:'140826'},{ty:"method",name:"socket_name",path:"std::io::net::tcp",desc:"Returns the socket address of the local half of this TCP connection.",parent:'140826'},{ty:"method",name:"clone",path:"std::io::net::tcp",desc:"Creates a new handle to this TCP stream, allowing for simultaneous reads\nand writes of this connection.",parent:'140826'},{ty:"method",name:"read",path:"std::io::net::tcp",desc:"",parent:'140826'},{ty:"method",name:"write",path:"std::io::net::tcp",desc:"",parent:'140826'},{ty:"method",name:"bind",path:"std::io::net::tcp",desc:"Creates a new `TcpListener` which will be bound to the specified local\nsocket address. This listener is not ready for accepting connections,\n`listen` must be called on it before that's possible.",parent:'140954'},{ty:"method",name:"socket_name",path:"std::io::net::tcp",desc:"Returns the local socket address of this listener.",parent:'140954'},{ty:"method",name:"listen",path:"std::io::net::tcp",desc:"",parent:'140954'},{ty:"method",name:"accept",path:"std::io::net::tcp",desc:"",parent:'141035'},{ty:"mod",name:"udp",path:"std::io::net",desc:""},{ty:"struct",name:"UdpSocket",path:"std::io::net::udp",desc:""},{ty:"struct",name:"UdpStream",path:"std::io::net::udp",desc:""},{ty:"method",name:"bind",path:"std::io::net::udp",desc:"",parent:'141075'},{ty:"method",name:"recvfrom",path:"std::io::net::udp",desc:"",parent:'141075'},{ty:"method",name:"sendto",path:"std::io::net::udp",desc:"",parent:'141075'},{ty:"method",name:"connect",path:"std::io::net::udp",desc:"",parent:'141075'},{ty:"method",name:"socket_name",path:"std::io::net::udp",desc:"",parent:'141075'},{ty:"method",name:"clone",path:"std::io::net::udp",desc:"Creates a new handle to this UDP socket, allowing for simultaneous reads\nand writes of the socket.",parent:'141075'},{ty:"method",name:"as_socket",path:"std::io::net::udp",desc:"",parent:'141201'},{ty:"method",name:"disconnect",path:"std::io::net::udp",desc:"",parent:'141201'},{ty:"method",name:"read",path:"std::io::net::udp",desc:"",parent:'141201'},{ty:"method",name:"write",path:"std::io::net::udp",desc:"",parent:'141201'},{ty:"mod",name:"ip",path:"std::io::net",desc:""},{ty:"struct",name:"SocketAddr",path:"std::io::net::ip",desc:""},{ty:"structfield",name:"ip",path:"std::io::net::ip",desc:"",parent:'142826'},{ty:"structfield",name:"port",path:"std::io::net::ip",desc:"",parent:'142826'},{ty:"enum",name:"IpAddr",path:"std::io::net::ip",desc:""},{ty:"variant",name:"Ipv4Addr",path:"std::io::net::ip",desc:"",parent:'141357'},{ty:"variant",name:"Ipv6Addr",path:"std::io::net::ip",desc:"",parent:'141357'},{ty:"typedef",name:"Port",path:"std::io::net::ip",desc:""},{ty:"method",name:"hash",path:"std::io::net::ip",desc:"",parent:'141357'},{ty:"method",name:"clone",path:"std::io::net::ip",desc:"",parent:'141357'},{ty:"method",name:"equals",path:"std::io::net::ip",desc:"",parent:'141357'},{ty:"method",name:"eq",path:"std::io::net::ip",desc:"",parent:'141357'},{ty:"method",name:"ne",path:"std::io::net::ip",desc:"",parent:'141357'},{ty:"method",name:"fmt",path:"std::io::net::ip",desc:"",parent:'141357'},{ty:"method",name:"hash",path:"std::io::net::ip",desc:"",parent:'142826'},{ty:"method",name:"clone",path:"std::io::net::ip",desc:"",parent:'142826'},{ty:"method",name:"equals",path:"std::io::net::ip",desc:"",parent:'142826'},{ty:"method",name:"eq",path:"std::io::net::ip",desc:"",parent:'142826'},{ty:"method",name:"ne",path:"std::io::net::ip",desc:"",parent:'142826'},{ty:"method",name:"fmt",path:"std::io::net::ip",desc:"",parent:'142826'},{ty:"method",name:"from_str",path:"std::io::net::ip",desc:"",parent:'141357'},{ty:"method",name:"from_str",path:"std::io::net::ip",desc:"",parent:'142826'},{ty:"mod",name:"unix",path:"std::io::net",desc:"Named pipes"},{ty:"struct",name:"UnixStream",path:"std::io::net::unix",desc:"A stream which communicates over a named pipe."},{ty:"struct",name:"UnixListener",path:"std::io::net::unix",desc:""},{ty:"struct",name:"UnixAcceptor",path:"std::io::net::unix",desc:""},{ty:"method",name:"connect",path:"std::io::net::unix",desc:"Connect to a pipe named by `path`. This will attempt to open a\nconnection to the underlying socket.",parent:'144816'},{ty:"method",name:"clone",path:"std::io::net::unix",desc:"",parent:'144816'},{ty:"method",name:"read",path:"std::io::net::unix",desc:"",parent:'144816'},{ty:"method",name:"write",path:"std::io::net::unix",desc:"",parent:'144816'},{ty:"method",name:"bind",path:"std::io::net::unix",desc:"Creates a new listener, ready to receive incoming connections on the\nspecified socket. The server will be named by `path`.",parent:'144926'},{ty:"method",name:"listen",path:"std::io::net::unix",desc:"",parent:'144926'},{ty:"method",name:"accept",path:"std::io::net::unix",desc:"",parent:'145000'},{ty:"mod",name:"pipe",path:"std::io",desc:"Synchronous, in-memory pipes."},{ty:"struct",name:"PipeStream",path:"std::io::pipe",desc:""},{ty:"method",name:"open",path:"std::io::pipe",desc:"Consumes a file descriptor to return a pipe stream that will have\nsynchronous, but non-blocking reads/writes. This is useful if the file\ndescriptor is acquired via means other than the standard methods.",parent:'145032'},{ty:"method",name:"clone",path:"std::io::pipe",desc:"",parent:'145032'},{ty:"method",name:"read",path:"std::io::pipe",desc:"",parent:'145032'},{ty:"method",name:"write",path:"std::io::pipe",desc:"",parent:'145032'},{ty:"mod",name:"process",path:"std::io",desc:"Bindings for executing child processes"},{ty:"struct",name:"Process",path:"std::io::process",desc:"Representation of a running or exited child process."},{ty:"structfield",name:"stdin",path:"std::io::process",desc:"Handle to the child's stdin, if the `stdin` field of this process's\n`ProcessConfig` was `CreatePipe`. By default, this handle is `Some`.",parent:'145161'},{ty:"structfield",name:"stdout",path:"std::io::process",desc:"Handle to the child's stdout, if the `stdout` field of this process's\n`ProcessConfig` was `CreatePipe`. By default, this handle is `Some`.",parent:'145161'},{ty:"structfield",name:"stderr",path:"std::io::process",desc:"Handle to the child's stderr, if the `stderr` field of this process's\n`ProcessConfig` was `CreatePipe`. By default, this handle is `Some`.",parent:'145161'},{ty:"structfield",name:"extra_io",path:"std::io::process",desc:"Extra I/O handles as configured by the original `ProcessConfig` when\nthis process was created. This is by default empty.",parent:'145161'},{ty:"struct",name:"ProcessConfig",path:"std::io::process",desc:"This configuration describes how a new process should be spawned. A blank\nconfiguration can be created with `ProcessConfig::new()`. It is also\nrecommented to use a functional struct update pattern when creating process\nconfiguration:"},{ty:"structfield",name:"program",path:"std::io::process",desc:"Path to the program to run",parent:'145188'},{ty:"structfield",name:"args",path:"std::io::process",desc:"Arguments to pass to the program (doesn't include the program itself)",parent:'145188'},{ty:"structfield",name:"env",path:"std::io::process",desc:"Optional environment to specify for the program. If this is None, then\nit will inherit the current process's environment.",parent:'145188'},{ty:"structfield",name:"cwd",path:"std::io::process",desc:"Optional working directory for the new process. If this is None, then\nthe current directory of the running process is inherited.",parent:'145188'},{ty:"structfield",name:"stdin",path:"std::io::process",desc:"Configuration for the child process's stdin handle (file descriptor 0).\nThis field defaults to `CreatePipe(true, false)` so the input can be\nwritten to.",parent:'145188'},{ty:"structfield",name:"stdout",path:"std::io::process",desc:"Configuration for the child process's stdout handle (file descriptor 1).\nThis field defaults to `CreatePipe(false, true)` so the output can be\ncollected.",parent:'145188'},{ty:"structfield",name:"stderr",path:"std::io::process",desc:"Configuration for the child process's stdout handle (file descriptor 2).\nThis field defaults to `CreatePipe(false, true)` so the output can be\ncollected.",parent:'145188'},{ty:"structfield",name:"extra_io",path:"std::io::process",desc:"Any number of streams/file descriptors/pipes may be attached to this\nprocess. This list enumerates the file descriptors and such for the\nprocess to be spawned, and the file descriptors inherited will start at\n3 and go to the length of this array. The first three file descriptors\n(stdin/stdout/stderr) are configured with the `stdin`, `stdout`, and\n`stderr` fields.",parent:'145188'},{ty:"structfield",name:"uid",path:"std::io::process",desc:"Sets the child process's user id. This translates to a `setuid` call in\nthe child process. Setting this value on windows will cause the spawn to\nfail. Failure in the `setuid` call on unix will also cause the spawn to\nfail.",parent:'145188'},{ty:"structfield",name:"gid",path:"std::io::process",desc:"Similar to `uid`, but sets the group id of the child process. This has\nthe same semantics as the `uid` field.",parent:'145188'},{ty:"structfield",name:"detach",path:"std::io::process",desc:"If true, the child process is spawned in a detached state. On unix, this\nmeans that the child is the leader of a new process group.",parent:'145188'},{ty:"struct",name:"ProcessOutput",path:"std::io::process",desc:"The output of a finished process."},{ty:"structfield",name:"status",path:"std::io::process",desc:"The status (exit code) of the process.",parent:'145250'},{ty:"structfield",name:"output",path:"std::io::process",desc:"The data that the process wrote to stdout.",parent:'145250'},{ty:"structfield",name:"error",path:"std::io::process",desc:"The data that the process wrote to stderr.",parent:'145250'},{ty:"enum",name:"StdioContainer",path:"std::io::process",desc:"Describes what to do with a standard io stream for a child process."},{ty:"variant",name:"Ignored",path:"std::io::process",desc:"This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",parent:'145264'},{ty:"variant",name:"InheritFd",path:"std::io::process",desc:"The specified file descriptor is inherited for the stream which it is\nspecified for.",parent:'145264'},{ty:"variant",name:"CreatePipe",path:"std::io::process",desc:"Creates a pipe for the specified file descriptor which will be created\nwhen the process is spawned.",parent:'145264'},{ty:"enum",name:"ProcessExit",path:"std::io::process",desc:"Describes the result of a process after it has terminated.\nNote that Windows have no signals, so the result is usually ExitStatus."},{ty:"variant",name:"ExitStatus",path:"std::io::process",desc:"Normal termination with an exit status.",parent:'145277'},{ty:"variant",name:"ExitSignal",path:"std::io::process",desc:"Termination by signal, with the signal number.",parent:'145277'},{ty:"static",name:"PleaseExitSignal",path:"std::io::process",desc:"Signal a process to exit, without forcibly killing it. Corresponds to\nSIGTERM on unix platforms."},{ty:"static",name:"MustDieSignal",path:"std::io::process",desc:"Signal a process to exit immediately, forcibly killing it. Corresponds to\nSIGKILL on unix platforms."},{ty:"method",name:"eq",path:"std::io::process",desc:"",parent:'145277'},{ty:"method",name:"ne",path:"std::io::process",desc:"",parent:'145277'},{ty:"method",name:"fmt",path:"std::io::process",desc:"Format a ProcessExit enum, to nicely present the information.",parent:'145277'},{ty:"method",name:"success",path:"std::io::process",desc:"Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",parent:'145277'},{ty:"method",name:"matches_exit_status",path:"std::io::process",desc:"Checks whether this ProcessExit matches the given exit status.\nTermination by signal will never match an exit code.",parent:'145277'},{ty:"method",name:"new",path:"std::io::process",desc:"Creates a new configuration with blanks as all of the defaults. This is\nuseful when using functional struct updates:",parent:'145188'},{ty:"method",name:"new",path:"std::io::process",desc:"Creates a new process for the specified program/arguments, using\notherwise default configuration.",parent:'145161'},{ty:"method",name:"output",path:"std::io::process",desc:"Executes the specified program with arguments, waiting for it to finish\nand collecting all of its output.",parent:'145161'},{ty:"method",name:"status",path:"std::io::process",desc:"Executes a child process and collects its exit status. This will block\nwaiting for the child to exit.",parent:'145161'},{ty:"method",name:"configure",path:"std::io::process",desc:"Creates a new process with the specified configuration.",parent:'145161'},{ty:"method",name:"kill",path:"std::io::process",desc:"Sends `signal` to another process in the system identified by `id`.",parent:'145161'},{ty:"method",name:"id",path:"std::io::process",desc:"Returns the process id of this child process",parent:'145161'},{ty:"method",name:"signal",path:"std::io::process",desc:"Sends the specified signal to the child process, returning whether the\nsignal could be delivered or not.",parent:'145161'},{ty:"method",name:"signal_exit",path:"std::io::process",desc:"Sends a signal to this child requesting that it exits. This is\nequivalent to sending a SIGTERM on unix platforms.",parent:'145161'},{ty:"method",name:"signal_kill",path:"std::io::process",desc:"Sends a signal to this child forcing it to exit. This is equivalent to\nsending a SIGKILL on unix platforms.",parent:'145161'},{ty:"method",name:"wait",path:"std::io::process",desc:"Wait for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",parent:'145161'},{ty:"method",name:"wait_with_output",path:"std::io::process",desc:"Simultaneously wait for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning a `ProcessOutput`\ninstance.",parent:'145161'},{ty:"method",name:"drop",path:"std::io::process",desc:"",parent:'145161'},{ty:"mod",name:"signal",path:"std::io",desc:"Signal handling"},{ty:"struct",name:"Listener",path:"std::io::signal",desc:"Listener provides a receiver to listen for registered signals."},{ty:"structfield",name:"rx",path:"std::io::signal",desc:"Clients of Listener can `recv()` on this receiver. This is exposed to\nallow selection over it as well as manipulation of the receiver\ndirectly.",parent:'146717'},{ty:"enum",name:"Signum",path:"std::io::signal",desc:"Signals that can be sent and received"},{ty:"variant",name:"Break",path:"std::io::signal",desc:"Equivalent to SIGBREAK, delivered when the user presses Ctrl-Break.",parent:'146065'},{ty:"variant",name:"HangUp",path:"std::io::signal",desc:"Equivalent to SIGHUP, delivered when the user closes the terminal\nwindow. On delivery of HangUp, the program is given approximately\n10 seconds to perform any cleanup. After that, Windows will\nunconditionally terminate it.",parent:'146065'},{ty:"variant",name:"Interrupt",path:"std::io::signal",desc:"Equivalent to SIGINT, delivered when the user presses Ctrl-c.",parent:'146065'},{ty:"variant",name:"Quit",path:"std::io::signal",desc:"Equivalent to SIGQUIT, delivered when the user presses Ctrl-\\.",parent:'146065'},{ty:"variant",name:"StopTemporarily",path:"std::io::signal",desc:"Equivalent to SIGTSTP, delivered when the user presses Ctrl-z.",parent:'146065'},{ty:"variant",name:"User1",path:"std::io::signal",desc:"Equivalent to SIGUSR1.",parent:'146065'},{ty:"variant",name:"User2",path:"std::io::signal",desc:"Equivalent to SIGUSR2.",parent:'146065'},{ty:"variant",name:"WindowSizeChange",path:"std::io::signal",desc:"Equivalent to SIGWINCH, delivered when the console has been resized.\nWindowSizeChange may not be delivered in a timely manner; size change\nwill only be detected when the cursor is being moved.",parent:'146065'},{ty:"method",name:"fmt",path:"std::io::signal",desc:"",parent:'146065'},{ty:"method",name:"hash",path:"std::io::signal",desc:"",parent:'146065'},{ty:"method",name:"eq",path:"std::io::signal",desc:"",parent:'146065'},{ty:"method",name:"ne",path:"std::io::signal",desc:"",parent:'146065'},{ty:"method",name:"new",path:"std::io::signal",desc:"Creates a new listener for signals. Once created, signals are bound via\nthe `register` method (otherwise nothing will ever be received)",parent:'146717'},{ty:"method",name:"register",path:"std::io::signal",desc:"Listen for a signal, returning true when successfully registered for\nsignum. Signals can be received using `recv()`.",parent:'146717'},{ty:"method",name:"unregister",path:"std::io::signal",desc:"Unregisters a signal. If this listener currently had a handler\nregistered for the signal, then it will stop receiving any more\nnotification about the signal. If the signal has already been received,\nit may still be returned by `recv`.",parent:'146717'},{ty:"mod",name:"stdio",path:"std::io",desc:"Non-blocking access to stdin, stdout, and stderr."},{ty:"struct",name:"StdReader",path:"std::io::stdio",desc:"Representation of a reader of a standard input stream"},{ty:"struct",name:"StdWriter",path:"std::io::stdio",desc:"Representation of a writer to a standard output stream"},{ty:"fn",name:"stdin",path:"std::io::stdio",desc:"Creates a new non-blocking handle to the stdin of the current process."},{ty:"fn",name:"stdin_raw",path:"std::io::stdio",desc:"Creates a new non-blocking handle to the stdin of the current process."},{ty:"fn",name:"stdout",path:"std::io::stdio",desc:"Creates a line-buffered handle to the stdout of the current process."},{ty:"fn",name:"stdout_raw",path:"std::io::stdio",desc:"Creates an unbuffered handle to the stdout of the current process"},{ty:"fn",name:"stderr",path:"std::io::stdio",desc:"Creates a line-buffered handle to the stderr of the current process."},{ty:"fn",name:"stderr_raw",path:"std::io::stdio",desc:"Creates an unbuffered handle to the stderr of the current process"},{ty:"fn",name:"set_stdout",path:"std::io::stdio",desc:"Resets the task-local stdout handle to the specified writer"},{ty:"fn",name:"set_stderr",path:"std::io::stdio",desc:"Resets the task-local stderr handle to the specified writer"},{ty:"fn",name:"flush",path:"std::io::stdio",desc:"Flushes the local task's stdout handle."},{ty:"fn",name:"print",path:"std::io::stdio",desc:"Prints a string to the stdout of the current process. No newline is emitted\nafter the string is printed."},{ty:"fn",name:"println",path:"std::io::stdio",desc:"Prints a string as a line. to the stdout of the current process. A literal\n`\\n` character is printed to the console after the string."},{ty:"fn",name:"print_args",path:"std::io::stdio",desc:"Similar to `print`, but takes a `fmt::Arguments` structure to be compatible\nwith the `format_args!` macro."},{ty:"fn",name:"println_args",path:"std::io::stdio",desc:"Similar to `println`, but takes a `fmt::Arguments` structure to be\ncompatible with the `format_args!` macro."},{ty:"method",name:"read",path:"std::io::stdio",desc:"",parent:'147520'},{ty:"method",name:"winsize",path:"std::io::stdio",desc:"Gets the size of this output window, if possible. This is typically used\nwhen the writer is attached to something like a terminal, this is used\nto fetch the dimensions of the terminal.",parent:'147588'},{ty:"method",name:"set_raw",path:"std::io::stdio",desc:"Controls whether this output stream is a \"raw stream\" or simply a normal\nstream.",parent:'147588'},{ty:"method",name:"isatty",path:"std::io::stdio",desc:"Returns whether this stream is attached to a TTY instance or not.",parent:'147588'},{ty:"method",name:"write",path:"std::io::stdio",desc:"",parent:'147588'},{ty:"mod",name:"timer",path:"std::io",desc:"Synchronous Timers"},{ty:"struct",name:"Timer",path:"std::io::timer",desc:"A synchronous timer object"},{ty:"fn",name:"sleep",path:"std::io::timer",desc:"Sleep the current task for `msecs` milliseconds."},{ty:"method",name:"new",path:"std::io::timer",desc:"Creates a new timer which can be used to put the current task to sleep\nfor a number of milliseconds, or to possibly create channels which will\nget notified after an amount of time has passed.",parent:'147704'},{ty:"method",name:"sleep",path:"std::io::timer",desc:"Blocks the current task for `msecs` milliseconds.",parent:'147704'},{ty:"method",name:"oneshot",path:"std::io::timer",desc:"Creates a oneshot receiver which will have a notification sent when\n`msecs` milliseconds has elapsed. This does *not* block the current\ntask, but instead returns immediately.",parent:'147704'},{ty:"method",name:"periodic",path:"std::io::timer",desc:"Creates a receiver which will have a continuous stream of notifications\nbeing sent every `msecs` milliseconds. This does *not* block the\ncurrent task, but instead returns immediately. The first notification\nwill not be received immediately, but rather after `msec` milliseconds\nhave passed.",parent:'147704'},{ty:"mod",name:"util",path:"std::io",desc:"Utility implementations of Reader and Writer"},{ty:"struct",name:"LimitReader",path:"std::io::util",desc:"Wraps a `Reader`, limiting the number of bytes that can be read from it."},{ty:"struct",name:"NullWriter",path:"std::io::util",desc:"A `Writer` which ignores bytes written to it, like /dev/null."},{ty:"struct",name:"ZeroReader",path:"std::io::util",desc:"A `Reader` which returns an infinite stream of 0 bytes, like /dev/zero."},{ty:"struct",name:"NullReader",path:"std::io::util",desc:"A `Reader` which is always at EOF, like /dev/null."},{ty:"struct",name:"MultiWriter",path:"std::io::util",desc:"A `Writer` which multiplexes writes to a set of `Writers`."},{ty:"struct",name:"ChainedReader",path:"std::io::util",desc:"A `Reader` which chains input from multiple `Readers`, reading each to\ncompletion before moving onto the next."},{ty:"struct",name:"TeeReader",path:"std::io::util",desc:"A `Reader` which forwards input from another `Reader`, passing it along to\na `Writer` as well. Similar to the `tee(1)` command."},{ty:"fn",name:"copy",path:"std::io::util",desc:"Copies all data from a `Reader` to a `Writer`."},{ty:"method",name:"new",path:"std::io::util",desc:"Creates a new `LimitReader`",parent:'147813'},{ty:"method",name:"unwrap",path:"std::io::util",desc:"Consumes the `LimitReader`, returning the underlying `Reader`.",parent:'147813'},{ty:"method",name:"limit",path:"std::io::util",desc:"Returns the number of bytes that can be read before the `LimitReader`\nwill return EOF.",parent:'147813'},{ty:"method",name:"read",path:"std::io::util",desc:"",parent:'147813'},{ty:"method",name:"write",path:"std::io::util",desc:"",parent:'147931'},{ty:"method",name:"read",path:"std::io::util",desc:"",parent:'147954'},{ty:"method",name:"read",path:"std::io::util",desc:"",parent:'147983'},{ty:"method",name:"new",path:"std::io::util",desc:"Creates a new `MultiWriter`",parent:'148009'},{ty:"method",name:"write",path:"std::io::util",desc:"",parent:'148009'},{ty:"method",name:"flush",path:"std::io::util",desc:"",parent:'148009'},{ty:"method",name:"new",path:"std::io::util",desc:"Creates a new `ChainedReader`",parent:'148129'},{ty:"method",name:"read",path:"std::io::util",desc:"",parent:'148129'},{ty:"method",name:"new",path:"std::io::util",desc:"Creates a new `TeeReader`",parent:'148264'},{ty:"method",name:"unwrap",path:"std::io::util",desc:"Consumes the `TeeReader`, returning the underlying `Reader` and\n`Writer`.",parent:'148264'},{ty:"method",name:"read",path:"std::io::util",desc:"",parent:'148264'},{ty:"typedef",name:"IoResult",path:"std::io",desc:"A convenient typedef of the return value of any I/O action."},{ty:"typedef",name:"FilePermission",path:"std::io",desc:"A set of permissions for a file or directory is represented by a set of\nflags which are or'd together."},{ty:"static",name:"UserRead",path:"std::io",desc:""},{ty:"static",name:"UserWrite",path:"std::io",desc:""},{ty:"static",name:"UserExecute",path:"std::io",desc:""},{ty:"static",name:"GroupRead",path:"std::io",desc:""},{ty:"static",name:"GroupWrite",path:"std::io",desc:""},{ty:"static",name:"GroupExecute",path:"std::io",desc:""},{ty:"static",name:"OtherRead",path:"std::io",desc:""},{ty:"static",name:"OtherWrite",path:"std::io",desc:""},{ty:"static",name:"OtherExecute",path:"std::io",desc:""},{ty:"static",name:"UserRWX",path:"std::io",desc:""},{ty:"static",name:"GroupRWX",path:"std::io",desc:""},{ty:"static",name:"OtherRWX",path:"std::io",desc:""},{ty:"static",name:"UserFile",path:"std::io",desc:"A set of permissions for user owned files, this is equivalent to 0644 on\nunix-like systems."},{ty:"static",name:"UserDir",path:"std::io",desc:"A set of permissions for user owned directories, this is equivalent to 0755\non unix-like systems."},{ty:"static",name:"UserExec",path:"std::io",desc:"A set of permissions for user owned executables, this is equivalent to 0755\non unix-like systems."},{ty:"static",name:"AllPermissions",path:"std::io",desc:"A mask for all possible permission bits"},{ty:"trait",name:"Reader",path:"std::io",desc:"A trait for objects which are byte-oriented streams. Readers are defined by\none method, `read`. This function will block until data is available,\nfilling in the provided buffer with any data read."},{ty:"tymethod",name:"read",path:"std::io",desc:"Read bytes, up to the length of `buf` and place them in `buf`.\nReturns the number of bytes read. The number of bytes read my\nbe less than the number requested, even 0. Returns `Err` on EOF.",parent:'149931'},{ty:"method",name:"read_byte",path:"std::io",desc:"Reads a single byte. Returns `Err` on EOF.",parent:'149931'},{ty:"method",name:"push_bytes",path:"std::io",desc:"Reads `len` bytes and appends them to a vector.",parent:'149931'},{ty:"method",name:"read_bytes",path:"std::io",desc:"Reads `len` bytes and gives you back a new vector of length `len`",parent:'149931'},{ty:"method",name:"read_to_end",path:"std::io",desc:"Reads all remaining bytes from the stream.",parent:'149931'},{ty:"method",name:"read_to_str",path:"std::io",desc:"Reads all of the remaining bytes of this stream, interpreting them as a\nUTF-8 encoded stream. The corresponding string is returned.",parent:'149931'},{ty:"method",name:"bytes",path:"std::io",desc:"Create an iterator that reads a single byte on\neach iteration, until EOF.",parent:'149931'},{ty:"method",name:"read_le_uint_n",path:"std::io",desc:"Reads `n` little-endian unsigned integer bytes.",parent:'149931'},{ty:"method",name:"read_le_int_n",path:"std::io",desc:"Reads `n` little-endian signed integer bytes.",parent:'149931'},{ty:"method",name:"read_be_uint_n",path:"std::io",desc:"Reads `n` big-endian unsigned integer bytes.",parent:'149931'},{ty:"method",name:"read_be_int_n",path:"std::io",desc:"Reads `n` big-endian signed integer bytes.",parent:'149931'},{ty:"method",name:"read_le_uint",path:"std::io",desc:"Reads a little-endian unsigned integer.",parent:'149931'},{ty:"method",name:"read_le_int",path:"std::io",desc:"Reads a little-endian integer.",parent:'149931'},{ty:"method",name:"read_be_uint",path:"std::io",desc:"Reads a big-endian unsigned integer.",parent:'149931'},{ty:"method",name:"read_be_int",path:"std::io",desc:"Reads a big-endian integer.",parent:'149931'},{ty:"method",name:"read_be_u64",path:"std::io",desc:"Reads a big-endian `u64`.",parent:'149931'},{ty:"method",name:"read_be_u32",path:"std::io",desc:"Reads a big-endian `u32`.",parent:'149931'},{ty:"method",name:"read_be_u16",path:"std::io",desc:"Reads a big-endian `u16`.",parent:'149931'},{ty:"method",name:"read_be_i64",path:"std::io",desc:"Reads a big-endian `i64`.",parent:'149931'},{ty:"method",name:"read_be_i32",path:"std::io",desc:"Reads a big-endian `i32`.",parent:'149931'},{ty:"method",name:"read_be_i16",path:"std::io",desc:"Reads a big-endian `i16`.",parent:'149931'},{ty:"method",name:"read_be_f64",path:"std::io",desc:"Reads a big-endian `f64`.",parent:'149931'},{ty:"method",name:"read_be_f32",path:"std::io",desc:"Reads a big-endian `f32`.",parent:'149931'},{ty:"method",name:"read_le_u64",path:"std::io",desc:"Reads a little-endian `u64`.",parent:'149931'},{ty:"method",name:"read_le_u32",path:"std::io",desc:"Reads a little-endian `u32`.",parent:'149931'},{ty:"method",name:"read_le_u16",path:"std::io",desc:"Reads a little-endian `u16`.",parent:'149931'},{ty:"method",name:"read_le_i64",path:"std::io",desc:"Reads a little-endian `i64`.",parent:'149931'},{ty:"method",name:"read_le_i32",path:"std::io",desc:"Reads a little-endian `i32`.",parent:'149931'},{ty:"method",name:"read_le_i16",path:"std::io",desc:"Reads a little-endian `i16`.",parent:'149931'},{ty:"method",name:"read_le_f64",path:"std::io",desc:"Reads a little-endian `f64`.",parent:'149931'},{ty:"method",name:"read_le_f32",path:"std::io",desc:"Reads a little-endian `f32`.",parent:'149931'},{ty:"method",name:"read_u8",path:"std::io",desc:"Read a u8.",parent:'149931'},{ty:"method",name:"read_i8",path:"std::io",desc:"Read an i8.",parent:'149931'},{ty:"method",name:"by_ref",path:"std::io",desc:"Creates a wrapper around a mutable reference to the reader.",parent:'149931'},{ty:"trait",name:"Writer",path:"std::io",desc:"A trait for objects which are byte-oriented streams. Writers are defined by\none method, `write`. This function will block until the provided buffer of\nbytes has been entirely written, and it will return any failurs which occur."},{ty:"tymethod",name:"write",path:"std::io",desc:"Write the entirety of a given buffer",parent:'151209'},{ty:"method",name:"flush",path:"std::io",desc:"Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",parent:'151209'},{ty:"method",name:"write_str",path:"std::io",desc:"Write a rust string into this sink.",parent:'151209'},{ty:"method",name:"write_line",path:"std::io",desc:"Writes a string into this sink, and then writes a literal newline (`\\n`)\nbyte afterwards. Note that the writing of the newline is *not* atomic in\nthe sense that the call to `write` is invoked twice (once with the\nstring and once with a newline character).",parent:'151209'},{ty:"method",name:"write_char",path:"std::io",desc:"Write a single char, encoded as UTF-8.",parent:'151209'},{ty:"method",name:"write_int",path:"std::io",desc:"Write the result of passing n through `int::to_str_bytes`.",parent:'151209'},{ty:"method",name:"write_uint",path:"std::io",desc:"Write the result of passing n through `uint::to_str_bytes`.",parent:'151209'},{ty:"method",name:"write_le_uint",path:"std::io",desc:"Write a little-endian uint (number of bytes depends on system).",parent:'151209'},{ty:"method",name:"write_le_int",path:"std::io",desc:"Write a little-endian int (number of bytes depends on system).",parent:'151209'},{ty:"method",name:"write_be_uint",path:"std::io",desc:"Write a big-endian uint (number of bytes depends on system).",parent:'151209'},{ty:"method",name:"write_be_int",path:"std::io",desc:"Write a big-endian int (number of bytes depends on system).",parent:'151209'},{ty:"method",name:"write_be_u64",path:"std::io",desc:"Write a big-endian u64 (8 bytes).",parent:'151209'},{ty:"method",name:"write_be_u32",path:"std::io",desc:"Write a big-endian u32 (4 bytes).",parent:'151209'},{ty:"method",name:"write_be_u16",path:"std::io",desc:"Write a big-endian u16 (2 bytes).",parent:'151209'},{ty:"method",name:"write_be_i64",path:"std::io",desc:"Write a big-endian i64 (8 bytes).",parent:'151209'},{ty:"method",name:"write_be_i32",path:"std::io",desc:"Write a big-endian i32 (4 bytes).",parent:'151209'},{ty:"method",name:"write_be_i16",path:"std::io",desc:"Write a big-endian i16 (2 bytes).",parent:'151209'},{ty:"method",name:"write_be_f64",path:"std::io",desc:"Write a big-endian IEEE754 double-precision floating-point (8 bytes).",parent:'151209'},{ty:"method",name:"write_be_f32",path:"std::io",desc:"Write a big-endian IEEE754 single-precision floating-point (4 bytes).",parent:'151209'},{ty:"method",name:"write_le_u64",path:"std::io",desc:"Write a little-endian u64 (8 bytes).",parent:'151209'},{ty:"method",name:"write_le_u32",path:"std::io",desc:"Write a little-endian u32 (4 bytes).",parent:'151209'},{ty:"method",name:"write_le_u16",path:"std::io",desc:"Write a little-endian u16 (2 bytes).",parent:'151209'},{ty:"method",name:"write_le_i64",path:"std::io",desc:"Write a little-endian i64 (8 bytes).",parent:'151209'},{ty:"method",name:"write_le_i32",path:"std::io",desc:"Write a little-endian i32 (4 bytes).",parent:'151209'},{ty:"method",name:"write_le_i16",path:"std::io",desc:"Write a little-endian i16 (2 bytes).",parent:'151209'},{ty:"method",name:"write_le_f64",path:"std::io",desc:"Write a little-endian IEEE754 double-precision floating-point\n(8 bytes).",parent:'151209'},{ty:"method",name:"write_le_f32",path:"std::io",desc:"Write a little-endian IEEE754 single-precision floating-point\n(4 bytes).",parent:'151209'},{ty:"method",name:"write_u8",path:"std::io",desc:"Write a u8 (1 byte).",parent:'151209'},{ty:"method",name:"write_i8",path:"std::io",desc:"Write a i8 (1 byte).",parent:'151209'},{ty:"method",name:"by_ref",path:"std::io",desc:"Creates a wrapper around a mutable reference to the writer.",parent:'151209'},{ty:"trait",name:"Stream",path:"std::io",desc:"A Stream is a readable and a writable object. Data written is typically\nreceived by the object which reads receive data from."},{ty:"trait",name:"Buffer",path:"std::io",desc:"A Buffer is a type of reader which has some form of internal buffering to\nallow certain kinds of reading operations to be more optimized than others.\nThis type extends the `Reader` trait with a few methods that are not\npossible to reasonably implement with purely a read interface."},{ty:"tymethod",name:"fill",path:"std::io",desc:"Fills the internal buffer of this object, returning the buffer contents.\nNote that none of the contents will be \"read\" in the sense that later\ncalling `read` may return the same contents.",parent:'152282'},{ty:"tymethod",name:"consume",path:"std::io",desc:"Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to `fill` or `read`.",parent:'152282'},{ty:"method",name:"read_line",path:"std::io",desc:"Reads the next line of input, interpreted as a sequence of UTF-8\nencoded unicode codepoints. If a newline is encountered, then the\nnewline is contained in the returned string.",parent:'152282'},{ty:"method",name:"lines",path:"std::io",desc:"Create an iterator that reads a line on each iteration until EOF.",parent:'152282'},{ty:"method",name:"read_until",path:"std::io",desc:"Reads a sequence of bytes leading up to a specified delimiter. Once the\nspecified byte is encountered, reading ceases and the bytes up to and\nincluding the delimiter are returned.",parent:'152282'},{ty:"method",name:"read_char",path:"std::io",desc:"Reads the next utf8-encoded character from the underlying stream.",parent:'152282'},{ty:"method",name:"chars",path:"std::io",desc:"Create an iterator that reads a utf8-encoded character on each iteration\nuntil EOF.",parent:'152282'},{ty:"trait",name:"Seek",path:"std::io",desc:"An object implementing `Seek` internally has some form of cursor which can\nbe moved within a stream of bytes. The stream typically has a fixed size,\nallowing seeking relative to either end."},{ty:"tymethod",name:"tell",path:"std::io",desc:"Return position of file cursor in the stream",parent:'152638'},{ty:"tymethod",name:"seek",path:"std::io",desc:"Seek to an offset in a stream",parent:'152638'},{ty:"trait",name:"Listener",path:"std::io",desc:"A listener is a value that can consume itself to start listening for\nconnections."},{ty:"tymethod",name:"listen",path:"std::io",desc:"Spin up the listener and start queuing incoming connections",parent:'152662'},{ty:"trait",name:"Acceptor",path:"std::io",desc:"An acceptor is a value that presents incoming connections"},{ty:"tymethod",name:"accept",path:"std::io",desc:"Wait for and accept an incoming connection",parent:'152676'},{ty:"method",name:"incoming",path:"std::io",desc:"Create an iterator over incoming connection attempts.",parent:'152676'},{ty:"method",name:"clone",path:"std::io",desc:"",parent:'148463'},{ty:"method",name:"eq",path:"std::io",desc:"",parent:'148463'},{ty:"method",name:"ne",path:"std::io",desc:"",parent:'148463'},{ty:"method",name:"fmt",path:"std::io",desc:"",parent:'148463'},{ty:"method",name:"fmt",path:"std::io",desc:"",parent:'148741'},{ty:"method",name:"clone",path:"std::io",desc:"",parent:'148741'},{ty:"method",name:"eq",path:"std::io",desc:"",parent:'148741'},{ty:"method",name:"ne",path:"std::io",desc:"",parent:'148741'},{ty:"method",name:"read",path:"std::io",desc:"",parent:'151141'},{ty:"method",name:"write",path:"std::io",desc:"",parent:'152113'},{ty:"method",name:"flush",path:"std::io",desc:"",parent:'152113'},{ty:"method",name:"next",path:"std::io",desc:"",parent:'152170'},{ty:"method",name:"next",path:"std::io",desc:"",parent:'152227'},{ty:"method",name:"next",path:"std::io",desc:"",parent:'152700'},{ty:"method",name:"hash",path:"std::io",desc:"",parent:'152779'},{ty:"method",name:"fmt",path:"std::io",desc:"",parent:'152779'},{ty:"method",name:"eq",path:"std::io",desc:"",parent:'152779'},{ty:"method",name:"ne",path:"std::io",desc:"",parent:'152779'},{ty:"method",name:"hash",path:"std::io",desc:"",parent:'153281'},{ty:"method",name:"hash",path:"std::io",desc:"",parent:'153387'},{ty:"mod",name:"path",path:"std",desc:"Cross-platform path support"},{ty:"struct",name:"Display",path:"std::path",desc:"Helper struct for printing paths with format!()"},{ty:"mod",name:"posix",path:"std::path",desc:"POSIX file path handling"},{ty:"struct",name:"Path",path:"std::path::posix",desc:"Represents a POSIX file path"},{ty:"fn",name:"is_sep_byte",path:"std::path::posix",desc:"Returns whether the given byte is a path separator"},{ty:"fn",name:"is_sep",path:"std::path::posix",desc:"Returns whether the given char is a path separator"},{ty:"typedef",name:"Components",path:"std::path::posix",desc:"Iterator that yields successive components of a Path as &[u8]"},{ty:"typedef",name:"RevComponents",path:"std::path::posix",desc:"Iterator that yields components of a Path in reverse as &[u8]"},{ty:"typedef",name:"StrComponents",path:"std::path::posix",desc:"Iterator that yields successive components of a Path as Option<&str>"},{ty:"typedef",name:"RevStrComponents",path:"std::path::posix",desc:"Iterator that yields components of a Path in reverse as Option<&str>"},{ty:"static",name:"SEP",path:"std::path::posix",desc:"The standard path separator character"},{ty:"static",name:"SEP_BYTE",path:"std::path::posix",desc:"The standard path separator byte"},{ty:"method",name:"clone",path:"std::path::posix",desc:"",parent:'153730'},{ty:"method",name:"eq",path:"std::path::posix",desc:"",parent:'153730'},{ty:"method",name:"from_str",path:"std::path::posix",desc:"",parent:'153730'},{ty:"method",name:"to_c_str",path:"std::path::posix",desc:"",parent:'153730'},{ty:"method",name:"to_c_str_unchecked",path:"std::path::posix",desc:"",parent:'153730'},{ty:"method",name:"hash",path:"std::path::posix",desc:"",parent:'153730'},{ty:"method",name:"container_as_bytes",path:"std::path::posix",desc:"",parent:'153730'},{ty:"method",name:"container_into_owned_bytes",path:"std::path::posix",desc:"",parent:'153730'},{ty:"method",name:"new_unchecked",path:"std::path::posix",desc:"",parent:'153730'},{ty:"method",name:"set_filename_unchecked",path:"std::path::posix",desc:"",parent:'153730'},{ty:"method",name:"push_unchecked",path:"std::path::posix",desc:"",parent:'153730'},{ty:"method",name:"as_vec",path:"std::path::posix",desc:"",parent:'153730'},{ty:"method",name:"into_vec",path:"std::path::posix",desc:"",parent:'153730'},{ty:"method",name:"dirname",path:"std::path::posix",desc:"",parent:'153730'},{ty:"method",name:"filename",path:"std::path::posix",desc:"",parent:'153730'},{ty:"method",name:"pop",path:"std::path::posix",desc:"",parent:'153730'},{ty:"method",name:"root_path",path:"std::path::posix",desc:"",parent:'153730'},{ty:"method",name:"is_absolute",path:"std::path::posix",desc:"",parent:'153730'},{ty:"method",name:"is_ancestor_of",path:"std::path::posix",desc:"",parent:'153730'},{ty:"method",name:"path_relative_from",path:"std::path::posix",desc:"",parent:'153730'},{ty:"method",name:"ends_with_path",path:"std::path::posix",desc:"",parent:'153730'},{ty:"method",name:"new",path:"std::path::posix",desc:"Returns a new Path from a byte vector or string",parent:'153730'},{ty:"method",name:"new_opt",path:"std::path::posix",desc:"Returns a new Path from a byte vector or string, if possible",parent:'153730'},{ty:"method",name:"components",path:"std::path::posix",desc:"Returns an iterator that yields each component of the path in turn.\nDoes not distinguish between absolute and relative paths, e.g.\n/a/b/c and a/b/c yield the same set of components.\nA path of \"/\" yields no components. A path of \".\" yields one component.",parent:'153730'},{ty:"method",name:"rev_components",path:"std::path::posix",desc:"Returns an iterator that yields each component of the path in reverse.\nSee components() for details.",parent:'153730'},{ty:"method",name:"str_components",path:"std::path::posix",desc:"Returns an iterator that yields each component of the path as Option<&str>.\nSee components() for details.",parent:'153730'},{ty:"method",name:"rev_str_components",path:"std::path::posix",desc:"Returns an iterator that yields each component of the path in reverse as Option<&str>.\nSee components() for details.",parent:'153730'},{ty:"mod",name:"windows",path:"std::path",desc:"Windows file path handling"},{ty:"struct",name:"Path",path:"std::path::windows",desc:"Represents a Windows path"},{ty:"enum",name:"PathPrefix",path:"std::path::windows",desc:"Prefix types for Path"},{ty:"variant",name:"VerbatimPrefix",path:"std::path::windows",desc:"Prefix `\\\\?\\`, uint is the length of the following component",parent:'159035'},{ty:"variant",name:"VerbatimUNCPrefix",path:"std::path::windows",desc:"Prefix `\\\\?\\UNC\\`, uints are the lengths of the UNC components",parent:'159035'},{ty:"variant",name:"VerbatimDiskPrefix",path:"std::path::windows",desc:"Prefix `\\\\?\\C:\\` (for any alphabetic character)",parent:'159035'},{ty:"variant",name:"DeviceNSPrefix",path:"std::path::windows",desc:"Prefix `\\\\.\\`, uint is the length of the following component",parent:'159035'},{ty:"variant",name:"UNCPrefix",path:"std::path::windows",desc:"UNC prefix `\\\\server\\share`, uints are the lengths of the server/share",parent:'159035'},{ty:"variant",name:"DiskPrefix",path:"std::path::windows",desc:"Prefix `C:` for any alphabetic character",parent:'159035'},{ty:"fn",name:"is_vol_relative",path:"std::path::windows",desc:"Returns whether the path is considered \"volume-relative\", which means a path\nthat looks like \"\\foo\". Paths of this form are relative to the current volume,\nbut absolute within that volume."},{ty:"fn",name:"is_cwd_relative",path:"std::path::windows",desc:"Returns whether the path is considered \"cwd-relative\", which means a path\nwith a volume prefix that is not absolute. This look like \"C:foo.txt\". Paths\nof this form are relative to the cwd on the given volume."},{ty:"fn",name:"prefix",path:"std::path::windows",desc:"Returns the PathPrefix for this Path"},{ty:"fn",name:"is_verbatim",path:"std::path::windows",desc:"Returns whether the Path's prefix is a verbatim prefix, i.e. `\\\\?\\`"},{ty:"fn",name:"make_non_verbatim",path:"std::path::windows",desc:"Returns the non-verbatim equivalent of the input path, if possible.\nIf the input path is a device namespace path, None is returned.\nIf the input path is not verbatim, it is returned as-is.\nIf the input path is verbatim, but the same path can be expressed as\nnon-verbatim, the non-verbatim version is returned.\nOtherwise, None is returned."},{ty:"fn",name:"is_sep",path:"std::path::windows",desc:"Returns whether the given char is a path separator.\nAllows both the primary separator '\\' and the alternative separator '/'."},{ty:"fn",name:"is_sep_verbatim",path:"std::path::windows",desc:"Returns whether the given char is a path separator.\nOnly allows the primary separator '\\'; use is_sep to allow '/'."},{ty:"fn",name:"is_sep_byte",path:"std::path::windows",desc:"Returns whether the given byte is a path separator.\nAllows both the primary separator '\\' and the alternative separator '/'."},{ty:"fn",name:"is_sep_byte_verbatim",path:"std::path::windows",desc:"Returns whether the given byte is a path separator.\nOnly allows the primary separator '\\'; use is_sep_byte to allow '/'."},{ty:"typedef",name:"StrComponents",path:"std::path::windows",desc:"Iterator that yields successive components of a Path as &str"},{ty:"typedef",name:"RevStrComponents",path:"std::path::windows",desc:"Iterator that yields components of a Path in reverse as &str"},{ty:"typedef",name:"Components",path:"std::path::windows",desc:"Iterator that yields successive components of a Path as &[u8]"},{ty:"typedef",name:"RevComponents",path:"std::path::windows",desc:"Iterator that yields components of a Path in reverse as &[u8]"},{ty:"static",name:"SEP",path:"std::path::windows",desc:"The standard path separator character"},{ty:"static",name:"SEP_BYTE",path:"std::path::windows",desc:"The standard path separator byte"},{ty:"static",name:"SEP2",path:"std::path::windows",desc:"The alternative path separator character"},{ty:"static",name:"SEP2_BYTE",path:"std::path::windows",desc:"The alternative path separator character"},{ty:"method",name:"clone",path:"std::path::windows",desc:"",parent:'155566'},{ty:"method",name:"eq",path:"std::path::windows",desc:"",parent:'155566'},{ty:"method",name:"from_str",path:"std::path::windows",desc:"",parent:'155566'},{ty:"method",name:"to_c_str",path:"std::path::windows",desc:"",parent:'155566'},{ty:"method",name:"to_c_str_unchecked",path:"std::path::windows",desc:"",parent:'155566'},{ty:"method",name:"hash",path:"std::path::windows",desc:"",parent:'155566'},{ty:"method",name:"container_as_bytes",path:"std::path::windows",desc:"",parent:'155566'},{ty:"method",name:"container_into_owned_bytes",path:"std::path::windows",desc:"",parent:'155566'},{ty:"method",name:"container_as_str",path:"std::path::windows",desc:"",parent:'155566'},{ty:"method",name:"is_str",path:"std::path::windows",desc:"",parent:'155566'},{ty:"method",name:"new_unchecked",path:"std::path::windows",desc:"See `GenericPathUnsafe::from_vec_unchecked`.",parent:'155566'},{ty:"method",name:"set_filename_unchecked",path:"std::path::windows",desc:"See `GenericPathUnsafe::set_filename_unchecekd`.",parent:'155566'},{ty:"method",name:"push_unchecked",path:"std::path::windows",desc:"See `GenericPathUnsafe::push_unchecked`.",parent:'155566'},{ty:"method",name:"new_opt",path:"std::path::windows",desc:"",parent:'155566'},{ty:"method",name:"as_str",path:"std::path::windows",desc:"See `GenericPath::as_str` for info.\nAlways returns a `Some` value.",parent:'155566'},{ty:"method",name:"as_vec",path:"std::path::windows",desc:"",parent:'155566'},{ty:"method",name:"into_vec",path:"std::path::windows",desc:"",parent:'155566'},{ty:"method",name:"dirname",path:"std::path::windows",desc:"",parent:'155566'},{ty:"method",name:"dirname_str",path:"std::path::windows",desc:"See `GenericPath::dirname_str` for info.\nAlways returns a `Some` value.",parent:'155566'},{ty:"method",name:"filename",path:"std::path::windows",desc:"",parent:'155566'},{ty:"method",name:"filename_str",path:"std::path::windows",desc:"See `GenericPath::filename_str` for info.\nAlways returns a `Some` value if `filename` returns a `Some` value.",parent:'155566'},{ty:"method",name:"filestem_str",path:"std::path::windows",desc:"See `GenericPath::filestem_str` for info.\nAlways returns a `Some` value if `filestem` returns a `Some` value.",parent:'155566'},{ty:"method",name:"extension_str",path:"std::path::windows",desc:"",parent:'155566'},{ty:"method",name:"dir_path",path:"std::path::windows",desc:"",parent:'155566'},{ty:"method",name:"pop",path:"std::path::windows",desc:"",parent:'155566'},{ty:"method",name:"root_path",path:"std::path::windows",desc:"",parent:'155566'},{ty:"method",name:"is_absolute",path:"std::path::windows",desc:"See `GenericPath::is_absolute` for info.",parent:'155566'},{ty:"method",name:"is_relative",path:"std::path::windows",desc:"",parent:'155566'},{ty:"method",name:"is_ancestor_of",path:"std::path::windows",desc:"",parent:'155566'},{ty:"method",name:"path_relative_from",path:"std::path::windows",desc:"",parent:'155566'},{ty:"method",name:"ends_with_path",path:"std::path::windows",desc:"",parent:'155566'},{ty:"method",name:"new",path:"std::path::windows",desc:"Returns a new Path from a byte vector or string",parent:'155566'},{ty:"method",name:"new_opt",path:"std::path::windows",desc:"Returns a new Path from a byte vector or string, if possible",parent:'155566'},{ty:"method",name:"str_components",path:"std::path::windows",desc:"Returns an iterator that yields each component of the path in turn as a Option<&str>.\nEvery component is guaranteed to be Some.\nDoes not yield the path prefix (including server/share components in UNC paths).\nDoes not distinguish between volume-relative and relative paths, e.g.\n\\a\\b\\c and a\\b\\c.\nDoes not distinguish between absolute and cwd-relative paths, e.g.\nC:\\foo and C:foo.",parent:'155566'},{ty:"method",name:"rev_str_components",path:"std::path::windows",desc:"Returns an iterator that yields each component of the path in reverse as an Option<&str>\nSee str_components() for details.",parent:'155566'},{ty:"method",name:"components",path:"std::path::windows",desc:"Returns an iterator that yields each component of the path in turn as a &[u8].\nSee str_components() for details.",parent:'155566'},{ty:"method",name:"rev_components",path:"std::path::windows",desc:"Returns an iterator that yields each component of the path in reverse as a &[u8].\nSee str_components() for details.",parent:'155566'},{ty:"method",name:"clone",path:"std::path::windows",desc:"",parent:'159035'},{ty:"method",name:"eq",path:"std::path::windows",desc:"",parent:'159035'},{ty:"method",name:"ne",path:"std::path::windows",desc:"",parent:'159035'},{ty:"trait",name:"GenericPath",path:"std::path",desc:"A trait that represents the generic operations available on paths"},{ty:"method",name:"new",path:"std::path",desc:"Creates a new Path from a byte vector or string.\nThe resulting Path will always be normalized.",parent:'160058'},{ty:"method",name:"new_opt",path:"std::path",desc:"Creates a new Path from a byte vector or string, if possible.\nThe resulting Path will always be normalized.",parent:'160058'},{ty:"method",name:"as_str",path:"std::path",desc:"Returns the path as a string, if possible.\nIf the path is not representable in utf-8, this returns None.",parent:'160058'},{ty:"tymethod",name:"as_vec",path:"std::path",desc:"Returns the path as a byte vector",parent:'160058'},{ty:"tymethod",name:"into_vec",path:"std::path",desc:"Converts the Path into an owned byte vector",parent:'160058'},{ty:"method",name:"display",path:"std::path",desc:"Returns an object that implements `Show` for printing paths",parent:'160058'},{ty:"method",name:"filename_display",path:"std::path",desc:"Returns an object that implements `Show` for printing filenames",parent:'160058'},{ty:"tymethod",name:"dirname",path:"std::path",desc:"Returns the directory component of `self`, as a byte vector (with no trailing separator).\nIf `self` has no directory component, returns ['.'].",parent:'160058'},{ty:"method",name:"dirname_str",path:"std::path",desc:"Returns the directory component of `self`, as a string, if possible.\nSee `dirname` for details.",parent:'160058'},{ty:"tymethod",name:"filename",path:"std::path",desc:"Returns the file component of `self`, as a byte vector.\nIf `self` represents the root of the file hierarchy, returns None.\nIf `self` is \".\" or \"..\", returns None.",parent:'160058'},{ty:"method",name:"filename_str",path:"std::path",desc:"Returns the file component of `self`, as a string, if possible.\nSee `filename` for details.",parent:'160058'},{ty:"method",name:"filestem",path:"std::path",desc:"Returns the stem of the filename of `self`, as a byte vector.\nThe stem is the portion of the filename just before the last '.'.\nIf there is no '.', the entire filename is returned.",parent:'160058'},{ty:"method",name:"filestem_str",path:"std::path",desc:"Returns the stem of the filename of `self`, as a string, if possible.\nSee `filestem` for details.",parent:'160058'},{ty:"method",name:"extension",path:"std::path",desc:"Returns the extension of the filename of `self`, as an optional byte vector.\nThe extension is the portion of the filename just after the last '.'.\nIf there is no extension, None is returned.\nIf the filename ends in '.', the empty vector is returned.",parent:'160058'},{ty:"method",name:"extension_str",path:"std::path",desc:"Returns the extension of the filename of `self`, as a string, if possible.\nSee `extension` for details.",parent:'160058'},{ty:"method",name:"set_filename",path:"std::path",desc:"Replaces the filename portion of the path with the given byte vector or string.\nIf the replacement name is [], this is equivalent to popping the path.",parent:'160058'},{ty:"method",name:"set_extension",path:"std::path",desc:"Replaces the extension with the given byte vector or string.\nIf there is no extension in `self`, this adds one.\nIf the argument is [] or \"\", this removes the extension.\nIf `self` has no filename, this is a no-op.",parent:'160058'},{ty:"method",name:"with_filename",path:"std::path",desc:"Returns a new Path constructed by replacing the filename with the given\nbyte vector or string.\nSee `set_filename` for details.",parent:'160058'},{ty:"method",name:"with_extension",path:"std::path",desc:"Returns a new Path constructed by setting the extension to the given\nbyte vector or string.\nSee `set_extension` for details.",parent:'160058'},{ty:"method",name:"dir_path",path:"std::path",desc:"Returns the directory component of `self`, as a Path.\nIf `self` represents the root of the filesystem hierarchy, returns `self`.",parent:'160058'},{ty:"tymethod",name:"root_path",path:"std::path",desc:"Returns a Path that represents the filesystem root that `self` is rooted in.",parent:'160058'},{ty:"method",name:"push",path:"std::path",desc:"Pushes a path (as a byte vector or string) onto `self`.\nIf the argument represents an absolute path, it replaces `self`.",parent:'160058'},{ty:"method",name:"push_many",path:"std::path",desc:"Pushes multiple paths (as byte vectors or strings) onto `self`.\nSee `push` for details.",parent:'160058'},{ty:"tymethod",name:"pop",path:"std::path",desc:"Removes the last path component from the receiver.\nReturns `true` if the receiver was modified, or `false` if it already\nrepresented the root of the file hierarchy.",parent:'160058'},{ty:"method",name:"join",path:"std::path",desc:"Returns a new Path constructed by joining `self` with the given path\n(as a byte vector or string).\nIf the given path is absolute, the new Path will represent just that.",parent:'160058'},{ty:"method",name:"join_many",path:"std::path",desc:"Returns a new Path constructed by joining `self` with the given paths\n(as byte vectors or strings).\nSee `join` for details.",parent:'160058'},{ty:"tymethod",name:"is_absolute",path:"std::path",desc:"Returns whether `self` represents an absolute path.\nAn absolute path is defined as one that, when joined to another path, will\nyield back the same absolute path.",parent:'160058'},{ty:"method",name:"is_relative",path:"std::path",desc:"Returns whether `self` represents a relative path.\nTypically this is the inverse of `is_absolute`.\nBut for Windows paths, it also means the path is not volume-relative or\nrelative to the current working directory.",parent:'160058'},{ty:"tymethod",name:"is_ancestor_of",path:"std::path",desc:"Returns whether `self` is equal to, or is an ancestor of, the given path.\nIf both paths are relative, they are compared as though they are relative\nto the same parent path.",parent:'160058'},{ty:"tymethod",name:"path_relative_from",path:"std::path",desc:"Returns the Path that, were it joined to `base`, would yield `self`.\nIf no such path exists, None is returned.\nIf `self` is absolute and `base` is relative, or on Windows if both\npaths refer to separate drives, an absolute path is returned.",parent:'160058'},{ty:"tymethod",name:"ends_with_path",path:"std::path",desc:"Returns whether the relative path `child` is a suffix of `self`.",parent:'160058'},{ty:"trait",name:"BytesContainer",path:"std::path",desc:"A trait that represents something bytes-like (e.g. a &[u8] or a &str)"},{ty:"tymethod",name:"container_as_bytes",path:"std::path",desc:"Returns a &[u8] representing the receiver",parent:'161131'},{ty:"method",name:"container_into_owned_bytes",path:"std::path",desc:"Consumes the receiver and converts it into ~[u8]",parent:'161131'},{ty:"method",name:"container_as_str",path:"std::path",desc:"Returns the receiver interpreted as a utf-8 string, if possible",parent:'161131'},{ty:"method",name:"is_str",path:"std::path",desc:"Returns whether .container_as_str() is guaranteed to not fail",parent:'161131'},{ty:"trait",name:"GenericPathUnsafe",path:"std::path",desc:"A trait that represents the unsafe operations on GenericPaths"},{ty:"tymethod",name:"new_unchecked",path:"std::path",desc:"Creates a new Path without checking for null bytes.\nThe resulting Path will always be normalized.",parent:'161183'},{ty:"tymethod",name:"set_filename_unchecked",path:"std::path",desc:"Replaces the filename portion of the path without checking for null\nbytes.\nSee `set_filename` for details.",parent:'161183'},{ty:"tymethod",name:"push_unchecked",path:"std::path",desc:"Pushes a path onto `self` without checking for null bytes.\nSee `push` for details.",parent:'161183'},{ty:"method",name:"fmt",path:"std::path",desc:"",parent:'161215'},{ty:"method",name:"as_maybe_owned",path:"std::path",desc:"Returns the path as a possibly-owned string.",parent:'161215'},{ty:"method",name:"container_as_bytes",path:"std::c_str",desc:"",parent:'129957'},{ty:"method",name:"container_as_bytes",path:"std::str",desc:"",parent:'64156'},{ty:"method",name:"container_into_owned_bytes",path:"std::str",desc:"",parent:'64156'},{ty:"method",name:"container_as_str",path:"std::str",desc:"",parent:'64156'},{ty:"method",name:"is_str",path:"std::str",desc:"",parent:'64156'},{ty:"mod",name:"cast",path:"std",desc:"Unsafe casting functions"},{ty:"fn",name:"transmute_copy",path:"std::cast",desc:"Casts the value at `src` to U. The two types must have the same length."},{ty:"fn",name:"forget",path:"std::cast",desc:"Move a thing into the void"},{ty:"fn",name:"bump_box_refcount",path:"std::cast",desc:"Force-increment the reference count on a shared box. If used\ncarelessly, this can leak the box."},{ty:"fn",name:"transmute",path:"std::cast",desc:"Transform a value of one type into a value of another type.\nBoth types must have the same size and alignment."},{ty:"fn",name:"transmute_mut",path:"std::cast",desc:"Coerce an immutable reference to be mutable."},{ty:"fn",name:"transmute_region",path:"std::cast",desc:"Coerce a reference to have an arbitrary associated region."},{ty:"fn",name:"transmute_mut_unsafe",path:"std::cast",desc:"Coerce an immutable reference to be mutable."},{ty:"fn",name:"transmute_immut_unsafe",path:"std::cast",desc:"Coerce an immutable reference to be mutable."},{ty:"fn",name:"transmute_mut_region",path:"std::cast",desc:"Coerce a mutable reference to have an arbitrary associated region."},{ty:"fn",name:"copy_lifetime",path:"std::cast",desc:"Transforms lifetime of the second pointer to match the first."},{ty:"fn",name:"copy_mut_lifetime",path:"std::cast",desc:"Transforms lifetime of the second pointer to match the first."},{ty:"fn",name:"copy_lifetime_vec",path:"std::cast",desc:"Transforms lifetime of the second pointer to match the first."},{ty:"mod",name:"fmt",path:"std",desc:"Utilities for formatting and printing strings"},{ty:"struct",name:"Radix",path:"std::fmt",desc:"A radix with in the range of `2..36`."},{ty:"struct",name:"RadixFmt",path:"std::fmt",desc:"A helper type for formatting radixes."},{ty:"struct",name:"Formatter",path:"std::fmt",desc:"A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits."},{ty:"structfield",name:"flags",path:"std::fmt",desc:"Flags for formatting (packed version of rt::Flag)",parent:'169024'},{ty:"structfield",name:"fill",path:"std::fmt",desc:"Character used as 'fill' whenever there is alignment",parent:'169024'},{ty:"structfield",name:"align",path:"std::fmt",desc:"Boolean indication of whether the output should be left-aligned",parent:'169024'},{ty:"structfield",name:"width",path:"std::fmt",desc:"Optionally specified integer width that the output should be",parent:'169024'},{ty:"structfield",name:"precision",path:"std::fmt",desc:"Optionally specified precision for numeric types",parent:'169024'},{ty:"structfield",name:"buf",path:"std::fmt",desc:"Output buffer.",parent:'169024'},{ty:"struct",name:"Argument",path:"std::fmt",desc:"This struct represents the generic \"argument\" which is taken by the Xprintf\nfamily of functions. It contains a function to format the given value. At\ncompile time it is ensured that the function and the value have the correct\ntypes, and then this struct is used to canonicalize arguments to one type."},{ty:"struct",name:"Arguments",path:"std::fmt",desc:"This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification."},{ty:"fn",name:"radix",path:"std::fmt",desc:"Constructs a radix formatter in the range of `2..36`."},{ty:"fn",name:"write",path:"std::fmt",desc:"The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided."},{ty:"fn",name:"writeln",path:"std::fmt",desc:"The `writeln` function takes the same arguments as `write`, except that it\nwill also write a newline (`\\n`) character at the end of the format string."},{ty:"fn",name:"write_unsafe",path:"std::fmt",desc:"The `write_unsafe` function takes an output stream, a precompiled format\nstring, and a list of arguments. The arguments will be formatted according\nto the specified format string into the output stream provided."},{ty:"fn",name:"format",path:"std::fmt",desc:"The format function takes a precompiled format string and a list of\narguments, to return the resulting formatted string."},{ty:"fn",name:"format_unsafe",path:"std::fmt",desc:"The unsafe version of the formatting function."},{ty:"mod",name:"parse",path:"std::fmt",desc:"Parsing of format strings"},{ty:"struct",name:"Argument",path:"std::fmt::parse",desc:"Representation of an argument specification."},{ty:"structfield",name:"position",path:"std::fmt::parse",desc:"Where to find this argument",parent:'165371'},{ty:"structfield",name:"format",path:"std::fmt::parse",desc:"How to format the argument",parent:'165371'},{ty:"structfield",name:"method",path:"std::fmt::parse",desc:"If not `None`, what method to invoke on the argument",parent:'165371'},{ty:"struct",name:"FormatSpec",path:"std::fmt::parse",desc:"Specification for the formatting of an argument in the format string."},{ty:"structfield",name:"fill",path:"std::fmt::parse",desc:"Optionally specified character to fill alignment with",parent:'165504'},{ty:"structfield",name:"align",path:"std::fmt::parse",desc:"Optionally specified alignment",parent:'165504'},{ty:"structfield",name:"flags",path:"std::fmt::parse",desc:"Packed version of various flags provided",parent:'165504'},{ty:"structfield",name:"precision",path:"std::fmt::parse",desc:"The integer precision to use",parent:'165504'},{ty:"structfield",name:"width",path:"std::fmt::parse",desc:"The string width requested for the resulting format",parent:'165504'},{ty:"structfield",name:"ty",path:"std::fmt::parse",desc:"The descriptor string representing the name of the format desired for\nthis argument, this can be empty or any number of characters, although\nit is required to be one word.",parent:'165504'},{ty:"struct",name:"PluralArm",path:"std::fmt::parse",desc:"Structure representing one \"arm\" of the `plural` function."},{ty:"structfield",name:"selector",path:"std::fmt::parse",desc:"A selector can either be specified by a keyword or with an integer\nliteral.",parent:'166628'},{ty:"structfield",name:"result",path:"std::fmt::parse",desc:"Array of pieces which are the format of this arm",parent:'166628'},{ty:"struct",name:"SelectArm",path:"std::fmt::parse",desc:"Structure representing one \"arm\" of the `select` function."},{ty:"structfield",name:"selector",path:"std::fmt::parse",desc:"String selector which guards this arm",parent:'166910'},{ty:"structfield",name:"result",path:"std::fmt::parse",desc:"Array of pieces which are the format of this arm",parent:'166910'},{ty:"struct",name:"Parser",path:"std::fmt::parse",desc:"The parser structure for interpreting the input format string. This is\nmodelled as an iterator over `Piece` structures to form a stream of tokens\nbeing output."},{ty:"structfield",name:"errors",path:"std::fmt::parse",desc:"Error messages accumulated during parsing",parent:'167017'},{ty:"enum",name:"Piece",path:"std::fmt::parse",desc:"A piece is a portion of the format string which represents the next part to\nemit. These are emitted as a stream by the `Parser` class."},{ty:"variant",name:"String",path:"std::fmt::parse",desc:"A literal string which should directly be emitted",parent:'165227'},{ty:"variant",name:"CurrentArgument",path:"std::fmt::parse",desc:"A back-reference to whatever the current argument is. This is used\ninside of a method call to refer back to the original argument.",parent:'165227'},{ty:"variant",name:"Argument",path:"std::fmt::parse",desc:"This describes that formatting should process the next argument (as\nspecified inside) for emission.",parent:'165227'},{ty:"enum",name:"Position",path:"std::fmt::parse",desc:"Enum describing where an argument for a format can be located."},{ty:"variant",name:"ArgumentNext",path:"std::fmt::parse",desc:"",parent:'165712'},{ty:"variant",name:"ArgumentIs",path:"std::fmt::parse",desc:"",parent:'165712'},{ty:"variant",name:"ArgumentNamed",path:"std::fmt::parse",desc:"",parent:'165712'},{ty:"enum",name:"Alignment",path:"std::fmt::parse",desc:"Enum of alignments which are supported."},{ty:"variant",name:"AlignLeft",path:"std::fmt::parse",desc:"",parent:'165855'},{ty:"variant",name:"AlignRight",path:"std::fmt::parse",desc:"",parent:'165855'},{ty:"variant",name:"AlignUnknown",path:"std::fmt::parse",desc:"",parent:'165855'},{ty:"enum",name:"Flag",path:"std::fmt::parse",desc:"Various flags which can be applied to format strings, the meaning of these\nflags is defined by the formatters themselves."},{ty:"variant",name:"FlagSignPlus",path:"std::fmt::parse",desc:"",parent:'165941'},{ty:"variant",name:"FlagSignMinus",path:"std::fmt::parse",desc:"",parent:'165941'},{ty:"variant",name:"FlagAlternate",path:"std::fmt::parse",desc:"",parent:'165941'},{ty:"variant",name:"FlagSignAwareZeroPad",path:"std::fmt::parse",desc:"",parent:'165941'},{ty:"enum",name:"Count",path:"std::fmt::parse",desc:"A count is used for the precision and width parameters of an integer, and\ncan reference either an argument or a literal integer."},{ty:"variant",name:"CountIs",path:"std::fmt::parse",desc:"",parent:'166044'},{ty:"variant",name:"CountIsName",path:"std::fmt::parse",desc:"",parent:'166044'},{ty:"variant",name:"CountIsParam",path:"std::fmt::parse",desc:"",parent:'166044'},{ty:"variant",name:"CountIsNextParam",path:"std::fmt::parse",desc:"",parent:'166044'},{ty:"variant",name:"CountImplied",path:"std::fmt::parse",desc:"",parent:'166044'},{ty:"enum",name:"Method",path:"std::fmt::parse",desc:"Enum describing all of the possible methods which the formatting language\ncurrently supports."},{ty:"variant",name:"Plural",path:"std::fmt::parse",desc:"A plural method selects on an integer over a list of either integer or\nkeyword-defined clauses. The meaning of the keywords is defined by the\ncurrent locale.",parent:'166246'},{ty:"variant",name:"Select",path:"std::fmt::parse",desc:"A select method selects over a string. Each arm is a different string\nwhich can be selected for.",parent:'166246'},{ty:"enum",name:"PluralSelector",path:"std::fmt::parse",desc:"A selector for what pluralization a plural method should take"},{ty:"variant",name:"Keyword",path:"std::fmt::parse",desc:"One of the plural keywords should be used",parent:'166459'},{ty:"variant",name:"Literal",path:"std::fmt::parse",desc:"A literal pluralization should be used",parent:'166459'},{ty:"enum",name:"PluralKeyword",path:"std::fmt::parse",desc:"Enum of the 5 CLDR plural keywords. There is one more, \"other\", but that is\nspecially placed in the `Plural` variant of `Method`"},{ty:"variant",name:"Zero",path:"std::fmt::parse",desc:"",parent:'166733'},{ty:"variant",name:"One",path:"std::fmt::parse",desc:"",parent:'166733'},{ty:"variant",name:"Two",path:"std::fmt::parse",desc:"",parent:'166733'},{ty:"variant",name:"Few",path:"std::fmt::parse",desc:"",parent:'166733'},{ty:"variant",name:"Many",path:"std::fmt::parse",desc:"",parent:'166733'},{ty:"method",name:"eq",path:"std::fmt::parse",desc:"",parent:'165227'},{ty:"method",name:"ne",path:"std::fmt::parse",desc:"",parent:'165227'},{ty:"method",name:"eq",path:"std::fmt::parse",desc:"",parent:'165371'},{ty:"method",name:"ne",path:"std::fmt::parse",desc:"",parent:'165371'},{ty:"method",name:"eq",path:"std::fmt::parse",desc:"",parent:'165504'},{ty:"method",name:"ne",path:"std::fmt::parse",desc:"",parent:'165504'},{ty:"method",name:"eq",path:"std::fmt::parse",desc:"",parent:'165712'},{ty:"method",name:"ne",path:"std::fmt::parse",desc:"",parent:'165712'},{ty:"method",name:"eq",path:"std::fmt::parse",desc:"",parent:'165855'},{ty:"method",name:"ne",path:"std::fmt::parse",desc:"",parent:'165855'},{ty:"method",name:"eq",path:"std::fmt::parse",desc:"",parent:'165941'},{ty:"method",name:"ne",path:"std::fmt::parse",desc:"",parent:'165941'},{ty:"method",name:"eq",path:"std::fmt::parse",desc:"",parent:'166044'},{ty:"method",name:"ne",path:"std::fmt::parse",desc:"",parent:'166044'},{ty:"method",name:"eq",path:"std::fmt::parse",desc:"",parent:'166246'},{ty:"method",name:"ne",path:"std::fmt::parse",desc:"",parent:'166246'},{ty:"method",name:"hash",path:"std::fmt::parse",desc:"",parent:'166459'},{ty:"method",name:"eq",path:"std::fmt::parse",desc:"",parent:'166459'},{ty:"method",name:"ne",path:"std::fmt::parse",desc:"",parent:'166459'},{ty:"method",name:"eq",path:"std::fmt::parse",desc:"",parent:'166628'},{ty:"method",name:"ne",path:"std::fmt::parse",desc:"",parent:'166628'},{ty:"method",name:"hash",path:"std::fmt::parse",desc:"",parent:'166733'},{ty:"method",name:"eq",path:"std::fmt::parse",desc:"",parent:'166733'},{ty:"method",name:"ne",path:"std::fmt::parse",desc:"",parent:'166733'},{ty:"method",name:"eq",path:"std::fmt::parse",desc:"",parent:'166910'},{ty:"method",name:"ne",path:"std::fmt::parse",desc:"",parent:'166910'},{ty:"method",name:"next",path:"std::fmt::parse",desc:"",parent:'167017'},{ty:"method",name:"new",path:"std::fmt::parse",desc:"Creates a new parser for the given format string",parent:'167017'},{ty:"typedef",name:"Result",path:"std::fmt",desc:""},{ty:"trait",name:"Show",path:"std::fmt",desc:"When a format is not otherwise specified, types are formatted by ascribing\nto this trait. There is not an explicit way of selecting this trait to be\nused for formatting, it is only if no other format is specified."},{ty:"tymethod",name:"fmt",path:"std::fmt",desc:"",parent:'169133'},{ty:"trait",name:"Bool",path:"std::fmt",desc:"Format trait for the `b` character"},{ty:"tymethod",name:"fmt",path:"std::fmt",desc:"",parent:'169145'},{ty:"trait",name:"Char",path:"std::fmt",desc:"Format trait for the `c` character"},{ty:"tymethod",name:"fmt",path:"std::fmt",desc:"",parent:'169157'},{ty:"trait",name:"Signed",path:"std::fmt",desc:"Format trait for the `i` and `d` characters"},{ty:"tymethod",name:"fmt",path:"std::fmt",desc:"",parent:'169169'},{ty:"trait",name:"Unsigned",path:"std::fmt",desc:"Format trait for the `u` character"},{ty:"tymethod",name:"fmt",path:"std::fmt",desc:"",parent:'169181'},{ty:"trait",name:"Octal",path:"std::fmt",desc:"Format trait for the `o` character"},{ty:"tymethod",name:"fmt",path:"std::fmt",desc:"",parent:'169193'},{ty:"trait",name:"Binary",path:"std::fmt",desc:"Format trait for the `t` character"},{ty:"tymethod",name:"fmt",path:"std::fmt",desc:"",parent:'169205'},{ty:"trait",name:"LowerHex",path:"std::fmt",desc:"Format trait for the `x` character"},{ty:"tymethod",name:"fmt",path:"std::fmt",desc:"",parent:'169217'},{ty:"trait",name:"UpperHex",path:"std::fmt",desc:"Format trait for the `X` character"},{ty:"tymethod",name:"fmt",path:"std::fmt",desc:"",parent:'169229'},{ty:"trait",name:"String",path:"std::fmt",desc:"Format trait for the `s` character"},{ty:"tymethod",name:"fmt",path:"std::fmt",desc:"",parent:'169241'},{ty:"trait",name:"Poly",path:"std::fmt",desc:"Format trait for the `?` character"},{ty:"tymethod",name:"fmt",path:"std::fmt",desc:"",parent:'169253'},{ty:"trait",name:"Pointer",path:"std::fmt",desc:"Format trait for the `p` character"},{ty:"tymethod",name:"fmt",path:"std::fmt",desc:"",parent:'169265'},{ty:"trait",name:"Float",path:"std::fmt",desc:"Format trait for the `f` character"},{ty:"tymethod",name:"fmt",path:"std::fmt",desc:"",parent:'169277'},{ty:"trait",name:"LowerExp",path:"std::fmt",desc:"Format trait for the `e` character"},{ty:"tymethod",name:"fmt",path:"std::fmt",desc:"",parent:'169289'},{ty:"trait",name:"UpperExp",path:"std::fmt",desc:"Format trait for the `E` character"},{ty:"tymethod",name:"fmt",path:"std::fmt",desc:"",parent:'169301'},{ty:"method",name:"pad_integral",path:"std::fmt",desc:"Performs the correct padding for an integer which has already been\nemitted into a byte-array. The byte-array should *not* contain the sign\nfor the integer, that will be added by this method.",parent:'169024'},{ty:"method",name:"pad",path:"std::fmt",desc:"This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",parent:'169024'},{ty:"mod",name:"mem",path:"std",desc:"Basic functions for dealing with memory"},{ty:"fn",name:"size_of",path:"std::mem",desc:"Returns the size of a type in bytes."},{ty:"fn",name:"size_of_val",path:"std::mem",desc:"Returns the size of the type that `_val` points to in bytes."},{ty:"fn",name:"nonzero_size_of",path:"std::mem",desc:"Returns the size of a type in bytes, or 1 if the actual size is zero."},{ty:"fn",name:"nonzero_size_of_val",path:"std::mem",desc:"Returns the size in bytes of the type of the value that `_val` points to."},{ty:"fn",name:"min_align_of",path:"std::mem",desc:"Returns the ABI-required minimum alignment of a type"},{ty:"fn",name:"min_align_of_val",path:"std::mem",desc:"Returns the ABI-required minimum alignment of the type of the value that\n`_val` points to"},{ty:"fn",name:"pref_align_of",path:"std::mem",desc:"Returns the preferred alignment of a type"},{ty:"fn",name:"pref_align_of_val",path:"std::mem",desc:"Returns the preferred alignment of the type of the value that\n`_val` points to"},{ty:"fn",name:"init",path:"std::mem",desc:"Create a value initialized to zero."},{ty:"fn",name:"uninit",path:"std::mem",desc:"Create an uninitialized value."},{ty:"fn",name:"move_val_init",path:"std::mem",desc:"Move a value to an uninitialized memory location."},{ty:"fn",name:"to_le16",path:"std::mem",desc:"Convert an i16 to little endian from the target's endianness."},{ty:"fn",name:"to_le32",path:"std::mem",desc:"Convert an i32 to little endian from the target's endianness."},{ty:"fn",name:"to_le64",path:"std::mem",desc:"Convert an i64 to little endian from the target's endianness."},{ty:"fn",name:"to_be16",path:"std::mem",desc:"Convert an i16 to big endian from the target's endianness."},{ty:"fn",name:"to_be32",path:"std::mem",desc:"Convert an i32 to big endian from the target's endianness."},{ty:"fn",name:"to_be64",path:"std::mem",desc:"Convert an i64 to big endian from the target's endianness."},{ty:"fn",name:"from_le16",path:"std::mem",desc:"Convert an i16 from little endian to the target's endianness."},{ty:"fn",name:"from_le32",path:"std::mem",desc:"Convert an i32 from little endian to the target's endianness."},{ty:"fn",name:"from_le64",path:"std::mem",desc:"Convert an i64 from little endian to the target's endianness."},{ty:"fn",name:"from_be16",path:"std::mem",desc:"Convert an i16 from big endian to the target's endianness."},{ty:"fn",name:"from_be32",path:"std::mem",desc:"Convert an i32 from big endian to the target's endianness."},{ty:"fn",name:"from_be64",path:"std::mem",desc:"Convert an i64 from big endian to the target's endianness."},{ty:"fn",name:"swap",path:"std::mem",desc:"Swap the values at two mutable locations of the same type, without\ndeinitialising or copying either one."},{ty:"fn",name:"replace",path:"std::mem",desc:"Replace the value at a mutable location with a new one, returning the old\nvalue, without deinitialising or copying either one."},{ty:"fn",name:"drop",path:"std::mem",desc:"Disposes of a value."},{ty:"mod",name:"repr",path:"std",desc:"More runtime type reflection"},{ty:"struct",name:"ReprVisitor",path:"std::repr",desc:""},{ty:"fn",name:"ReprVisitor",path:"std::repr",desc:""},{ty:"fn",name:"write_repr",path:"std::repr",desc:""},{ty:"fn",name:"repr_to_str",path:"std::repr",desc:""},{ty:"trait",name:"Repr",path:"std::repr",desc:"Representations"},{ty:"tymethod",name:"write_repr",path:"std::repr",desc:"",parent:'172433'},{ty:"method",name:"move_ptr",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"push_ptr",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"pop_ptr",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"get",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_inner",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_ptr_inner",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"write",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"write_escaped_slice",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"write_mut_qualifier",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"write_vec_range",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"write_unboxed_vec_repr",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_bot",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_nil",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_bool",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_int",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_i8",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_i16",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_i32",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_i64",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_uint",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_u8",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_u16",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_u32",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_u64",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_f32",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_f64",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_char",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_estr_box",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_estr_uniq",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_estr_slice",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_estr_fixed",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_box",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_uniq",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_ptr",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_rptr",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_vec",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_unboxed_vec",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_evec_box",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_evec_uniq",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_evec_slice",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_evec_fixed",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_enter_rec",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_rec_field",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_leave_rec",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_enter_class",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_class_field",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_leave_class",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_enter_tup",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_tup_field",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_leave_tup",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_enter_enum",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_enter_enum_variant",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_enum_variant_field",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_leave_enum_variant",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_leave_enum",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_enter_fn",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_fn_input",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_fn_output",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_leave_fn",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_trait",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_param",path:"std::repr",desc:"",parent:'173646'},{ty:"method",name:"visit_self",path:"std::repr",desc:"",parent:'173646'},{ty:"mod",name:"reflect",path:"std",desc:"Runtime type reflection"},{ty:"struct",name:"MovePtrAdaptor",path:"std::reflect",desc:"Adaptor to wrap around visitors implementing MovePtr."},{ty:"fn",name:"align",path:"std::reflect",desc:"Helper function for alignment calculation."},{ty:"fn",name:"MovePtrAdaptor",path:"std::reflect",desc:""},{ty:"trait",name:"MovePtr",path:"std::reflect",desc:"Trait for visitor that wishes to reflect on data. To use this, create a\nstruct that encapsulates the set of pointers you wish to walk through a\ndata structure, and implement both `MovePtr` for it as well as `TyVisitor`;\nthen build a MovePtrAdaptor wrapped around your struct."},{ty:"tymethod",name:"move_ptr",path:"std::reflect",desc:"",parent:'177221'},{ty:"tymethod",name:"push_ptr",path:"std::reflect",desc:"",parent:'177221'},{ty:"tymethod",name:"pop_ptr",path:"std::reflect",desc:"",parent:'177221'},{ty:"method",name:"bump",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"align",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"align_to",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"bump_past",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"unwrap",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_bot",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_nil",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_bool",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_int",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_i8",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_i16",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_i32",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_i64",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_uint",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_u8",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_u16",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_u32",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_u64",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_f32",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_f64",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_char",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_estr_box",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_estr_uniq",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_estr_slice",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_estr_fixed",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_box",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_uniq",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_ptr",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_rptr",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_unboxed_vec",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_vec",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_evec_box",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_evec_uniq",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_evec_slice",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_evec_fixed",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_enter_rec",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_rec_field",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_leave_rec",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_enter_class",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_class_field",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_leave_class",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_enter_tup",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_tup_field",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_leave_tup",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_enter_fn",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_fn_input",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_fn_output",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_leave_fn",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_enter_enum",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_enter_enum_variant",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_enum_variant_field",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_leave_enum_variant",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_leave_enum",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_trait",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_param",path:"std::reflect",desc:"",parent:'177273'},{ty:"method",name:"visit_self",path:"std::reflect",desc:"",parent:'177273'},{ty:"mod",name:"intrinsics",path:"std",desc:"rustc compiler intrinsics."},{ty:"struct",name:"TyDesc",path:"std::intrinsics",desc:""},{ty:"structfield",name:"size",path:"std::intrinsics",desc:"",parent:'181307'},{ty:"structfield",name:"align",path:"std::intrinsics",desc:"",parent:'181307'},{ty:"structfield",name:"drop_glue",path:"std::intrinsics",desc:"",parent:'181307'},{ty:"structfield",name:"visit_glue",path:"std::intrinsics",desc:"",parent:'181307'},{ty:"structfield",name:"name",path:"std::intrinsics",desc:"",parent:'181307'},{ty:"struct",name:"TypeId",path:"std::intrinsics",desc:"`TypeId` represents a globally unique identifier for a type"},{ty:"enum",name:"Opaque",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_cxchg",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_cxchg_acq",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_cxchg_rel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_cxchg_acqrel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_cxchg_relaxed",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_load",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_load_acq",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_load_relaxed",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_store",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_store_rel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_store_relaxed",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xchg",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xchg_acq",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xchg_rel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xchg_acqrel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xchg_relaxed",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xadd",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xadd_acq",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xadd_rel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xadd_acqrel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xadd_relaxed",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xsub",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xsub_acq",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xsub_rel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xsub_acqrel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xsub_relaxed",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_and",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_and_acq",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_and_rel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_and_acqrel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_and_relaxed",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_nand",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_nand_acq",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_nand_rel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_nand_acqrel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_nand_relaxed",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_or",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_or_acq",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_or_rel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_or_acqrel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_or_relaxed",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xor",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xor_acq",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xor_rel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xor_acqrel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xor_relaxed",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_max",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_max_acq",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_max_rel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_max_acqrel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_max_relaxed",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_min",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_min_acq",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_min_rel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_min_acqrel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_min_relaxed",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_umin",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_umin_acq",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_umin_rel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_umin_acqrel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_umin_relaxed",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_umax",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_umax_acq",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_umax_rel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_umax_acqrel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_umax_relaxed",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_fence",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_fence_acq",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_fence_rel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_fence_acqrel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"abort",path:"std::intrinsics",desc:"Abort the execution of the process."},{ty:"ffi",name:"breakpoint",path:"std::intrinsics",desc:"Execute a breakpoint trap, for inspection by a debugger."},{ty:"ffi",name:"volatile_load",path:"std::intrinsics",desc:""},{ty:"ffi",name:"volatile_store",path:"std::intrinsics",desc:""},{ty:"ffi",name:"size_of",path:"std::intrinsics",desc:"The size of a type in bytes."},{ty:"ffi",name:"move_val_init",path:"std::intrinsics",desc:"Move a value to an uninitialized memory location."},{ty:"ffi",name:"min_align_of",path:"std::intrinsics",desc:""},{ty:"ffi",name:"pref_align_of",path:"std::intrinsics",desc:""},{ty:"ffi",name:"get_tydesc",path:"std::intrinsics",desc:"Get a static pointer to a type descriptor."},{ty:"ffi",name:"type_id",path:"std::intrinsics",desc:"Gets an identifier which is globally unique to the specified type. This\nfunction will return the same value for a type regardless of whichever\ncrate it is invoked in."},{ty:"ffi",name:"init",path:"std::intrinsics",desc:"Create a value initialized to zero."},{ty:"ffi",name:"uninit",path:"std::intrinsics",desc:"Create an uninitialized value."},{ty:"ffi",name:"forget",path:"std::intrinsics",desc:"Move a value out of scope without running drop glue."},{ty:"ffi",name:"transmute",path:"std::intrinsics",desc:""},{ty:"ffi",name:"needs_drop",path:"std::intrinsics",desc:"Returns `true` if a type requires drop glue."},{ty:"ffi",name:"owns_managed",path:"std::intrinsics",desc:"Returns `true` if a type is managed (will be allocated on the local heap)"},{ty:"ffi",name:"visit_tydesc",path:"std::intrinsics",desc:""},{ty:"ffi",name:"offset",path:"std::intrinsics",desc:"Calculates the offset from a pointer. The offset *must* be in-bounds of\nthe object, or one-byte-past-the-end. An arithmetic overflow is also\nundefined behaviour."},{ty:"ffi",name:"copy_nonoverlapping_memory",path:"std::intrinsics",desc:"Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`"},{ty:"ffi",name:"copy_memory",path:"std::intrinsics",desc:"Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`"},{ty:"ffi",name:"set_memory",path:"std::intrinsics",desc:"Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\nsize of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`"},{ty:"ffi",name:"sqrtf32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"sqrtf64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"powif32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"powif64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"sinf32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"sinf64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"cosf32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"cosf64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"powf32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"powf64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"expf32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"expf64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"exp2f32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"exp2f64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"logf32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"logf64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"log10f32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"log10f64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"log2f32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"log2f64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"fmaf32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"fmaf64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"fabsf32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"fabsf64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"copysignf32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"copysignf64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"floorf32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"floorf64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"ceilf32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"ceilf64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"truncf32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"truncf64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"rintf32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"rintf64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"nearbyintf32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"nearbyintf64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"roundf32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"roundf64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"ctpop8",path:"std::intrinsics",desc:""},{ty:"ffi",name:"ctpop16",path:"std::intrinsics",desc:""},{ty:"ffi",name:"ctpop32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"ctpop64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"ctlz8",path:"std::intrinsics",desc:""},{ty:"ffi",name:"ctlz16",path:"std::intrinsics",desc:""},{ty:"ffi",name:"ctlz32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"ctlz64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"cttz8",path:"std::intrinsics",desc:""},{ty:"ffi",name:"cttz16",path:"std::intrinsics",desc:""},{ty:"ffi",name:"cttz32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"cttz64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"bswap16",path:"std::intrinsics",desc:""},{ty:"ffi",name:"bswap32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"bswap64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"i8_add_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"i16_add_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"i32_add_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"i64_add_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"u8_add_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"u16_add_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"u32_add_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"u64_add_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"i8_sub_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"i16_sub_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"i32_sub_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"i64_sub_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"u8_sub_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"u16_sub_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"u32_sub_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"u64_sub_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"i8_mul_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"i16_mul_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"i32_mul_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"i64_mul_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"u8_mul_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"u16_mul_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"u32_mul_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"u64_mul_with_overflow",path:"std::intrinsics",desc:""},{ty:"typedef",name:"GlueFn",path:"std::intrinsics",desc:""},{ty:"typedef",name:"Disr",path:"std::intrinsics",desc:""},{ty:"trait",name:"TyVisitor",path:"std::intrinsics",desc:""},{ty:"tymethod",name:"visit_bot",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_nil",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_bool",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_int",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_i8",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_i16",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_i32",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_i64",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_uint",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_u8",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_u16",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_u32",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_u64",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_f32",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_f64",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_char",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_estr_box",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_estr_uniq",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_estr_slice",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_estr_fixed",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_box",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_uniq",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_ptr",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_rptr",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_vec",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_unboxed_vec",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_evec_box",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_evec_uniq",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_evec_slice",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_evec_fixed",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_enter_rec",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_rec_field",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_leave_rec",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_enter_class",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_class_field",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_leave_class",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_enter_tup",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_tup_field",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_leave_tup",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_enter_enum",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_enter_enum_variant",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_enum_variant_field",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_leave_enum_variant",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_leave_enum",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_enter_fn",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_fn_input",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_fn_output",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_leave_fn",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_trait",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_param",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"tymethod",name:"visit_self",path:"std::intrinsics",desc:"",parent:'181329'},{ty:"method",name:"fmt",path:"std::intrinsics",desc:"",parent:'183832'},{ty:"method",name:"hash",path:"std::intrinsics",desc:"",parent:'183832'},{ty:"method",name:"eq",path:"std::intrinsics",desc:"",parent:'183832'},{ty:"method",name:"ne",path:"std::intrinsics",desc:"",parent:'183832'},{ty:"method",name:"of",path:"std::intrinsics",desc:"Returns the `TypeId` of the type this generic function has been instantiated with",parent:'183832'},{ty:"mod",name:"raw",path:"std",desc:"Contains struct definitions for the layout of compiler built-in types."},{ty:"struct",name:"Box",path:"std::raw",desc:"The representation of a Rust managed box"},{ty:"structfield",name:"ref_count",path:"std::raw",desc:"",parent:'184048'},{ty:"structfield",name:"drop_glue",path:"std::raw",desc:"",parent:'184048'},{ty:"structfield",name:"prev",path:"std::raw",desc:"",parent:'184048'},{ty:"structfield",name:"next",path:"std::raw",desc:"",parent:'184048'},{ty:"structfield",name:"data",path:"std::raw",desc:"",parent:'184048'},{ty:"struct",name:"Vec",path:"std::raw",desc:"The representation of a Rust vector"},{ty:"structfield",name:"fill",path:"std::raw",desc:"",parent:'184076'},{ty:"structfield",name:"alloc",path:"std::raw",desc:"",parent:'184076'},{ty:"structfield",name:"data",path:"std::raw",desc:"",parent:'184076'},{ty:"struct",name:"Slice",path:"std::raw",desc:"The representation of a Rust slice"},{ty:"structfield",name:"data",path:"std::raw",desc:"",parent:'184092'},{ty:"structfield",name:"len",path:"std::raw",desc:"",parent:'184092'},{ty:"struct",name:"Closure",path:"std::raw",desc:"The representation of a Rust closure"},{ty:"structfield",name:"code",path:"std::raw",desc:"",parent:'184101'},{ty:"structfield",name:"env",path:"std::raw",desc:"",parent:'184101'},{ty:"struct",name:"Procedure",path:"std::raw",desc:"The representation of a Rust procedure (`proc()`)"},{ty:"structfield",name:"code",path:"std::raw",desc:"",parent:'184108'},{ty:"structfield",name:"env",path:"std::raw",desc:"",parent:'184108'},{ty:"struct",name:"TraitObject",path:"std::raw",desc:"The representation of a Rust trait object."},{ty:"structfield",name:"vtable",path:"std::raw",desc:"",parent:'184115'},{ty:"structfield",name:"data",path:"std::raw",desc:"",parent:'184115'},{ty:"typedef",name:"String",path:"std::raw",desc:"The representation of a Rust string"},{ty:"trait",name:"Repr",path:"std::raw",desc:"This trait is meant to map equivalences between raw structs and their\ncorresponding rust values."},{ty:"method",name:"repr",path:"std::raw",desc:"This function \"unwraps\" a rust value (without consuming it) into its raw\nstruct representation. This can be used to read/write different values\nfor the struct. This is a safe method because by default it does not\nenable write-access to the fields of the return value in safe code.",parent:'184122'},{ty:"mod",name:"rt",path:"std",desc:"Runtime services, including the task scheduler and I/O dispatcher"},{ty:"fn",name:"default_sched_threads",path:"std::rt",desc:"Get's the number of scheduler threads requested by the environment\neither `RUST_THREADS` or `num_cpus`."},{ty:"fn",name:"init",path:"std::rt",desc:"One-time runtime initialization."},{ty:"fn",name:"at_exit",path:"std::rt",desc:"Enqueues a procedure to run when the runtime is cleaned up"},{ty:"fn",name:"cleanup",path:"std::rt",desc:"One-time runtime cleanup."},{ty:"mod",name:"global_heap",path:"std::rt",desc:"The global (exchange) heap.\nThe global (exchange) heap."},{ty:"fn",name:"get_box_size",path:"std::rt::global_heap",desc:""},{ty:"fn",name:"malloc_raw",path:"std::rt::global_heap",desc:"A wrapper around libc::malloc, aborting on out-of-memory"},{ty:"fn",name:"realloc_raw",path:"std::rt::global_heap",desc:"A wrapper around libc::realloc, aborting on out-of-memory"},{ty:"fn",name:"exchange_malloc",path:"std::rt::global_heap",desc:"The allocator for unique pointers without contained managed pointers."},{ty:"fn",name:"closure_exchange_malloc_",path:"std::rt::global_heap",desc:""},{ty:"fn",name:"closure_exchange_malloc",path:"std::rt::global_heap",desc:""},{ty:"fn",name:"exchange_free_",path:"std::rt::global_heap",desc:""},{ty:"fn",name:"exchange_free",path:"std::rt::global_heap",desc:""},{ty:"mod",name:"task",path:"std::rt",desc:"Implementations of language-critical runtime features like @.\nImplementations of language-critical runtime features like @.\nLanguage-level runtime services that should reasonably expected\nto be available 'everywhere'. Local heaps, GC, unwinding,\nlocal storage, and logging. Even a 'freestanding' Rust would likely want\nto implement this."},{ty:"struct",name:"Task",path:"std::rt::task",desc:"The Task struct represents all state associated with a rust\ntask. There are at this point two primary \"subtypes\" of task,\nhowever instead of using a subtype we just have a \"task_type\" field\nin the struct. This contains a pointer to another struct that holds\nthe type-specific state."},{ty:"structfield",name:"heap",path:"std::rt::task",desc:"",parent:'235342'},{ty:"structfield",name:"gc",path:"std::rt::task",desc:"",parent:'235342'},{ty:"structfield",name:"storage",path:"std::rt::task",desc:"",parent:'235342'},{ty:"structfield",name:"unwinder",path:"std::rt::task",desc:"",parent:'235342'},{ty:"structfield",name:"death",path:"std::rt::task",desc:"",parent:'235342'},{ty:"structfield",name:"destroyed",path:"std::rt::task",desc:"",parent:'235342'},{ty:"structfield",name:"name",path:"std::rt::task",desc:"",parent:'235342'},{ty:"structfield",name:"stdout",path:"std::rt::task",desc:"",parent:'235342'},{ty:"structfield",name:"stderr",path:"std::rt::task",desc:"",parent:'235342'},{ty:"struct",name:"GarbageCollector",path:"std::rt::task",desc:""},{ty:"struct",name:"LocalStorage",path:"std::rt::task",desc:""},{ty:"struct",name:"Death",path:"std::rt::task",desc:"Per-task state related to task death, killing, failure, etc."},{ty:"structfield",name:"on_exit",path:"std::rt::task",desc:"",parent:'235420'},{ty:"struct",name:"BlockedTasks",path:"std::rt::task",desc:""},{ty:"enum",name:"BlockedTask",path:"std::rt::task",desc:"A handle to a blocked task. Usually this means having the ~Task pointer by\nownership, but if the task is killable, a killer can steal it at any time."},{ty:"variant",name:"Owned",path:"std::rt::task",desc:"",parent:'235393'},{ty:"variant",name:"Shared",path:"std::rt::task",desc:"",parent:'235393'},{ty:"enum",name:"DeathAction",path:"std::rt::task",desc:""},{ty:"variant",name:"Execute",path:"std::rt::task",desc:"Action to be done with the exit code. If set, also makes the task wait\nuntil all its watched children exit before collecting the status.",parent:'235405'},{ty:"variant",name:"SendMessage",path:"std::rt::task",desc:"A channel to send the result of the task on when the task exits",parent:'235405'},{ty:"method",name:"new",path:"std::rt::task",desc:"",parent:'235342'},{ty:"method",name:"run",path:"std::rt::task",desc:"Executes the given closure as if it's running inside this task. The task\nis consumed upon entry, and the destroyed task is returned from this\nfunction in order for the caller to free. This function is guaranteed to\nnot unwind because the closure specified is run inside of a `rust_try`\nblock. (this is the only try/catch block in the world).",parent:'235342'},{ty:"method",name:"put_runtime",path:"std::rt::task",desc:"Inserts a runtime object into this task, transferring ownership to the\ntask. It is illegal to replace a previous runtime object in this task\nwith this argument.",parent:'235342'},{ty:"method",name:"maybe_take_runtime",path:"std::rt::task",desc:"Attempts to extract the runtime as a specific type. If the runtime does\nnot have the provided type, then the runtime is not removed. If the\nruntime does have the specified type, then it is removed and returned\n(transfer of ownership).",parent:'235342'},{ty:"method",name:"spawn_sibling",path:"std::rt::task",desc:"Spawns a sibling to this task. The newly spawned task is configured with\nthe `opts` structure and will run `f` as the body of its code.",parent:'235342'},{ty:"method",name:"deschedule",path:"std::rt::task",desc:"Deschedules the current task, invoking `f` `amt` times. It is not\nrecommended to use this function directly, but rather communication\nprimitives in `std::comm` should be used.",parent:'235342'},{ty:"method",name:"reawaken",path:"std::rt::task",desc:"Wakes up a previously blocked task, optionally specifying whether the\ncurrent task can accept a change in scheduling. This function can only\nbe called on tasks that were previously blocked in `deschedule`.",parent:'235342'},{ty:"method",name:"yield_now",path:"std::rt::task",desc:"Yields control of this task to another task. This function will\neventually return, but possibly not immediately. This is used as an\nopportunity to allow other tasks a chance to run.",parent:'235342'},{ty:"method",name:"maybe_yield",path:"std::rt::task",desc:"Similar to `yield_now`, except that this function may immediately return\nwithout yielding (depending on what the runtime decides to do).",parent:'235342'},{ty:"method",name:"local_io",path:"std::rt::task",desc:"Acquires a handle to the I/O factory that this task contains, normally\nstored in the task's runtime. This factory may not always be available,\nwhich is why the return type is `Option`",parent:'235342'},{ty:"method",name:"stack_bounds",path:"std::rt::task",desc:"Returns the stack bounds for this task in (lo, hi) format. The stack\nbounds may not be known for all tasks, so the return value may be\n`None`.",parent:'235342'},{ty:"method",name:"can_block",path:"std::rt::task",desc:"Returns whether it is legal for this task to block the OS thread that it\nis running on.",parent:'235342'},{ty:"method",name:"drop",path:"std::rt::task",desc:"",parent:'235342'},{ty:"method",name:"next",path:"std::rt::task",desc:"",parent:'235426'},{ty:"method",name:"wake",path:"std::rt::task",desc:"Returns Some if the task was successfully woken; None if already killed.",parent:'235393'},{ty:"method",name:"trash",path:"std::rt::task",desc:"",parent:'235393'},{ty:"method",name:"block",path:"std::rt::task",desc:"Create a blocked task, unless the task was already killed.",parent:'235393'},{ty:"method",name:"make_selectable",path:"std::rt::task",desc:"Converts one blocked task handle to a list of many handles to the same.",parent:'235393'},{ty:"method",name:"cast_to_uint",path:"std::rt::task",desc:"Convert to an unsafe uint value. Useful for storing in a pipe's state\nflag.",parent:'235393'},{ty:"method",name:"cast_from_uint",path:"std::rt::task",desc:"Convert from an unsafe uint value. Useful for retrieving a pipe's state\nflag.",parent:'235393'},{ty:"method",name:"new",path:"std::rt::task",desc:"",parent:'235420'},{ty:"method",name:"collect_failure",path:"std::rt::task",desc:"Collect failure exit codes from children and propagate them to a parent.",parent:'235420'},{ty:"method",name:"drop",path:"std::rt::task",desc:"",parent:'235420'},{ty:"mod",name:"rtio",path:"std::rt",desc:"The EventLoop and internal synchronous I/O interface.\nThe EventLoop and internal synchronous I/O interface."},{ty:"struct",name:"FileOpenConfig",path:"std::rt::rtio",desc:"Data needed to make a successful open(2) call\nUsing unix flag conventions for now, which happens to also be what's supported\nlibuv (it does translation to windows under the hood)."},{ty:"structfield",name:"path",path:"std::rt::rtio",desc:"Path to file to be opened",parent:'236651'},{ty:"structfield",name:"flags",path:"std::rt::rtio",desc:"Flags for file access mode (as per open(2))",parent:'236651'},{ty:"struct",name:"LocalIo",path:"std::rt::rtio",desc:""},{ty:"enum",name:"CloseBehavior",path:"std::rt::rtio",desc:"Description of what to do when a file handle is closed"},{ty:"variant",name:"DontClose",path:"std::rt::rtio",desc:"Do not close this handle when the object is destroyed",parent:'236661'},{ty:"variant",name:"CloseSynchronously",path:"std::rt::rtio",desc:"Synchronously close the handle, meaning that the task will block when\nthe handle is destroyed until it has been fully closed.",parent:'236661'},{ty:"variant",name:"CloseAsynchronously",path:"std::rt::rtio",desc:"Asynchronously closes a handle, meaning that the task will *not* block\nwhen the handle is destroyed, but the handle will still get deallocated\nand cleaned up (but this will happen asynchronously on the local event\nloop).",parent:'236661'},{ty:"trait",name:"Callback",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"call",path:"std::rt::rtio",desc:"",parent:'236582'},{ty:"trait",name:"EventLoop",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"run",path:"std::rt::rtio",desc:"",parent:'236588'},{ty:"tymethod",name:"callback",path:"std::rt::rtio",desc:"",parent:'236588'},{ty:"tymethod",name:"pausable_idle_callback",path:"std::rt::rtio",desc:"",parent:'236588'},{ty:"tymethod",name:"remote_callback",path:"std::rt::rtio",desc:"",parent:'236588'},{ty:"tymethod",name:"io",path:"std::rt::rtio",desc:"The asynchronous I/O services. Not all event loops may provide one.",parent:'236588'},{ty:"tymethod",name:"has_active_io",path:"std::rt::rtio",desc:"",parent:'236588'},{ty:"trait",name:"RemoteCallback",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"fire",path:"std::rt::rtio",desc:"Trigger the remote callback. Note that the number of times the\ncallback is run is not guaranteed. All that is guaranteed is\nthat, after calling 'fire', the callback will be called at\nleast once, but multiple callbacks may be coalesced and\ncallbacks may be called more often requested. Destruction also\ntriggers the callback.",parent:'236645'},{ty:"trait",name:"IoFactory",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"tcp_connect",path:"std::rt::rtio",desc:"",parent:'236797'},{ty:"tymethod",name:"tcp_bind",path:"std::rt::rtio",desc:"",parent:'236797'},{ty:"tymethod",name:"udp_bind",path:"std::rt::rtio",desc:"",parent:'236797'},{ty:"tymethod",name:"unix_bind",path:"std::rt::rtio",desc:"",parent:'236797'},{ty:"tymethod",name:"unix_connect",path:"std::rt::rtio",desc:"",parent:'236797'},{ty:"tymethod",name:"get_host_addresses",path:"std::rt::rtio",desc:"",parent:'236797'},{ty:"tymethod",name:"fs_from_raw_fd",path:"std::rt::rtio",desc:"",parent:'236797'},{ty:"tymethod",name:"fs_open",path:"std::rt::rtio",desc:"",parent:'236797'},{ty:"tymethod",name:"fs_unlink",path:"std::rt::rtio",desc:"",parent:'236797'},{ty:"tymethod",name:"fs_stat",path:"std::rt::rtio",desc:"",parent:'236797'},{ty:"tymethod",name:"fs_mkdir",path:"std::rt::rtio",desc:"",parent:'236797'},{ty:"tymethod",name:"fs_chmod",path:"std::rt::rtio",desc:"",parent:'236797'},{ty:"tymethod",name:"fs_rmdir",path:"std::rt::rtio",desc:"",parent:'236797'},{ty:"tymethod",name:"fs_rename",path:"std::rt::rtio",desc:"",parent:'236797'},{ty:"tymethod",name:"fs_readdir",path:"std::rt::rtio",desc:"",parent:'236797'},{ty:"tymethod",name:"fs_lstat",path:"std::rt::rtio",desc:"",parent:'236797'},{ty:"tymethod",name:"fs_chown",path:"std::rt::rtio",desc:"",parent:'236797'},{ty:"tymethod",name:"fs_readlink",path:"std::rt::rtio",desc:"",parent:'236797'},{ty:"tymethod",name:"fs_symlink",path:"std::rt::rtio",desc:"",parent:'236797'},{ty:"tymethod",name:"fs_link",path:"std::rt::rtio",desc:"",parent:'236797'},{ty:"tymethod",name:"fs_utime",path:"std::rt::rtio",desc:"",parent:'236797'},{ty:"tymethod",name:"timer_init",path:"std::rt::rtio",desc:"",parent:'236797'},{ty:"tymethod",name:"spawn",path:"std::rt::rtio",desc:"",parent:'236797'},{ty:"tymethod",name:"kill",path:"std::rt::rtio",desc:"",parent:'236797'},{ty:"tymethod",name:"pipe_open",path:"std::rt::rtio",desc:"",parent:'236797'},{ty:"tymethod",name:"tty_open",path:"std::rt::rtio",desc:"",parent:'236797'},{ty:"tymethod",name:"signal",path:"std::rt::rtio",desc:"",parent:'236797'},{ty:"trait",name:"RtioTcpListener",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"listen",path:"std::rt::rtio",desc:"",parent:'237283'},{ty:"trait",name:"RtioTcpAcceptor",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"accept",path:"std::rt::rtio",desc:"",parent:'237296'},{ty:"tymethod",name:"accept_simultaneously",path:"std::rt::rtio",desc:"",parent:'237296'},{ty:"tymethod",name:"dont_accept_simultaneously",path:"std::rt::rtio",desc:"",parent:'237296'},{ty:"trait",name:"RtioTcpStream",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"read",path:"std::rt::rtio",desc:"",parent:'237327'},{ty:"tymethod",name:"write",path:"std::rt::rtio",desc:"",parent:'237327'},{ty:"tymethod",name:"peer_name",path:"std::rt::rtio",desc:"",parent:'237327'},{ty:"tymethod",name:"control_congestion",path:"std::rt::rtio",desc:"",parent:'237327'},{ty:"tymethod",name:"nodelay",path:"std::rt::rtio",desc:"",parent:'237327'},{ty:"tymethod",name:"keepalive",path:"std::rt::rtio",desc:"",parent:'237327'},{ty:"tymethod",name:"letdie",path:"std::rt::rtio",desc:"",parent:'237327'},{ty:"tymethod",name:"clone",path:"std::rt::rtio",desc:"",parent:'237327'},{ty:"tymethod",name:"close_write",path:"std::rt::rtio",desc:"",parent:'237327'},{ty:"trait",name:"RtioSocket",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"socket_name",path:"std::rt::rtio",desc:"",parent:'237426'},{ty:"trait",name:"RtioUdpSocket",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"recvfrom",path:"std::rt::rtio",desc:"",parent:'237437'},{ty:"tymethod",name:"sendto",path:"std::rt::rtio",desc:"",parent:'237437'},{ty:"tymethod",name:"join_multicast",path:"std::rt::rtio",desc:"",parent:'237437'},{ty:"tymethod",name:"leave_multicast",path:"std::rt::rtio",desc:"",parent:'237437'},{ty:"tymethod",name:"loop_multicast_locally",path:"std::rt::rtio",desc:"",parent:'237437'},{ty:"tymethod",name:"dont_loop_multicast_locally",path:"std::rt::rtio",desc:"",parent:'237437'},{ty:"tymethod",name:"multicast_time_to_live",path:"std::rt::rtio",desc:"",parent:'237437'},{ty:"tymethod",name:"time_to_live",path:"std::rt::rtio",desc:"",parent:'237437'},{ty:"tymethod",name:"hear_broadcasts",path:"std::rt::rtio",desc:"",parent:'237437'},{ty:"tymethod",name:"ignore_broadcasts",path:"std::rt::rtio",desc:"",parent:'237437'},{ty:"tymethod",name:"clone",path:"std::rt::rtio",desc:"",parent:'237437'},{ty:"trait",name:"RtioTimer",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"sleep",path:"std::rt::rtio",desc:"",parent:'237572'},{ty:"tymethod",name:"oneshot",path:"std::rt::rtio",desc:"",parent:'237572'},{ty:"tymethod",name:"period",path:"std::rt::rtio",desc:"",parent:'237572'},{ty:"trait",name:"RtioFileStream",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"read",path:"std::rt::rtio",desc:"",parent:'237604'},{ty:"tymethod",name:"write",path:"std::rt::rtio",desc:"",parent:'237604'},{ty:"tymethod",name:"pread",path:"std::rt::rtio",desc:"",parent:'237604'},{ty:"tymethod",name:"pwrite",path:"std::rt::rtio",desc:"",parent:'237604'},{ty:"tymethod",name:"seek",path:"std::rt::rtio",desc:"",parent:'237604'},{ty:"tymethod",name:"tell",path:"std::rt::rtio",desc:"",parent:'237604'},{ty:"tymethod",name:"fsync",path:"std::rt::rtio",desc:"",parent:'237604'},{ty:"tymethod",name:"datasync",path:"std::rt::rtio",desc:"",parent:'237604'},{ty:"tymethod",name:"truncate",path:"std::rt::rtio",desc:"",parent:'237604'},{ty:"trait",name:"RtioProcess",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"id",path:"std::rt::rtio",desc:"",parent:'237734'},{ty:"tymethod",name:"kill",path:"std::rt::rtio",desc:"",parent:'237734'},{ty:"tymethod",name:"wait",path:"std::rt::rtio",desc:"",parent:'237734'},{ty:"trait",name:"RtioPipe",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"read",path:"std::rt::rtio",desc:"",parent:'237760'},{ty:"tymethod",name:"write",path:"std::rt::rtio",desc:"",parent:'237760'},{ty:"tymethod",name:"clone",path:"std::rt::rtio",desc:"",parent:'237760'},{ty:"trait",name:"RtioUnixListener",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"listen",path:"std::rt::rtio",desc:"",parent:'237799'},{ty:"trait",name:"RtioUnixAcceptor",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"accept",path:"std::rt::rtio",desc:"",parent:'237811'},{ty:"trait",name:"RtioTTY",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"read",path:"std::rt::rtio",desc:"",parent:'237823'},{ty:"tymethod",name:"write",path:"std::rt::rtio",desc:"",parent:'237823'},{ty:"tymethod",name:"set_raw",path:"std::rt::rtio",desc:"",parent:'237823'},{ty:"tymethod",name:"get_winsize",path:"std::rt::rtio",desc:"",parent:'237823'},{ty:"tymethod",name:"isatty",path:"std::rt::rtio",desc:"",parent:'237823'},{ty:"trait",name:"PausableIdleCallback",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"pause",path:"std::rt::rtio",desc:"",parent:'237887'},{ty:"tymethod",name:"resume",path:"std::rt::rtio",desc:"",parent:'237887'},{ty:"trait",name:"RtioSignal",path:"std::rt::rtio",desc:""},{ty:"method",name:"drop",path:"std::rt::rtio",desc:"",parent:'236665'},{ty:"method",name:"borrow",path:"std::rt::rtio",desc:"Returns the local I/O: either the local scheduler's I/O services or\nthe native I/O services.",parent:'236665'},{ty:"method",name:"maybe_raise",path:"std::rt::rtio",desc:"",parent:'236665'},{ty:"method",name:"new",path:"std::rt::rtio",desc:"",parent:'236665'},{ty:"method",name:"get",path:"std::rt::rtio",desc:"Returns the underlying I/O factory as a trait reference.",parent:'236665'},{ty:"mod",name:"local",path:"std::rt",desc:"The Local trait for types that are accessible via thread-local\nor task-local storage.\nThe Local trait for types that are accessible via thread-local\nor task-local storage."},{ty:"trait",name:"Local",path:"std::rt::local",desc:"Encapsulates some task-local data."},{ty:"tymethod",name:"put",path:"std::rt::local",desc:"",parent:'237903'},{ty:"tymethod",name:"take",path:"std::rt::local",desc:"",parent:'237903'},{ty:"tymethod",name:"try_take",path:"std::rt::local",desc:"",parent:'237903'},{ty:"tymethod",name:"exists",path:"std::rt::local",desc:"",parent:'237903'},{ty:"tymethod",name:"borrow",path:"std::rt::local",desc:"",parent:'237903'},{ty:"tymethod",name:"unsafe_take",path:"std::rt::local",desc:"",parent:'237903'},{ty:"tymethod",name:"unsafe_borrow",path:"std::rt::local",desc:"",parent:'237903'},{ty:"tymethod",name:"try_unsafe_borrow",path:"std::rt::local",desc:"",parent:'237903'},{ty:"method",name:"put",path:"std::rt::task",desc:"",parent:'235342'},{ty:"method",name:"take",path:"std::rt::task",desc:"",parent:'235342'},{ty:"method",name:"try_take",path:"std::rt::task",desc:"",parent:'235342'},{ty:"method",name:"exists",path:"std::rt::task",desc:"",parent:'235342'},{ty:"method",name:"borrow",path:"std::rt::task",desc:"",parent:'235342'},{ty:"method",name:"unsafe_take",path:"std::rt::task",desc:"",parent:'235342'},{ty:"method",name:"unsafe_borrow",path:"std::rt::task",desc:"",parent:'235342'},{ty:"method",name:"try_unsafe_borrow",path:"std::rt::task",desc:"",parent:'235342'},{ty:"mod",name:"thread",path:"std::rt",desc:"Bindings to system threading libraries.\nBindings to system threading libraries.\nNative os-thread management"},{ty:"struct",name:"Thread",path:"std::rt::thread",desc:"This struct represents a native thread's state. This is used to join on an\nexisting thread created in the join-able state."},{ty:"method",name:"start",path:"std::rt::thread",desc:"Starts execution of a new OS thread.",parent:'238067'},{ty:"method",name:"start_stack",path:"std::rt::thread",desc:"Performs the same functionality as `start`, but specifies an explicit\nstack size for the new thread.",parent:'238067'},{ty:"method",name:"spawn",path:"std::rt::thread",desc:"This will spawn a new thread, but it will not wait for the thread to\nfinish, nor is it possible to wait for the thread to finish.",parent:'238067'},{ty:"method",name:"spawn_stack",path:"std::rt::thread",desc:"Performs the same functionality as `spawn`, but explicitly specifies a\nstack size for the new thread.",parent:'238067'},{ty:"method",name:"yield_now",path:"std::rt::thread",desc:"Relinquishes the CPU slot that this OS-thread is currently using,\nallowing another thread to run for awhile.",parent:'238067'},{ty:"method",name:"join",path:"std::rt::thread",desc:"Wait for this thread to finish, returning the result of the thread's\ncalculation.",parent:'238067'},{ty:"method",name:"drop",path:"std::rt::thread",desc:"",parent:'238067'},{ty:"mod",name:"env",path:"std::rt",desc:"The runtime configuration, read from environment variables.\nThe runtime configuration, read from environment variables.\nRuntime environment settings"},{ty:"fn",name:"init",path:"std::rt::env",desc:""},{ty:"fn",name:"min_stack",path:"std::rt::env",desc:""},{ty:"fn",name:"max_cached_stacks",path:"std::rt::env",desc:""},{ty:"fn",name:"debug_borrow",path:"std::rt::env",desc:""},{ty:"mod",name:"local_heap",path:"std::rt",desc:"The local, managed heap\nThe local, managed heap\nThe local, garbage collected heap"},{ty:"struct",name:"MemoryRegion",path:"std::rt::local_heap",desc:""},{ty:"struct",name:"LocalHeap",path:"std::rt::local_heap",desc:""},{ty:"fn",name:"local_malloc_",path:"std::rt::local_heap",desc:""},{ty:"fn",name:"local_malloc",path:"std::rt::local_heap",desc:""},{ty:"fn",name:"local_free_",path:"std::rt::local_heap",desc:""},{ty:"fn",name:"local_free",path:"std::rt::local_heap",desc:""},{ty:"fn",name:"live_allocs",path:"std::rt::local_heap",desc:""},{ty:"typedef",name:"Box",path:"std::rt::local_heap",desc:""},{ty:"method",name:"new",path:"std::rt::local_heap",desc:"",parent:'238827'},{ty:"method",name:"alloc",path:"std::rt::local_heap",desc:"",parent:'238827'},{ty:"method",name:"realloc",path:"std::rt::local_heap",desc:"",parent:'238827'},{ty:"method",name:"free",path:"std::rt::local_heap",desc:"",parent:'238827'},{ty:"method",name:"drop",path:"std::rt::local_heap",desc:"",parent:'238827'},{ty:"method",name:"drop",path:"std::rt::local_heap",desc:"",parent:'238817'},{ty:"mod",name:"crate_map",path:"std::rt",desc:"Crate map\nCrate map"},{ty:"struct",name:"CrateMap",path:"std::rt::crate_map",desc:""},{ty:"structfield",name:"version",path:"std::rt::crate_map",desc:"",parent:'240185'},{ty:"structfield",name:"event_loop_factory",path:"std::rt::crate_map",desc:"",parent:'240185'},{ty:"fn",name:"rust_set_crate_map",path:"std::rt::crate_map",desc:""},{ty:"fn",name:"get_crate_map",path:"std::rt::crate_map",desc:""},{ty:"mod",name:"unwind",path:"std::rt",desc:"Stack unwinding\nStack unwinding"},{ty:"struct",name:"Unwinder",path:"std::rt::unwind",desc:""},{ty:"fn",name:"fail_",path:"std::rt::unwind",desc:""},{ty:"fn",name:"fail_bounds_check",path:"std::rt::unwind",desc:""},{ty:"fn",name:"begin_unwind_raw",path:"std::rt::unwind",desc:"This is the entry point of unwinding for things like lang items and such.\nThe arguments are normally generated by the compiler, and need to\nhave static lifetimes."},{ty:"fn",name:"begin_unwind_fmt",path:"std::rt::unwind",desc:"The entry point for unwinding with a formatted message."},{ty:"fn",name:"begin_unwind",path:"std::rt::unwind",desc:"This is the entry point of unwinding for fail!() and assert!()."},{ty:"method",name:"new",path:"std::rt::unwind",desc:"",parent:'241474'},{ty:"method",name:"unwinding",path:"std::rt::unwind",desc:"",parent:'241474'},{ty:"method",name:"try",path:"std::rt::unwind",desc:"",parent:'241474'},{ty:"method",name:"begin_unwind",path:"std::rt::unwind",desc:"",parent:'241474'},{ty:"method",name:"result",path:"std::rt::unwind",desc:"",parent:'241474'},{ty:"mod",name:"backtrace",path:"std::rt",desc:"Simple backtrace functionality (to print on failure)\nSimple backtrace functionality (to print on failure)"},{ty:"fn",name:"write",path:"std::rt::backtrace",desc:""},{ty:"fn",name:"log_enabled",path:"std::rt::backtrace",desc:""},{ty:"mod",name:"args",path:"std::rt",desc:"Global storage for command line arguments"},{ty:"fn",name:"init",path:"std::rt::args",desc:"One-time global initialization."},{ty:"fn",name:"cleanup",path:"std::rt::args",desc:"One-time global cleanup."},{ty:"fn",name:"take",path:"std::rt::args",desc:"Take the global arguments from global storage."},{ty:"fn",name:"put",path:"std::rt::args",desc:"Give the global arguments to global storage."},{ty:"fn",name:"clone",path:"std::rt::args",desc:"Make a clone of the global arguments."},{ty:"mod",name:"stack",path:"std::rt",desc:"Rust stack-limit management"},{ty:"fn",name:"record_stack_bounds",path:"std::rt::stack",desc:""},{ty:"fn",name:"record_sp_limit",path:"std::rt::stack",desc:"Records the current limit of the stack as specified by `end`."},{ty:"fn",name:"get_sp_limit",path:"std::rt::stack",desc:"The counterpart of the function above, this function will fetch the current\nstack limit stored in TLS."},{ty:"static",name:"RED_ZONE",path:"std::rt::stack",desc:""},{ty:"static",name:"DEFAULT_ERROR_CODE",path:"std::rt",desc:"The default error code of the rust runtime if the main task fails instead\nof exiting cleanly."},{ty:"trait",name:"Runtime",path:"std::rt",desc:"The interface to the current runtime."},{ty:"tymethod",name:"yield_now",path:"std::rt",desc:"",parent:'246643'},{ty:"tymethod",name:"maybe_yield",path:"std::rt",desc:"",parent:'246643'},{ty:"tymethod",name:"deschedule",path:"std::rt",desc:"",parent:'246643'},{ty:"tymethod",name:"reawaken",path:"std::rt",desc:"",parent:'246643'},{ty:"tymethod",name:"spawn_sibling",path:"std::rt",desc:"",parent:'246643'},{ty:"tymethod",name:"local_io",path:"std::rt",desc:"",parent:'246643'},{ty:"tymethod",name:"stack_bounds",path:"std::rt",desc:"The (low, high) edges of the current stack.",parent:'246643'},{ty:"tymethod",name:"can_block",path:"std::rt",desc:"",parent:'246643'},{ty:"tymethod",name:"wrap",path:"std::rt",desc:"",parent:'246643'},{ty:"method",name:"hash",path:"std::option",desc:"",parent:'105268'},{ty:"method",name:"stat",path:"std::path::windows",desc:"Get information on the file, directory, etc at this path.",parent:'155566'},{ty:"method",name:"exists",path:"std::path::windows",desc:"Boolean value indicator whether the underlying file exists on the local\nfilesystem. This will return true if the path points to either a\ndirectory or a file.",parent:'155566'},{ty:"method",name:"is_file",path:"std::path::windows",desc:"Whether the underlying implementation (be it a file path, or something\nelse) points at a \"regular file\" on the FS. Will return false for paths\nto non-existent locations or directories or other non-regular files\n(named pipes, etc).",parent:'155566'},{ty:"method",name:"is_dir",path:"std::path::windows",desc:"Whether the underlying implementation (be it a file path,\nor something else) is pointing at a directory in the underlying FS.\nWill return false for paths to non-existent locations or if the item is\nnot a directory (eg files, named pipes, links, etc)",parent:'155566'}];var allPaths = {'11317':{type:'fn',name:'to_str_hex'},'82177':{type:'fn',name:'atan'},'127671':{type:'ffi',name:'fopen'},'125557':{type:'enum',name:'c_void'},'72768':{type:'trait',name:'RawPtr'},'126215':{type:'typedef',name:'LPFILETIME'},'47391':{type:'fn',name:'append'},'127604':{type:'ffi',name:'islower'},'11695':{type:'fn',name:'pow'},'182985':{type:'ffi',name:'forget'},'236661':{type:'enum',name:'CloseBehavior'},'128752':{type:'ffi',name:'getcwd'},'155528':{type:'typedef',name:'Components'},'121579':{type:'fn',name:'atomic_load'},'65129':{type:'fn',name:'slice_unchecked'},'183608':{type:'ffi',name:'i8_sub_with_overflow'},'136767':{type:'struct',name:'MemWriter'},'134952':{type:'mod',name:'mips'},'131460':{type:'mod',name:'os'},'41846':{type:'trait',name:'Tuple12'},'9389':{type:'fn',name:'log10'},'46886':{type:'fn',name:'build'},'125824':{type:'typedef',name:'c_ulong'},'78066':{type:'fn',name:'int_to_str_bytes_common'},'159022':{type:'fn',name:'is_sep_byte_verbatim'},'11845':{type:'fn',name:'ceil'},'125594':{type:'mod',name:'common'},'9508':{type:'fn',name:'rint'},'132930':{type:'fn',name:'make_absolute'},'109555':{type:'fn',name:'try'},'11858':{type:'fn',name:'trunc'},'133596':{type:'enum',name:'MapError'},'182964':{type:'ffi',name:'pref_align_of'},'75196':{type:'struct',name:'ContravariantType'},'133566':{type:'enum',name:'MapOption'},'147030':{type:'fn',name:'stderr_raw'},'133455':{type:'fn',name:'args_as_bytes'},'125563':{type:'typedef',name:'int8_t'},'133548':{type:'enum',name:'MemoryMapKind'},'152771':{type:'enum',name:'FileMode'},'81123':{type:'fn',name:'checked_next_power_of_two'},'121607':{type:'fn',name:'atomic_swap'},'135370':{type:'struct',name:'BufferedReader'},'183426':{type:'ffi',name:'ctlz16'},'172122':{type:'fn',name:'min_align_of_val'},'128029':{type:'ffi',name:'strtol'},'166044':{type:'enum',name:'Count'},'124158':{type:'struct',name:'Queue'},'129005':{type:'ffi',name:'closesocket'},'145281':{type:'enum',name:'ProcessExit'},'128152':{type:'ffi',name:'strcpy'},'148129':{type:'struct',name:'ChainedReader'},'125685':{type:'struct',name:'sockaddr'},'183285':{type:'ffi',name:'copysignf32'},'236664':{type:'enum',name:'CloseBehavior'},'183447':{type:'ffi',name:'cttz8'},'9495':{type:'fn',name:'trunc'},'161837':{type:'trait',name:'GenericRadix'},'120369':{type:'enum',name:'Ordering'},'11682':{type:'fn',name:'cos'},'159046':{type:'enum',name:'PathPrefix'},'240208':{type:'fn',name:'rust_set_crate_map'},'140437':{type:'fn',name:'change_file_times'},'97334':{type:'struct',name:'Take'},'6686':{type:'mod',name:'u16'},'64716':{type:'fn',name:'from_c_str'},'125821':{type:'typedef',name:'c_long'},'75919':{type:'trait',name:'BitAnd'},'60591':{type:'typedef',name:'RevChars'},'183328':{type:'ffi',name:'ceilf64'},'120331':{type:'struct',name:'AtomicInt'},'166246':{type:'enum',name:'Method'},'133571':{type:'enum',name:'MapError'},'99956':{type:'fn',name:'gt'},'183461':{type:'ffi',name:'cttz32'},'8398':{type:'mod',name:'u64'},'169621':{type:'fn',name:'writeln'},'118628':{type:'enum',name:'KeyValue'},'183580':{type:'ffi',name:'u32_add_with_overflow'},'140078':{type:'fn',name:'walk_dir'},'238723':{type:'fn',name:'init'},'133009':{type:'fn',name:'errno'},'76059':{type:'trait',name:'TotalEq'},'92217':{type:'trait',name:'CheckedDiv'},'184046':{type:'mod',name:'raw'},'172050':{type:'fn',name:'size_of'},'125889':{type:'mod',name:'extra'},'65163':{type:'fn',name:'push_byte'},'56881':{type:'struct',name:'MoveItems'},'146978':{type:'fn',name:'stdin_raw'},'64764':{type:'fn',name:'from_utf8'},'59809':{type:'fn',name:'from_chars'},'14330':{type:'mod',name:'char'},'104972':{type:'enum',name:'Void'},'129489':{type:'ffi',name:'VirtualProtect'},'235386':{type:'struct',name:'LocalStorage'},'127653':{type:'ffi',name:'toupper'},'125911':{type:'typedef',name:'BYTE'},'75275':{type:'struct',name:'InvariantType'},'125864':{type:'mod',name:'posix88'},'7542':{type:'mod',name:'u32'},'82117':{type:'fn',name:'sin'},'132643':{type:'fn',name:'dll_filename'},'14104':{type:'fn',name:'to_bit'},'144926':{type:'struct',name:'UnixListener'},'72658':{type:'fn',name:'array_each_with_len'},'82023':{type:'fn',name:'mul_add'},'126219':{type:'struct',name:'GUID'},'125956':{type:'typedef',name:'LPCSTR'},'125800':{type:'typedef',name:'c_char'},'127816':{type:'ffi',name:'fputs'},'236588':{type:'trait',name:'EventLoop'},'125938':{type:'typedef',name:'PLONG'},'127999':{type:'ffi',name:'atof'},'128098':{type:'ffi',name:'free'},'183099':{type:'ffi',name:'powif32'},'183121':{type:'ffi',name:'sinf32'},'11669':{type:'fn',name:'sin'},'141357':{type:'enum',name:'IpAddr'},'106752':{type:'enum',name:'Result'},'60598':{type:'typedef',name:'RevCharOffsets'},'75117':{type:'struct',name:'CovariantType'},'148748':{type:'enum',name:'IoErrorKind'},'165712':{type:'enum',name:'Position'},'125806':{type:'typedef',name:'c_uchar'},'246780':{type:'fn',name:'at_exit'},'152700':{type:'struct',name:'IncomingConnections'},'138410':{type:'struct',name:'TempDir'},'9586':{type:'fn',name:'atan2'},'71498':{type:'trait',name:'IntoBytes'},'9547':{type:'fn',name:'acos'},'8104':{type:'fn',name:'to_str_bytes'},'62466':{type:'fn',name:'is_utf16'},'236665':{type:'struct',name:'LocalIo'},'172276':{type:'fn',name:'from_le64'},'75826':{type:'mod',name:'ops'},'104894':{type:'trait',name:'MutableSet'},'46648':{type:'fn',name:'from_elem'},'128862':{type:'mod',name:'bsd43'},'182833':{type:'ffi',name:'atomic_umin_relaxed'},'116996':{type:'struct',name:'Receiver'},'127704':{type:'ffi',name:'fflush'},'169024':{type:'struct',name:'Formatter'},'125673':{type:'typedef',name:'socklen_t'},'128666':{type:'ffi',name:'dup'},'74039':{type:'mod',name:'managed'},'132958':{type:'fn',name:'change_dir'},'158770':{type:'fn',name:'is_cwd_relative'},'127563':{type:'mod',name:'c95'},'177213':{type:'mod',name:'reflect'},'155448':{type:'mod',name:'windows'},'240083':{type:'fn',name:'local_free'},'125694':{type:'struct',name:'sockaddr_storage'},'55232':{type:'trait',name:'MutableByteVector'},'183391':{type:'ffi',name:'ctpop8'},'183734':{type:'ffi',name:'i16_mul_with_overflow'},'125948':{type:'typedef',name:'PLARGE_INTEGER'},'129580':{type:'ffi',name:'MoveFileExW'},'129348':{type:'ffi',name:'GetCurrentProcess'},'161215':{type:'struct',name:'Display'},'240177':{type:'mod',name:'crate_map'},'104921':{type:'mod',name:'default'},'81044':{type:'trait',name:'Int'},'139455':{type:'struct',name:'File'},'128516':{type:'ffi',name:'wutime'},'11292':{type:'fn',name:'to_str'},'55127':{type:'fn',name:'shift_ptr'},'166048':{type:'enum',name:'Count'},'127564':{type:'mod',name:'ctype'},'129776':{type:'ffi',name:'GetCurrentProcessId'},'166628':{type:'struct',name:'PluralArm'},'73114':{type:'mod',name:'externfnpointers'},'169598':{type:'fn',name:'write'},'182968':{type:'ffi',name:'get_tydesc'},'127576':{type:'ffi',name:'isalpha'},'182160':{type:'ffi',name:'atomic_store'},'103228':{type:'fn',name:'hash'},'151141':{type:'struct',name:'RefReader'},'109175':{type:'mod',name:'task'},'122072':{type:'enum',name:'Stolen'},'133549':{type:'enum',name:'MemoryMapKind'},'77216':{type:'trait',name:'FromStr'},'9679':{type:'fn',name:'frexp'},'165234':{type:'enum',name:'Piece'},'129610':{type:'ffi',name:'CreateHardLinkW'},'128450':{type:'ffi',name:'wchmod'},'182521':{type:'ffi',name:'atomic_or'},'118629':{type:'enum',name:'KeyValue'},'11398':{type:'fn',name:'to_str_digits'},'60763':{type:'typedef',name:'Words'},'140665':{type:'mod',name:'addrinfo'},'125932':{type:'typedef',name:'HMODULE'},'169157':{type:'trait',name:'Char'},'182573':{type:'ffi',name:'atomic_or_relaxed'},'242079':{type:'fn',name:'fail_bounds_check'},'183135':{type:'ffi',name:'cosf32'},'80600':{type:'fn',name:'from_str_common'},'125578':{type:'typedef',name:'uint16_t'},'74541':{type:'struct',name:'Rc'},'120352':{type:'struct',name:'AtomicPtr'},'127965':{type:'ffi',name:'perror'},'147808':{type:'mod',name:'util'},'182612':{type:'ffi',name:'atomic_xor_rel'},'169020':{type:'typedef',name:'Result'},'172175':{type:'fn',name:'move_val_init'},'7248':{type:'fn',name:'to_str_bytes'},'183650':{type:'ffi',name:'i64_sub_with_overflow'},'140954':{type:'struct',name:'TcpListener'},'161631':{type:'fn',name:'transmute'},'129855':{type:'ffi',name:'CreateEventW'},'183433':{type:'ffi',name:'ctlz32'},'135335':{type:'fn',name:'raise_fd_limit'},'61993':{type:'fn',name:'replace'},'136196':{type:'struct',name:'BufferedStream'},'234916':{type:'mod',name:'rt'},'182913':{type:'ffi',name:'atomic_fence_acq'},'127712':{type:'ffi',name:'fclose'},'127778':{type:'ffi',name:'fgetc'},'77318':{type:'enum',name:'SignificantDigits'},'133582':{type:'enum',name:'MapError'},'146968':{type:'fn',name:'stdin'},'183278':{type:'ffi',name:'fabsf64'},'72585':{type:'fn',name:'replace'},'155486':{type:'typedef',name:'StrComponents'},'182099':{type:'ffi',name:'atomic_cxchg_acqrel'},'125809':{type:'typedef',name:'c_short'},'128887':{type:'ffi',name:'connect'},'133573':{type:'enum',name:'MapError'},'75847':{type:'trait',name:'Sub'},'128246':{type:'ffi',name:'strcoll'},'15028':{type:'fn',name:'decompose_canonical'},'9332':{type:'fn',name:'pow'},'2104':{type:'mod',name:'i16'},'109623':{type:'fn',name:'deschedule'},'14420':{type:'fn',name:'is_alphabetic'},'117037':{type:'enum',name:'TryRecvResult'},'70861':{type:'trait',name:'AsciiCast'},'182625':{type:'ffi',name:'atomic_xor_acqrel'},'235307':{type:'mod',name:'task'},'120315':{type:'mod',name:'atomics'},'46933':{type:'fn',name:'ref_slice'},'99471':{type:'struct',name:'Repeat'},'15252':{type:'fn',name:'escape_default'},'148750':{type:'enum',name:'IoErrorKind'},'129295':{type:'ffi',name:'DuplicateHandle'},'146067':{type:'enum',name:'Signum'},'163410':{type:'struct',name:'RadixFmt'},'127766':{type:'ffi',name:'setbuf'},'126084':{type:'struct',name:'PROCESS_INFORMATION'},'129265':{type:'ffi',name:'FindFirstFileW'},'169265':{type:'trait',name:'Pointer'},'121931':{type:'fn',name:'atomic_xor'},'125562':{type:'mod',name:'c99'},'13758':{type:'fn',name:'to_str_digits'},'121841':{type:'fn',name:'atomic_nand'},'9773':{type:'fn',name:'tanh'},'183035':{type:'ffi',name:'copy_nonoverlapping_memory'},'145000':{type:'struct',name:'UnixAcceptor'},'128919':{type:'ffi',name:'listen'},'125642':{type:'struct',name:'utimbuf'},'46955':{type:'fn',name:'mut_ref_slice'},'128673':{type:'ffi',name:'dup2'},'125926':{type:'typedef',name:'DWORDLONG'},'152634':{type:'enum',name:'SeekStyle'},'128478':{type:'ffi',name:'fstat'},'144798':{type:'mod',name:'unix'},'182807':{type:'ffi',name:'atomic_umin_rel'},'82189':{type:'fn',name:'atan2'},'169205':{type:'trait',name:'Binary'},'182172':{type:'ffi',name:'atomic_store_rel'},'182981':{type:'ffi',name:'uninit'},'72441':{type:'fn',name:'copy_memory'},'128198':{type:'ffi',name:'strncat'},'120324':{type:'struct',name:'AtomicBool'},'246594':{type:'fn',name:'record_sp_limit'},'182992':{type:'ffi',name:'transmute'},'96418':{type:'struct',name:'Enumerate'},'166737':{type:'enum',name:'PluralKeyword'},'245647':{type:'fn',name:'cleanup'},'9760':{type:'fn',name:'tan'},'74514':{type:'mod',name:'rc'},'74882':{type:'struct',name:'Weak'},'129405':{type:'ffi',name:'TerminateProcess'},'153685':{type:'typedef',name:'RevComponents'},'121796':{type:'fn',name:'atomic_and'},'74041':{type:'fn',name:'refcount'},'182534':{type:'ffi',name:'atomic_or_acq'},'148463':{type:'struct',name:'IoError'},'77326':{type:'enum',name:'SignificantDigits'},'183678':{type:'ffi',name:'u16_sub_with_overflow'},'172168':{type:'fn',name:'uninit'},'155506':{type:'typedef',name:'RevStrComponents'},'145143':{type:'mod',name:'process'},'125815':{type:'typedef',name:'c_int'},'49281':{type:'trait',name:'CloneableVector'},'161821':{type:'mod',name:'num'},'64781':{type:'fn',name:'from_utf8_owned'},'9573':{type:'fn',name:'atan'},'163420':{type:'fn',name:'radix'},'14464':{type:'fn',name:'is_uppercase'},'15122':{type:'fn',name:'escape_unicode'},'158978':{type:'fn',name:'is_sep'},'123628':{type:'mod',name:'mpmc_bounded_queue'},'182326':{type:'ffi',name:'atomic_xsub'},'64162':{type:'enum',name:'MaybeOwned'},'128651':{type:'ffi',name:'chdir'},'127597':{type:'ffi',name:'isgraph'},'169':{type:'mod',name:'int'},'125679':{type:'typedef',name:'in_port_t'},'62117':{type:'fn',name:'eq_slice'},'183405':{type:'ffi',name:'ctpop32'},'166910':{type:'struct',name:'SelectArm'},'77314':{type:'enum',name:'ExponentFormat'},'152772':{type:'enum',name:'FileMode'},'72608':{type:'fn',name:'read'},'9734':{type:'fn',name:'ln_1p'},'161679':{type:'fn',name:'transmute_mut_unsafe'},'94245':{type:'enum',name:'MinMaxResult'},'33730':{type:'trait',name:'Tuple10'},'125799':{type:'mod',name:'c95'},'183594':{type:'ffi',name:'u64_add_with_overflow'},'183241':{type:'ffi',name:'fmaf32'},'172042':{type:'mod',name:'mem'},'234932':{type:'mod',name:'global_heap'},'183307':{type:'ffi',name:'floorf32'},'71162':{type:'trait',name:'OwnedAsciiCast'},'49175':{type:'trait',name:'Vector'},'126243':{type:'typedef',name:'LPWSAPROTOCOLCHAIN'},'147500':{type:'fn',name:'println_args'},'128272':{type:'ffi',name:'strrchr'},'183748':{type:'ffi',name:'i32_mul_with_overflow'},'128429':{type:'mod',name:'stat_'},'104996':{type:'trait',name:'AnyRefExt'},'182911':{type:'ffi',name:'atomic_fence'},'165941':{type:'enum',name:'Flag'},'126025':{type:'struct',name:'STARTUPINFO'},'140261':{type:'fn',name:'rmdir_recursive'},'129333':{type:'ffi',name:'OpenProcess'},'81999':{type:'fn',name:'exp_m1'},'120338':{type:'struct',name:'AtomicUint'},'54954':{type:'trait',name:'MutableTotalOrdVector'},'128285':{type:'ffi',name:'strspn'},'131528':{type:'fn',name:'getcwd'},'11616':{type:'mod',name:'f64'},'132868':{type:'fn',name:'tmpdir'},'127838':{type:'ffi',name:'ungetc'},'75947':{type:'trait',name:'BitXor'},'182768':{type:'ffi',name:'atomic_min_relaxed'},'129913':{type:'ffi',name:'get_osfhandle'},'128964':{type:'ffi',name:'getsockname'},'57199':{type:'struct',name:'Vec'},'182638':{type:'ffi',name:'atomic_xor_relaxed'},'128503':{type:'ffi',name:'wstat'},'119043':{type:'fn',name:'get_mut'},'159004':{type:'fn',name:'is_sep_byte'},'109236':{type:'struct',name:'TaskBuilder'},'155547':{type:'typedef',name:'RevComponents'},'128428':{type:'mod',name:'posix88'},'125584':{type:'typedef',name:'uint64_t'},'89950':{type:'fn',name:'from_u64'},'47448':{type:'fn',name:'flat_map'},'12136':{type:'fn',name:'tanh'},'129814':{type:'ffi',name:'ConnectNamedPipe'},'55055':{type:'fn',name:'mut_buf_as_slice'},'73834':{type:'mod',name:'owned'},'104719':{type:'trait',name:'Map'},'129931':{type:'mod',name:'c_str'},'153794':{type:'fn',name:'is_sep'},'158815':{type:'fn',name:'make_non_verbatim'},'6392':{type:'fn',name:'to_str_bytes'},'12079':{type:'fn',name:'ldexp'},'65181':{type:'fn',name:'push_bytes'},'129747':{type:'ffi',name:'SetEndOfFile'},'14453':{type:'fn',name:'is_lowercase'},'56343':{type:'typedef',name:'RevMutItems'},'161555':{type:'mod',name:'cast'},'127957':{type:'ffi',name:'ferror'},'183234':{type:'ffi',name:'log2f64'},'125935':{type:'typedef',name:'LONG'},'136607':{type:'struct',name:'ChanWriter'},'127618':{type:'ffi',name:'ispunct'},'148756':{type:'enum',name:'IoErrorKind'},'9482':{type:'fn',name:'ceil'},'134959':{type:'mod',name:'io'},'22154':{type:'trait',name:'Tuple6'},'125976':{type:'typedef',name:'LPSECURITY_ATTRIBUTES'},'14522':{type:'fn',name:'is_control'},'183321':{type:'ffi',name:'ceilf32'},'139974':{type:'fn',name:'readlink'},'131578':{type:'mod',name:'win32'},'99628':{type:'fn',name:'equals'},'6312':{type:'fn',name:'parse_bytes'},'140690':{type:'enum',name:'Protocol'},'183370':{type:'ffi',name:'nearbyintf64'},'118620':{type:'typedef',name:'Key'},'60421':{type:'struct',name:'CharOffsets'},'96720':{type:'struct',name:'Peekable'},'92029':{type:'trait',name:'FromStrRadix'},'141201':{type:'struct',name:'UdpStream'},'76015':{type:'trait',name:'DerefMut'},'108140':{type:'mod',name:'cell'},'125649':{type:'struct',name:'timeval'},'11936':{type:'fn',name:'atan'},'13677':{type:'fn',name:'to_str_hex'},'125587':{type:'mod',name:'posix88'},'127804':{type:'ffi',name:'fputc'},'152636':{type:'enum',name:'SeekStyle'},'182133':{type:'ffi',name:'atomic_load'},'82288':{type:'fn',name:'log10'},'5429':{type:'fn',name:'parse_bytes'},'120345':{type:'struct',name:'AtomicU64'},'182794':{type:'ffi',name:'atomic_umin_acq'},'145277':{type:'enum',name:'ProcessExit'},'92044':{type:'fn',name:'from_str_radix'},'100986':{type:'struct',name:'SipState'},'129326':{type:'ffi',name:'CloseHandle'},'125593':{type:'mod',name:'os'},'125883':{type:'typedef',name:'ssize_t'},'82153':{type:'fn',name:'asin'},'238048':{type:'mod',name:'thread'},'128639':{type:'ffi',name:'access'},'133572':{type:'enum',name:'MapError'},'75989':{type:'trait',name:'Index'},'13789':{type:'fn',name:'to_str_exp_exact'},'109638':{type:'fn',name:'failing'},'140680':{type:'enum',name:'SocketType'},'106664':{type:'fn',name:'collect'},'129124':{type:'mod',name:'kernel32'},'129467':{type:'ffi',name:'VirtualLock'},'138691':{type:'mod',name:'extensions'},'236544':{type:'mod',name:'rtio'},'125920':{type:'typedef',name:'CHAR'},'145264':{type:'enum',name:'StdioContainer'},'166467':{type:'enum',name:'PluralSelector'},'9253':{type:'mod',name:'f32'},'118604':{type:'mod',name:'local_data'},'9451':{type:'fn',name:'copysign'},'60605':{type:'typedef',name:'Bytes'},'148751':{type:'enum',name:'IoErrorKind'},'127685':{type:'ffi',name:'freopen'},'138710':{type:'struct',name:'Bytes'},'236651':{type:'struct',name:'FileOpenConfig'},'182378':{type:'ffi',name:'atomic_xsub_relaxed'},'13652':{type:'fn',name:'to_str'},'152783':{type:'enum',name:'FileType'},'52675':{type:'trait',name:'OwnedCloneableVector'},'80970':{type:'trait',name:'Bounded'},'172201':{type:'fn',name:'to_le32'},'94732':{type:'trait',name:'CloneableIterator'},'30263':{type:'trait',name:'Tuple9'},'172285':{type:'fn',name:'from_be16'},'237283':{type:'trait',name:'RtioTcpListener'},'24481':{type:'trait',name:'Tuple7'},'125972':{type:'typedef',name:'LPCH'},'89830':{type:'fn',name:'from_i8'},'126080':{type:'typedef',name:'LPSTARTUPINFO'},'183440':{type:'ffi',name:'ctlz64'},'147813':{type:'struct',name:'LimitReader'},'133583':{type:'enum',name:'MapError'},'182921':{type:'ffi',name:'breakpoint'},'238775':{type:'fn',name:'min_stack'},'131047':{type:'mod',name:'c_vec'},'129215':{type:'ffi',name:'CopyFileW'},'89845':{type:'fn',name:'from_i16'},'4000':{type:'mod',name:'i64'},'128930':{type:'ffi',name:'accept'},'140026':{type:'fn',name:'rmdir'},'165857':{type:'enum',name:'Alignment'},'172097':{type:'fn',name:'nonzero_size_of_val'},'81195':{type:'enum',name:'FPCategory'},'133558':{type:'enum',name:'MapOption'},'11910':{type:'fn',name:'acos'},'184087':{type:'typedef',name:'String'},'147020':{type:'fn',name:'stderr'},'147931':{type:'struct',name:'NullWriter'},'235221':{type:'fn',name:'closure_exchange_malloc'},'148752':{type:'enum',name:'IoErrorKind'},'147140':{type:'fn',name:'set_stderr'},'133584':{type:'enum',name:'MapError'},'127583':{type:'ffi',name:'iscntrl'},'104847':{type:'trait',name:'Set'},'182508':{type:'ffi',name:'atomic_nand_relaxed'},'133532':{type:'struct',name:'MemoryMap'},'236582':{type:'trait',name:'Callback'},'152780':{type:'enum',name:'FileType'},'128259':{type:'ffi',name:'strchr'},'128616':{type:'ffi',name:'creat'},'62578':{type:'enum',name:'UTF16Item'},'125852':{type:'typedef',name:'c_longlong'},'125908':{type:'typedef',name:'BOOL'},'182664':{type:'ffi',name:'atomic_max_acq'},'147954':{type:'struct',name:'ZeroReader'},'161131':{type:'trait',name:'BytesContainer'},'147423':{type:'fn',name:'print'},'130878':{type:'struct',name:'CChars'},'120370':{type:'enum',name:'Ordering'},'182977':{type:'ffi',name:'init'},'7168':{type:'fn',name:'parse_bytes'},'109580':{type:'fn',name:'with_task_name'},'49395':{type:'trait',name:'ImmutableVector'},'139664':{type:'fn',name:'lstat'},'12210':{type:'mod',name:'consts'},'183128':{type:'ffi',name:'sinf64'},'153281':{type:'struct',name:'FileStat'},'9630':{type:'fn',name:'exp_m1'},'92261':{type:'trait',name:'FromIterator'},'109703':{type:'struct',name:'Select'},'133570':{type:'enum',name:'MapOption'},'152781':{type:'enum',name:'FileType'},'128394':{type:'ffi',name:'memcmp'},'237903':{type:'trait',name:'Local'},'129957':{type:'struct',name:'CString'},'183142':{type:'ffi',name:'cosf64'},'9560':{type:'fn',name:'asin'},'235178':{type:'fn',name:'exchange_malloc'},'61321':{type:'struct',name:'StrSplits'},'240246':{type:'fn',name:'get_crate_map'},'126097':{type:'typedef',name:'LPPROCESS_INFORMATION'},'12123':{type:'fn',name:'tan'},'14742':{type:'fn',name:'to_lowercase'},'172210':{type:'fn',name:'to_le64'},'144816':{type:'struct',name:'UnixStream'},'165856':{type:'enum',name:'Alignment'},'146069':{type:'enum',name:'Signum'},'183160':{type:'ffi',name:'powf64'},'146867':{type:'mod',name:'stdio'},'129111':{type:'ffi',name:'shutdown'},'128137':{type:'ffi',name:'srand'},'182919':{type:'ffi',name:'abort'},'241474':{type:'struct',name:'Unwinder'},'140689':{type:'enum',name:'Flag'},'3639':{type:'fn',name:'parse_bytes'},'54993':{type:'fn',name:'from_buf'},'182944':{type:'ffi',name:'size_of'},'133230':{type:'fn',name:'set_exit_status'},'63150':{type:'fn',name:'truncate_utf16_at_nul'},'11739':{type:'fn',name:'ln'},'137673':{type:'struct',name:'BufReader'},'14731':{type:'fn',name:'to_uppercase'},'238789':{type:'fn',name:'debug_borrow'},'128065':{type:'ffi',name:'calloc'},'141340':{type:'mod',name:'ip'},'236663':{type:'enum',name:'CloseBehavior'},'72725':{type:'fn',name:'array_each'},'152784':{type:'enum',name:'FileType'},'125914':{type:'typedef',name:'BOOLEAN'},'126186':{type:'struct',name:'OVERLAPPED'},'148745':{type:'enum',name:'IoErrorKind'},'75020':{type:'mod',name:'gc'},'55270':{type:'fn',name:'copy_memory'},'97519':{type:'struct',name:'Scan'},'129052':{type:'ffi',name:'recvfrom'},'182820':{type:'ffi',name:'atomic_umin_acqrel'},'119672':{type:'mod',name:'arc'},'12042':{type:'fn',name:'frexp'},'98488':{type:'fn',name:'count'},'128125':{type:'ffi',name:'getenv'},'181326':{type:'typedef',name:'Disr'},'145276':{type:'enum',name:'StdioContainer'},'11541':{type:'fn',name:'from_str_hex'},'173673':{type:'fn',name:'ReprVisitor'},'9402':{type:'fn',name:'log2'},'77316':{type:'enum',name:'ExponentFormat'},'65203':{type:'fn',name:'pop_byte'},'14083':{type:'mod',name:'bool'},'59307':{type:'fn',name:'append'},'60698':{type:'typedef',name:'RevCharSplits'},'182948':{type:'ffi',name:'move_val_init'},'161606':{type:'fn',name:'forget'},'133551':{type:'enum',name:'MapOption'},'11765':{type:'fn',name:'log2'},'77155':{type:'trait',name:'Equiv'},'120367':{type:'enum',name:'Ordering'},'128549':{type:'ffi',name:'pclose'},'75911':{type:'trait',name:'Not'},'125721':{type:'struct',name:'in_addr'},'125664':{type:'mod',name:'bsd44'},'37589':{type:'trait',name:'Tuple11'},'76331':{type:'enum',name:'Ordering'},'125861':{type:'typedef',name:'uintptr_t'},'183398':{type:'ffi',name:'ctpop16'},'129825':{type:'ffi',name:'WaitNamedPipeW'},'53641':{type:'trait',name:'MutableVector'},'146081':{type:'enum',name:'Signum'},'183227':{type:'ffi',name:'log2f32'},'129478':{type:'ffi',name:'VirtualUnlock'},'246559':{type:'fn',name:'record_stack_bounds'},'182781':{type:'ffi',name:'atomic_umin'},'238827':{type:'struct',name:'LocalHeap'},'75861':{type:'trait',name:'Mul'},'75114':{type:'trait',name:'Sized'},'166459':{type:'enum',name:'PluralSelector'},'159059':{type:'enum',name:'PathPrefix'},'165713':{type:'enum',name:'Position'},'82234':{type:'fn',name:'exp2'},'146065':{type:'enum',name:'Signum'},'172136':{type:'fn',name:'pref_align_of'},'65319':{type:'mod',name:'traits'},'124121':{type:'mod',name:'mpsc_queue'},'16051':{type:'trait',name:'Tuple1'},'9288':{type:'fn',name:'powi'},'17357':{type:'trait',name:'Tuple3'},'183256':{type:'ffi',name:'fmaf64'},'142826':{type:'struct',name:'SocketAddr'},'147443':{type:'fn',name:'println'},'183001':{type:'ffi',name:'needs_drop'},'172245':{type:'fn',name:'to_be64'},'12097':{type:'fn',name:'ln_1p'},'100955':{type:'mod',name:'hash'},'92160':{type:'trait',name:'CheckedAdd'},'75112':{type:'trait',name:'Send'},'125945':{type:'typedef',name:'LARGE_INTEGER'},'129550':{type:'ffi',name:'MapViewOfFile'},'238067':{type:'struct',name:'Thread'},'82099':{type:'fn',name:'hypot'},'92017':{type:'trait',name:'ToStrRadix'},'126801':{type:'mod',name:'extra'},'183832':{type:'struct',name:'TypeId'},'128117':{type:'ffi',name:'system'},'140710':{type:'struct',name:'Info'},'65251':{type:'fn',name:'shift_byte'},'99681':{type:'fn',name:'cmp'},'80786':{type:'trait',name:'Signed'},'165944':{type:'enum',name:'Flag'},'172147':{type:'fn',name:'pref_align_of_val'},'128085':{type:'ffi',name:'realloc'},'182048':{type:'ffi',name:'atomic_cxchg'},'169133':{type:'trait',name:'Show'},'238701':{type:'mod',name:'env'},'234397':{type:'mod',name:'cmath'},'82075':{type:'fn',name:'rsqrt'},'161748':{type:'fn',name:'copy_mut_lifetime'},'96258':{type:'struct',name:'FilterMap'},'182932':{type:'ffi',name:'volatile_store'},'141060':{type:'mod',name:'udp'},'126101':{type:'struct',name:'SYSTEM_INFO'},'183790':{type:'ffi',name:'u16_mul_with_overflow'},'140686':{type:'enum',name:'Flag'},'1743':{type:'fn',name:'parse_bytes'},'129768':{type:'ffi',name:'QueryPerformanceCounter'},'64156':{type:'enum',name:'MaybeOwned'},'165371':{type:'struct',name:'Argument'},'131805':{type:'fn',name:'env'},'129189':{type:'ffi',name:'GetModuleFileNameW'},'128216':{type:'ffi',name:'strcmp'},'91788':{type:'trait',name:'NumCast'},'172111':{type:'fn',name:'min_align_of'},'59849':{type:'trait',name:'StrVector'},'183110':{type:'ffi',name:'powif64'},'146717':{type:'struct',name:'Listener'},'131743':{type:'fn',name:'as_utf16_p'},'89965':{type:'fn',name:'from_f32'},'125851':{type:'mod',name:'c99'},'128339':{type:'ffi',name:'strlen'},'128830':{type:'ffi',name:'unlink'},'132198':{type:'fn',name:'setenv'},'129204':{type:'ffi',name:'CreateDirectoryW'},'169664':{type:'fn',name:'write_unsafe'},'82348':{type:'fn',name:'acosh'},'141075':{type:'struct',name:'UdpSocket'},'103290':{type:'trait',name:'Hash'},'134945':{type:'mod',name:'arm'},'237437':{type:'trait',name:'RtioUdpSocket'},'139638':{type:'fn',name:'stat'},'129153':{type:'ffi',name:'GetEnvironmentVariableW'},'183776':{type:'ffi',name:'u8_mul_with_overflow'},'104756':{type:'trait',name:'MutableMap'},'129182':{type:'ffi',name:'FreeEnvironmentStringsA'},'146071':{type:'enum',name:'Signum'},'129728':{type:'ffi',name:'SetFilePointerEx'},'72487':{type:'fn',name:'set_memory'},'121697':{type:'fn',name:'atomic_sub'},'128557':{type:'ffi',name:'fdopen'},'165855':{type:'enum',name:'Alignment'},'119684':{type:'struct',name:'UnsafeArc'},'76003':{type:'trait',name:'Deref'},'172061':{type:'fn',name:'size_of_val'},'89920':{type:'fn',name:'from_u16'},'75961':{type:'trait',name:'Shl'},'69309':{type:'trait',name:'OwnedStr'},'82300':{type:'fn',name:'sinh'},'182560':{type:'ffi',name:'atomic_or_acqrel'},'183377':{type:'ffi',name:'roundf32'},'128822':{type:'ffi',name:'rmdir'},'183468':{type:'ffi',name:'cttz64'},'108030':{type:'fn',name:'fold'},'98612':{type:'fn',name:'range'},'124576':{type:'mod',name:'spsc_queue'},'133553':{type:'enum',name:'MapOption'},'145265':{type:'enum',name:'StdioContainer'},'172311':{type:'fn',name:'from_be64'},'129760':{type:'ffi',name:'QueryPerformanceFrequency'},'128369':{type:'ffi',name:'strxfrm'},'182482':{type:'ffi',name:'atomic_nand_rel'},'9698':{type:'fn',name:'hypot'},'72370':{type:'fn',name:'position'},'153711':{type:'typedef',name:'RevStrComponents'},'140687':{type:'enum',name:'Flag'},'4947':{type:'mod',name:'uint'},'183664':{type:'ffi',name:'u8_sub_with_overflow'},'166736':{type:'enum',name:'PluralKeyword'},'135046':{type:'fn',name:'next_test_unix'},'48003':{type:'struct',name:'Permutations'},'99842':{type:'fn',name:'lt'},'126013':{type:'typedef',name:'WORD'},'165942':{type:'enum',name:'Flag'},'169241':{type:'trait',name:'String'},'132120':{type:'fn',name:'getenv'},'94256':{type:'enum',name:'MinMaxResult'},'184048':{type:'struct',name:'Box'},'184115':{type:'struct',name:'TraitObject'},'126019':{type:'typedef',name:'time64_t'},'165233':{type:'enum',name:'Piece'},'72464':{type:'fn',name:'copy_nonoverlapping_memory'},'89860':{type:'fn',name:'from_i32'},'127916':{type:'ffi',name:'rewind'},'140826':{type:'struct',name:'TcpStream'},'182443':{type:'ffi',name:'atomic_and_relaxed'},'63563':{type:'struct',name:'CharRange'},'55813':{type:'struct',name:'Items'},'246616':{type:'fn',name:'get_sp_limit'},'82324':{type:'fn',name:'tanh'},'126160':{type:'struct',name:'MEMORY_BASIC_INFORMATION'},'161771':{type:'fn',name:'copy_lifetime_vec'},'81198':{type:'enum',name:'FPCategory'},'133576':{type:'enum',name:'MapError'},'126135':{type:'typedef',name:'LPSYSTEM_INFO'},'9438':{type:'fn',name:'abs'},'125656':{type:'struct',name:'timespec'},'136439':{type:'struct',name:'ChanReader'},'46553':{type:'fn',name:'from_fn'},'11464':{type:'fn',name:'to_str_exp_digits'},'148744':{type:'enum',name:'IoErrorKind'},'125725':{type:'struct',name:'sockaddr_in6'},'57014':{type:'typedef',name:'RevMoveItems'},'152160':{type:'trait',name:'Stream'},'234931':{type:'mod',name:'macros'},'76328':{type:'enum',name:'Ordering'},'140691':{type:'enum',name:'Protocol'},'81037':{type:'trait',name:'Primitive'},'145161':{type:'struct',name:'Process'},'127569':{type:'ffi',name:'isalnum'},'106738':{type:'mod',name:'result'},'129277':{type:'ffi',name:'FindNextFileW'},'103120':{type:'struct',name:'SipHasher'},'128077':{type:'ffi',name:'malloc'},'129779':{type:'ffi',name:'CreateNamedPipeW'},'133243':{type:'fn',name:'get_exit_status'},'93347':{type:'trait',name:'MutableDoubleEndedIterator'},'75113':{type:'trait',name:'Freeze'},'161707':{type:'fn',name:'transmute_mut_region'},'9747':{type:'fn',name:'sinh'},'145269':{type:'enum',name:'StdioContainer'},'237898':{type:'trait',name:'RtioSignal'},'2771':{type:'fn',name:'to_str_bytes'},'47185':{type:'struct',name:'RevSplits'},'183342':{type:'ffi',name:'truncf64'},'182755':{type:'ffi',name:'atomic_min_acqrel'},'133550':{type:'enum',name:'MapOption'},'237799':{type:'trait',name:'RtioUnixListener'},'82246':{type:'fn',name:'ln'},'27182':{type:'trait',name:'Tuple8'},'182586':{type:'ffi',name:'atomic_xor'},'182196':{type:'ffi',name:'atomic_xchg'},'0':{type:'mod',name:'std'},'165943':{type:'enum',name:'Flag'},'71527':{type:'trait',name:'OwnedStrAsciiExt'},'9363':{type:'fn',name:'exp2'},'127625':{type:'ffi',name:'isspace'},'93801':{type:'struct',name:'ByRef'},'140809':{type:'mod',name:'tcp'},'100080':{type:'trait',name:'IntoStr'},'152676':{type:'trait',name:'Acceptor'},'134857':{type:'mod',name:'android'},'172161':{type:'fn',name:'init'},'236662':{type:'enum',name:'CloseBehavior'},'11967':{type:'fn',name:'cbrt'},'125798':{type:'mod',name:'arch'},'65300':{type:'fn',name:'as_owned_vec'},'169277':{type:'trait',name:'Float'},'92179':{type:'trait',name:'CheckedSub'},'95901':{type:'struct',name:'Map'},'128470':{type:'ffi',name:'wrmdir'},'75933':{type:'trait',name:'BitOr'},'127871':{type:'ffi',name:'fwrite'},'118631':{type:'trait',name:'LocalData'},'183005':{type:'ffi',name:'owns_managed'},'11980':{type:'fn',name:'cosh'},'9319':{type:'fn',name:'cos'},'126006':{type:'typedef',name:'PBOOL'},'18598':{type:'trait',name:'Tuple4'},'79370':{type:'fn',name:'float_to_str_common'},'129032':{type:'ffi',name:'send'},'153678':{type:'typedef',name:'Components'},'12006':{type:'fn',name:'abs_sub'},'183192':{type:'ffi',name:'exp2f64'},'177101':{type:'fn',name:'write_repr'},'135025':{type:'fn',name:'next_test_port'},'166733':{type:'enum',name:'PluralKeyword'},'139016':{type:'fn',name:'u64_to_be_bytes'},'89875':{type:'fn',name:'from_i64'},'95258':{type:'struct',name:'Zip'},'245630':{type:'fn',name:'init'},'132296':{type:'struct',name:'Pipe'},'181329':{type:'trait',name:'TyVisitor'},'161795':{type:'mod',name:'fmt'},'246751':{type:'fn',name:'init'},'128438':{type:'ffi',name:'chmod'},'235419':{type:'enum',name:'DeathAction'},'152637':{type:'enum',name:'SeekStyle'},'235384':{type:'struct',name:'GarbageCollector'},'48592':{type:'mod',name:'traits'},'128768':{type:'ffi',name:'isatty'},'62135':{type:'fn',name:'eq'},'240185':{type:'struct',name:'CrateMap'},'125741':{type:'struct',name:'in6_addr'},'152776':{type:'enum',name:'FileAccess'},'80870':{type:'trait',name:'Round'},'62582':{type:'enum',name:'UTF16Item'},'135016':{type:'mod',name:'test'},'166060':{type:'enum',name:'Count'},'148754':{type:'enum',name:'IoErrorKind'},'182417':{type:'ffi',name:'atomic_and_rel'},'12024':{type:'fn',name:'next_after'},'127632':{type:'ffi',name:'isupper'},'152782':{type:'enum',name:'FileType'},'169752':{type:'fn',name:'format_unsafe'},'182923':{type:'ffi',name:'volatile_load'},'172075':{type:'fn',name:'nonzero_size_of'},'235393':{type:'enum',name:'BlockedTask'},'125868':{type:'typedef',name:'dev_t'},'125554':{type:'mod',name:'types'},'129012':{type:'ffi',name:'recv'},'155566':{type:'struct',name:'Path'},'60255':{type:'struct',name:'Chars'},'96102':{type:'struct',name:'Filter'},'128311':{type:'ffi',name:'strpbrk'},'127850':{type:'ffi',name:'fread'},'161644':{type:'fn',name:'transmute_mut'},'147480':{type:'fn',name:'print_args'},'127786':{type:'ffi',name:'fgets'},'77191':{type:'fn',name:'max'},'133581':{type:'enum',name:'MapError'},'117021':{type:'struct',name:'Sender'},'129452':{type:'ffi',name:'VirtualFree'},'141354':{type:'typedef',name:'Port'},'129836':{type:'ffi',name:'SetNamedPipeHandleState'},'100070':{type:'mod',name:'to_str'},'183052':{type:'ffi',name:'copy_memory'},'159035':{type:'enum',name:'PathPrefix'},'134746':{type:'mod',name:'macos'},'77317':{type:'enum',name:'SignificantDigits'},'126208':{type:'struct',name:'FILETIME'},'235413':{type:'enum',name:'DeathAction'},'146079':{type:'enum',name:'Signum'},'183171':{type:'ffi',name:'expf32'},'97108':{type:'struct',name:'Skip'},'72633':{type:'fn',name:'read_and_zero'},'183538':{type:'ffi',name:'i64_add_with_overflow'},'47689':{type:'fn',name:'unzip'},'135346':{type:'mod',name:'buffered'},'158802':{type:'fn',name:'is_verbatim'},'148455':{type:'typedef',name:'IoResult'},'60621':{type:'typedef',name:'RevBytes'},'105269':{type:'enum',name:'Option'},'177178':{type:'fn',name:'repr_to_str'},'181325':{type:'enum',name:'Opaque'},'128903':{type:'ffi',name:'bind'},'51173':{type:'trait',name:'OwnedVector'},'128535':{type:'ffi',name:'popen'},'236797':{type:'trait',name:'IoFactory'},'129906':{type:'ffi',name:'commit'},'82045':{type:'fn',name:'powf'},'82276':{type:'fn',name:'log2'},'234945':{type:'fn',name:'get_box_size'},'80681':{type:'trait',name:'Num'},'147588':{type:'struct',name:'StdWriter'},'237760':{type:'trait',name:'RtioPipe'},'120365':{type:'enum',name:'Ordering'},'169734':{type:'fn',name:'format'},'72297':{type:'mod',name:'ptr'},'139721':{type:'fn',name:'copy'},'246421':{type:'mod',name:'stack'},'134783':{type:'mod',name:'freebsd'},'183206':{type:'ffi',name:'logf64'},'140679':{type:'enum',name:'SocketType'},'129394':{type:'ffi',name:'WaitForSingleObject'},'9415':{type:'fn',name:'mul_add'},'80868':{type:'trait',name:'Unsigned'},'181299':{type:'typedef',name:'GlueFn'},'125858':{type:'typedef',name:'intptr_t'},'133446':{type:'fn',name:'args'},'75975':{type:'trait',name:'Shr'},'9306':{type:'fn',name:'sin'},'134728':{type:'mod',name:'consts'},'183271':{type:'ffi',name:'fabsf32'},'75889':{type:'trait',name:'Rem'},'125670':{type:'typedef',name:'SOCKET'},'127720':{type:'ffi',name:'remove'},'159058':{type:'enum',name:'PathPrefix'},'133543':{type:'enum',name:'MemoryMapKind'},'125294':{type:'mod',name:'libc'},'109727':{type:'struct',name:'Handle'},'125706':{type:'struct',name:'sockaddr_in'},'128790':{type:'ffi',name:'pipe'},'165717':{type:'enum',name:'Position'},'56353':{type:'struct',name:'MutSplits'},'103304':{type:'trait',name:'Hasher'},'246643':{type:'trait',name:'Runtime'},'89905':{type:'fn',name:'from_u8'},'128947':{type:'ffi',name:'getpeername'},'9350':{type:'fn',name:'exp'},'121742':{type:'fn',name:'atomic_compare_and_swap'},'135963':{type:'struct',name:'LineBufferedWriter'},'59644':{type:'fn',name:'from_utf8'},'54883':{type:'trait',name:'MutableCloneableVector'},'125987':{type:'typedef',name:'LPBYTE'},'92294':{type:'trait',name:'Iterator'},'183706':{type:'ffi',name:'u64_sub_with_overflow'},'124140':{type:'enum',name:'PopResult'},'169289':{type:'trait',name:'LowerExp'},'172192':{type:'fn',name:'to_le16'},'182142':{type:'ffi',name:'atomic_load_acq'},'108105':{type:'fn',name:'fold_'},'147704':{type:'struct',name:'Timer'},'129682':{type:'ffi',name:'ReadFile'},'153778':{type:'fn',name:'is_sep_byte'},'59332':{type:'fn',name:'append_one'},'11923':{type:'fn',name:'asin'},'119014':{type:'fn',name:'get'},'80746':{type:'trait',name:'Zero'},'237327':{type:'trait',name:'RtioTcpStream'},'182430':{type:'ffi',name:'atomic_and_acqrel'},'129625':{type:'ffi',name:'FlushFileBuffers'},'183296':{type:'ffi',name:'copysignf64'},'125803':{type:'typedef',name:'c_schar'},'8959':{type:'fn',name:'to_str_bytes'},'125839':{type:'typedef',name:'clock_t'},'128981':{type:'ffi',name:'setsockopt'},'125865':{type:'typedef',name:'off_t'},'123691':{type:'struct',name:'Queue'},'82129':{type:'fn',name:'cos'},'183475':{type:'ffi',name:'bswap16'},'242202':{type:'fn',name:'begin_unwind_raw'},'11367':{type:'fn',name:'to_str_exact'},'55013':{type:'mod',name:'raw'},'140681':{type:'enum',name:'SocketType'},'125663':{type:'enum',name:'timezone'},'98843':{type:'struct',name:'RangeInclusive'},'121545':{type:'fn',name:'atomic_store'},'78324':{type:'fn',name:'float_to_str_bytes_common'},'125842':{type:'typedef',name:'time_t'},'125833':{type:'typedef',name:'size_t'},'14753':{type:'fn',name:'from_digit'},'135178':{type:'fn',name:'next_test_ip4'},'166264':{type:'enum',name:'Method'},'238782':{type:'fn',name:'max_cached_stacks'},'125818':{type:'typedef',name:'c_uint'},'125575':{type:'typedef',name:'uint8_t'},'132173':{type:'fn',name:'getenv_as_bytes'},'133552':{type:'enum',name:'MapOption'},'104694':{type:'trait',name:'Container'},'182469':{type:'ffi',name:'atomic_nand_acq'},'181307':{type:'struct',name:'TyDesc'},'11832':{type:'fn',name:'floor'},'75116':{type:'mod',name:'marker'},'82222':{type:'fn',name:'exp'},'183636':{type:'ffi',name:'i32_sub_with_overflow'},'239980':{type:'fn',name:'local_malloc'},'1':{type:'mod',name:'macros'},'141370':{type:'enum',name:'IpAddr'},'183149':{type:'ffi',name:'powf32'},'139414':{type:'mod',name:'fs'},'100155':{type:'trait',name:'Clone'},'63186':{type:'fn',name:'from_utf16'},'20195':{type:'trait',name:'Tuple5'},'117038':{type:'enum',name:'TryRecvResult'},'4586':{type:'fn',name:'parse_bytes'},'140049':{type:'fn',name:'readdir'},'151209':{type:'trait',name:'Writer'},'172219':{type:'fn',name:'to_be16'},'184108':{type:'struct',name:'Procedure'},'77227':{type:'fn',name:'from_str'},'75115':{type:'trait',name:'Pod'},'99176':{type:'fn',name:'range_step'},'96881':{type:'struct',name:'SkipWhile'},'50982':{type:'trait',name:'ImmutableTotalOrdVector'},'126234':{type:'struct',name:'WSAPROTOCOLCHAIN'},'182065':{type:'ffi',name:'atomic_cxchg_acq'},'169064':{type:'struct',name:'Argument'},'133588':{type:'enum',name:'MapError'},'167017':{type:'struct',name:'Parser'},'125812':{type:'typedef',name:'c_ushort'},'129416':{type:'ffi',name:'GetExitCodeProcess'},'77168':{type:'fn',name:'min'},'100154':{type:'mod',name:'clone'},'127992':{type:'ffi',name:'labs'},'182917':{type:'ffi',name:'atomic_fence_acqrel'},'129705':{type:'ffi',name:'WriteFile'},'129754':{type:'ffi',name:'GetSystemTimeAsFileTime'},'172396':{type:'fn',name:'drop'},'131850':{type:'fn',name:'env_as_bytes'},'182339':{type:'ffi',name:'atomic_xsub_acq'},'46737':{type:'fn',name:'with_capacity'},'172324':{type:'fn',name:'swap'},'77328':{type:'enum',name:'SignFormat'},'139998':{type:'fn',name:'mkdir'},'172433':{type:'trait',name:'Repr'},'121976':{type:'fn',name:'fence'},'147410':{type:'fn',name:'flush'},'182235':{type:'ffi',name:'atomic_xchg_acqrel'},'8879':{type:'fn',name:'parse_bytes'},'237426':{type:'trait',name:'RtioSocket'},'64169':{type:'typedef',name:'SendStr'},'94244':{type:'enum',name:'MinMaxResult'},'77243':{type:'mod',name:'num'},'152635':{type:'enum',name:'SeekStyle'},'106748':{type:'enum',name:'Result'},'128600':{type:'ffi',name:'wopen'},'99737':{type:'fn',name:'eq'},'126016':{type:'typedef',name:'SIZE_T'},'11814':{type:'fn',name:'copysign'},'182222':{type:'ffi',name:'atomic_xchg_rel'},'124141':{type:'enum',name:'PopResult'},'165723':{type:'enum',name:'Position'},'241449':{type:'mod',name:'unwind'},'74291':{type:'mod',name:'reference'},'59616':{type:'fn',name:'from_utf8_owned'},'94764':{type:'struct',name:'Cycle'},'177248':{type:'fn',name:'align'},'51035':{type:'trait',name:'ImmutableCloneableVector'},'145032':{type:'struct',name:'PipeStream'},'89636':{type:'trait',name:'FromPrimitive'},'128732':{type:'ffi',name:'execvpe'},'104712':{type:'trait',name:'Mutable'},'3719':{type:'fn',name:'to_str_bytes'},'128629':{type:'mod',name:'unistd'},'11429':{type:'fn',name:'to_str_exp_exact'},'128386':{type:'ffi',name:'wcslen'},'161693':{type:'fn',name:'transmute_immut_unsafe'},'125555':{type:'mod',name:'common'},'169145':{type:'trait',name:'Bool'},'105146':{type:'trait',name:'AnyOwnExt'},'77315':{type:'enum',name:'ExponentFormat'},'131501':{type:'fn',name:'close'},'75833':{type:'trait',name:'Add'},'136415':{type:'mod',name:'comm_adapters'},'152785':{type:'enum',name:'FileType'},'94966':{type:'struct',name:'Chain'},'129874':{type:'ffi',name:'GetOverlappedResult'},'64795':{type:'fn',name:'from_byte'},'80826':{type:'fn',name:'abs'},'1156':{type:'mod',name:'i8'},'152282':{type:'trait',name:'Buffer'},'182742':{type:'ffi',name:'atomic_min_rel'},'118832':{type:'fn',name:'pop'},'106756':{type:'enum',name:'Result'},'9643':{type:'fn',name:'abs_sub'},'125566':{type:'typedef',name:'int16_t'},'127830':{type:'ffi',name:'puts'},'89890':{type:'fn',name:'from_uint'},'105273':{type:'enum',name:'Option'},'235078':{type:'fn',name:'malloc_raw'},'11726':{type:'fn',name:'exp2'},'125877':{type:'typedef',name:'useconds_t'},'132248':{type:'fn',name:'unsetenv'},'135191':{type:'fn',name:'next_test_ip6'},'5509':{type:'fn',name:'to_str_bytes'},'121999':{type:'mod',name:'deque'},'14552':{type:'fn',name:'is_digit_radix'},'72313':{type:'fn',name:'buf_len'},'103254':{type:'fn',name:'hash_with_keys'},'80761':{type:'fn',name:'zero'},'129237':{type:'ffi',name:'RemoveDirectoryW'},'56639':{type:'struct',name:'MutChunks'},'94249':{type:'enum',name:'MinMaxResult'},'80769':{type:'trait',name:'One'},'182151':{type:'ffi',name:'atomic_load_relaxed'},'245664':{type:'fn',name:'put'},'133026':{type:'fn',name:'last_os_error'},'82165':{type:'fn',name:'acos'},'77095':{type:'trait',name:'Ord'},'127728':{type:'ffi',name:'rename'},'140693':{type:'struct',name:'Hint'},'11778':{type:'fn',name:'mul_add'},'130397':{type:'trait',name:'ToCStr'},'182365':{type:'ffi',name:'atomic_xsub_acqrel'},'183314':{type:'ffi',name:'floorf64'},'100013':{type:'fn',name:'ge'},'146077':{type:'enum',name:'Signum'},'161661':{type:'fn',name:'transmute_region'},'125917':{type:'typedef',name:'CCHAR'},'108990':{type:'struct',name:'RefMut'},'129351':{type:'ffi',name:'CreateProcessA'},'243249':{type:'fn',name:'log_enabled'},'50760':{type:'trait',name:'ImmutableEqVector'},'169117':{type:'struct',name:'Arguments'},'137017':{type:'struct',name:'MemReader'},'140161':{type:'fn',name:'mkdir_recursive'},'64948':{type:'fn',name:'slice_bytes'},'146075':{type:'enum',name:'Signum'},'235398':{type:'enum',name:'BlockedTask'},'140684':{type:'enum',name:'Flag'},'134931':{type:'mod',name:'x86'},'105087':{type:'trait',name:'AnyMutRefExt'},'11752':{type:'fn',name:'log10'},'125871':{type:'typedef',name:'ino_t'},'129900':{type:'mod',name:'msvcrt'},'122378':{type:'struct',name:'BufferPool'},'166058':{type:'enum',name:'Count'},'93878':{type:'trait',name:'AdditiveIterator'},'148758':{type:'enum',name:'IoErrorKind'},'128462':{type:'ffi',name:'mkdir'},'182690':{type:'ffi',name:'atomic_max_acqrel'},'148264':{type:'struct',name:'TeeReader'},'129082':{type:'ffi',name:'sendto'},'16043':{type:'mod',name:'tuple'},'82258':{type:'fn',name:'log'},'152775':{type:'enum',name:'FileAccess'},'55290':{type:'fn',name:'push_bytes'},'125827':{type:'typedef',name:'c_float'},'129523':{type:'ffi',name:'CreateFileMappingW'},'9275':{type:'fn',name:'sqrt'},'183185':{type:'ffi',name:'exp2f32'},'74061':{type:'fn',name:'ptr_eq'},'77329':{type:'enum',name:'SignFormat'},'11871':{type:'fn',name:'rint'},'5830':{type:'mod',name:'u8'},'153643':{type:'mod',name:'posix'},'152778':{type:'enum',name:'FileAccess'},'153387':{type:'struct',name:'UnstableFileStat'},'183566':{type:'ffi',name:'u16_add_with_overflow'},'244418':{type:'fn',name:'write'},'140688':{type:'enum',name:'Flag'},'134820':{type:'mod',name:'linux'},'152774':{type:'enum',name:'FileMode'},'128298':{type:'ffi',name:'strcspn'},'146043':{type:'mod',name:'signal'},'129573':{type:'ffi',name:'UnmapViewOfFile'},'104973':{type:'trait',name:'Any'},'109199':{type:'typedef',name:'TaskResult'},'183220':{type:'ffi',name:'log10f64'},'82087':{type:'fn',name:'cbrt'},'245652':{type:'fn',name:'take'},'82207':{type:'fn',name:'sin_cos'},'126182':{type:'typedef',name:'LPMEMORY_BASIC_INFORMATION'},'70183':{type:'mod',name:'ascii'},'125569':{type:'typedef',name:'int32_t'},'165504':{type:'struct',name:'FormatSpec'},'152773':{type:'enum',name:'FileMode'},'242327':{type:'fn',name:'begin_unwind_fmt'},'127923':{type:'ffi',name:'fgetpos'},'47764':{type:'struct',name:'ElementSwaps'},'134732':{type:'mod',name:'unix'},'152662':{type:'trait',name:'Listener'},'161559':{type:'fn',name:'transmute_copy'},'129508':{type:'ffi',name:'VirtualQuery'},'75875':{type:'trait',name:'Div'},'152227':{type:'struct',name:'Chars'},'182404':{type:'ffi',name:'atomic_and_acq'},'166059':{type:'enum',name:'Count'},'125845':{type:'typedef',name:'suseconds_t'},'133508':{type:'fn',name:'page_size'},'89935':{type:'fn',name:'from_u32'},'63241':{type:'fn',name:'from_utf16_lossy'},'182287':{type:'ffi',name:'atomic_xadd_rel'},'128775':{type:'ffi',name:'lseek'},'80901':{type:'fn',name:'pow'},'182859':{type:'ffi',name:'atomic_umax_acq'},'183021':{type:'ffi',name:'offset'},'93986':{type:'trait',name:'OrdIterator'},'235404':{type:'enum',name:'BlockedTask'},'240159':{type:'fn',name:'live_allocs'},'75498':{type:'struct',name:'InvariantLifetime'},'127892':{type:'ffi',name:'fseek'},'159047':{type:'enum',name:'PathPrefix'},'92236':{type:'mod',name:'iter'},'242353':{type:'fn',name:'begin_unwind'},'134739':{type:'mod',name:'windows'},'100072':{type:'trait',name:'ToStr'},'99790':{type:'fn',name:'ne'},'125830':{type:'typedef',name:'c_double'},'182599':{type:'ffi',name:'atomic_xor_acq'},'104956':{type:'mod',name:'any'},'59438':{type:'struct',name:'MoveItems'},'243927':{type:'mod',name:'imp'},'132814':{type:'fn',name:'homedir'},'11638':{type:'fn',name:'sqrt'},'182495':{type:'ffi',name:'atomic_nand_acqrel'},'105268':{type:'enum',name:'Option'},'105252':{type:'mod',name:'option'},'125754':{type:'struct',name:'ip6_mreq'},'77274':{type:'mod',name:'strconv'},'141035':{type:'struct',name:'TcpAcceptor'},'131058':{type:'struct',name:'CVec'},'125942':{type:'typedef',name:'LONG_PTR'},'183349':{type:'ffi',name:'rintf32'},'55022':{type:'fn',name:'buf_as_slice'},'128765':{type:'ffi',name:'getpid'},'129288':{type:'ffi',name:'FindClose'},'125964':{type:'typedef',name:'LPSTR'},'238813':{type:'typedef',name:'Box'},'11949':{type:'fn',name:'atan2'},'126010':{type:'typedef',name:'WCHAR'},'76335':{type:'enum',name:'Ordering'},'77327':{type:'enum',name:'SignFormat'},'183199':{type:'ffi',name:'logf32'},'60708':{type:'struct',name:'CharSplitsN'},'80856':{type:'fn',name:'signum'},'172298':{type:'fn',name:'from_be32'},'158993':{type:'fn',name:'is_sep_verbatim'},'182885':{type:'ffi',name:'atomic_umax_acqrel'},'127949':{type:'ffi',name:'feof'},'125968':{type:'typedef',name:'LPWCH'},'128806':{type:'ffi',name:'read'},'11993':{type:'fn',name:'exp_m1'},'182352':{type:'ffi',name:'atomic_xsub_rel'},'82360':{type:'fn',name:'atanh'},'125761':{type:'struct',name:'addrinfo'},'75354':{type:'struct',name:'CovariantLifetime'},'97002':{type:'struct',name:'TakeWhile'},'125848':{type:'typedef',name:'wchar_t'},'129179':{type:'ffi',name:'GetEnvironmentStringsA'},'153730':{type:'struct',name:'Path'},'756':{type:'fn',name:'parse_bytes'},'240072':{type:'fn',name:'local_free_'},'128166':{type:'ffi',name:'strncpy'},'183510':{type:'ffi',name:'i16_add_with_overflow'},'121652':{type:'fn',name:'atomic_add'},'153692':{type:'typedef',name:'StrComponents'},'14475':{type:'fn',name:'is_whitespace'},'128134':{type:'ffi',name:'rand'},'125581':{type:'typedef',name:'uint32_t'},'240345':{type:'mod',name:'local_ptr'},'64167':{type:'enum',name:'MaybeOwned'},'46507':{type:'mod',name:'vec'},'182391':{type:'ffi',name:'atomic_and'},'75698':{type:'struct',name:'NoPod'},'77331':{type:'trait',name:'NumStrConv'},'125676':{type:'typedef',name:'sa_family_t'},'2691':{type:'fn',name:'parse_bytes'},'65704':{type:'trait',name:'Str'},'126595':{type:'mod',name:'posix88'},'128584':{type:'ffi',name:'open'},'75903':{type:'trait',name:'Neg'},'14499':{type:'fn',name:'is_alphanumeric'},'82372':{type:'trait',name:'ToPrimitive'},'55175':{type:'fn',name:'pop_ptr'},'147108':{type:'fn',name:'set_stdout'},'62405':{type:'fn',name:'is_utf8'},'237811':{type:'trait',name:'RtioUnixAcceptor'},'138789':{type:'fn',name:'u64_to_le_bytes'},'140685':{type:'enum',name:'Flag'},'182846':{type:'ffi',name:'atomic_umax'},'108156':{type:'struct',name:'Cell'},'146994':{type:'fn',name:'stdout'},'166738':{type:'enum',name:'PluralKeyword'},'70202':{type:'struct',name:'Ascii'},'183384':{type:'ffi',name:'roundf64'},'127660':{type:'mod',name:'stdio'},'129663':{type:'ffi',name:'GetFinalPathNameByHandleW'},'139943':{type:'fn',name:'symlink'},'237899':{type:'mod',name:'local'},'97621':{type:'struct',name:'FlatMap'},'129255':{type:'ffi',name:'SetCurrentDirectoryW'},'11897':{type:'fn',name:'round'},'108375':{type:'struct',name:'RefCell'},'140692':{type:'enum',name:'Protocol'},'153513':{type:'typedef',name:'FilePermission'},'172404':{type:'mod',name:'repr'},'184101':{type:'struct',name:'Closure'},'3052':{type:'mod',name:'i32'},'126711':{type:'mod',name:'bsd44'},'140663':{type:'mod',name:'net'},'81567':{type:'trait',name:'Float'},'183085':{type:'ffi',name:'sqrtf32'},'128578':{type:'mod',name:'fcntl'},'75024':{type:'struct',name:'Gc'},'126320':{type:'mod',name:'os'},'147697':{type:'mod',name:'timer'},'119630':{type:'fn',name:'modify'},'133592':{type:'enum',name:'MapError'},'125880':{type:'typedef',name:'mode_t'},'92065':{type:'trait',name:'Saturating'},'246791':{type:'fn',name:'cleanup'},'119404':{type:'fn',name:'set'},'129427':{type:'ffi',name:'GetSystemInfo'},'8024':{type:'fn',name:'parse_bytes'},'183412':{type:'ffi',name:'ctpop64'},'9617':{type:'fn',name:'cosh'},'135695':{type:'struct',name:'BufferedWriter'},'169229':{type:'trait',name:'UpperHex'},'183178':{type:'ffi',name:'expf64'},'159051':{type:'enum',name:'PathPrefix'},'75570':{type:'struct',name:'NoFreeze'},'125991':{type:'typedef',name:'LPWORD'},'76030':{type:'mod',name:'cmp'},'128659':{type:'ffi',name:'close'},'64210':{type:'trait',name:'IntoMaybeOwned'},'166277':{type:'enum',name:'Method'},'127611':{type:'ffi',name:'isprint'},'133575':{type:'enum',name:'MapError'},'138390':{type:'mod',name:'tempfile'},'128347':{type:'ffi',name:'strerror'},'9716':{type:'fn',name:'ldexp'},'126003':{type:'typedef',name:'LRESULT'},'133577':{type:'enum',name:'MapError'},'9534':{type:'fn',name:'round'},'72419':{type:'fn',name:'null'},'9376':{type:'fn',name:'ln'},'62546':{type:'struct',name:'UTF16Items'},'141395':{type:'enum',name:'IpAddr'},'243231':{type:'mod',name:'backtrace'},'92198':{type:'trait',name:'CheckedMul'},'124142':{type:'enum',name:'PopResult'},'11884':{type:'fn',name:'nearbyint'},'75827':{type:'trait',name:'Drop'},'125608':{type:'struct',name:'stat'},'75111':{type:'mod',name:'kinds'},'147983':{type:'struct',name:'NullReader'},'237604':{type:'trait',name:'RtioFileStream'},'148378':{type:'fn',name:'copy'},'62586':{type:'enum',name:'UTF16Item'},'97945':{type:'struct',name:'Fuse'},'109539':{type:'fn',name:'spawn'},'183069':{type:'ffi',name:'set_memory'},'129595':{type:'ffi',name:'CreateSymbolicLinkW'},'117011':{type:'struct',name:'Messages'},'77313':{type:'enum',name:'ExponentFormat'},'125561':{type:'enum',name:'fpos_t'},'148749':{type:'enum',name:'IoErrorKind'},'235291':{type:'fn',name:'exchange_free'},'77214':{type:'mod',name:'from_str'},'183213':{type:'ffi',name:'log10f32'},'183363':{type:'ffi',name:'nearbyintf32'},'183720':{type:'ffi',name:'i8_mul_with_overflow'},'148757':{type:'enum',name:'IoErrorKind'},'14442':{type:'fn',name:'is_XID_continue'},'128184':{type:'ffi',name:'strcat'},'128684':{type:'ffi',name:'execv'},'235342':{type:'struct',name:'Task'},'104922':{type:'trait',name:'Default'},'182116':{type:'ffi',name:'atomic_cxchg_relaxed'},'169253':{type:'trait',name:'Poly'},'242056':{type:'fn',name:'fail_'},'166054':{type:'enum',name:'Count'},'129244':{type:'ffi',name:'GetCurrentDirectoryW'},'125836':{type:'typedef',name:'ptrdiff_t'},'80713':{type:'fn',name:'div_rem'},'122061':{type:'struct',name:'Stealer'},'125789':{type:'struct',name:'sockaddr_un'},'64583':{type:'fn',name:'from_buf_len'},'76031':{type:'trait',name:'Eq'},'147520':{type:'struct',name:'StdReader'},'127562':{type:'mod',name:'funcs'},'11801':{type:'fn',name:'abs'},'63134':{type:'fn',name:'utf16_items'},'145025':{type:'mod',name:'pipe'},'165239':{type:'enum',name:'Piece'},'245628':{type:'mod',name:'args'},'148742':{type:'enum',name:'IoErrorKind'},'127972':{type:'mod',name:'stdlib'},'182313':{type:'ffi',name:'atomic_xadd_relaxed'},'169169':{type:'trait',name:'Signed'},'128007':{type:'ffi',name:'atoi'},'238796':{type:'mod',name:'local_heap'},'182184':{type:'ffi',name:'atomic_store_relaxed'},'117042':{type:'enum',name:'TryRecvResult'},'108822':{type:'struct',name:'Ref'},'98343':{type:'struct',name:'Unfold'},'14382':{type:'fn',name:'from_u32'},'109206':{type:'struct',name:'TaskOpts'},'126316':{type:'typedef',name:'GROUP'},'181298':{type:'mod',name:'intrinsics'},'148755':{type:'enum',name:'IoErrorKind'},'245678':{type:'fn',name:'clone'},'177273':{type:'struct',name:'MovePtrAdaptor'},'184092':{type:'struct',name:'Slice'},'166735':{type:'enum',name:'PluralKeyword'},'128105':{type:'ffi',name:'exit'},'237823':{type:'trait',name:'RtioTTY'},'11713':{type:'fn',name:'exp'},'71542':{type:'trait',name:'StrAsciiExt'},'9847':{type:'mod',name:'consts'},'127908':{type:'ffi',name:'ftell'},'243102':{type:'mod',name:'libunwind'},'183692':{type:'ffi',name:'u32_sub_with_overflow'},'128490':{type:'ffi',name:'stat'},'129168':{type:'ffi',name:'SetEnvironmentVariableW'},'182456':{type:'ffi',name:'atomic_nand'},'126312':{type:'typedef',name:'LPWSAPROTOCOL_INFO'},'134938':{type:'mod',name:'x86_64'},'9469':{type:'fn',name:'floor'},'75762':{type:'struct',name:'Managed'},'120366':{type:'enum',name:'Ordering'},'131593':{type:'fn',name:'fill_utf16_buf_and_decode'},'152777':{type:'enum',name:'FileAccess'},'235426':{type:'struct',name:'BlockedTasks'},'80778':{type:'fn',name:'one'},'98155':{type:'struct',name:'Inspect'},'159039':{type:'enum',name:'PathPrefix'},'60782':{type:'typedef',name:'AnyLines'},'128015':{type:'ffi',name:'strtod'},'182261':{type:'ffi',name:'atomic_xadd'},'61701':{type:'struct',name:'Normalizations'},'127985':{type:'ffi',name:'abs'},'158789':{type:'fn',name:'prefix'},'165223':{type:'mod',name:'parse'},'147709':{type:'fn',name:'sleep'},'140678':{type:'enum',name:'SocketType'},'125560':{type:'enum',name:'FILE'},'153606':{type:'mod',name:'path'},'125983':{type:'typedef',name:'LPCVOID'},'98448':{type:'struct',name:'Counter'},'128698':{type:'ffi',name:'execve'},'14574':{type:'fn',name:'to_digit'},'93323':{type:'trait',name:'DoubleEndedIterator'},'125960':{type:'typedef',name:'LPWSTR'},'63574':{type:'fn',name:'from_utf8_lossy'},'119671':{type:'mod',name:'sync'},'128325':{type:'ffi',name:'strstr'},'163078':{type:'struct',name:'Radix'},'122070':{type:'enum',name:'Stolen'},'81056':{type:'fn',name:'next_power_of_two'},'238817':{type:'struct',name:'MemoryRegion'},'82141':{type:'fn',name:'tan'},'125589':{type:'enum',name:'dirent_t'},'183482':{type:'ffi',name:'bswap32'},'81193':{type:'enum',name:'FPCategory'},'166734':{type:'enum',name:'PluralKeyword'},'125979':{type:'typedef',name:'LPVOID'},'158750':{type:'fn',name:'is_vol_relative'},'139615':{type:'fn',name:'unlink'},'109255':{type:'fn',name:'task'},'125682':{type:'typedef',name:'in_addr_t'},'13727':{type:'fn',name:'to_str_exact'},'127646':{type:'ffi',name:'tolower'},'125999':{type:'typedef',name:'LPHANDLE'},'127745':{type:'ffi',name:'setvbuf'},'48064':{type:'struct',name:'Windows'},'127741':{type:'ffi',name:'tmpfile'},'14533':{type:'fn',name:'is_digit'},'13702':{type:'fn',name:'to_str_radix_special'},'183818':{type:'ffi',name:'u64_mul_with_overflow'},'13901':{type:'fn',name:'from_str_hex'},'129433':{type:'ffi',name:'VirtualAlloc'},'172267':{type:'fn',name:'from_le32'},'100973':{type:'mod',name:'sip'},'152113':{type:'struct',name:'RefWriter'},'148747':{type:'enum',name:'IoErrorKind'},'126321':{type:'mod',name:'c95'},'75634':{type:'struct',name:'NoSend'},'77330':{type:'enum',name:'SignFormat'},'241094':{type:'fn',name:'maybe_tls_key'},'169217':{type:'trait',name:'LowerHex'},'120368':{type:'enum',name:'Ordering'},'132303':{type:'fn',name:'pipe'},'128111':{type:'ffi',name:'_exit'},'182729':{type:'ffi',name:'atomic_min_acq'},'60628':{type:'struct',name:'CharSplits'},'99289':{type:'struct',name:'RangeStepInclusive'},'13976':{type:'mod',name:'unit'},'12110':{type:'fn',name:'sinh'},'134894':{type:'mod',name:'win32'},'81196':{type:'enum',name:'FPCategory'},'72430':{type:'fn',name:'mut_null'},'138144':{type:'mod',name:'result'},'64809':{type:'fn',name:'c_str_to_static_slice'},'140730':{type:'fn',name:'get_host_addresses'},'1823':{type:'fn',name:'to_str_bytes'},'148009':{type:'struct',name:'MultiWriter'},'161725':{type:'fn',name:'copy_lifetime'},'71345':{type:'trait',name:'AsciiStr'},'98885':{type:'fn',name:'range_inclusive'},'139248':{type:'fn',name:'u64_from_be_bytes'},'237296':{type:'trait',name:'RtioTcpAcceptor'},'182300':{type:'ffi',name:'atomic_xadd_acqrel'},'9661':{type:'fn',name:'next_after'},'129632':{type:'ffi',name:'CreateFileW'},'76598':{type:'trait',name:'TotalOrd'},'59789':{type:'fn',name:'from_char'},'72509':{type:'fn',name:'zero_memory'},'161618':{type:'fn',name:'bump_box_refcount'},'182248':{type:'ffi',name:'atomic_xchg_relaxed'},'182651':{type:'ffi',name:'atomic_max'},'235194':{type:'fn',name:'closure_exchange_malloc_'},'93413':{type:'trait',name:'ExactSize'},'145285':{type:'enum',name:'ProcessExit'},'104692':{type:'mod',name:'container'},'127936':{type:'ffi',name:'fsetpos'},'125595':{type:'mod',name:'posix01'},'183552':{type:'ffi',name:'u8_add_with_overflow'},'184076':{type:'struct',name:'Vec'},'133574':{type:'enum',name:'MapError'},'109656':{type:'mod',name:'comm'},'124605':{type:'struct',name:'Queue'},'99120':{type:'struct',name:'RangeStep'},'132793':{type:'fn',name:'self_exe_path'},'80977':{type:'trait',name:'Bitwise'},'107946':{type:'fn',name:'collect'},'169301':{type:'trait',name:'UpperExp'},'182973':{type:'ffi',name:'type_id'},'183496':{type:'ffi',name:'i8_add_with_overflow'},'64563':{type:'mod',name:'raw'},'125923':{type:'typedef',name:'DWORD'},'75426':{type:'struct',name:'ContravariantLifetime'},'126319':{type:'mod',name:'consts'},'152170':{type:'struct',name:'Lines'},'125995':{type:'typedef',name:'LPDWORD'},'240566':{type:'mod',name:'native'},'47504':{type:'trait',name:'VectorVector'},'245754':{type:'mod',name:'at_exit_imp'},'117036':{type:'enum',name:'TryRecvResult'},'126022':{type:'typedef',name:'int64'},'146073':{type:'enum',name:'Signum'},'128355':{type:'ffi',name:'strtok'},'128229':{type:'ffi',name:'strncmp'},'128718':{type:'ffi',name:'execvp'},'169193':{type:'trait',name:'Octal'},'241118':{type:'mod',name:'thread_local_storage'},'18':{type:'mod',name:'prelude'},'63265':{type:'fn',name:'with_capacity'},'99353':{type:'fn',name:'range_step_inclusive'},'15418':{type:'trait',name:'Char'},'82063':{type:'fn',name:'sqrt'},'235405':{type:'enum',name:'DeathAction'},'173646':{type:'struct',name:'ReprVisitor'},'172375':{type:'fn',name:'replace'},'182209':{type:'ffi',name:'atomic_xchg_acq'},'127639':{type:'ffi',name:'isxdigit'},'183092':{type:'ffi',name:'sqrtf64'},'165858':{type:'enum',name:'Alignment'},'236645':{type:'trait',name:'RemoteCallback'},'132740':{type:'fn',name:'self_exe_name'},'77322':{type:'enum',name:'SignificantDigits'},'120360':{type:'struct',name:'AtomicOption'},'15354':{type:'fn',name:'len_utf8_bytes'},'13824':{type:'fn',name:'to_str_exp_digits'},'125556':{type:'mod',name:'c95'},'15075':{type:'fn',name:'decompose_compatible'},'9521':{type:'fn',name:'nearbyint'},'128411':{type:'ffi',name:'memchr'},'182547':{type:'ffi',name:'atomic_or_rel'},'52873':{type:'trait',name:'OwnedEqVector'},'177278':{type:'fn',name:'MovePtrAdaptor'},'129123':{type:'mod',name:'extra'},'56098':{type:'typedef',name:'RevItems'},'139912':{type:'fn',name:'link'},'140682':{type:'enum',name:'Flag'},'128529':{type:'mod',name:'stdio'},'106551':{type:'struct',name:'Item'},'235280':{type:'fn',name:'exchange_free_'},'122052':{type:'struct',name:'Worker'},'145250':{type:'struct',name:'ProcessOutput'},'61272':{type:'struct',name:'MatchIndices'},'126204':{type:'typedef',name:'LPOVERLAPPED'},'183762':{type:'ffi',name:'i64_mul_with_overflow'},'136684':{type:'mod',name:'mem'},'11651':{type:'fn',name:'powi'},'183489':{type:'ffi',name:'bswap64'},'79502':{type:'fn',name:'from_str_bytes_common'},'57147':{type:'mod',name:'vec_ng'},'237572':{type:'trait',name:'RtioTimer'},'11342':{type:'fn',name:'to_str_radix_special'},'129262':{type:'ffi',name:'GetLastError'},'172232':{type:'fn',name:'to_be32'},'165227':{type:'enum',name:'Piece'},'235119':{type:'fn',name:'realloc_raw'},'182677':{type:'ffi',name:'atomic_max_rel'},'89815':{type:'fn',name:'from_int'},'60085':{type:'trait',name:'CharEq'},'80838':{type:'fn',name:'abs_sub'},'148743':{type:'enum',name:'IoErrorKind'},'59567':{type:'mod',name:'str'},'93656':{type:'struct',name:'Rev'},'182274':{type:'ffi',name:'atomic_xadd_acq'},'172258':{type:'fn',name:'from_le16'},'152638':{type:'trait',name:'Seek'},'125588':{type:'enum',name:'DIR'},'183335':{type:'ffi',name:'truncf32'},'109681':{type:'mod',name:'select'},'128838':{type:'ffi',name:'write'},'125572':{type:'typedef',name:'int64_t'},'148753':{type:'enum',name:'IoErrorKind'},'237887':{type:'trait',name:'PausableIdleCallback'},'72528':{type:'fn',name:'swap'},'139851':{type:'fn',name:'chmod'},'184122':{type:'trait',name:'Repr'},'82011':{type:'fn',name:'ln_1p'},'128047':{type:'ffi',name:'strtoul'},'245139':{type:'fn',name:'default_sched_threads'},'183804':{type:'ffi',name:'u32_mul_with_overflow'},'836':{type:'fn',name:'to_str_bytes'},'9604':{type:'fn',name:'cbrt'},'47421':{type:'fn',name:'append_one'},'76333':{type:'enum',name:'Ordering'},'235420':{type:'struct',name:'Death'},'63547':{type:'fn',name:'utf8_char_width'},'152779':{type:'enum',name:'FileType'},'182872':{type:'ffi',name:'atomic_umax_rel'},'239953':{type:'fn',name:'local_malloc_'},'182082':{type:'ffi',name:'atomic_cxchg_rel'},'46986':{type:'struct',name:'Splits'},'125929':{type:'typedef',name:'HANDLE'},'165945':{type:'enum',name:'Flag'},'129920':{type:'ffi',name:'open_osfhandle'},'140683':{type:'enum',name:'Flag'},'98564':{type:'struct',name:'Range'},'130935':{type:'fn',name:'from_c_multistring'},'99899':{type:'fn',name:'le'},'129893':{type:'ffi',name:'DisconnectNamedPipe'},'129230':{type:'ffi',name:'DeleteFileW'},'82312':{type:'fn',name:'cosh'},'127590':{type:'ffi',name:'isdigit'},'16466':{type:'trait',name:'Tuple2'},'166463':{type:'enum',name:'PluralSelector'},'55828':{type:'struct',name:'MutItems'},'117402':{type:'fn',name:'channel'},'81197':{type:'enum',name:'FPCategory'},'140105':{type:'struct',name:'Directories'},'125874':{type:'typedef',name:'pid_t'},'122076':{type:'enum',name:'Stolen'},'128872':{type:'ffi',name:'socket'},'91771':{type:'fn',name:'cast'},'81194':{type:'enum',name:'FPCategory'},'152741':{type:'fn',name:'standard_error'},'182716':{type:'ffi',name:'atomic_min'},'139879':{type:'fn',name:'chown'},'12061':{type:'fn',name:'hypot'},'4666':{type:'fn',name:'to_str_bytes'},'77077':{type:'fn',name:'lexical_ordering'},'55092':{type:'fn',name:'from_buf_raw'},'161183':{type:'trait',name:'GenericPathUnsafe'},'182960':{type:'ffi',name:'min_align_of'},'147004':{type:'fn',name:'stdout_raw'},'59696':{type:'fn',name:'from_byte'},'183454':{type:'ffi',name:'cttz16'},'169181':{type:'trait',name:'Unsigned'},'182915':{type:'ffi',name:'atomic_fence_rel'},'245086':{type:'mod',name:'util'},'125747':{type:'struct',name:'ip_mreq'},'125952':{type:'typedef',name:'LPCWSTR'},'128570':{type:'ffi',name:'fileno'},'128143':{type:'mod',name:'string'},'183524':{type:'ffi',name:'i32_add_with_overflow'},'126247':{type:'struct',name:'WSAPROTOCOL_INFO'},'182898':{type:'ffi',name:'atomic_umax_relaxed'},'237734':{type:'trait',name:'RtioProcess'},'149931':{type:'trait',name:'Reader'},'82336':{type:'fn',name:'asinh'},'14431':{type:'fn',name:'is_XID_start'},'121886':{type:'fn',name:'atomic_or'},'93390':{type:'trait',name:'RandomAccessIterator'},'148741':{type:'enum',name:'IoErrorKind'},'183356':{type:'ffi',name:'rintf64'},'89980':{type:'fn',name:'from_f64'},'183419':{type:'ffi',name:'ctlz8'},'145188':{type:'struct',name:'ProcessConfig'},'183009':{type:'ffi',name:'visit_tydesc'},'93932':{type:'trait',name:'MultiplicativeIterator'},'133562':{type:'enum',name:'MapOption'},'48217':{type:'struct',name:'Chunks'},'55224':{type:'mod',name:'bytes'},'65836':{type:'trait',name:'StrSlice'},'148746':{type:'enum',name:'IoErrorKind'},'124136':{type:'enum',name:'PopResult'},'16':{type:'mod',name:'rtdeps'},'125855':{type:'typedef',name:'c_ulonglong'},'122071':{type:'enum',name:'Stolen'},'139690':{type:'fn',name:'rename'},'183622':{type:'ffi',name:'i16_sub_with_overflow'},'160058':{type:'trait',name:'GenericPath'},'177221':{type:'trait',name:'MovePtr'},'92275':{type:'trait',name:'Extendable'},'182703':{type:'ffi',name:'atomic_max_relaxed'},'99617':{type:'mod',name:'order'},'137501':{type:'struct',name:'BufWriter'}};