var searchIndex = {}; var allPaths = {};
searchIndex['hexfloat'] = [{ty:"mod",name:"",path:"hexfloat",desc:"Syntax extension to create floating point literals from hexadecimal strings"},{ty:"fn",name:"macro_registrar",path:"hexfloat",desc:""},{ty:"fn",name:"expand_syntax_ext",path:"hexfloat",desc:""}];allPaths['hexfloat'] = {'19':{type:'fn',name:'macro_registrar'},'359':{type:'fn',name:'expand_syntax_ext'},'0':{type:'mod',name:'hexfloat'}};
searchIndex['fourcc'] = [{ty:"mod",name:"",path:"fourcc",desc:"Syntax extension to generate FourCCs."},{ty:"fn",name:"macro_registrar",path:"fourcc",desc:""},{ty:"fn",name:"expand_syntax_ext",path:"fourcc",desc:""}];allPaths['fourcc'] = {'0':{type:'mod',name:'fourcc'},'49':{type:'fn',name:'expand_syntax_ext'},'21':{type:'fn',name:'macro_registrar'}};

searchIndex['rustdoc'] = [{ty:"mod",name:"",path:"rustdoc",desc:""},{ty:"fn",name:"main",path:"rustdoc",desc:""},{ty:"fn",name:"opts",path:"rustdoc",desc:""},{ty:"fn",name:"usage",path:"rustdoc",desc:""},{ty:"fn",name:"main_args",path:"rustdoc",desc:""},{ty:"mod",name:"clean",path:"rustdoc",desc:"This module contains the \"cleaned\" pieces of the AST, and the functions\nthat clean them."},{ty:"struct",name:"Crate",path:"rustdoc::clean",desc:""},{ty:"structfield",name:"name",path:"rustdoc::clean",desc:"",parent:'216'},{ty:"structfield",name:"module",path:"rustdoc::clean",desc:"",parent:'216'},{ty:"structfield",name:"externs",path:"rustdoc::clean",desc:"",parent:'216'},{ty:"struct",name:"ExternalCrate",path:"rustdoc::clean",desc:""},{ty:"structfield",name:"name",path:"rustdoc::clean",desc:"",parent:'499'},{ty:"structfield",name:"attrs",path:"rustdoc::clean",desc:"",parent:'499'},{ty:"struct",name:"Item",path:"rustdoc::clean",desc:"Anything with a source location and set of attributes and, optionally, a\nname. That is, anything that can be documented. This doesn't correspond\ndirectly to the AST's concept of an item; it's a strict superset."},{ty:"structfield",name:"source",path:"rustdoc::clean",desc:"Stringified span",parent:'680'},{ty:"structfield",name:"name",path:"rustdoc::clean",desc:"Not everything has a name. E.g., impls",parent:'680'},{ty:"structfield",name:"attrs",path:"rustdoc::clean",desc:"",parent:'680'},{ty:"structfield",name:"inner",path:"rustdoc::clean",desc:"",parent:'680'},{ty:"structfield",name:"visibility",path:"rustdoc::clean",desc:"",parent:'680'},{ty:"structfield",name:"id",path:"rustdoc::clean",desc:"",parent:'680'},{ty:"struct",name:"Module",path:"rustdoc::clean",desc:""},{ty:"structfield",name:"items",path:"rustdoc::clean",desc:"",parent:'2428'},{ty:"structfield",name:"is_crate",path:"rustdoc::clean",desc:"",parent:'2428'},{ty:"struct",name:"TyParam",path:"rustdoc::clean",desc:""},{ty:"structfield",name:"name",path:"rustdoc::clean",desc:"",parent:'3275'},{ty:"structfield",name:"id",path:"rustdoc::clean",desc:"",parent:'3275'},{ty:"structfield",name:"bounds",path:"rustdoc::clean",desc:"",parent:'3275'},{ty:"struct",name:"Lifetime",path:"rustdoc::clean",desc:""},{ty:"struct",name:"Generics",path:"rustdoc::clean",desc:""},{ty:"structfield",name:"lifetimes",path:"rustdoc::clean",desc:"",parent:'3883'},{ty:"structfield",name:"type_params",path:"rustdoc::clean",desc:"",parent:'3883'},{ty:"struct",name:"Method",path:"rustdoc::clean",desc:""},{ty:"structfield",name:"generics",path:"rustdoc::clean",desc:"",parent:'4065'},{ty:"structfield",name:"self_",path:"rustdoc::clean",desc:"",parent:'4065'},{ty:"structfield",name:"purity",path:"rustdoc::clean",desc:"",parent:'4065'},{ty:"structfield",name:"decl",path:"rustdoc::clean",desc:"",parent:'4065'},{ty:"struct",name:"TyMethod",path:"rustdoc::clean",desc:""},{ty:"structfield",name:"purity",path:"rustdoc::clean",desc:"",parent:'4389'},{ty:"structfield",name:"decl",path:"rustdoc::clean",desc:"",parent:'4389'},{ty:"structfield",name:"generics",path:"rustdoc::clean",desc:"",parent:'4389'},{ty:"structfield",name:"self_",path:"rustdoc::clean",desc:"",parent:'4389'},{ty:"struct",name:"Function",path:"rustdoc::clean",desc:""},{ty:"structfield",name:"decl",path:"rustdoc::clean",desc:"",parent:'5040'},{ty:"structfield",name:"generics",path:"rustdoc::clean",desc:"",parent:'5040'},{ty:"structfield",name:"purity",path:"rustdoc::clean",desc:"",parent:'5040'},{ty:"struct",name:"ClosureDecl",path:"rustdoc::clean",desc:""},{ty:"structfield",name:"sigil",path:"rustdoc::clean",desc:"",parent:'5273'},{ty:"structfield",name:"region",path:"rustdoc::clean",desc:"",parent:'5273'},{ty:"structfield",name:"lifetimes",path:"rustdoc::clean",desc:"",parent:'5273'},{ty:"structfield",name:"decl",path:"rustdoc::clean",desc:"",parent:'5273'},{ty:"structfield",name:"onceness",path:"rustdoc::clean",desc:"",parent:'5273'},{ty:"structfield",name:"purity",path:"rustdoc::clean",desc:"",parent:'5273'},{ty:"structfield",name:"bounds",path:"rustdoc::clean",desc:"",parent:'5273'},{ty:"struct",name:"FnDecl",path:"rustdoc::clean",desc:""},{ty:"structfield",name:"inputs",path:"rustdoc::clean",desc:"",parent:'5666'},{ty:"structfield",name:"output",path:"rustdoc::clean",desc:"",parent:'5666'},{ty:"structfield",name:"cf",path:"rustdoc::clean",desc:"",parent:'5666'},{ty:"structfield",name:"attrs",path:"rustdoc::clean",desc:"",parent:'5666'},{ty:"struct",name:"Arguments",path:"rustdoc::clean",desc:""},{ty:"structfield",name:"values",path:"rustdoc::clean",desc:"",parent:'5898'},{ty:"struct",name:"Argument",path:"rustdoc::clean",desc:""},{ty:"structfield",name:"type_",path:"rustdoc::clean",desc:"",parent:'6053'},{ty:"structfield",name:"name",path:"rustdoc::clean",desc:"",parent:'6053'},{ty:"structfield",name:"id",path:"rustdoc::clean",desc:"",parent:'6053'},{ty:"struct",name:"Trait",path:"rustdoc::clean",desc:""},{ty:"structfield",name:"methods",path:"rustdoc::clean",desc:"",parent:'6443'},{ty:"structfield",name:"generics",path:"rustdoc::clean",desc:"",parent:'6443'},{ty:"structfield",name:"parents",path:"rustdoc::clean",desc:"",parent:'6443'},{ty:"struct",name:"StructField",path:"rustdoc::clean",desc:""},{ty:"structfield",name:"type_",path:"rustdoc::clean",desc:"",parent:'9360'},{ty:"struct",name:"Struct",path:"rustdoc::clean",desc:""},{ty:"structfield",name:"struct_type",path:"rustdoc::clean",desc:"",parent:'9560'},{ty:"structfield",name:"generics",path:"rustdoc::clean",desc:"",parent:'9560'},{ty:"structfield",name:"fields",path:"rustdoc::clean",desc:"",parent:'9560'},{ty:"structfield",name:"fields_stripped",path:"rustdoc::clean",desc:"",parent:'9560'},{ty:"struct",name:"VariantStruct",path:"rustdoc::clean",desc:"This is a more limited form of the standard Struct, different in that\nit lacks the things most items have (name, id, parameterization). Found\nonly as a variant in an enum."},{ty:"structfield",name:"struct_type",path:"rustdoc::clean",desc:"",parent:'9834'},{ty:"structfield",name:"fields",path:"rustdoc::clean",desc:"",parent:'9834'},{ty:"structfield",name:"fields_stripped",path:"rustdoc::clean",desc:"",parent:'9834'},{ty:"struct",name:"Enum",path:"rustdoc::clean",desc:""},{ty:"structfield",name:"variants",path:"rustdoc::clean",desc:"",parent:'10051'},{ty:"structfield",name:"generics",path:"rustdoc::clean",desc:"",parent:'10051'},{ty:"structfield",name:"variants_stripped",path:"rustdoc::clean",desc:"",parent:'10051'},{ty:"struct",name:"Variant",path:"rustdoc::clean",desc:""},{ty:"structfield",name:"kind",path:"rustdoc::clean",desc:"",parent:'10285'},{ty:"struct",name:"Span",path:"rustdoc::clean",desc:""},{ty:"structfield",name:"filename",path:"rustdoc::clean",desc:"",parent:'10754'},{ty:"structfield",name:"loline",path:"rustdoc::clean",desc:"",parent:'10754'},{ty:"structfield",name:"locol",path:"rustdoc::clean",desc:"",parent:'10754'},{ty:"structfield",name:"hiline",path:"rustdoc::clean",desc:"",parent:'10754'},{ty:"structfield",name:"hicol",path:"rustdoc::clean",desc:"",parent:'10754'},{ty:"struct",name:"Path",path:"rustdoc::clean",desc:""},{ty:"structfield",name:"global",path:"rustdoc::clean",desc:"",parent:'11091'},{ty:"structfield",name:"segments",path:"rustdoc::clean",desc:"",parent:'11091'},{ty:"struct",name:"PathSegment",path:"rustdoc::clean",desc:""},{ty:"structfield",name:"name",path:"rustdoc::clean",desc:"",parent:'11268'},{ty:"structfield",name:"lifetimes",path:"rustdoc::clean",desc:"",parent:'11268'},{ty:"structfield",name:"types",path:"rustdoc::clean",desc:"",parent:'11268'},{ty:"struct",name:"Typedef",path:"rustdoc::clean",desc:""},{ty:"structfield",name:"type_",path:"rustdoc::clean",desc:"",parent:'11588'},{ty:"structfield",name:"generics",path:"rustdoc::clean",desc:"",parent:'11588'},{ty:"struct",name:"BareFunctionDecl",path:"rustdoc::clean",desc:""},{ty:"structfield",name:"purity",path:"rustdoc::clean",desc:"",parent:'11782'},{ty:"structfield",name:"generics",path:"rustdoc::clean",desc:"",parent:'11782'},{ty:"structfield",name:"decl",path:"rustdoc::clean",desc:"",parent:'11782'},{ty:"structfield",name:"abi",path:"rustdoc::clean",desc:"",parent:'11782'},{ty:"struct",name:"Static",path:"rustdoc::clean",desc:""},{ty:"structfield",name:"type_",path:"rustdoc::clean",desc:"",parent:'12043'},{ty:"structfield",name:"mutability",path:"rustdoc::clean",desc:"",parent:'12043'},{ty:"structfield",name:"expr",path:"rustdoc::clean",desc:"It's useful to have the value of a static documented, but I have no\ndesire to represent expressions (that'd basically be all of the AST,\nwhich is huge!). So, have a string.",parent:'12043'},{ty:"struct",name:"Impl",path:"rustdoc::clean",desc:""},{ty:"structfield",name:"generics",path:"rustdoc::clean",desc:"",parent:'12690'},{ty:"structfield",name:"trait_",path:"rustdoc::clean",desc:"",parent:'12690'},{ty:"structfield",name:"for_",path:"rustdoc::clean",desc:"",parent:'12690'},{ty:"structfield",name:"methods",path:"rustdoc::clean",desc:"",parent:'12690'},{ty:"struct",name:"ViewItem",path:"rustdoc::clean",desc:""},{ty:"structfield",name:"inner",path:"rustdoc::clean",desc:"",parent:'12965'},{ty:"struct",name:"ImportSource",path:"rustdoc::clean",desc:""},{ty:"structfield",name:"path",path:"rustdoc::clean",desc:"",parent:'13856'},{ty:"structfield",name:"did",path:"rustdoc::clean",desc:"",parent:'13856'},{ty:"struct",name:"ViewListIdent",path:"rustdoc::clean",desc:""},{ty:"structfield",name:"name",path:"rustdoc::clean",desc:"",parent:'14068'},{ty:"structfield",name:"source",path:"rustdoc::clean",desc:"",parent:'14068'},{ty:"struct",name:"Macro",path:"rustdoc::clean",desc:""},{ty:"structfield",name:"source",path:"rustdoc::clean",desc:"",parent:'15723'},{ty:"enum",name:"ItemEnum",path:"rustdoc::clean",desc:""},{ty:"variant",name:"StructItem",path:"rustdoc::clean",desc:"",parent:'1177'},{ty:"variant",name:"EnumItem",path:"rustdoc::clean",desc:"",parent:'1177'},{ty:"variant",name:"FunctionItem",path:"rustdoc::clean",desc:"",parent:'1177'},{ty:"variant",name:"ModuleItem",path:"rustdoc::clean",desc:"",parent:'1177'},{ty:"variant",name:"TypedefItem",path:"rustdoc::clean",desc:"",parent:'1177'},{ty:"variant",name:"StaticItem",path:"rustdoc::clean",desc:"",parent:'1177'},{ty:"variant",name:"TraitItem",path:"rustdoc::clean",desc:"",parent:'1177'},{ty:"variant",name:"ImplItem",path:"rustdoc::clean",desc:"",parent:'1177'},{ty:"variant",name:"ViewItemItem",path:"rustdoc::clean",desc:"",parent:'1177'},{ty:"variant",name:"TyMethodItem",path:"rustdoc::clean",desc:"",parent:'1177'},{ty:"variant",name:"MethodItem",path:"rustdoc::clean",desc:"",parent:'1177'},{ty:"variant",name:"StructFieldItem",path:"rustdoc::clean",desc:"",parent:'1177'},{ty:"variant",name:"VariantItem",path:"rustdoc::clean",desc:"",parent:'1177'},{ty:"variant",name:"ForeignFunctionItem",path:"rustdoc::clean",desc:"",parent:'1177'},{ty:"variant",name:"ForeignStaticItem",path:"rustdoc::clean",desc:"",parent:'1177'},{ty:"variant",name:"MacroItem",path:"rustdoc::clean",desc:"",parent:'1177'},{ty:"enum",name:"Attribute",path:"rustdoc::clean",desc:""},{ty:"variant",name:"Word",path:"rustdoc::clean",desc:"",parent:'2742'},{ty:"variant",name:"List",path:"rustdoc::clean",desc:"",parent:'2742'},{ty:"variant",name:"NameValue",path:"rustdoc::clean",desc:"",parent:'2742'},{ty:"enum",name:"TyParamBound",path:"rustdoc::clean",desc:""},{ty:"variant",name:"RegionBound",path:"rustdoc::clean",desc:"",parent:'3494'},{ty:"variant",name:"TraitBound",path:"rustdoc::clean",desc:"",parent:'3494'},{ty:"enum",name:"SelfTy",path:"rustdoc::clean",desc:""},{ty:"variant",name:"SelfStatic",path:"rustdoc::clean",desc:"",parent:'4710'},{ty:"variant",name:"SelfValue",path:"rustdoc::clean",desc:"",parent:'4710'},{ty:"variant",name:"SelfBorrowed",path:"rustdoc::clean",desc:"",parent:'4710'},{ty:"variant",name:"SelfOwned",path:"rustdoc::clean",desc:"",parent:'4710'},{ty:"enum",name:"RetStyle",path:"rustdoc::clean",desc:""},{ty:"variant",name:"NoReturn",path:"rustdoc::clean",desc:"",parent:'6270'},{ty:"variant",name:"Return",path:"rustdoc::clean",desc:"",parent:'6270'},{ty:"enum",name:"TraitMethod",path:"rustdoc::clean",desc:""},{ty:"variant",name:"Required",path:"rustdoc::clean",desc:"",parent:'6702'},{ty:"variant",name:"Provided",path:"rustdoc::clean",desc:"",parent:'6702'},{ty:"enum",name:"Type",path:"rustdoc::clean",desc:"A representation of a Type suitable for hyperlinking purposes. Ideally one can get the original\ntype out of the AST/ty::ctxt given one of these, if more information is needed. Most importantly\nit does not preserve mutability or boxes."},{ty:"variant",name:"ResolvedPath",path:"rustdoc::clean",desc:"structs/enums/traits (anything that'd be an ast::TyPath)",parent:'7011'},{ty:"structfield",name:"path",path:"rustdoc::clean::Type",desc:"",parent:'7011'},{ty:"structfield",name:"typarams",path:"rustdoc::clean::Type",desc:"",parent:'7011'},{ty:"structfield",name:"id",path:"rustdoc::clean::Type",desc:"",parent:'7011'},{ty:"variant",name:"ExternalPath",path:"rustdoc::clean",desc:"Same as above, but only external variants",parent:'7011'},{ty:"structfield",name:"path",path:"rustdoc::clean::Type",desc:"",parent:'7011'},{ty:"structfield",name:"typarams",path:"rustdoc::clean::Type",desc:"",parent:'7011'},{ty:"structfield",name:"fqn",path:"rustdoc::clean::Type",desc:"",parent:'7011'},{ty:"structfield",name:"kind",path:"rustdoc::clean::Type",desc:"",parent:'7011'},{ty:"structfield",name:"krate",path:"rustdoc::clean::Type",desc:"",parent:'7011'},{ty:"variant",name:"TyParamBinder",path:"rustdoc::clean",desc:"",parent:'7011'},{ty:"variant",name:"Generic",path:"rustdoc::clean",desc:"For parameterized types, so the consumer of the JSON don't go looking\nfor types which don't exist anywhere.",parent:'7011'},{ty:"variant",name:"Self",path:"rustdoc::clean",desc:"For references to self",parent:'7011'},{ty:"variant",name:"Primitive",path:"rustdoc::clean",desc:"Primitives are just the fixed-size numeric types (plus int/uint/float), and char.",parent:'7011'},{ty:"variant",name:"Closure",path:"rustdoc::clean",desc:"",parent:'7011'},{ty:"variant",name:"BareFunction",path:"rustdoc::clean",desc:"extern \"ABI\" fn",parent:'7011'},{ty:"variant",name:"Tuple",path:"rustdoc::clean",desc:"",parent:'7011'},{ty:"variant",name:"Vector",path:"rustdoc::clean",desc:"",parent:'7011'},{ty:"variant",name:"FixedVector",path:"rustdoc::clean",desc:"",parent:'7011'},{ty:"variant",name:"String",path:"rustdoc::clean",desc:"",parent:'7011'},{ty:"variant",name:"Bool",path:"rustdoc::clean",desc:"",parent:'7011'},{ty:"variant",name:"Unit",path:"rustdoc::clean",desc:"aka TyNil",parent:'7011'},{ty:"variant",name:"Bottom",path:"rustdoc::clean",desc:"aka TyBot",parent:'7011'},{ty:"variant",name:"Unique",path:"rustdoc::clean",desc:"",parent:'7011'},{ty:"variant",name:"Managed",path:"rustdoc::clean",desc:"",parent:'7011'},{ty:"variant",name:"RawPointer",path:"rustdoc::clean",desc:"",parent:'7011'},{ty:"variant",name:"BorrowedRef",path:"rustdoc::clean",desc:"",parent:'7011'},{ty:"structfield",name:"lifetime",path:"rustdoc::clean::Type",desc:"",parent:'7011'},{ty:"structfield",name:"mutability",path:"rustdoc::clean::Type",desc:"",parent:'7011'},{ty:"structfield",name:"type_",path:"rustdoc::clean::Type",desc:"",parent:'7011'},{ty:"enum",name:"TypeKind",path:"rustdoc::clean",desc:""},{ty:"variant",name:"TypeStruct",path:"rustdoc::clean",desc:"",parent:'8707'},{ty:"variant",name:"TypeEnum",path:"rustdoc::clean",desc:"",parent:'8707'},{ty:"variant",name:"TypeTrait",path:"rustdoc::clean",desc:"",parent:'8707'},{ty:"variant",name:"TypeFunction",path:"rustdoc::clean",desc:"",parent:'8707'},{ty:"enum",name:"VariantKind",path:"rustdoc::clean",desc:""},{ty:"variant",name:"CLikeVariant",path:"rustdoc::clean",desc:"",parent:'10437'},{ty:"variant",name:"TupleVariant",path:"rustdoc::clean",desc:"",parent:'10437'},{ty:"variant",name:"StructVariant",path:"rustdoc::clean",desc:"",parent:'10437'},{ty:"enum",name:"Mutability",path:"rustdoc::clean",desc:""},{ty:"variant",name:"Mutable",path:"rustdoc::clean",desc:"",parent:'12403'},{ty:"variant",name:"Immutable",path:"rustdoc::clean",desc:"",parent:'12403'},{ty:"enum",name:"ViewItemInner",path:"rustdoc::clean",desc:""},{ty:"variant",name:"ExternCrate",path:"rustdoc::clean",desc:"",parent:'13114'},{ty:"variant",name:"Import",path:"rustdoc::clean",desc:"",parent:'13114'},{ty:"enum",name:"ViewPath",path:"rustdoc::clean",desc:""},{ty:"variant",name:"SimpleImport",path:"rustdoc::clean",desc:"",parent:'13479'},{ty:"variant",name:"GlobImport",path:"rustdoc::clean",desc:"",parent:'13479'},{ty:"variant",name:"ImportList",path:"rustdoc::clean",desc:"",parent:'13479'},{ty:"typedef",name:"Visibility",path:"rustdoc::clean",desc:""},{ty:"trait",name:"Clean",path:"rustdoc::clean",desc:""},{ty:"tymethod",name:"clean",path:"rustdoc::clean",desc:"",parent:'41'},{ty:"trait",name:"ToSource",path:"rustdoc::clean",desc:""},{ty:"tymethod",name:"to_src",path:"rustdoc::clean",desc:"",parent:'14340'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'216'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'216'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'216'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'499'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'499'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'499'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'680'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'680'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'680'},{ty:"method",name:"doc_list",path:"rustdoc::clean",desc:"Finds the `doc` attribute as a List and returns the list of attributes\nnested inside.",parent:'680'},{ty:"method",name:"doc_value",path:"rustdoc::clean",desc:"Finds the `doc` attribute as a NameValue and returns the corresponding\nvalue found.",parent:'680'},{ty:"method",name:"is_mod",path:"rustdoc::clean",desc:"",parent:'680'},{ty:"method",name:"is_trait",path:"rustdoc::clean",desc:"",parent:'680'},{ty:"method",name:"is_struct",path:"rustdoc::clean",desc:"",parent:'680'},{ty:"method",name:"is_enum",path:"rustdoc::clean",desc:"",parent:'680'},{ty:"method",name:"is_fn",path:"rustdoc::clean",desc:"",parent:'680'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'1177'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'1177'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'1177'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'2428'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'2428'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'2428'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'2742'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'2742'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'2742'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'3275'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'3275'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'3275'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'3494'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'3494'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'3494'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'3709'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'3709'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'3709'},{ty:"method",name:"get_ref",path:"rustdoc::clean",desc:"",parent:'3709'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'3883'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'3883'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'3883'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'4065'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'4065'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'4065'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'4389'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'4389'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'4389'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'4710'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'4710'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'4710'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'5040'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'5040'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'5040'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'5273'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'5273'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'5273'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'5666'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'5666'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'5666'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'5898'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'5898'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'5898'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'6053'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'6053'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'6053'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'6270'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'6270'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'6270'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'6443'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'6443'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'6443'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'6702'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'6702'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'6702'},{ty:"method",name:"is_req",path:"rustdoc::clean",desc:"",parent:'6702'},{ty:"method",name:"is_def",path:"rustdoc::clean",desc:"",parent:'6702'},{ty:"method",name:"item",path:"rustdoc::clean",desc:"",parent:'6702'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'7011'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'7011'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'7011'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'8707'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'8707'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'8707'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'9360'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'9360'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'9360'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'9560'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'9560'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'9560'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'9834'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'9834'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'9834'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'10051'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'10051'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'10051'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'10285'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'10285'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'10285'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'10437'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'10437'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'10437'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'10754'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'10754'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'10754'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'11091'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'11091'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'11091'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'11268'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'11268'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'11268'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'11588'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'11588'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'11588'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'11782'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'11782'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'11782'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'12043'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'12043'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'12043'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'12403'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'12403'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'12403'},{ty:"method",name:"fmt",path:"rustdoc::clean",desc:"",parent:'12403'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'12690'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'12690'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'12690'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'12965'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'12965'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'12965'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'13114'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'13114'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'13114'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'13479'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'13479'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'13479'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'13856'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'13856'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'13856'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'14068'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'14068'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'14068'},{ty:"method",name:"decode",path:"rustdoc::clean",desc:"",parent:'15723'},{ty:"method",name:"encode",path:"rustdoc::clean",desc:"",parent:'15723'},{ty:"method",name:"clone",path:"rustdoc::clean",desc:"",parent:'15723'},{ty:"mod",name:"core",path:"rustdoc",desc:""},{ty:"struct",name:"DocContext",path:"rustdoc::core",desc:""},{ty:"structfield",name:"krate",path:"rustdoc::core",desc:"",parent:'15902'},{ty:"structfield",name:"maybe_typed",path:"rustdoc::core",desc:"",parent:'15902'},{ty:"struct",name:"CrateAnalysis",path:"rustdoc::core",desc:""},{ty:"structfield",name:"exported_items",path:"rustdoc::core",desc:"",parent:'15934'},{ty:"structfield",name:"public_items",path:"rustdoc::core",desc:"",parent:'15934'},{ty:"enum",name:"MaybeTyped",path:"rustdoc::core",desc:""},{ty:"variant",name:"Typed",path:"rustdoc::core",desc:"",parent:'15893'},{ty:"variant",name:"NotTyped",path:"rustdoc::core",desc:"",parent:'15893'},{ty:"fn",name:"run_core",path:"rustdoc::core",desc:""},{ty:"method",name:"sess",path:"rustdoc::core",desc:"",parent:'15902'},{ty:"mod",name:"doctree",path:"rustdoc",desc:"This module is used to store stuff from Rust's AST in a more convenient\nmanner (and with prettier names) before cleaning."},{ty:"struct",name:"Module",path:"rustdoc::doctree",desc:""},{ty:"structfield",name:"name",path:"rustdoc::doctree",desc:"",parent:'16322'},{ty:"structfield",name:"attrs",path:"rustdoc::doctree",desc:"",parent:'16322'},{ty:"structfield",name:"where",path:"rustdoc::doctree",desc:"",parent:'16322'},{ty:"structfield",name:"structs",path:"rustdoc::doctree",desc:"",parent:'16322'},{ty:"structfield",name:"enums",path:"rustdoc::doctree",desc:"",parent:'16322'},{ty:"structfield",name:"fns",path:"rustdoc::doctree",desc:"",parent:'16322'},{ty:"structfield",name:"mods",path:"rustdoc::doctree",desc:"",parent:'16322'},{ty:"structfield",name:"id",path:"rustdoc::doctree",desc:"",parent:'16322'},{ty:"structfield",name:"typedefs",path:"rustdoc::doctree",desc:"",parent:'16322'},{ty:"structfield",name:"statics",path:"rustdoc::doctree",desc:"",parent:'16322'},{ty:"structfield",name:"traits",path:"rustdoc::doctree",desc:"",parent:'16322'},{ty:"structfield",name:"vis",path:"rustdoc::doctree",desc:"",parent:'16322'},{ty:"structfield",name:"impls",path:"rustdoc::doctree",desc:"",parent:'16322'},{ty:"structfield",name:"foreigns",path:"rustdoc::doctree",desc:"",parent:'16322'},{ty:"structfield",name:"view_items",path:"rustdoc::doctree",desc:"",parent:'16322'},{ty:"structfield",name:"macros",path:"rustdoc::doctree",desc:"",parent:'16322'},{ty:"structfield",name:"is_crate",path:"rustdoc::doctree",desc:"",parent:'16322'},{ty:"struct",name:"Struct",path:"rustdoc::doctree",desc:""},{ty:"structfield",name:"vis",path:"rustdoc::doctree",desc:"",parent:'16879'},{ty:"structfield",name:"id",path:"rustdoc::doctree",desc:"",parent:'16879'},{ty:"structfield",name:"struct_type",path:"rustdoc::doctree",desc:"",parent:'16879'},{ty:"structfield",name:"name",path:"rustdoc::doctree",desc:"",parent:'16879'},{ty:"structfield",name:"generics",path:"rustdoc::doctree",desc:"",parent:'16879'},{ty:"structfield",name:"attrs",path:"rustdoc::doctree",desc:"",parent:'16879'},{ty:"structfield",name:"fields",path:"rustdoc::doctree",desc:"",parent:'16879'},{ty:"structfield",name:"where",path:"rustdoc::doctree",desc:"",parent:'16879'},{ty:"struct",name:"Enum",path:"rustdoc::doctree",desc:""},{ty:"structfield",name:"vis",path:"rustdoc::doctree",desc:"",parent:'16908'},{ty:"structfield",name:"variants",path:"rustdoc::doctree",desc:"",parent:'16908'},{ty:"structfield",name:"generics",path:"rustdoc::doctree",desc:"",parent:'16908'},{ty:"structfield",name:"attrs",path:"rustdoc::doctree",desc:"",parent:'16908'},{ty:"structfield",name:"id",path:"rustdoc::doctree",desc:"",parent:'16908'},{ty:"structfield",name:"where",path:"rustdoc::doctree",desc:"",parent:'16908'},{ty:"structfield",name:"name",path:"rustdoc::doctree",desc:"",parent:'16908'},{ty:"struct",name:"Variant",path:"rustdoc::doctree",desc:""},{ty:"structfield",name:"name",path:"rustdoc::doctree",desc:"",parent:'16934'},{ty:"structfield",name:"attrs",path:"rustdoc::doctree",desc:"",parent:'16934'},{ty:"structfield",name:"kind",path:"rustdoc::doctree",desc:"",parent:'16934'},{ty:"structfield",name:"id",path:"rustdoc::doctree",desc:"",parent:'16934'},{ty:"structfield",name:"vis",path:"rustdoc::doctree",desc:"",parent:'16934'},{ty:"structfield",name:"where",path:"rustdoc::doctree",desc:"",parent:'16934'},{ty:"struct",name:"Function",path:"rustdoc::doctree",desc:""},{ty:"structfield",name:"decl",path:"rustdoc::doctree",desc:"",parent:'16955'},{ty:"structfield",name:"attrs",path:"rustdoc::doctree",desc:"",parent:'16955'},{ty:"structfield",name:"id",path:"rustdoc::doctree",desc:"",parent:'16955'},{ty:"structfield",name:"name",path:"rustdoc::doctree",desc:"",parent:'16955'},{ty:"structfield",name:"vis",path:"rustdoc::doctree",desc:"",parent:'16955'},{ty:"structfield",name:"purity",path:"rustdoc::doctree",desc:"",parent:'16955'},{ty:"structfield",name:"where",path:"rustdoc::doctree",desc:"",parent:'16955'},{ty:"structfield",name:"generics",path:"rustdoc::doctree",desc:"",parent:'16955'},{ty:"struct",name:"Typedef",path:"rustdoc::doctree",desc:""},{ty:"structfield",name:"ty",path:"rustdoc::doctree",desc:"",parent:'16982'},{ty:"structfield",name:"gen",path:"rustdoc::doctree",desc:"",parent:'16982'},{ty:"structfield",name:"name",path:"rustdoc::doctree",desc:"",parent:'16982'},{ty:"structfield",name:"id",path:"rustdoc::doctree",desc:"",parent:'16982'},{ty:"structfield",name:"attrs",path:"rustdoc::doctree",desc:"",parent:'16982'},{ty:"structfield",name:"where",path:"rustdoc::doctree",desc:"",parent:'16982'},{ty:"structfield",name:"vis",path:"rustdoc::doctree",desc:"",parent:'16982'},{ty:"struct",name:"Static",path:"rustdoc::doctree",desc:""},{ty:"structfield",name:"type_",path:"rustdoc::doctree",desc:"",parent:'17008'},{ty:"structfield",name:"mutability",path:"rustdoc::doctree",desc:"",parent:'17008'},{ty:"structfield",name:"expr",path:"rustdoc::doctree",desc:"",parent:'17008'},{ty:"structfield",name:"name",path:"rustdoc::doctree",desc:"",parent:'17008'},{ty:"structfield",name:"attrs",path:"rustdoc::doctree",desc:"",parent:'17008'},{ty:"structfield",name:"vis",path:"rustdoc::doctree",desc:"",parent:'17008'},{ty:"structfield",name:"id",path:"rustdoc::doctree",desc:"",parent:'17008'},{ty:"structfield",name:"where",path:"rustdoc::doctree",desc:"",parent:'17008'},{ty:"struct",name:"Trait",path:"rustdoc::doctree",desc:""},{ty:"structfield",name:"name",path:"rustdoc::doctree",desc:"",parent:'17038'},{ty:"structfield",name:"methods",path:"rustdoc::doctree",desc:"",parent:'17038'},{ty:"structfield",name:"generics",path:"rustdoc::doctree",desc:"",parent:'17038'},{ty:"structfield",name:"parents",path:"rustdoc::doctree",desc:"",parent:'17038'},{ty:"structfield",name:"attrs",path:"rustdoc::doctree",desc:"",parent:'17038'},{ty:"structfield",name:"id",path:"rustdoc::doctree",desc:"",parent:'17038'},{ty:"structfield",name:"where",path:"rustdoc::doctree",desc:"",parent:'17038'},{ty:"structfield",name:"vis",path:"rustdoc::doctree",desc:"",parent:'17038'},{ty:"struct",name:"Impl",path:"rustdoc::doctree",desc:""},{ty:"structfield",name:"generics",path:"rustdoc::doctree",desc:"",parent:'17069'},{ty:"structfield",name:"trait_",path:"rustdoc::doctree",desc:"",parent:'17069'},{ty:"structfield",name:"for_",path:"rustdoc::doctree",desc:"",parent:'17069'},{ty:"structfield",name:"methods",path:"rustdoc::doctree",desc:"",parent:'17069'},{ty:"structfield",name:"attrs",path:"rustdoc::doctree",desc:"",parent:'17069'},{ty:"structfield",name:"where",path:"rustdoc::doctree",desc:"",parent:'17069'},{ty:"structfield",name:"vis",path:"rustdoc::doctree",desc:"",parent:'17069'},{ty:"structfield",name:"id",path:"rustdoc::doctree",desc:"",parent:'17069'},{ty:"struct",name:"Macro",path:"rustdoc::doctree",desc:""},{ty:"structfield",name:"name",path:"rustdoc::doctree",desc:"",parent:'17103'},{ty:"structfield",name:"id",path:"rustdoc::doctree",desc:"",parent:'17103'},{ty:"structfield",name:"attrs",path:"rustdoc::doctree",desc:"",parent:'17103'},{ty:"structfield",name:"where",path:"rustdoc::doctree",desc:"",parent:'17103'},{ty:"enum",name:"StructType",path:"rustdoc::doctree",desc:""},{ty:"variant",name:"Plain",path:"rustdoc::doctree",desc:"A normal struct",parent:'16443'},{ty:"variant",name:"Tuple",path:"rustdoc::doctree",desc:"A tuple struct",parent:'16443'},{ty:"variant",name:"Newtype",path:"rustdoc::doctree",desc:"A newtype struct (tuple struct with one element)",parent:'16443'},{ty:"variant",name:"Unit",path:"rustdoc::doctree",desc:"A unit struct",parent:'16443'},{ty:"enum",name:"TypeBound",path:"rustdoc::doctree",desc:""},{ty:"variant",name:"RegionBound",path:"rustdoc::doctree",desc:"",parent:'16873'},{ty:"variant",name:"TraitBound",path:"rustdoc::doctree",desc:"",parent:'16873'},{ty:"fn",name:"struct_type_from_def",path:"rustdoc::doctree",desc:""},{ty:"method",name:"new",path:"rustdoc::doctree",desc:"",parent:'16322'},{ty:"method",name:"decode",path:"rustdoc::doctree",desc:"",parent:'16443'},{ty:"method",name:"encode",path:"rustdoc::doctree",desc:"",parent:'16443'},{ty:"method",name:"clone",path:"rustdoc::doctree",desc:"",parent:'16443'},{ty:"method",name:"fmt",path:"rustdoc::doctree",desc:"",parent:'16443'},{ty:"mod",name:"fold",path:"rustdoc",desc:""},{ty:"trait",name:"DocFolder",path:"rustdoc::fold",desc:""},{ty:"method",name:"fold_item",path:"rustdoc::fold",desc:"",parent:'17154'},{ty:"method",name:"fold_item_recur",path:"rustdoc::fold",desc:"don't override!",parent:'17154'},{ty:"method",name:"fold_mod",path:"rustdoc::fold",desc:"",parent:'17154'},{ty:"method",name:"fold_crate",path:"rustdoc::fold",desc:"",parent:'17154'},{ty:"mod",name:"html",path:"rustdoc",desc:""},{ty:"mod",name:"highlight",path:"rustdoc::html",desc:"Basic html highlighting functionality"},{ty:"fn",name:"highlight",path:"rustdoc::html::highlight",desc:"Highlights some source code, returning the HTML output."},{ty:"mod",name:"escape",path:"rustdoc::html",desc:"HTML Escaping"},{ty:"struct",name:"Escape",path:"rustdoc::html::escape",desc:"Wrapper struct which will emit the HTML-escaped version of the contained\nstring when passed to a format string."},{ty:"method",name:"fmt",path:"rustdoc::html::escape",desc:"",parent:'18658'},{ty:"mod",name:"format",path:"rustdoc::html",desc:"HTML formatting module"},{ty:"struct",name:"VisSpace",path:"rustdoc::html::format",desc:"Helper to render an optional visibility with a space after it (if the\nvisibility is preset)"},{ty:"struct",name:"PuritySpace",path:"rustdoc::html::format",desc:"Similarly to VisSpace, this structure is used to render a purity with a\nspace after it."},{ty:"struct",name:"Method",path:"rustdoc::html::format",desc:"Wrapper struct for properly emitting a method declaration."},{ty:"method",name:"get",path:"rustdoc::html::format",desc:"",parent:'18853'},{ty:"method",name:"get",path:"rustdoc::html::format",desc:"",parent:'18860'},{ty:"method",name:"fmt",path:"rustdoc::clean",desc:"",parent:'3883'},{ty:"method",name:"fmt",path:"rustdoc::clean",desc:"",parent:'3709'},{ty:"method",name:"fmt",path:"rustdoc::clean",desc:"",parent:'3494'},{ty:"method",name:"fmt",path:"rustdoc::clean",desc:"",parent:'11091'},{ty:"method",name:"fmt",path:"rustdoc::clean",desc:"",parent:'7011'},{ty:"method",name:"fmt",path:"rustdoc::clean",desc:"",parent:'5898'},{ty:"method",name:"fmt",path:"rustdoc::clean",desc:"",parent:'5666'},{ty:"method",name:"fmt",path:"rustdoc::html::format",desc:"",parent:'18865'},{ty:"method",name:"fmt",path:"rustdoc::html::format",desc:"",parent:'18853'},{ty:"method",name:"fmt",path:"rustdoc::html::format",desc:"",parent:'18860'},{ty:"method",name:"fmt",path:"rustdoc::clean",desc:"",parent:'13479'},{ty:"method",name:"fmt",path:"rustdoc::clean",desc:"",parent:'13856'},{ty:"method",name:"fmt",path:"rustdoc::clean",desc:"",parent:'14068'},{ty:"mod",name:"layout",path:"rustdoc::html",desc:""},{ty:"struct",name:"Layout",path:"rustdoc::html::layout",desc:""},{ty:"structfield",name:"logo",path:"rustdoc::html::layout",desc:"",parent:'25375'},{ty:"structfield",name:"favicon",path:"rustdoc::html::layout",desc:"",parent:'25375'},{ty:"structfield",name:"krate",path:"rustdoc::html::layout",desc:"",parent:'25375'},{ty:"struct",name:"Page",path:"rustdoc::html::layout",desc:""},{ty:"structfield",name:"title",path:"rustdoc::html::layout",desc:"",parent:'25419'},{ty:"structfield",name:"ty",path:"rustdoc::html::layout",desc:"",parent:'25419'},{ty:"structfield",name:"root_path",path:"rustdoc::html::layout",desc:"",parent:'25419'},{ty:"fn",name:"render",path:"rustdoc::html::layout",desc:""},{ty:"method",name:"clone",path:"rustdoc::html::layout",desc:"",parent:'25375'},{ty:"mod",name:"markdown",path:"rustdoc::html",desc:"Markdown formatting for rustdoc"},{ty:"struct",name:"Markdown",path:"rustdoc::html::markdown",desc:"A unit struct which has the `fmt::Show` trait implemented. When\nformatted, this struct will emit the HTML corresponding to the rendered\nversion of the contained markdown string."},{ty:"struct",name:"MarkdownWithToc",path:"rustdoc::html::markdown",desc:"A unit struct like `Markdown`, that renders the markdown with a\ntable of contents."},{ty:"fn",name:"render",path:"rustdoc::html::markdown",desc:""},{ty:"fn",name:"find_testable_code",path:"rustdoc::html::markdown",desc:""},{ty:"fn",name:"reset_headers",path:"rustdoc::html::markdown",desc:"By default this markdown renderer generates anchors for each header in the\nrendered document. The anchor name is the contents of the header spearated\nby hyphens, and a task-local map is used to disambiguate among duplicate\nheaders (numbers are appended)."},{ty:"method",name:"fmt",path:"rustdoc::html::markdown",desc:"",parent:'25904'},{ty:"method",name:"fmt",path:"rustdoc::html::markdown",desc:"",parent:'25912'},{ty:"mod",name:"render",path:"rustdoc::html",desc:"Rustdoc's HTML Rendering module"},{ty:"struct",name:"NameDoc",path:"rustdoc::html::render",desc:"A pair of name and its optional document."},{ty:"struct",name:"Context",path:"rustdoc::html::render",desc:"Major driving force in all rustdoc rendering. This contains information\nabout where in the tree-like hierarchy rendering is occurring and controls\nhow the current page is being rendered."},{ty:"structfield",name:"current",path:"rustdoc::html::render",desc:"Current hierarchy of components leading down to what's currently being\nrendered",parent:'27925'},{ty:"structfield",name:"root_path",path:"rustdoc::html::render",desc:"String representation of how to get back to the root path of the 'doc/'\nfolder in terms of a relative URL.",parent:'27925'},{ty:"structfield",name:"dst",path:"rustdoc::html::render",desc:"The current destination folder of where HTML artifacts should be placed.\nThis changes as the context descends into the module hierarchy.",parent:'27925'},{ty:"structfield",name:"layout",path:"rustdoc::html::render",desc:"This describes the layout of each page, and is not modified after\ncreation of the context (contains info like the favicon)",parent:'27925'},{ty:"structfield",name:"sidebar",path:"rustdoc::html::render",desc:"This map is a list of what should be displayed on the sidebar of the\ncurrent page. The key is the section header (traits, modules,\nfunctions), and the value is the list of containers belonging to this\nheader. This map will change depending on the surrounding context of the\npage.",parent:'27925'},{ty:"structfield",name:"include_sources",path:"rustdoc::html::render",desc:"This flag indicates whether [src] links should be generated or not. If\nthe source files are present in the html rendering, then this will be\n`true`.",parent:'27925'},{ty:"struct",name:"Cache",path:"rustdoc::html::render",desc:"This cache is used to store information about the `clean::Crate` being\nrendered in order to provide more useful documentation. This contains\ninformation like all implementors of a trait, all traits a type implements,\ndocumentation for all known traits, etc."},{ty:"structfield",name:"typarams",path:"rustdoc::html::render",desc:"Mapping of typaram ids to the name of the type parameter. This is used\nwhen pretty-printing a type (so pretty printing doesn't have to\npainfully maintain a context like this)",parent:'28024'},{ty:"structfield",name:"impls",path:"rustdoc::html::render",desc:"Maps a type id to all known implementations for that type. This is only\nrecognized for intra-crate `ResolvedPath` types, and is used to print\nout extra documentation on the page of an enum/struct.",parent:'28024'},{ty:"structfield",name:"paths",path:"rustdoc::html::render",desc:"Maintains a mapping of local crate node ids to the fully qualified name\nand \"short type description\" of that node. This is used when generating\nURLs when a type is being linked to. External paths are not located in\nthis map because the `External` type itself has all the information\nnecessary.",parent:'28024'},{ty:"structfield",name:"traits",path:"rustdoc::html::render",desc:"This map contains information about all known traits of this crate.\nImplementations of a crate should inherit the documentation of the\nparent trait if no extra documentation is specified, and default methods\nshould show up in documentation about trait implementations.",parent:'28024'},{ty:"structfield",name:"implementors",path:"rustdoc::html::render",desc:"When rendering traits, it's often useful to be able to list all\nimplementors of the trait, and this mapping is exactly, that: a mapping\nof trait ids to the list of known implementors of the trait",parent:'28024'},{ty:"structfield",name:"extern_locations",path:"rustdoc::html::render",desc:"Cache of where external crate documentation can be found.",parent:'28024'},{ty:"enum",name:"ExternalLocation",path:"rustdoc::html::render",desc:"Indicates where an external crate can be found."},{ty:"variant",name:"Remote",path:"rustdoc::html::render",desc:"Remote URL root of the external crate",parent:'28001'},{ty:"variant",name:"Local",path:"rustdoc::html::render",desc:"This external crate can be found in the local doc/ folder",parent:'28001'},{ty:"variant",name:"Unknown",path:"rustdoc::html::render",desc:"The external crate could not be found.",parent:'28001'},{ty:"enum",name:"Implementor",path:"rustdoc::html::render",desc:"Different ways an implementor of a trait can be rendered."},{ty:"variant",name:"PathType",path:"rustdoc::html::render",desc:"Paths are displayed specially by omitting the `impl XX for` cruft",parent:'28009'},{ty:"variant",name:"OtherType",path:"rustdoc::html::render",desc:"This is the generic representation of a trait implementor, used for\nprimitive types and otherwise non-path types.",parent:'28009'},{ty:"fn",name:"run",path:"rustdoc::html::render",desc:"Generates the documentation for `crate` into the directory `dst`"},{ty:"static",name:"cache_key",path:"rustdoc::html::render",desc:""},{ty:"static",name:"current_location_key",path:"rustdoc::html::render",desc:""},{ty:"method",name:"equals",path:"rustdoc::html::render",desc:"",parent:'27679'},{ty:"method",name:"eq",path:"rustdoc::html::render",desc:"",parent:'27679'},{ty:"method",name:"ne",path:"rustdoc::html::render",desc:"",parent:'27679'},{ty:"method",name:"clone",path:"rustdoc::html::render",desc:"",parent:'27679'},{ty:"method",name:"lt",path:"rustdoc::html::render",desc:"",parent:'27679'},{ty:"method",name:"cmp",path:"rustdoc::html::render",desc:"",parent:'27679'},{ty:"method",name:"clone",path:"rustdoc::html::render",desc:"",parent:'27925'},{ty:"method",name:"fold_item",path:"rustdoc::html::render",desc:"",parent:'28024'},{ty:"mod",name:"toc",path:"rustdoc::html",desc:"Table-of-contents creation."},{ty:"struct",name:"Toc",path:"rustdoc::html::toc",desc:"A (recursive) table of contents"},{ty:"struct",name:"TocEntry",path:"rustdoc::html::toc",desc:""},{ty:"struct",name:"TocBuilder",path:"rustdoc::html::toc",desc:"Progressive construction of a table of contents."},{ty:"method",name:"eq",path:"rustdoc::html::toc",desc:"",parent:'45613'},{ty:"method",name:"ne",path:"rustdoc::html::toc",desc:"",parent:'45613'},{ty:"method",name:"eq",path:"rustdoc::html::toc",desc:"",parent:'45715'},{ty:"method",name:"ne",path:"rustdoc::html::toc",desc:"",parent:'45715'},{ty:"method",name:"eq",path:"rustdoc::html::toc",desc:"",parent:'45890'},{ty:"method",name:"ne",path:"rustdoc::html::toc",desc:"",parent:'45890'},{ty:"method",name:"new",path:"rustdoc::html::toc",desc:"",parent:'45890'},{ty:"method",name:"into_toc",path:"rustdoc::html::toc",desc:"Convert into a true `Toc` struct.",parent:'45890'},{ty:"method",name:"push",path:"rustdoc::html::toc",desc:"Push a level `level` heading into the appropriate place in the\nheirarchy, returning a string containing the section number in\n`<num>.<num>.<num>` format.",parent:'45890'},{ty:"method",name:"fmt",path:"rustdoc::html::toc",desc:"",parent:'45613'},{ty:"mod",name:"markdown",path:"rustdoc",desc:""},{ty:"fn",name:"render",path:"rustdoc::markdown",desc:"Render `input` (e.g. \"foo.md\") into an HTML file in `output`\n(e.g. output = \"bar\" => \"bar/foo.html\")."},{ty:"fn",name:"test",path:"rustdoc::markdown",desc:"Run any tests/code examples in the markdown file `input`."},{ty:"mod",name:"passes",path:"rustdoc",desc:""},{ty:"fn",name:"strip_hidden",path:"rustdoc::passes",desc:"Strip items marked `#[doc(hidden)]`"},{ty:"fn",name:"strip_private",path:"rustdoc::passes",desc:"Strip private items from the point of view of a crate or externally from a\ncrate, specified by the `xcrate` flag."},{ty:"fn",name:"unindent_comments",path:"rustdoc::passes",desc:""},{ty:"fn",name:"collapse_docs",path:"rustdoc::passes",desc:""},{ty:"fn",name:"unindent",path:"rustdoc::passes",desc:""},{ty:"mod",name:"plugins",path:"rustdoc",desc:""},{ty:"struct",name:"PluginManager",path:"rustdoc::plugins",desc:"Manages loading and running of plugins"},{ty:"structfield",name:"prefix",path:"rustdoc::plugins",desc:"The directory plugins will be loaded from",parent:'49488'},{ty:"typedef",name:"PluginJson",path:"rustdoc::plugins",desc:""},{ty:"typedef",name:"PluginResult",path:"rustdoc::plugins",desc:""},{ty:"typedef",name:"PluginCallback",path:"rustdoc::plugins",desc:""},{ty:"method",name:"new",path:"rustdoc::plugins",desc:"Create a new plugin manager",parent:'49488'},{ty:"method",name:"load_plugin",path:"rustdoc::plugins",desc:"Load a plugin with the given name.",parent:'49488'},{ty:"method",name:"add_plugin",path:"rustdoc::plugins",desc:"Load a normal Rust function as a plugin.",parent:'49488'},{ty:"method",name:"run_plugins",path:"rustdoc::plugins",desc:"Run all the loaded plugins over the crate, returning their results",parent:'49488'},{ty:"mod",name:"visit_ast",path:"rustdoc",desc:"Rust AST Visitor. Extracts useful information and massages it into a form\nusable for clean"},{ty:"struct",name:"RustdocVisitor",path:"rustdoc::visit_ast",desc:""},{ty:"structfield",name:"module",path:"rustdoc::visit_ast",desc:"",parent:'49682'},{ty:"structfield",name:"attrs",path:"rustdoc::visit_ast",desc:"",parent:'49682'},{ty:"structfield",name:"cx",path:"rustdoc::visit_ast",desc:"",parent:'49682'},{ty:"structfield",name:"analysis",path:"rustdoc::visit_ast",desc:"",parent:'49682'},{ty:"method",name:"new",path:"rustdoc::visit_ast",desc:"",parent:'49682'},{ty:"method",name:"visit",path:"rustdoc::visit_ast",desc:"",parent:'49682'},{ty:"method",name:"visit_struct_def",path:"rustdoc::visit_ast",desc:"",parent:'49682'},{ty:"method",name:"visit_enum_def",path:"rustdoc::visit_ast",desc:"",parent:'49682'},{ty:"method",name:"visit_fn",path:"rustdoc::visit_ast",desc:"",parent:'49682'},{ty:"method",name:"visit_mod_contents",path:"rustdoc::visit_ast",desc:"",parent:'49682'},{ty:"method",name:"visit_view_item",path:"rustdoc::visit_ast",desc:"",parent:'49682'},{ty:"method",name:"visit_item",path:"rustdoc::visit_ast",desc:"",parent:'49682'},{ty:"mod",name:"test",path:"rustdoc",desc:""},{ty:"struct",name:"Collector",path:"rustdoc::test",desc:""},{ty:"structfield",name:"tests",path:"rustdoc::test",desc:"",parent:'52170'},{ty:"fn",name:"run",path:"rustdoc::test",desc:""},{ty:"method",name:"new",path:"rustdoc::test",desc:"",parent:'52170'},{ty:"method",name:"add_test",path:"rustdoc::test",desc:"",parent:'52170'},{ty:"method",name:"register_header",path:"rustdoc::test",desc:"",parent:'52170'},{ty:"method",name:"fold_item",path:"rustdoc::test",desc:"",parent:'52170'},{ty:"static",name:"SCHEMA_VERSION",path:"rustdoc",desc:""},{ty:"static",name:"ctxtkey",path:"rustdoc",desc:""},{ty:"static",name:"analysiskey",path:"rustdoc",desc:""},{ty:"method",name:"clean",path:"rustdoc::visit_ast",desc:"",parent:'49682'},{ty:"method",name:"clean",path:"rustdoc::doctree",desc:"",parent:'16322'},{ty:"method",name:"clean",path:"rustdoc::doctree",desc:"",parent:'16955'},{ty:"method",name:"clean",path:"rustdoc::doctree",desc:"",parent:'17038'},{ty:"method",name:"clean",path:"rustdoc::doctree",desc:"",parent:'16879'},{ty:"method",name:"clean",path:"rustdoc::doctree",desc:"",parent:'16908'},{ty:"method",name:"clean",path:"rustdoc::doctree",desc:"",parent:'16934'},{ty:"method",name:"clean",path:"rustdoc::doctree",desc:"",parent:'16982'},{ty:"method",name:"clean",path:"rustdoc::doctree",desc:"",parent:'17008'},{ty:"method",name:"clean",path:"rustdoc::doctree",desc:"",parent:'17069'},{ty:"method",name:"clean",path:"rustdoc::doctree",desc:"",parent:'17103'}];allPaths['rustdoc'] = {'16879':{type:'struct',name:'Struct'},'8709':{type:'enum',name:'TypeKind'},'13134':{type:'enum',name:'ViewItemInner'},'16446':{type:'enum',name:'StructType'},'1205':{type:'enum',name:'ItemEnum'},'15901':{type:'enum',name:'MaybeTyped'},'2428':{type:'struct',name:'Module'},'4712':{type:'enum',name:'SelfTy'},'17008':{type:'struct',name:'Static'},'7064':{type:'enum',name:'Type'},'7074':{type:'enum',name:'Type'},'2757':{type:'enum',name:'Attribute'},'1237':{type:'enum',name:'ItemEnum'},'49672':{type:'mod',name:'visit_ast'},'10285':{type:'struct',name:'Variant'},'7080':{type:'enum',name:'Type'},'9834':{type:'struct',name:'VariantStruct'},'7069':{type:'enum',name:'Type'},'1185':{type:'enum',name:'ItemEnum'},'53202':{type:'fn',name:'main'},'45715':{type:'struct',name:'TocEntry'},'47089':{type:'fn',name:'render'},'13856':{type:'struct',name:'ImportSource'},'27562':{type:'fn',name:'reset_headers'},'16873':{type:'enum',name:'TypeBound'},'3499':{type:'enum',name:'TyParamBound'},'25891':{type:'mod',name:'markdown'},'25371':{type:'mod',name:'layout'},'27679':{type:'struct',name:'NameDoc'},'8707':{type:'enum',name:'TypeKind'},'28023':{type:'enum',name:'Implementor'},'16874':{type:'enum',name:'TypeBound'},'22':{type:'mod',name:'clean'},'10444':{type:'enum',name:'VariantKind'},'2742':{type:'enum',name:'Attribute'},'17147':{type:'mod',name:'fold'},'1197':{type:'enum',name:'ItemEnum'},'4065':{type:'struct',name:'Method'},'7097':{type:'enum',name:'Type'},'12043':{type:'struct',name:'Static'},'4721':{type:'enum',name:'SelfTy'},'12690':{type:'struct',name:'Impl'},'1177':{type:'enum',name:'ItemEnum'},'17103':{type:'struct',name:'Macro'},'16322':{type:'struct',name:'Module'},'5898':{type:'struct',name:'Arguments'},'12403':{type:'enum',name:'Mutability'},'17069':{type:'struct',name:'Impl'},'27925':{type:'struct',name:'Context'},'1209':{type:'enum',name:'ItemEnum'},'45890':{type:'struct',name:'TocBuilder'},'28001':{type:'enum',name:'ExternalLocation'},'45613':{type:'struct',name:'Toc'},'17118':{type:'fn',name:'struct_type_from_def'},'7103':{type:'enum',name:'Type'},'15875':{type:'mod',name:'core'},'41':{type:'trait',name:'Clean'},'0':{type:'mod',name:'rustdoc'},'2747':{type:'enum',name:'Attribute'},'1233':{type:'enum',name:'ItemEnum'},'13487':{type:'enum',name:'ViewPath'},'52778':{type:'mod',name:'flock'},'16314':{type:'mod',name:'doctree'},'11782':{type:'struct',name:'BareFunctionDecl'},'9560':{type:'struct',name:'Struct'},'7052':{type:'enum',name:'Type'},'26275':{type:'fn',name:'render'},'6706':{type:'enum',name:'TraitMethod'},'6702':{type:'enum',name:'TraitMethod'},'49474':{type:'typedef',name:'PluginResult'},'46683':{type:'mod',name:'markdown'},'48017':{type:'fn',name:'test'},'13491':{type:'enum',name:'ViewPath'},'5040':{type:'struct',name:'Function'},'49682':{type:'struct',name:'RustdocVisitor'},'51333':{type:'mod',name:'test'},'7129':{type:'enum',name:'Type'},'3494':{type:'enum',name:'TyParamBound'},'6270':{type:'enum',name:'RetStyle'},'1193':{type:'enum',name:'ItemEnum'},'11268':{type:'struct',name:'PathSegment'},'8708':{type:'enum',name:'TypeKind'},'11091':{type:'struct',name:'Path'},'18853':{type:'struct',name:'VisSpace'},'6053':{type:'struct',name:'Argument'},'16955':{type:'struct',name:'Function'},'28009':{type:'enum',name:'Implementor'},'53212':{type:'fn',name:'opts'},'25912':{type:'struct',name:'MarkdownWithToc'},'10438':{type:'enum',name:'VariantKind'},'7098':{type:'enum',name:'Type'},'17038':{type:'struct',name:'Trait'},'7011':{type:'enum',name:'Type'},'4722':{type:'enum',name:'SelfTy'},'1201':{type:'enum',name:'ItemEnum'},'6271':{type:'enum',name:'RetStyle'},'25419':{type:'struct',name:'Page'},'27210':{type:'fn',name:'find_testable_code'},'49488':{type:'struct',name:'PluginManager'},'15723':{type:'struct',name:'Macro'},'1213':{type:'enum',name:'ItemEnum'},'12965':{type:'struct',name:'ViewItem'},'25904':{type:'struct',name:'Markdown'},'14068':{type:'struct',name:'ViewListIdent'},'18865':{type:'struct',name:'Method'},'45609':{type:'mod',name:'toc'},'17608':{type:'mod',name:'highlight'},'25375':{type:'struct',name:'Layout'},'16239':{type:'fn',name:'run_core'},'18658':{type:'struct',name:'Escape'},'28007':{type:'enum',name:'ExternalLocation'},'27645':{type:'mod',name:'render'},'53436':{type:'fn',name:'main_args'},'48939':{type:'fn',name:'unindent_comments'},'15893':{type:'enum',name:'MaybeTyped'},'1221':{type:'enum',name:'ItemEnum'},'18841':{type:'mod',name:'format'},'2766':{type:'enum',name:'Attribute'},'17619':{type:'fn',name:'highlight'},'6443':{type:'struct',name:'Trait'},'1217':{type:'enum',name:'ItemEnum'},'48303':{type:'fn',name:'strip_hidden'},'48594':{type:'fn',name:'strip_private'},'49460':{type:'mod',name:'plugins'},'1225':{type:'enum',name:'ItemEnum'},'7096':{type:'enum',name:'Type'},'28008':{type:'enum',name:'ExternalLocation'},'16447':{type:'enum',name:'StructType'},'48290':{type:'mod',name:'passes'},'14340':{type:'trait',name:'ToSource'},'6710':{type:'enum',name:'TraitMethod'},'16934':{type:'struct',name:'Variant'},'3709':{type:'struct',name:'Lifetime'},'12404':{type:'enum',name:'Mutability'},'16982':{type:'struct',name:'Typedef'},'7048':{type:'enum',name:'Type'},'16444':{type:'enum',name:'StructType'},'18860':{type:'struct',name:'PuritySpace'},'13114':{type:'enum',name:'ViewItemInner'},'499':{type:'struct',name:'ExternalCrate'},'680':{type:'struct',name:'Item'},'8710':{type:'enum',name:'TypeKind'},'28206':{type:'fn',name:'run'},'10051':{type:'struct',name:'Enum'},'16908':{type:'struct',name:'Enum'},'12405':{type:'enum',name:'Mutability'},'13479':{type:'enum',name:'ViewPath'},'49207':{type:'fn',name:'unindent'},'49480':{type:'typedef',name:'PluginCallback'},'9536':{type:'typedef',name:'Visibility'},'16445':{type:'enum',name:'StructType'},'13500':{type:'enum',name:'ViewPath'},'49048':{type:'fn',name:'collapse_docs'},'7095':{type:'enum',name:'Type'},'10754':{type:'struct',name:'Span'},'1241':{type:'enum',name:'ItemEnum'},'4710':{type:'enum',name:'SelfTy'},'9360':{type:'struct',name:'StructField'},'28013':{type:'enum',name:'Implementor'},'15902':{type:'struct',name:'DocContext'},'5273':{type:'struct',name:'ClosureDecl'},'10437':{type:'enum',name:'VariantKind'},'49465':{type:'typedef',name:'PluginJson'},'25436':{type:'fn',name:'render'},'6272':{type:'enum',name:'RetStyle'},'4711':{type:'enum',name:'SelfTy'},'216':{type:'struct',name:'Crate'},'17154':{type:'trait',name:'DocFolder'},'5666':{type:'struct',name:'FnDecl'},'7060':{type:'enum',name:'Type'},'8711':{type:'enum',name:'TypeKind'},'13128':{type:'enum',name:'ViewItemInner'},'3495':{type:'enum',name:'TyParamBound'},'15934':{type:'struct',name:'CrateAnalysis'},'1181':{type:'enum',name:'ItemEnum'},'7108':{type:'enum',name:'Type'},'1189':{type:'enum',name:'ItemEnum'},'10448':{type:'enum',name:'VariantKind'},'28006':{type:'enum',name:'ExternalLocation'},'3275':{type:'struct',name:'TyParam'},'3883':{type:'struct',name:'Generics'},'7085':{type:'enum',name:'Type'},'15897':{type:'enum',name:'MaybeTyped'},'7094':{type:'enum',name:'Type'},'7056':{type:'enum',name:'Type'},'18655':{type:'mod',name:'escape'},'52170':{type:'struct',name:'Collector'},'53319':{type:'fn',name:'usage'},'16878':{type:'enum',name:'TypeBound'},'11588':{type:'struct',name:'Typedef'},'17606':{type:'mod',name:'html'},'28024':{type:'struct',name:'Cache'},'1229':{type:'enum',name:'ItemEnum'},'7025':{type:'enum',name:'Type'},'16443':{type:'enum',name:'StructType'},'51359':{type:'fn',name:'run'},'7116':{type:'enum',name:'Type'},'4389':{type:'struct',name:'TyMethod'}};

searchIndex['log'] = [{ty:"mod",name:"",path:"log",desc:"Utilities for program-wide and customizable logging"},{ty:"fn",name:"log",path:"log",desc:"This function is called directly by the compiler when using the logging\nmacros. This function does not take into account whether the log level\nspecified is active or not, it will always log something if this method is\ncalled."},{ty:"fn",name:"set_logger",path:"log",desc:"Replaces the task-local logger with the specified logger, returning the old\nlogger."},{ty:"mod",name:"macros",path:"log",desc:"Logging macros"},{ty:"macro",name:"log",path:"log::macros",desc:"The standard logging macro"},{ty:"macro",name:"error",path:"log::macros",desc:"A convenience macro for logging at the error log level."},{ty:"macro",name:"warn",path:"log::macros",desc:"A convenience macro for logging at the warning log level."},{ty:"macro",name:"info",path:"log::macros",desc:"A convenience macro for logging at the info log level."},{ty:"macro",name:"debug",path:"log::macros",desc:"A convenience macro for logging at the debug log level. This macro can also\nbe omitted at compile time by passing `--cfg ndebug` to the compiler. If\nthis option is not passed, then debug statements will be compiled."},{ty:"macro",name:"log_enabled",path:"log::macros",desc:"A macro to test whether a log level is enabled for the current module."},{ty:"static",name:"MAX_LOG_LEVEL",path:"log",desc:"Maximum logging level of a module that can be specified. Common logging\nlevels are found in the DEBUG/INFO/WARN/ERROR constants."},{ty:"static",name:"DEBUG",path:"log",desc:"Debug log level"},{ty:"static",name:"INFO",path:"log",desc:"Info log level"},{ty:"static",name:"WARN",path:"log",desc:"Warn log level"},{ty:"static",name:"ERROR",path:"log",desc:"Error log level"},{ty:"trait",name:"Logger",path:"log",desc:"A trait used to represent an interface to a task-local logger. Each task\ncan have its own custom logger which can respond to logging messages\nhowever it likes."},{ty:"tymethod",name:"log",path:"log",desc:"Logs a single message described by the `args` structure. The level is\nprovided in case you want to do things like color the message, etc.",parent:'556'}];allPaths['log'] = {'771':{type:'fn',name:'log'},'0':{type:'mod',name:'log'},'16':{type:'mod',name:'macros'},'556':{type:'trait',name:'Logger'},'821':{type:'fn',name:'set_logger'}};

searchIndex['url'] = [{ty:"mod",name:"",path:"url",desc:"Types/fns concerning URLs (see RFC 3986)"},{ty:"struct",name:"Url",path:"url",desc:"A Uniform Resource Locator (URL).  A URL is a form of URI (Uniform Resource\nIdentifier) that includes network location information, such as hostname or\nport number."},{ty:"structfield",name:"scheme",path:"url",desc:"The scheme part of a URL, such as `https` in the above example.",parent:'12'},{ty:"structfield",name:"user",path:"url",desc:"A URL subcomponent for user authentication.  `username` in the above example.",parent:'12'},{ty:"structfield",name:"host",path:"url",desc:"A domain name or IP address.  For example, `example.com`.",parent:'12'},{ty:"structfield",name:"port",path:"url",desc:"A TCP port number, for example `8080`.",parent:'12'},{ty:"structfield",name:"path",path:"url",desc:"The path component of a URL, for example `/foo/bar`.",parent:'12'},{ty:"structfield",name:"query",path:"url",desc:"The query component of a URL.  `vec!((~\"baz\", ~\"qux\"))` represents the\nfragment `baz=qux` in the above example.",parent:'12'},{ty:"structfield",name:"fragment",path:"url",desc:"The fragment component, such as `quz`.  Doesn't include the leading `#` character.",parent:'12'},{ty:"struct",name:"Path",path:"url",desc:""},{ty:"structfield",name:"path",path:"url",desc:"The path component of a URL, for example `/foo/bar`.",parent:'296'},{ty:"structfield",name:"query",path:"url",desc:"The query component of a URL.  `vec!((~\"baz\", ~\"qux\"))` represents the\nfragment `baz=qux` in the above example.",parent:'296'},{ty:"structfield",name:"fragment",path:"url",desc:"The fragment component, such as `quz`.  Doesn't include the leading `#` character.",parent:'296'},{ty:"struct",name:"UserInfo",path:"url",desc:"An optional subcomponent of a URI authority component."},{ty:"structfield",name:"user",path:"url",desc:"The user name.",parent:'453'},{ty:"structfield",name:"pass",path:"url",desc:"Password or other scheme-specific authentication information.",parent:'453'},{ty:"fn",name:"encode",path:"url",desc:"Encodes a URI by replacing reserved characters with percent-encoded\ncharacter sequences."},{ty:"fn",name:"encode_component",path:"url",desc:"Encodes a URI component by replacing reserved characters with percent\nencoded character sequences."},{ty:"fn",name:"decode",path:"url",desc:"Decodes a percent-encoded string representing a URI."},{ty:"fn",name:"decode_component",path:"url",desc:"Decode a string encoded with percent encoding."},{ty:"fn",name:"encode_form_urlencoded",path:"url",desc:"Encode a hashmap to the 'application/x-www-form-urlencoded' media type."},{ty:"fn",name:"decode_form_urlencoded",path:"url",desc:"Decode a string encoded with the 'application/x-www-form-urlencoded' media\ntype into a hashmap."},{ty:"fn",name:"query_to_str",path:"url",desc:"Converts an instance of a URI `Query` type to a string."},{ty:"fn",name:"get_scheme",path:"url",desc:"Returns a tuple of the URI scheme and the rest of the URI, or a parsing error."},{ty:"fn",name:"from_str",path:"url",desc:"Parses a URL, converting it from a string to `Url` representation."},{ty:"fn",name:"path_from_str",path:"url",desc:""},{ty:"typedef",name:"Query",path:"url",desc:"Represents the query component of a URI."},{ty:"method",name:"eq",path:"url",desc:"",parent:'12'},{ty:"method",name:"ne",path:"url",desc:"",parent:'12'},{ty:"method",name:"clone",path:"url",desc:"",parent:'12'},{ty:"method",name:"eq",path:"url",desc:"",parent:'296'},{ty:"method",name:"ne",path:"url",desc:"",parent:'296'},{ty:"method",name:"clone",path:"url",desc:"",parent:'296'},{ty:"method",name:"eq",path:"url",desc:"",parent:'453'},{ty:"method",name:"ne",path:"url",desc:"",parent:'453'},{ty:"method",name:"clone",path:"url",desc:"",parent:'453'},{ty:"method",name:"new",path:"url",desc:"",parent:'12'},{ty:"method",name:"new",path:"url",desc:"",parent:'296'},{ty:"method",name:"new",path:"url",desc:"",parent:'453'},{ty:"method",name:"fmt",path:"url",desc:"",parent:'453'},{ty:"method",name:"from_str",path:"url",desc:"",parent:'12'},{ty:"method",name:"from_str",path:"url",desc:"",parent:'296'},{ty:"method",name:"fmt",path:"url",desc:"Converts a URL from `Url` to string representation.",parent:'12'},{ty:"method",name:"fmt",path:"url",desc:"",parent:'296'},{ty:"method",name:"hash",path:"url",desc:"",parent:'12'},{ty:"method",name:"hash",path:"url",desc:"",parent:'296'}];allPaths['url'] = {'0':{type:'mod',name:'url'},'3530':{type:'fn',name:'path_from_str'},'453':{type:'struct',name:'UserInfo'},'3412':{type:'fn',name:'from_str'},'1151':{type:'fn',name:'decode'},'580':{type:'typedef',name:'Query'},'959':{type:'fn',name:'encode_component'},'2130':{type:'fn',name:'query_to_str'},'1318':{type:'fn',name:'encode_form_urlencoded'},'12':{type:'struct',name:'Url'},'2340':{type:'fn',name:'get_scheme'},'1165':{type:'fn',name:'decode_component'},'296':{type:'struct',name:'Path'},'1487':{type:'fn',name:'decode_form_urlencoded'},'945':{type:'fn',name:'encode'}};

searchIndex['workcache'] = [{ty:"mod",name:"",path:"workcache",desc:""},{ty:"struct",name:"Database",path:"workcache",desc:""},{ty:"structfield",name:"db_dirty",path:"workcache",desc:"",parent:'1115'},{ty:"struct",name:"Context",path:"workcache",desc:""},{ty:"structfield",name:"db",path:"workcache",desc:"",parent:'1719'},{ty:"struct",name:"Prep",path:"workcache",desc:""},{ty:"struct",name:"Exec",path:"workcache",desc:""},{ty:"typedef",name:"FreshnessMap",path:"workcache",desc:""},{ty:"method",name:"new",path:"workcache",desc:"",parent:'1115'},{ty:"method",name:"prepare",path:"workcache",desc:"",parent:'1115'},{ty:"method",name:"cache",path:"workcache",desc:"",parent:'1115'},{ty:"method",name:"drop",path:"workcache",desc:"",parent:'1115'},{ty:"method",name:"clone",path:"workcache",desc:"",parent:'1719'},{ty:"method",name:"new",path:"workcache",desc:"",parent:'1719'},{ty:"method",name:"new_with_freshness",path:"workcache",desc:"",parent:'1719'},{ty:"method",name:"prep",path:"workcache",desc:"",parent:'1719'},{ty:"method",name:"with_prep",path:"workcache",desc:"",parent:'1719'},{ty:"method",name:"discover_input",path:"workcache",desc:"",parent:'1781'},{ty:"method",name:"discover_output",path:"workcache",desc:"",parent:'1781'},{ty:"method",name:"lookup_discovered_inputs",path:"workcache",desc:"",parent:'1781'},{ty:"method",name:"lookup_declared_inputs",path:"workcache",desc:"",parent:'1766'},{ty:"method",name:"declare_input",path:"workcache",desc:"",parent:'1766'},{ty:"method",name:"exec",path:"workcache",desc:"",parent:'1766'}];allPaths['workcache'] = {'0':{type:'mod',name:'workcache'},'1766':{type:'struct',name:'Prep'},'1115':{type:'struct',name:'Database'},'1781':{type:'struct',name:'Exec'},'1700':{type:'typedef',name:'FreshnessMap'},'1719':{type:'struct',name:'Context'}};

searchIndex['rand'] = [{ty:"mod",name:"",path:"rand",desc:"Utilities for random number generation"},{ty:"struct",name:"StdRng",path:"rand",desc:"The standard RNG. This is designed to be efficient on the current\nplatform."},{ty:"struct",name:"XorShiftRng",path:"rand",desc:"An Xorshift[1] random number\ngenerator."},{ty:"struct",name:"TaskRng",path:"rand",desc:"The task-local RNG."},{ty:"struct",name:"Open01",path:"rand",desc:"A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint)."},{ty:"struct",name:"Closed01",path:"rand",desc:"A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints)."},{ty:"fn",name:"rng",path:"rand",desc:"Create a random number generator with a default algorithm and seed."},{ty:"fn",name:"weak_rng",path:"rand",desc:"Create a weak random number generator with a default algorithm and seed."},{ty:"fn",name:"task_rng",path:"rand",desc:"Retrieve the lazily-initialized task-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `task_rng().gen::<int>()`."},{ty:"fn",name:"random",path:"rand",desc:"Generate a random value using the task-local random number\ngenerator."},{ty:"mod",name:"distributions",path:"rand",desc:"Sampling from random distributions."},{ty:"struct",name:"RandSample",path:"rand::distributions",desc:"A wrapper for generating types that implement `Rand` via the\n`Sample` & `IndependentSample` traits."},{ty:"struct",name:"Weighted",path:"rand::distributions",desc:"A value with a particular weight for use with `WeightedChoice`."},{ty:"structfield",name:"weight",path:"rand::distributions",desc:"The numerical weight of this item",parent:'2711'},{ty:"structfield",name:"item",path:"rand::distributions",desc:"The actual item which is being weighted",parent:'2711'},{ty:"struct",name:"WeightedChoice",path:"rand::distributions",desc:"A distribution that selects from a finite collection of weighted items."},{ty:"mod",name:"range",path:"rand::distributions",desc:"Generating numbers between two others."},{ty:"struct",name:"Range",path:"rand::distributions::range",desc:"Sample values uniformly between two bounds."},{ty:"trait",name:"SampleRange",path:"rand::distributions::range",desc:"The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`."},{ty:"tymethod",name:"construct_range",path:"rand::distributions::range",desc:"Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low < high`, so this\nfunction doesn't have to repeat the check.",parent:'144'},{ty:"tymethod",name:"sample_range",path:"rand::distributions::range",desc:"Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",parent:'144'},{ty:"method",name:"new",path:"rand::distributions::range",desc:"Create a new `Range` instance that samples uniformly from\n`[low, high)`. Fails if `low >= high`.",parent:'40'},{ty:"method",name:"sample",path:"rand::distributions::range",desc:"",parent:'40'},{ty:"method",name:"ind_sample",path:"rand::distributions::range",desc:"",parent:'40'},{ty:"mod",name:"gamma",path:"rand::distributions",desc:"The Gamma and derived distributions."},{ty:"struct",name:"FisherF",path:"rand::distributions::gamma",desc:"The Fisher F distribution `F(m, n)`."},{ty:"struct",name:"StudentT",path:"rand::distributions::gamma",desc:"The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom."},{ty:"enum",name:"Gamma",path:"rand::distributions::gamma",desc:"The Gamma distribution `Gamma(shape, scale)` distribution."},{ty:"enum",name:"ChiSquared",path:"rand::distributions::gamma",desc:"The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom."},{ty:"method",name:"new",path:"rand::distributions::gamma",desc:"Construct an object representing the `Gamma(shape, scale)`\ndistribution.",parent:'1387'},{ty:"method",name:"sample",path:"rand::distributions::gamma",desc:"",parent:'1387'},{ty:"method",name:"ind_sample",path:"rand::distributions::gamma",desc:"",parent:'1387'},{ty:"method",name:"new",path:"rand::distributions::gamma",desc:"Create a new chi-squared distribution with degrees-of-freedom\n`k`. Fails if `k < 0`.",parent:'1808'},{ty:"method",name:"sample",path:"rand::distributions::gamma",desc:"",parent:'1808'},{ty:"method",name:"ind_sample",path:"rand::distributions::gamma",desc:"",parent:'1808'},{ty:"method",name:"new",path:"rand::distributions::gamma",desc:"Create a new `FisherF` distribution, with the given\nparameter. Fails if either `m` or `n` are not positive.",parent:'1919'},{ty:"method",name:"sample",path:"rand::distributions::gamma",desc:"",parent:'1919'},{ty:"method",name:"ind_sample",path:"rand::distributions::gamma",desc:"",parent:'1919'},{ty:"method",name:"new",path:"rand::distributions::gamma",desc:"Create a new Student t distribution with `n` degrees of\nfreedom. Fails if `n <= 0`.",parent:'2033'},{ty:"method",name:"sample",path:"rand::distributions::gamma",desc:"",parent:'2033'},{ty:"method",name:"ind_sample",path:"rand::distributions::gamma",desc:"",parent:'2033'},{ty:"mod",name:"normal",path:"rand::distributions",desc:"The normal and derived distributions."},{ty:"struct",name:"StandardNormal",path:"rand::distributions::normal",desc:"A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian)."},{ty:"struct",name:"Normal",path:"rand::distributions::normal",desc:"The normal distribution `N(mean, std_dev**2)`."},{ty:"struct",name:"LogNormal",path:"rand::distributions::normal",desc:"The log-normal distribution `ln N(mean, std_dev**2)`."},{ty:"method",name:"rand",path:"rand::distributions::normal",desc:"",parent:'2143'},{ty:"method",name:"new",path:"rand::distributions::normal",desc:"Construct a new `Normal` distribution with the given mean and\nstandard deviation. Fails if `std_dev < 0`.",parent:'2276'},{ty:"method",name:"sample",path:"rand::distributions::normal",desc:"",parent:'2276'},{ty:"method",name:"ind_sample",path:"rand::distributions::normal",desc:"",parent:'2276'},{ty:"method",name:"new",path:"rand::distributions::normal",desc:"Construct a new `LogNormal` distribution with the given mean\nand standard deviation. Fails if `std_dev < 0`.",parent:'2372'},{ty:"method",name:"sample",path:"rand::distributions::normal",desc:"",parent:'2372'},{ty:"method",name:"ind_sample",path:"rand::distributions::normal",desc:"",parent:'2372'},{ty:"mod",name:"exponential",path:"rand::distributions",desc:"The exponential distribution."},{ty:"struct",name:"Exp1",path:"rand::distributions::exponential",desc:"A wrapper around an `f64` to generate Exp(1) random numbers."},{ty:"struct",name:"Exp",path:"rand::distributions::exponential",desc:"The exponential distribution `Exp(lambda)`."},{ty:"method",name:"rand",path:"rand::distributions::exponential",desc:"",parent:'2467'},{ty:"method",name:"new",path:"rand::distributions::exponential",desc:"Construct a new `Exp` with the given shape parameter\n`lambda`. Fails if `lambda <= 0`.",parent:'2535'},{ty:"method",name:"sample",path:"rand::distributions::exponential",desc:"",parent:'2535'},{ty:"method",name:"ind_sample",path:"rand::distributions::exponential",desc:"",parent:'2535'},{ty:"trait",name:"Sample",path:"rand::distributions",desc:"Types that can be used to create a random instance of `Support`."},{ty:"tymethod",name:"sample",path:"rand::distributions",desc:"Generate a random value of `Support`, using `rng` as the\nsource of randomness.",parent:'2622'},{ty:"trait",name:"IndependentSample",path:"rand::distributions",desc:"`Sample`s that do not require keeping track of state."},{ty:"tymethod",name:"ind_sample",path:"rand::distributions",desc:"Generate a random value.",parent:'2637'},{ty:"method",name:"sample",path:"rand::distributions",desc:"",parent:'2655'},{ty:"method",name:"ind_sample",path:"rand::distributions",desc:"",parent:'2655'},{ty:"method",name:"new",path:"rand::distributions",desc:"Create a new `WeightedChoice`.",parent:'2719'},{ty:"method",name:"sample",path:"rand::distributions",desc:"",parent:'2719'},{ty:"method",name:"ind_sample",path:"rand::distributions",desc:"",parent:'2719'},{ty:"mod",name:"isaac",path:"rand",desc:"The ISAAC random number generator."},{ty:"struct",name:"IsaacRng",path:"rand::isaac",desc:"A random number generator that uses the ISAAC algorithm[1]."},{ty:"struct",name:"Isaac64Rng",path:"rand::isaac",desc:"A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm."},{ty:"method",name:"new",path:"rand::isaac",desc:"Create an ISAAC random number generator with a random seed.",parent:'4231'},{ty:"method",name:"new_unseeded",path:"rand::isaac",desc:"Create an ISAAC random number generator using the default\nfixed seed.",parent:'4231'},{ty:"method",name:"next_u32",path:"rand::isaac",desc:"",parent:'4231'},{ty:"method",name:"reseed",path:"rand::isaac",desc:"",parent:'4231'},{ty:"method",name:"from_seed",path:"rand::isaac",desc:"Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",parent:'4231'},{ty:"method",name:"new",path:"rand::isaac",desc:"Create a 64-bit ISAAC random number generator with a random\nseed.",parent:'6007'},{ty:"method",name:"new_unseeded",path:"rand::isaac",desc:"Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",parent:'6007'},{ty:"method",name:"next_u32",path:"rand::isaac",desc:"",parent:'6007'},{ty:"method",name:"next_u64",path:"rand::isaac",desc:"",parent:'6007'},{ty:"method",name:"reseed",path:"rand::isaac",desc:"",parent:'6007'},{ty:"method",name:"from_seed",path:"rand::isaac",desc:"Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",parent:'6007'},{ty:"mod",name:"os",path:"rand",desc:"Interfaces to the operating system provided random number\ngenerators."},{ty:"struct",name:"OSRng",path:"rand::os",desc:"A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:"},{ty:"method",name:"new",path:"rand::os",desc:"Create a new `OSRng`.",parent:'7941'},{ty:"method",name:"next_u32",path:"rand::os",desc:"",parent:'7941'},{ty:"method",name:"next_u64",path:"rand::os",desc:"",parent:'7941'},{ty:"method",name:"fill_bytes",path:"rand::os",desc:"",parent:'7941'},{ty:"method",name:"drop",path:"rand::os",desc:"",parent:'7941'},{ty:"mod",name:"reader",path:"rand",desc:"A wrapper around any Reader to treat it as an RNG."},{ty:"struct",name:"ReaderRng",path:"rand::reader",desc:"An RNG that reads random bytes straight from a `Reader`. This will\nwork best with an infinite reader, but this is not required."},{ty:"method",name:"new",path:"rand::reader",desc:"Create a new `ReaderRng` from a `Reader`.",parent:'8094'},{ty:"method",name:"next_u32",path:"rand::reader",desc:"",parent:'8094'},{ty:"method",name:"next_u64",path:"rand::reader",desc:"",parent:'8094'},{ty:"method",name:"fill_bytes",path:"rand::reader",desc:"",parent:'8094'},{ty:"mod",name:"reseeding",path:"rand",desc:"A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes."},{ty:"struct",name:"ReseedingRng",path:"rand::reseeding",desc:"A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes."},{ty:"structfield",name:"reseeder",path:"rand::reseeding",desc:"Controls the behaviour when reseeding the RNG.",parent:'8379'},{ty:"struct",name:"ReseedWithDefault",path:"rand::reseeding",desc:"Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call."},{ty:"trait",name:"Reseeder",path:"rand::reseeding",desc:"Something that can be used to reseed an RNG via `ReseedingRng`."},{ty:"tymethod",name:"reseed",path:"rand::reseeding",desc:"Reseed the given RNG.",parent:'8608'},{ty:"method",name:"new",path:"rand::reseeding",desc:"Create a new `ReseedingRng` with the given parameters.",parent:'8379'},{ty:"method",name:"reseed_if_necessary",path:"rand::reseeding",desc:"Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",parent:'8379'},{ty:"method",name:"next_u32",path:"rand::reseeding",desc:"",parent:'8379'},{ty:"method",name:"next_u64",path:"rand::reseeding",desc:"",parent:'8379'},{ty:"method",name:"fill_bytes",path:"rand::reseeding",desc:"",parent:'8379'},{ty:"method",name:"reseed",path:"rand::reseeding",desc:"",parent:'8379'},{ty:"method",name:"from_seed",path:"rand::reseeding",desc:"Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",parent:'8379'},{ty:"method",name:"reseed",path:"rand::reseeding",desc:"",parent:'8620'},{ty:"method",name:"default",path:"rand::reseeding",desc:"",parent:'8620'},{ty:"trait",name:"Rand",path:"rand",desc:"A type that can be randomly generated using an `Rng`."},{ty:"tymethod",name:"rand",path:"rand",desc:"Generates a random instance of this type using the specified source of\nrandomness.",parent:'9950'},{ty:"trait",name:"Rng",path:"rand",desc:"A random number generator."},{ty:"tymethod",name:"next_u32",path:"rand",desc:"Return the next random u32.",parent:'9961'},{ty:"method",name:"next_u64",path:"rand",desc:"Return the next random u64.",parent:'9961'},{ty:"method",name:"fill_bytes",path:"rand",desc:"Fill `dest` with random data.",parent:'9961'},{ty:"method",name:"gen",path:"rand",desc:"Return a random value of a `Rand` type.",parent:'9961'},{ty:"method",name:"gen_vec",path:"rand",desc:"Return a random vector of the specified length.",parent:'9961'},{ty:"method",name:"gen_range",path:"rand",desc:"Generate a random value in the range [`low`, `high`). Fails if\n`low >= high`.",parent:'9961'},{ty:"method",name:"gen_weighted_bool",path:"rand",desc:"Return a bool with a 1 in n chance of true",parent:'9961'},{ty:"method",name:"gen_ascii_str",path:"rand",desc:"Return a random string of the specified length composed of\nA-Z,a-z,0-9.",parent:'9961'},{ty:"method",name:"choose",path:"rand",desc:"Choose an item randomly, failing if `values` is empty.",parent:'9961'},{ty:"method",name:"choose_option",path:"rand",desc:"Choose `Some(&item)` randomly, returning `None` if values is\nempty.",parent:'9961'},{ty:"method",name:"shuffle",path:"rand",desc:"Shuffle a vec",parent:'9961'},{ty:"method",name:"shuffle_mut",path:"rand",desc:"Shuffle a mutable vector in place.",parent:'9961'},{ty:"method",name:"sample",path:"rand",desc:"Randomly sample up to `n` elements from an iterator.",parent:'9961'},{ty:"trait",name:"SeedableRng",path:"rand",desc:"A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times."},{ty:"tymethod",name:"reseed",path:"rand",desc:"Reseed an RNG with the given seed.",parent:'10481'},{ty:"tymethod",name:"from_seed",path:"rand",desc:"Create a new RNG with the given seed.",parent:'10481'},{ty:"method",name:"new",path:"rand",desc:"Create a randomly seeded instance of `StdRng`.",parent:'10506'},{ty:"method",name:"next_u32",path:"rand",desc:"",parent:'10506'},{ty:"method",name:"next_u64",path:"rand",desc:"",parent:'10506'},{ty:"method",name:"reseed",path:"rand",desc:"",parent:'10506'},{ty:"method",name:"from_seed",path:"rand",desc:"",parent:'10506'},{ty:"method",name:"next_u32",path:"rand",desc:"",parent:'10600'},{ty:"method",name:"reseed",path:"rand",desc:"Reseed an XorShiftRng. This will fail if `seed` is entirely 0.",parent:'10600'},{ty:"method",name:"from_seed",path:"rand",desc:"Create a new XorShiftRng. This will fail if `seed` is entirely 0.",parent:'10600'},{ty:"method",name:"new",path:"rand",desc:"Create an xor shift random number generator with a random seed.",parent:'10600'},{ty:"method",name:"next_u32",path:"rand",desc:"",parent:'10897'},{ty:"method",name:"next_u64",path:"rand",desc:"",parent:'10897'},{ty:"method",name:"fill_bytes",path:"rand",desc:"",parent:'10897'}];allPaths['rand'] = {'11021':{type:'fn',name:'random'},'11036':{type:'struct',name:'Closed01'},'9001':{type:'mod',name:'f32_rand_impls'},'10481':{type:'trait',name:'SeedableRng'},'9961':{type:'trait',name:'Rng'},'10897':{type:'struct',name:'TaskRng'},'10500':{type:'fn',name:'rng'},'8091':{type:'mod',name:'reader'},'10506':{type:'struct',name:'StdRng'},'2637':{type:'trait',name:'IndependentSample'},'2535':{type:'struct',name:'Exp'},'2622':{type:'trait',name:'Sample'},'4210':{type:'mod',name:'isaac'},'6007':{type:'struct',name:'Isaac64Rng'},'144':{type:'trait',name:'SampleRange'},'9950':{type:'trait',name:'Rand'},'2456':{type:'mod',name:'exponential'},'1375':{type:'mod',name:'gamma'},'8620':{type:'struct',name:'ReseedWithDefault'},'11030':{type:'struct',name:'Open01'},'2143':{type:'struct',name:'StandardNormal'},'2372':{type:'struct',name:'LogNormal'},'16':{type:'mod',name:'distributions'},'40':{type:'struct',name:'Range'},'1919':{type:'struct',name:'FisherF'},'8891':{type:'mod',name:'f64_rand_impls'},'0':{type:'mod',name:'rand'},'2276':{type:'struct',name:'Normal'},'2467':{type:'struct',name:'Exp1'},'8367':{type:'mod',name:'reseeding'},'1387':{type:'enum',name:'Gamma'},'4231':{type:'struct',name:'IsaacRng'},'8608':{type:'trait',name:'Reseeder'},'2719':{type:'struct',name:'WeightedChoice'},'33':{type:'mod',name:'range'},'8657':{type:'mod',name:'rand_impls'},'2655':{type:'struct',name:'RandSample'},'10600':{type:'struct',name:'XorShiftRng'},'10594':{type:'fn',name:'weak_rng'},'2711':{type:'struct',name:'Weighted'},'8094':{type:'struct',name:'ReaderRng'},'7930':{type:'mod',name:'os'},'1808':{type:'enum',name:'ChiSquared'},'8379':{type:'struct',name:'ReseedingRng'},'2131':{type:'mod',name:'normal'},'10913':{type:'fn',name:'task_rng'},'7941':{type:'struct',name:'OSRng'},'2033':{type:'struct',name:'StudentT'}};

searchIndex['time'] = [{ty:"mod",name:"",path:"time",desc:""},{ty:"struct",name:"Timespec",path:"time",desc:"A record specifying a time value in seconds and nanoseconds."},{ty:"structfield",name:"sec",path:"time",desc:"",parent:'64'},{ty:"structfield",name:"nsec",path:"time",desc:"",parent:'64'},{ty:"struct",name:"Tm",path:"time",desc:"Holds a calendar date and time broken down into its components (year, month, day, and so on),\nalso called a broken-down time value."},{ty:"structfield",name:"tm_sec",path:"time",desc:"Seconds after the minute – [0, 60]",parent:'1325'},{ty:"structfield",name:"tm_min",path:"time",desc:"Minutes after the hour – [0, 59]",parent:'1325'},{ty:"structfield",name:"tm_hour",path:"time",desc:"Hours after midnight – [0, 23]",parent:'1325'},{ty:"structfield",name:"tm_mday",path:"time",desc:"Day of the month – [1, 31]",parent:'1325'},{ty:"structfield",name:"tm_mon",path:"time",desc:"Months since January – [0, 11]",parent:'1325'},{ty:"structfield",name:"tm_year",path:"time",desc:"Years since 1900",parent:'1325'},{ty:"structfield",name:"tm_wday",path:"time",desc:"Days since Sunday – [0, 6]. 0 = Sunday, 1 = Monday, …, 6 = Saturday.",parent:'1325'},{ty:"structfield",name:"tm_yday",path:"time",desc:"Days since January 1 – [0, 365]",parent:'1325'},{ty:"structfield",name:"tm_isdst",path:"time",desc:"Daylight Saving Time flag.",parent:'1325'},{ty:"structfield",name:"tm_gmtoff",path:"time",desc:"Identifies the time zone that was used to compute this broken-down time value, including any\nadjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example,\nfor U.S. Pacific Daylight Time, the value is -7*60*60 = -25200.",parent:'1325'},{ty:"structfield",name:"tm_zone",path:"time",desc:"Abbreviated name for the time zone that was used to compute this broken-down time value.\nFor example, U.S. Pacific Daylight Time is \"PDT\".",parent:'1325'},{ty:"structfield",name:"tm_nsec",path:"time",desc:"Nanoseconds after the second – [0, 10<sup>9</sup> - 1]",parent:'1325'},{ty:"fn",name:"get_time",path:"time",desc:"Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z."},{ty:"fn",name:"precise_time_ns",path:"time",desc:"Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch."},{ty:"fn",name:"precise_time_s",path:"time",desc:"Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch."},{ty:"fn",name:"tzset",path:"time",desc:""},{ty:"fn",name:"empty_tm",path:"time",desc:""},{ty:"fn",name:"at_utc",path:"time",desc:"Returns the specified time in UTC"},{ty:"fn",name:"now_utc",path:"time",desc:"Returns the current time in UTC"},{ty:"fn",name:"at",path:"time",desc:"Returns the specified time in the local timezone"},{ty:"fn",name:"now",path:"time",desc:"Returns the current time in the local timezone"},{ty:"fn",name:"strptime",path:"time",desc:"Parses the time from the string according to the format string."},{ty:"fn",name:"strftime",path:"time",desc:"Formats the time according to the format string."},{ty:"method",name:"fmt",path:"time",desc:"",parent:'64'},{ty:"method",name:"decode",path:"time",desc:"",parent:'64'},{ty:"method",name:"encode",path:"time",desc:"",parent:'64'},{ty:"method",name:"cmp",path:"time",desc:"",parent:'64'},{ty:"method",name:"lt",path:"time",desc:"",parent:'64'},{ty:"method",name:"le",path:"time",desc:"",parent:'64'},{ty:"method",name:"gt",path:"time",desc:"",parent:'64'},{ty:"method",name:"ge",path:"time",desc:"",parent:'64'},{ty:"method",name:"equals",path:"time",desc:"",parent:'64'},{ty:"method",name:"eq",path:"time",desc:"",parent:'64'},{ty:"method",name:"ne",path:"time",desc:"",parent:'64'},{ty:"method",name:"clone",path:"time",desc:"",parent:'64'},{ty:"method",name:"new",path:"time",desc:"",parent:'64'},{ty:"method",name:"fmt",path:"time",desc:"",parent:'1325'},{ty:"method",name:"decode",path:"time",desc:"",parent:'1325'},{ty:"method",name:"encode",path:"time",desc:"",parent:'1325'},{ty:"method",name:"eq",path:"time",desc:"",parent:'1325'},{ty:"method",name:"ne",path:"time",desc:"",parent:'1325'},{ty:"method",name:"clone",path:"time",desc:"",parent:'1325'},{ty:"method",name:"to_timespec",path:"time",desc:"Convert time to the seconds from January 1, 1970",parent:'1325'},{ty:"method",name:"to_local",path:"time",desc:"Convert time to the local timezone",parent:'1325'},{ty:"method",name:"to_utc",path:"time",desc:"Convert time to the UTC",parent:'1325'},{ty:"method",name:"ctime",path:"time",desc:"Return a string of the current time in the form\n\"Thu Jan  1 00:00:00 1970\".",parent:'1325'},{ty:"method",name:"strftime",path:"time",desc:"Formats the time according to the format string.",parent:'1325'},{ty:"method",name:"rfc822",path:"time",desc:"Returns a time string formatted according to RFC 822.",parent:'1325'},{ty:"method",name:"rfc822z",path:"time",desc:"Returns a time string formatted according to RFC 822 with Zulu time.",parent:'1325'},{ty:"method",name:"rfc3339",path:"time",desc:"Returns a time string formatted according to ISO 8601.",parent:'1325'}];allPaths['time'] = {'1303':{type:'fn',name:'precise_time_s'},'2593':{type:'fn',name:'at'},'5420':{type:'fn',name:'strftime'},'1325':{type:'struct',name:'Tm'},'1317':{type:'fn',name:'tzset'},'2913':{type:'fn',name:'strptime'},'2554':{type:'fn',name:'at_utc'},'64':{type:'struct',name:'Timespec'},'0':{type:'mod',name:'time'},'2530':{type:'fn',name:'empty_tm'},'2624':{type:'fn',name:'now'},'887':{type:'fn',name:'get_time'},'2585':{type:'fn',name:'now_utc'},'982':{type:'fn',name:'precise_time_ns'}};

searchIndex['test'] = [{ty:"mod",name:"",path:"test",desc:"Support code for rustc's built in unit-test and micro-benchmarking\nframework."},{ty:"struct",name:"BenchHarness",path:"test",desc:"Manager of the benchmarking runs."},{ty:"structfield",name:"bytes",path:"test",desc:"",parent:'3359'},{ty:"struct",name:"TestDesc",path:"test",desc:""},{ty:"structfield",name:"name",path:"test",desc:"",parent:'3372'},{ty:"structfield",name:"ignore",path:"test",desc:"",parent:'3372'},{ty:"structfield",name:"should_fail",path:"test",desc:"",parent:'3372'},{ty:"struct",name:"TestDescAndFn",path:"test",desc:""},{ty:"structfield",name:"desc",path:"test",desc:"",parent:'3413'},{ty:"structfield",name:"testfn",path:"test",desc:"",parent:'3413'},{ty:"struct",name:"Metric",path:"test",desc:""},{ty:"struct",name:"MetricMap",path:"test",desc:""},{ty:"struct",name:"TestOpts",path:"test",desc:""},{ty:"structfield",name:"filter",path:"test",desc:"",parent:'4637'},{ty:"structfield",name:"run_ignored",path:"test",desc:"",parent:'4637'},{ty:"structfield",name:"run_tests",path:"test",desc:"",parent:'4637'},{ty:"structfield",name:"run_benchmarks",path:"test",desc:"",parent:'4637'},{ty:"structfield",name:"ratchet_metrics",path:"test",desc:"",parent:'4637'},{ty:"structfield",name:"ratchet_noise_percent",path:"test",desc:"",parent:'4637'},{ty:"structfield",name:"save_metrics",path:"test",desc:"",parent:'4637'},{ty:"structfield",name:"test_shard",path:"test",desc:"",parent:'4637'},{ty:"structfield",name:"logfile",path:"test",desc:"",parent:'4637'},{ty:"struct",name:"BenchSamples",path:"test",desc:""},{ty:"enum",name:"TestName",path:"test",desc:""},{ty:"variant",name:"StaticTestName",path:"test",desc:"",parent:'3125'},{ty:"variant",name:"DynTestName",path:"test",desc:"",parent:'3125'},{ty:"enum",name:"TestFn",path:"test",desc:""},{ty:"variant",name:"StaticTestFn",path:"test",desc:"",parent:'3288'},{ty:"variant",name:"StaticBenchFn",path:"test",desc:"",parent:'3288'},{ty:"variant",name:"StaticMetricFn",path:"test",desc:"",parent:'3288'},{ty:"variant",name:"DynTestFn",path:"test",desc:"",parent:'3288'},{ty:"variant",name:"DynMetricFn",path:"test",desc:"",parent:'3288'},{ty:"variant",name:"DynBenchFn",path:"test",desc:"",parent:'3288'},{ty:"enum",name:"MetricChange",path:"test",desc:"Analysis of a single change in metric"},{ty:"variant",name:"LikelyNoise",path:"test",desc:"",parent:'3902'},{ty:"variant",name:"MetricAdded",path:"test",desc:"",parent:'3902'},{ty:"variant",name:"MetricRemoved",path:"test",desc:"",parent:'3902'},{ty:"variant",name:"Improvement",path:"test",desc:"",parent:'3902'},{ty:"variant",name:"Regression",path:"test",desc:"",parent:'3902'},{ty:"enum",name:"TestResult",path:"test",desc:""},{ty:"variant",name:"TrOk",path:"test",desc:"",parent:'5403'},{ty:"variant",name:"TrFailed",path:"test",desc:"",parent:'5403'},{ty:"variant",name:"TrIgnored",path:"test",desc:"",parent:'5403'},{ty:"variant",name:"TrMetrics",path:"test",desc:"",parent:'5403'},{ty:"variant",name:"TrBench",path:"test",desc:"",parent:'5403'},{ty:"fn",name:"test_main",path:"test",desc:""},{ty:"fn",name:"test_main_static",path:"test",desc:""},{ty:"fn",name:"parse_opts",path:"test",desc:""},{ty:"fn",name:"opt_shard",path:"test",desc:""},{ty:"fn",name:"fmt_metrics",path:"test",desc:""},{ty:"fn",name:"fmt_bench_samples",path:"test",desc:""},{ty:"fn",name:"run_tests_console",path:"test",desc:""},{ty:"fn",name:"filter_tests",path:"test",desc:""},{ty:"fn",name:"run_test",path:"test",desc:""},{ty:"fn",name:"black_box",path:"test",desc:"A function that is opaque to the optimizer, to allow benchmarks to\npretend to use outputs to assist in avoiding dead-code\nelimination."},{ty:"mod",name:"test",path:"test",desc:""},{ty:"mod",name:"stats",path:"test",desc:""},{ty:"struct",name:"Summary",path:"test::stats",desc:"Extracted collection of all the summary statistics of a sample set."},{ty:"structfield",name:"sum",path:"test::stats",desc:"",parent:'232'},{ty:"structfield",name:"min",path:"test::stats",desc:"",parent:'232'},{ty:"structfield",name:"max",path:"test::stats",desc:"",parent:'232'},{ty:"structfield",name:"mean",path:"test::stats",desc:"",parent:'232'},{ty:"structfield",name:"median",path:"test::stats",desc:"",parent:'232'},{ty:"structfield",name:"var",path:"test::stats",desc:"",parent:'232'},{ty:"structfield",name:"std_dev",path:"test::stats",desc:"",parent:'232'},{ty:"structfield",name:"std_dev_pct",path:"test::stats",desc:"",parent:'232'},{ty:"structfield",name:"median_abs_dev",path:"test::stats",desc:"",parent:'232'},{ty:"structfield",name:"median_abs_dev_pct",path:"test::stats",desc:"",parent:'232'},{ty:"structfield",name:"quartiles",path:"test::stats",desc:"",parent:'232'},{ty:"structfield",name:"iqr",path:"test::stats",desc:"",parent:'232'},{ty:"fn",name:"winsorize",path:"test::stats",desc:"Winsorize a set of samples, replacing values above the `100-pct` percentile and below the `pct`\npercentile with those percentiles themselves. This is a way of minimizing the effect of\noutliers, at the cost of biasing the sample. It differs from trimming in that it does not\nchange the number of samples, just changes the values of those that are outliers."},{ty:"fn",name:"write_5_number_summary",path:"test::stats",desc:"Render writes the min, max and quartiles of the provided `Summary` to the provided `Writer`."},{ty:"fn",name:"write_boxplot",path:"test::stats",desc:"Render a boxplot to the provided writer. The boxplot shows the min, max and quartiles of the\nprovided `Summary` (thus includes the mean) and is scaled to display within the range of the\nnearest multiple-of-a-power-of-ten above and below the min and max of possible values, and\ntarget `width_hint` characters of display (though it will be wider if necessary)."},{ty:"fn",name:"freq_count",path:"test::stats",desc:"Returns a HashMap with the number of occurrences of every element in the\nsequence that the iterator exposes."},{ty:"trait",name:"Stats",path:"test::stats",desc:"Trait that provides simple descriptive statistics on a univariate set of numeric samples."},{ty:"tymethod",name:"sum",path:"test::stats",desc:"Sum of the samples.",parent:'144'},{ty:"tymethod",name:"min",path:"test::stats",desc:"Minimum value of the samples.",parent:'144'},{ty:"tymethod",name:"max",path:"test::stats",desc:"Maximum value of the samples.",parent:'144'},{ty:"tymethod",name:"mean",path:"test::stats",desc:"Arithmetic mean (average) of the samples: sum divided by sample-count.",parent:'144'},{ty:"tymethod",name:"median",path:"test::stats",desc:"Median of the samples: value separating the lower half of the samples from the higher half.\nEqual to `self.percentile(50.0)`.",parent:'144'},{ty:"tymethod",name:"var",path:"test::stats",desc:"Variance of the samples: bias-corrected mean of the squares of the differences of each\nsample from the sample mean. Note that this calculates the _sample variance_ rather than the\npopulation variance, which is assumed to be unknown. It therefore corrects the `(n-1)/n`\nbias that would appear if we calculated a population variance, by dividing by `(n-1)` rather\nthan `n`.",parent:'144'},{ty:"tymethod",name:"std_dev",path:"test::stats",desc:"Standard deviation: the square root of the sample variance.",parent:'144'},{ty:"tymethod",name:"std_dev_pct",path:"test::stats",desc:"Standard deviation as a percent of the mean value. See `std_dev` and `mean`.",parent:'144'},{ty:"tymethod",name:"median_abs_dev",path:"test::stats",desc:"Scaled median of the absolute deviations of each sample from the sample median. This is a\nrobust (distribution-agnostic) estimator of sample variability. Use this in preference to\n`std_dev` if you cannot assume your sample is normally distributed. Note that this is scaled\nby the constant `1.4826` to allow its use as a consistent estimator for the standard\ndeviation.",parent:'144'},{ty:"tymethod",name:"median_abs_dev_pct",path:"test::stats",desc:"Median absolute deviation as a percent of the median. See `median_abs_dev` and `median`.",parent:'144'},{ty:"tymethod",name:"percentile",path:"test::stats",desc:"Percentile: the value below which `pct` percent of the values in `self` fall. For example,\npercentile(95.0) will return the value `v` such that 95% of the samples `s` in `self`\nsatisfy `s <= v`.",parent:'144'},{ty:"tymethod",name:"quartiles",path:"test::stats",desc:"Quartiles of the sample: three values that divide the sample into four equal groups, each\nwith 1/4 of the data. The middle value is the median. See `median` and `percentile`. This\nfunction may calculate the 3 quartiles more efficiently than 3 calls to `percentile`, but\nis otherwise equivalent.",parent:'144'},{ty:"tymethod",name:"iqr",path:"test::stats",desc:"Inter-quartile range: the difference between the 25th percentile (1st quartile) and the 75th\npercentile (3rd quartile). See `quartiles`.",parent:'144'},{ty:"method",name:"eq",path:"test::stats",desc:"",parent:'232'},{ty:"method",name:"ne",path:"test::stats",desc:"",parent:'232'},{ty:"method",name:"clone",path:"test::stats",desc:"",parent:'232'},{ty:"method",name:"new",path:"test::stats",desc:"Construct a new summary of a sample set.",parent:'232'},{ty:"mod",name:"bench",path:"test",desc:""},{ty:"fn",name:"benchmark",path:"test::bench",desc:""},{ty:"typedef",name:"MetricDiff",path:"test",desc:""},{ty:"typedef",name:"OptRes",path:"test",desc:"Result of parsing the options."},{ty:"typedef",name:"MonitorMsg",path:"test",desc:""},{ty:"trait",name:"TDynBenchFn",path:"test",desc:"Represents a benchmark function."},{ty:"tymethod",name:"run",path:"test",desc:"",parent:'3277'},{ty:"method",name:"clone",path:"test",desc:"",parent:'3125'},{ty:"method",name:"fmt",path:"test",desc:"",parent:'3125'},{ty:"method",name:"clone",path:"test",desc:"",parent:'3372'},{ty:"method",name:"fmt",path:"test",desc:"",parent:'3420'},{ty:"method",name:"eq",path:"test",desc:"",parent:'3420'},{ty:"method",name:"ne",path:"test",desc:"",parent:'3420'},{ty:"method",name:"decode",path:"test",desc:"",parent:'3420'},{ty:"method",name:"encode",path:"test",desc:"",parent:'3420'},{ty:"method",name:"clone",path:"test",desc:"",parent:'3420'},{ty:"method",name:"new",path:"test",desc:"",parent:'3420'},{ty:"method",name:"eq",path:"test",desc:"",parent:'3802'},{ty:"method",name:"ne",path:"test",desc:"",parent:'3802'},{ty:"method",name:"clone",path:"test",desc:"",parent:'3802'},{ty:"method",name:"fmt",path:"test",desc:"",parent:'3902'},{ty:"method",name:"eq",path:"test",desc:"",parent:'3902'},{ty:"method",name:"ne",path:"test",desc:"",parent:'3902'},{ty:"method",name:"eq",path:"test",desc:"",parent:'5280'},{ty:"method",name:"ne",path:"test",desc:"",parent:'5280'},{ty:"method",name:"clone",path:"test",desc:"",parent:'5280'},{ty:"method",name:"eq",path:"test",desc:"",parent:'5403'},{ty:"method",name:"ne",path:"test",desc:"",parent:'5403'},{ty:"method",name:"clone",path:"test",desc:"",parent:'5403'},{ty:"method",name:"to_json",path:"test",desc:"",parent:'3420'},{ty:"method",name:"new",path:"test",desc:"",parent:'3802'},{ty:"method",name:"load",path:"test",desc:"Load MetricDiff from a file.",parent:'3802'},{ty:"method",name:"save",path:"test",desc:"Write MetricDiff to a file.",parent:'3802'},{ty:"method",name:"compare_to_old",path:"test",desc:"Compare against another MetricMap. Optionally compare all\nmeasurements in the maps using the provided `noise_pct` as a\npercentage of each value to consider noise. If `None`, each\nmeasurement's noise threshold is independently chosen as the\nmaximum of that measurement's recorded noise quantity in either\nmap.",parent:'3802'},{ty:"method",name:"insert_metric",path:"test",desc:"Insert a named `value` (+/- `noise`) metric into the map. The value\nmust be non-negative. The `noise` indicates the uncertainty of the\nmetric, which doubles as the \"noise range\" of acceptable\npairwise-regressions on this named value, when comparing from one\nmetric to the next using `compare_to_old`.",parent:'3802'},{ty:"method",name:"ratchet",path:"test",desc:"Attempt to \"ratchet\" an external metric file. This involves loading\nmetrics from a metric file (if it exists), comparing against\nthe metrics in `self` using `compare_to_old`, and rewriting the\nfile to contain the metrics in `self` if none of the\n`MetricChange`s are `Regression`. Returns the diff as well\nas a boolean indicating whether the ratchet succeeded.",parent:'3802'},{ty:"method",name:"iter",path:"test",desc:"Callback for benchmark functions to run in their body.",parent:'3359'},{ty:"method",name:"ns_elapsed",path:"test",desc:"",parent:'3359'},{ty:"method",name:"ns_per_iter",path:"test",desc:"",parent:'3359'},{ty:"method",name:"bench_n",path:"test",desc:"",parent:'3359'},{ty:"method",name:"auto_bench",path:"test",desc:"",parent:'3359'}];allPaths['test'] = {'39':{type:'mod',name:'test'},'3288':{type:'enum',name:'TestFn'},'3310':{type:'enum',name:'TestFn'},'3802':{type:'struct',name:'MetricMap'},'8225':{type:'fn',name:'fmt_bench_samples'},'5405':{type:'enum',name:'TestResult'},'1752':{type:'fn',name:'winsorize'},'1829':{type:'fn',name:'write_5_number_summary'},'4374':{type:'typedef',name:'MetricDiff'},'3372':{type:'struct',name:'TestDesc'},'69':{type:'mod',name:'stats'},'3323':{type:'enum',name:'TestFn'},'3314':{type:'enum',name:'TestFn'},'5414':{type:'enum',name:'TestResult'},'4968':{type:'fn',name:'parse_opts'},'3292':{type:'enum',name:'TestFn'},'9602':{type:'fn',name:'run_test'},'10891':{type:'mod',name:'bench'},'8449':{type:'fn',name:'run_tests_console'},'4382':{type:'fn',name:'test_main'},'3277':{type:'trait',name:'TDynBenchFn'},'3909':{type:'enum',name:'MetricChange'},'2016':{type:'fn',name:'write_boxplot'},'4573':{type:'fn',name:'test_main_static'},'5211':{type:'fn',name:'opt_shard'},'3060':{type:'fn',name:'freq_count'},'3905':{type:'enum',name:'MetricChange'},'3420':{type:'struct',name:'Metric'},'5410':{type:'enum',name:'TestResult'},'232':{type:'struct',name:'Summary'},'3913':{type:'enum',name:'MetricChange'},'3359':{type:'struct',name:'BenchHarness'},'3328':{type:'enum',name:'TestFn'},'144':{type:'trait',name:'Stats'},'8949':{type:'typedef',name:'MonitorMsg'},'5403':{type:'enum',name:'TestResult'},'5406':{type:'enum',name:'TestResult'},'10897':{type:'fn',name:'benchmark'},'9388':{type:'fn',name:'filter_tests'},'3301':{type:'enum',name:'TestFn'},'3902':{type:'enum',name:'MetricChange'},'4681':{type:'typedef',name:'OptRes'},'0':{type:'mod',name:'test'},'8080':{type:'fn',name:'fmt_metrics'},'5404':{type:'enum',name:'TestResult'},'3136':{type:'enum',name:'TestName'},'10496':{type:'fn',name:'black_box'},'3903':{type:'enum',name:'MetricChange'},'5280':{type:'struct',name:'BenchSamples'},'4637':{type:'struct',name:'TestOpts'},'3131':{type:'enum',name:'TestName'},'3904':{type:'enum',name:'MetricChange'},'3413':{type:'struct',name:'TestDescAndFn'},'3125':{type:'enum',name:'TestName'}};

searchIndex['num'] = [{ty:"mod",name:"",path:"num",desc:""},{ty:"fn",name:"div_rem",path:"num",desc:"Simultaneous integer division and modulus"},{ty:"fn",name:"div_floor",path:"num",desc:"Floored integer division"},{ty:"fn",name:"mod_floor",path:"num",desc:"Floored integer modulus"},{ty:"fn",name:"div_mod_floor",path:"num",desc:"Simultaneous floored integer division and modulus"},{ty:"fn",name:"gcd",path:"num",desc:"Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive."},{ty:"fn",name:"lcm",path:"num",desc:"Calculates the Lowest Common Multiple (LCM) of the number and `other`."},{ty:"mod",name:"bigint",path:"num",desc:"A Big integer (signed version: `BigInt`, unsigned version: `BigUint`)."},{ty:"struct",name:"BigUint",path:"num::bigint",desc:"A big unsigned integer type."},{ty:"struct",name:"BigInt",path:"num::bigint",desc:"A big signed integer type."},{ty:"enum",name:"Sign",path:"num::bigint",desc:"A Sign is a `BigInt`'s composing element."},{ty:"variant",name:"Minus",path:"num::bigint",desc:"",parent:'4224'},{ty:"variant",name:"Zero",path:"num::bigint",desc:"",parent:'4224'},{ty:"variant",name:"Plus",path:"num::bigint",desc:"",parent:'4224'},{ty:"mod",name:"BigDigit",path:"num::bigint",desc:""},{ty:"fn",name:"from_uint",path:"num::bigint::BigDigit",desc:"Split one machine sized unsigned integer into two `BigDigit`s."},{ty:"fn",name:"to_uint",path:"num::bigint::BigDigit",desc:"Join two `BigDigit`s into one machine sized unsigned integer"},{ty:"static",name:"bits",path:"num::bigint::BigDigit",desc:""},{ty:"static",name:"base",path:"num::bigint::BigDigit",desc:""},{ty:"typedef",name:"BigDigit",path:"num::bigint",desc:"A `BigDigit` is a `BigUint`'s composing element."},{ty:"static",name:"ZERO_BIG_DIGIT",path:"num::bigint",desc:""},{ty:"trait",name:"ToBigUint",path:"num::bigint",desc:"A generic trait for converting a value to a `BigUint`."},{ty:"tymethod",name:"to_biguint",path:"num::bigint",desc:"Converts the value of `self` to a `BigUint`.",parent:'2958'},{ty:"trait",name:"ToBigInt",path:"num::bigint",desc:"A generic trait for converting a value to a `BigInt`."},{ty:"tymethod",name:"to_bigint",path:"num::bigint",desc:"Converts the value of `self` to a `BigInt`.",parent:'6053'},{ty:"trait",name:"RandBigInt",path:"num::bigint",desc:""},{ty:"tymethod",name:"gen_biguint",path:"num::bigint",desc:"Generate a random `BigUint` of the given bit size.",parent:'6337'},{ty:"tymethod",name:"gen_bigint",path:"num::bigint",desc:"Generate a random BigInt of the given bit size.",parent:'6337'},{ty:"tymethod",name:"gen_biguint_below",path:"num::bigint",desc:"Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",parent:'6337'},{ty:"tymethod",name:"gen_biguint_range",path:"num::bigint",desc:"Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",parent:'6337'},{ty:"tymethod",name:"gen_bigint_range",path:"num::bigint",desc:"Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",parent:'6337'},{ty:"method",name:"clone",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"eq",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"equals",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"lt",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"cmp",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"fmt",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"from_str",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"bitand",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"bitor",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"bitxor",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"shl",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"shr",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"zero",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"is_zero",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"one",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"add",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"sub",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"mul",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"div",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"rem",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"neg",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"checked_add",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"checked_sub",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"checked_mul",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"checked_div",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"div_rem",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"div_floor",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"mod_floor",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"div_mod_floor",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"gcd",path:"num::bigint",desc:"Calculates the Greatest Common Divisor (GCD) of the number and `other`",parent:'140'},{ty:"method",name:"lcm",path:"num::bigint",desc:"Calculates the Lowest Common Multiple (LCM) of the number and `other`",parent:'140'},{ty:"method",name:"divides",path:"num::bigint",desc:"Returns `true` if the number can be divided by `other` without leaving a remainder",parent:'140'},{ty:"method",name:"is_even",path:"num::bigint",desc:"Returns `true` if the number is divisible by `2`",parent:'140'},{ty:"method",name:"is_odd",path:"num::bigint",desc:"Returns `true` if the number is not divisible by `2`",parent:'140'},{ty:"method",name:"to_i64",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"to_u64",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"from_i64",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"from_u64",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"to_biguint",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"to_biguint",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"to_str_radix",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"from_str_radix",path:"num::bigint",desc:"Creates and initializes a `BigUint`.",parent:'140'},{ty:"method",name:"new",path:"num::bigint",desc:"Creates and initializes a `BigUint`.",parent:'140'},{ty:"method",name:"from_slice",path:"num::bigint",desc:"Creates and initializes a `BigUint`.",parent:'140'},{ty:"method",name:"parse_bytes",path:"num::bigint",desc:"Creates and initializes a `BigUint`.",parent:'140'},{ty:"method",name:"bits",path:"num::bigint",desc:"Determines the fewest bits necessary to express the `BigUint`.",parent:'140'},{ty:"method",name:"fmt",path:"num::bigint",desc:"",parent:'4224'},{ty:"method",name:"clone",path:"num::bigint",desc:"",parent:'4224'},{ty:"method",name:"eq",path:"num::bigint",desc:"",parent:'4224'},{ty:"method",name:"ne",path:"num::bigint",desc:"",parent:'4224'},{ty:"method",name:"lt",path:"num::bigint",desc:"",parent:'4224'},{ty:"method",name:"equals",path:"num::bigint",desc:"",parent:'4224'},{ty:"method",name:"cmp",path:"num::bigint",desc:"",parent:'4224'},{ty:"method",name:"neg",path:"num::bigint",desc:"Negate Sign value.",parent:'4224'},{ty:"method",name:"clone",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"eq",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"equals",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"lt",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"cmp",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"fmt",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"from_str",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"shl",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"shr",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"zero",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"is_zero",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"one",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"abs",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"abs_sub",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"signum",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"is_positive",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"is_negative",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"add",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"sub",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"mul",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"div",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"rem",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"neg",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"checked_add",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"checked_sub",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"checked_mul",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"checked_div",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"div_rem",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"div_floor",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"mod_floor",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"div_mod_floor",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"gcd",path:"num::bigint",desc:"Calculates the Greatest Common Divisor (GCD) of the number and `other`",parent:'4601'},{ty:"method",name:"lcm",path:"num::bigint",desc:"Calculates the Lowest Common Multiple (LCM) of the number and `other`",parent:'4601'},{ty:"method",name:"divides",path:"num::bigint",desc:"Returns `true` if the number can be divided by `other` without leaving a remainder",parent:'4601'},{ty:"method",name:"is_even",path:"num::bigint",desc:"Returns `true` if the number is divisible by `2`",parent:'4601'},{ty:"method",name:"is_odd",path:"num::bigint",desc:"Returns `true` if the number is not divisible by `2`",parent:'4601'},{ty:"method",name:"to_i64",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"to_u64",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"from_i64",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"from_u64",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"to_bigint",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"to_bigint",path:"num::bigint",desc:"",parent:'140'},{ty:"method",name:"to_str_radix",path:"num::bigint",desc:"",parent:'4601'},{ty:"method",name:"from_str_radix",path:"num::bigint",desc:"Creates and initializes a BigInt.",parent:'4601'},{ty:"method",name:"new",path:"num::bigint",desc:"Creates and initializes a BigInt.",parent:'4601'},{ty:"method",name:"from_biguint",path:"num::bigint",desc:"Creates and initializes a `BigInt`.",parent:'4601'},{ty:"method",name:"from_slice",path:"num::bigint",desc:"Creates and initializes a `BigInt`.",parent:'4601'},{ty:"method",name:"parse_bytes",path:"num::bigint",desc:"Creates and initializes a `BigInt`.",parent:'4601'},{ty:"method",name:"to_biguint",path:"num::bigint",desc:"Converts this `BigInt` into a `BigUint`, if it's not negative.",parent:'4601'},{ty:"mod",name:"rational",path:"num",desc:"Rational numbers"},{ty:"struct",name:"Ratio",path:"num::rational",desc:"Represents the ratio between 2 numbers."},{ty:"typedef",name:"Rational",path:"num::rational",desc:"Alias for a `Ratio` of machine-sized integers."},{ty:"typedef",name:"Rational32",path:"num::rational",desc:""},{ty:"typedef",name:"Rational64",path:"num::rational",desc:""},{ty:"typedef",name:"BigRational",path:"num::rational",desc:"Alias for arbitrary precision rationals."},{ty:"method",name:"clone",path:"num::rational",desc:"",parent:'7076'},{ty:"method",name:"from_integer",path:"num::rational",desc:"Create a ratio representing the integer `t`.",parent:'7076'},{ty:"method",name:"new_raw",path:"num::rational",desc:"Create a ratio without checking for `denom == 0` or reducing.",parent:'7076'},{ty:"method",name:"new",path:"num::rational",desc:"Create a new Ratio. Fails if `denom == 0`.",parent:'7076'},{ty:"method",name:"to_integer",path:"num::rational",desc:"Convert to an integer.",parent:'7076'},{ty:"method",name:"numer",path:"num::rational",desc:"Gets an immutable reference to the numerator.",parent:'7076'},{ty:"method",name:"denom",path:"num::rational",desc:"Gets an immutable reference to the denominator.",parent:'7076'},{ty:"method",name:"is_integer",path:"num::rational",desc:"Return true if the rational number is an integer (denominator is 1).",parent:'7076'},{ty:"method",name:"reduced",path:"num::rational",desc:"Return a `reduce`d copy of self.",parent:'7076'},{ty:"method",name:"recip",path:"num::rational",desc:"Return the reciprocal",parent:'7076'},{ty:"method",name:"from_float",path:"num::rational",desc:"Converts a float into a rational number",parent:'7076'},{ty:"method",name:"eq",path:"num::rational",desc:"",parent:'7076'},{ty:"method",name:"ne",path:"num::rational",desc:"",parent:'7076'},{ty:"method",name:"equals",path:"num::rational",desc:"",parent:'7076'},{ty:"method",name:"lt",path:"num::rational",desc:"",parent:'7076'},{ty:"method",name:"gt",path:"num::rational",desc:"",parent:'7076'},{ty:"method",name:"le",path:"num::rational",desc:"",parent:'7076'},{ty:"method",name:"ge",path:"num::rational",desc:"",parent:'7076'},{ty:"method",name:"cmp",path:"num::rational",desc:"",parent:'7076'},{ty:"method",name:"mul",path:"num::rational",desc:"",parent:'7076'},{ty:"method",name:"div",path:"num::rational",desc:"",parent:'7076'},{ty:"method",name:"add",path:"num::rational",desc:"",parent:'7076'},{ty:"method",name:"sub",path:"num::rational",desc:"",parent:'7076'},{ty:"method",name:"rem",path:"num::rational",desc:"",parent:'7076'},{ty:"method",name:"neg",path:"num::rational",desc:"",parent:'7076'},{ty:"method",name:"zero",path:"num::rational",desc:"",parent:'7076'},{ty:"method",name:"is_zero",path:"num::rational",desc:"",parent:'7076'},{ty:"method",name:"one",path:"num::rational",desc:"",parent:'7076'},{ty:"method",name:"floor",path:"num::rational",desc:"",parent:'7076'},{ty:"method",name:"ceil",path:"num::rational",desc:"",parent:'7076'},{ty:"method",name:"round",path:"num::rational",desc:"",parent:'7076'},{ty:"method",name:"trunc",path:"num::rational",desc:"",parent:'7076'},{ty:"method",name:"fract",path:"num::rational",desc:"",parent:'7076'},{ty:"method",name:"fmt",path:"num::rational",desc:"Renders as `numer/denom`.",parent:'7076'},{ty:"method",name:"to_str_radix",path:"num::rational",desc:"Renders as `numer/denom` where the numbers are in base `radix`.",parent:'7076'},{ty:"method",name:"from_str",path:"num::rational",desc:"Parses `numer/denom`.",parent:'7076'},{ty:"method",name:"from_str_radix",path:"num::rational",desc:"Parses `numer/denom` where the numbers are in base `radix`.",parent:'7076'},{ty:"mod",name:"complex",path:"num",desc:"Complex numbers."},{ty:"struct",name:"Cmplx",path:"num::complex",desc:"A complex number in Cartesian form."},{ty:"structfield",name:"re",path:"num::complex",desc:"Real portion of the complex number",parent:'8703'},{ty:"structfield",name:"im",path:"num::complex",desc:"Imaginary portion of the complex number",parent:'8703'},{ty:"typedef",name:"Complex32",path:"num::complex",desc:""},{ty:"typedef",name:"Complex64",path:"num::complex",desc:""},{ty:"method",name:"clone",path:"num::complex",desc:"",parent:'8703'},{ty:"method",name:"eq",path:"num::complex",desc:"",parent:'8703'},{ty:"method",name:"ne",path:"num::complex",desc:"",parent:'8703'},{ty:"method",name:"new",path:"num::complex",desc:"Create a new Cmplx",parent:'8703'},{ty:"method",name:"norm_sqr",path:"num::complex",desc:"Returns the square of the norm (since `T` doesn't necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",parent:'8703'},{ty:"method",name:"conj",path:"num::complex",desc:"Returns the complex conjugate. i.e. `re - i im`",parent:'8703'},{ty:"method",name:"scale",path:"num::complex",desc:"Multiplies `self` by the scalar `t`.",parent:'8703'},{ty:"method",name:"unscale",path:"num::complex",desc:"Divides `self` by the scalar `t`.",parent:'8703'},{ty:"method",name:"inv",path:"num::complex",desc:"Returns `1/self`",parent:'8703'},{ty:"method",name:"norm",path:"num::complex",desc:"Calculate |self|",parent:'8703'},{ty:"method",name:"arg",path:"num::complex",desc:"Calculate the principal Arg of self.",parent:'8703'},{ty:"method",name:"to_polar",path:"num::complex",desc:"Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",parent:'8703'},{ty:"method",name:"from_polar",path:"num::complex",desc:"Convert a polar representation into a complex number.",parent:'8703'},{ty:"method",name:"add",path:"num::complex",desc:"",parent:'8703'},{ty:"method",name:"sub",path:"num::complex",desc:"",parent:'8703'},{ty:"method",name:"mul",path:"num::complex",desc:"",parent:'8703'},{ty:"method",name:"div",path:"num::complex",desc:"",parent:'8703'},{ty:"method",name:"neg",path:"num::complex",desc:"",parent:'8703'},{ty:"method",name:"zero",path:"num::complex",desc:"",parent:'8703'},{ty:"method",name:"is_zero",path:"num::complex",desc:"",parent:'8703'},{ty:"method",name:"one",path:"num::complex",desc:"",parent:'8703'},{ty:"method",name:"fmt",path:"num::complex",desc:"",parent:'8703'},{ty:"method",name:"to_str_radix",path:"num::complex",desc:"",parent:'8703'},{ty:"trait",name:"Integer",path:"num",desc:""},{ty:"method",name:"div_rem",path:"num",desc:"Simultaneous truncated integer division and modulus",parent:'9793'},{ty:"tymethod",name:"div_floor",path:"num",desc:"Floored integer division",parent:'9793'},{ty:"tymethod",name:"mod_floor",path:"num",desc:"Floored integer modulo, satisfying:",parent:'9793'},{ty:"method",name:"div_mod_floor",path:"num",desc:"Simultaneous floored integer division and modulus",parent:'9793'},{ty:"tymethod",name:"gcd",path:"num",desc:"Greatest Common Divisor (GCD)",parent:'9793'},{ty:"tymethod",name:"lcm",path:"num",desc:"Lowest Common Multiple (LCM)",parent:'9793'},{ty:"tymethod",name:"divides",path:"num",desc:"Returns `true` if `other` divides evenly into `self`",parent:'9793'},{ty:"tymethod",name:"is_even",path:"num",desc:"Returns `true` if the number is even",parent:'9793'},{ty:"tymethod",name:"is_odd",path:"num",desc:"Returns `true` if the number is odd",parent:'9793'}];allPaths['num'] = {'9921':{type:'fn',name:'div_rem'},'8696':{type:'mod',name:'complex'},'42':{type:'mod',name:'BigDigit'},'7131':{type:'typedef',name:'BigRational'},'10017':{type:'fn',name:'lcm'},'2958':{type:'trait',name:'ToBigUint'},'7116':{type:'typedef',name:'Rational'},'7076':{type:'struct',name:'Ratio'},'96':{type:'fn',name:'from_uint'},'4':{type:'mod',name:'bigint'},'4226':{type:'enum',name:'Sign'},'9793':{type:'trait',name:'Integer'},'9999':{type:'fn',name:'gcd'},'114':{type:'fn',name:'to_uint'},'8841':{type:'typedef',name:'Complex32'},'4601':{type:'struct',name:'BigInt'},'4224':{type:'enum',name:'Sign'},'9978':{type:'fn',name:'div_mod_floor'},'8703':{type:'struct',name:'Cmplx'},'140':{type:'struct',name:'BigUint'},'8846':{type:'typedef',name:'Complex64'},'0':{type:'mod',name:'num'},'9942':{type:'fn',name:'div_floor'},'4225':{type:'enum',name:'Sign'},'7126':{type:'typedef',name:'Rational64'},'7057':{type:'mod',name:'rational'},'6337':{type:'trait',name:'RandBigInt'},'9960':{type:'fn',name:'mod_floor'},'6053':{type:'trait',name:'ToBigInt'},'7121':{type:'typedef',name:'Rational32'},'28':{type:'typedef',name:'BigDigit'},'4227':{type:'enum',name:'Sign'}};

searchIndex['collections'] = [{ty:"mod",name:"",path:"collections",desc:"Collection types."},{ty:"mod",name:"bitv",path:"collections",desc:""},{ty:"struct",name:"Bitv",path:"collections::bitv",desc:"The bitvector type"},{ty:"struct",name:"Bits",path:"collections::bitv",desc:"An iterator for `Bitv`."},{ty:"struct",name:"BitvSet",path:"collections::bitv",desc:"An implementation of a set using a bit vector as an underlying\nrepresentation for holding numerical elements."},{ty:"struct",name:"BitPositions",path:"collections::bitv",desc:""},{ty:"fn",name:"from_bytes",path:"collections::bitv",desc:"Transform a byte-vector into a `Bitv`. Each byte becomes 8 bits,\nwith the most significant bits of each byte coming first. Each\nbit becomes `true` if equal to 1 or `false` if equal to 0."},{ty:"fn",name:"from_bools",path:"collections::bitv",desc:"Transform a `[bool]` into a `Bitv` by converting each `bool` into a bit."},{ty:"fn",name:"from_fn",path:"collections::bitv",desc:"Create a `Bitv` of the specified length where the value at each\nindex is `f(index)`."},{ty:"method",name:"clone",path:"collections::bitv",desc:"",parent:'1179'},{ty:"method",name:"new",path:"collections::bitv",desc:"",parent:'1179'},{ty:"method",name:"union",path:"collections::bitv",desc:"Calculates the union of two bitvectors",parent:'1179'},{ty:"method",name:"intersect",path:"collections::bitv",desc:"Calculates the intersection of two bitvectors",parent:'1179'},{ty:"method",name:"assign",path:"collections::bitv",desc:"Assigns the value of `v1` to `self`",parent:'1179'},{ty:"method",name:"get",path:"collections::bitv",desc:"Retrieve the value at index `i`",parent:'1179'},{ty:"method",name:"set",path:"collections::bitv",desc:"Set the value of a bit at a given index",parent:'1179'},{ty:"method",name:"equal",path:"collections::bitv",desc:"Compares two bitvectors",parent:'1179'},{ty:"method",name:"clear",path:"collections::bitv",desc:"Set all bits to 0",parent:'1179'},{ty:"method",name:"set_all",path:"collections::bitv",desc:"Set all bits to 1",parent:'1179'},{ty:"method",name:"negate",path:"collections::bitv",desc:"Flip all bits",parent:'1179'},{ty:"method",name:"difference",path:"collections::bitv",desc:"Calculate the difference between two bitvectors",parent:'1179'},{ty:"method",name:"is_true",path:"collections::bitv",desc:"Returns `true` if all bits are 1",parent:'1179'},{ty:"method",name:"iter",path:"collections::bitv",desc:"",parent:'1179'},{ty:"method",name:"rev_iter",path:"collections::bitv",desc:"",parent:'1179'},{ty:"method",name:"is_false",path:"collections::bitv",desc:"Returns `true` if all bits are 0",parent:'1179'},{ty:"method",name:"init_to_vec",path:"collections::bitv",desc:"",parent:'1179'},{ty:"method",name:"to_vec",path:"collections::bitv",desc:"Converts `self` to a vector of `uint` with the same length.",parent:'1179'},{ty:"method",name:"to_bytes",path:"collections::bitv",desc:"Organise the bits into bytes, such that the first bit in the\n`Bitv` becomes the high-order bit of the first byte. If the\nsize of the `Bitv` is not a multiple of 8 then trailing bits\nwill be filled-in with false/0",parent:'1179'},{ty:"method",name:"to_bools",path:"collections::bitv",desc:"Transform `self` into a `[bool]` by turning each bit into a `bool`.",parent:'1179'},{ty:"method",name:"to_str",path:"collections::bitv",desc:"Converts `self` to a string.",parent:'1179'},{ty:"method",name:"eq_vec",path:"collections::bitv",desc:"Compare a bitvector to a vector of `bool`.",parent:'1179'},{ty:"method",name:"ones",path:"collections::bitv",desc:"",parent:'1179'},{ty:"method",name:"index",path:"collections::bitv",desc:"",parent:'1179'},{ty:"method",name:"next",path:"collections::bitv",desc:"",parent:'2682'},{ty:"method",name:"size_hint",path:"collections::bitv",desc:"",parent:'2682'},{ty:"method",name:"next_back",path:"collections::bitv",desc:"",parent:'2682'},{ty:"method",name:"indexable",path:"collections::bitv",desc:"",parent:'2682'},{ty:"method",name:"idx",path:"collections::bitv",desc:"",parent:'2682'},{ty:"method",name:"clone",path:"collections::bitv",desc:"",parent:'2860'},{ty:"method",name:"new",path:"collections::bitv",desc:"Creates a new bit vector set with initially no contents",parent:'2860'},{ty:"method",name:"from_bitv",path:"collections::bitv",desc:"Creates a new bit vector set from the given bit vector",parent:'2860'},{ty:"method",name:"capacity",path:"collections::bitv",desc:"Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",parent:'2860'},{ty:"method",name:"unwrap",path:"collections::bitv",desc:"Consumes this set to return the underlying bit vector",parent:'2860'},{ty:"method",name:"union_with",path:"collections::bitv",desc:"Union in-place with the specified other bit vector",parent:'2860'},{ty:"method",name:"intersect_with",path:"collections::bitv",desc:"Intersect in-place with the specified other bit vector",parent:'2860'},{ty:"method",name:"difference_with",path:"collections::bitv",desc:"Difference in-place with the specified other bit vector",parent:'2860'},{ty:"method",name:"symmetric_difference_with",path:"collections::bitv",desc:"Symmetric difference in-place with the specified other bit vector",parent:'2860'},{ty:"method",name:"iter",path:"collections::bitv",desc:"",parent:'2860'},{ty:"method",name:"difference",path:"collections::bitv",desc:"",parent:'2860'},{ty:"method",name:"symmetric_difference",path:"collections::bitv",desc:"",parent:'2860'},{ty:"method",name:"intersection",path:"collections::bitv",desc:"",parent:'2860'},{ty:"method",name:"union",path:"collections::bitv",desc:"",parent:'2860'},{ty:"method",name:"eq",path:"collections::bitv",desc:"",parent:'2860'},{ty:"method",name:"ne",path:"collections::bitv",desc:"",parent:'2860'},{ty:"method",name:"len",path:"collections::bitv",desc:"",parent:'2860'},{ty:"method",name:"clear",path:"collections::bitv",desc:"",parent:'2860'},{ty:"method",name:"contains",path:"collections::bitv",desc:"",parent:'2860'},{ty:"method",name:"is_disjoint",path:"collections::bitv",desc:"",parent:'2860'},{ty:"method",name:"is_subset",path:"collections::bitv",desc:"",parent:'2860'},{ty:"method",name:"is_superset",path:"collections::bitv",desc:"",parent:'2860'},{ty:"method",name:"insert",path:"collections::bitv",desc:"",parent:'2860'},{ty:"method",name:"remove",path:"collections::bitv",desc:"",parent:'2860'},{ty:"method",name:"next",path:"collections::bitv",desc:"",parent:'4369'},{ty:"method",name:"size_hint",path:"collections::bitv",desc:"",parent:'4369'},{ty:"mod",name:"btree",path:"collections",desc:"Starting implementation of a btree for rust.\nStructure inspired by github user davidhalperin's gist."},{ty:"struct",name:"BTree",path:"collections::btree",desc:""},{ty:"method",name:"new",path:"collections::btree",desc:"Returns new BTree with root node (leaf) and user-supplied lower bound\nThe lower bound applies to every node except the root node.",parent:'4457'},{ty:"method",name:"get",path:"collections::btree",desc:"Returns the value of a given key, which may not exist in the tree.\nCalls the root node's get method.",parent:'4457'},{ty:"method",name:"insert",path:"collections::btree",desc:"An insert method that uses the clone() feature for support.",parent:'4457'},{ty:"method",name:"clone",path:"collections::btree",desc:"Implements the Clone trait for the BTree.\nUses a helper function/constructor to produce a new BTree.",parent:'4457'},{ty:"method",name:"eq",path:"collections::btree",desc:"",parent:'4457'},{ty:"method",name:"equals",path:"collections::btree",desc:"Testing equality on BTrees by comparing the root.",parent:'4457'},{ty:"method",name:"lt",path:"collections::btree",desc:"",parent:'4457'},{ty:"method",name:"cmp",path:"collections::btree",desc:"Returns an ordering based on the root nodes of each BTree.",parent:'4457'},{ty:"method",name:"fmt",path:"collections::btree",desc:"Returns a string representation of the BTree",parent:'4457'},{ty:"mod",name:"deque",path:"collections",desc:"Container traits for extra"},{ty:"trait",name:"Deque",path:"collections::deque",desc:"A double-ended sequence that allows querying, insertion and deletion at both ends."},{ty:"tymethod",name:"front",path:"collections::deque",desc:"Provide a reference to the front element, or None if the sequence is empty",parent:'8120'},{ty:"tymethod",name:"front_mut",path:"collections::deque",desc:"Provide a mutable reference to the front element, or None if the sequence is empty",parent:'8120'},{ty:"tymethod",name:"back",path:"collections::deque",desc:"Provide a reference to the back element, or None if the sequence is empty",parent:'8120'},{ty:"tymethod",name:"back_mut",path:"collections::deque",desc:"Provide a mutable reference to the back element, or None if the sequence is empty",parent:'8120'},{ty:"tymethod",name:"push_front",path:"collections::deque",desc:"Insert an element first in the sequence",parent:'8120'},{ty:"tymethod",name:"push_back",path:"collections::deque",desc:"Insert an element last in the sequence",parent:'8120'},{ty:"tymethod",name:"pop_back",path:"collections::deque",desc:"Remove the last element and return it, or None if the sequence is empty",parent:'8120'},{ty:"tymethod",name:"pop_front",path:"collections::deque",desc:"Remove the first element and return it, or None if the sequence is empty",parent:'8120'},{ty:"mod",name:"dlist",path:"collections",desc:"A doubly-linked list with owned nodes."},{ty:"struct",name:"DList",path:"collections::dlist",desc:"A doubly-linked list."},{ty:"struct",name:"Items",path:"collections::dlist",desc:"Double-ended DList iterator"},{ty:"struct",name:"MutItems",path:"collections::dlist",desc:"Double-ended mutable DList iterator"},{ty:"struct",name:"MoveItems",path:"collections::dlist",desc:"DList consuming iterator"},{ty:"trait",name:"ListInsertion",path:"collections::dlist",desc:"Allow mutating the DList while iterating"},{ty:"tymethod",name:"insert_next",path:"collections::dlist",desc:"Insert `elt` just after to the element most recently returned by `.next()`",parent:'9810'},{ty:"tymethod",name:"peek_next",path:"collections::dlist",desc:"Provide a reference to the next element, without changing the iterator",parent:'9810'},{ty:"method",name:"clone",path:"collections::dlist",desc:"",parent:'8264'},{ty:"method",name:"clone",path:"collections::dlist",desc:"",parent:'8332'},{ty:"method",name:"is_empty",path:"collections::dlist",desc:"O(1)",parent:'8215'},{ty:"method",name:"len",path:"collections::dlist",desc:"O(1)",parent:'8215'},{ty:"method",name:"clear",path:"collections::dlist",desc:"Remove all elements from the DList",parent:'8215'},{ty:"method",name:"front",path:"collections::dlist",desc:"Provide a reference to the front element, or None if the list is empty",parent:'8215'},{ty:"method",name:"front_mut",path:"collections::dlist",desc:"Provide a mutable reference to the front element, or None if the list is empty",parent:'8215'},{ty:"method",name:"back",path:"collections::dlist",desc:"Provide a reference to the back element, or None if the list is empty",parent:'8215'},{ty:"method",name:"back_mut",path:"collections::dlist",desc:"Provide a mutable reference to the back element, or None if the list is empty",parent:'8215'},{ty:"method",name:"push_front",path:"collections::dlist",desc:"Add an element first in the list",parent:'8215'},{ty:"method",name:"pop_front",path:"collections::dlist",desc:"Remove the first element and return it, or None if the list is empty",parent:'8215'},{ty:"method",name:"push_back",path:"collections::dlist",desc:"Add an element last in the list",parent:'8215'},{ty:"method",name:"pop_back",path:"collections::dlist",desc:"Remove the last element and return it, or None if the list is empty",parent:'8215'},{ty:"method",name:"new",path:"collections::dlist",desc:"Create an empty DList",parent:'8215'},{ty:"method",name:"rotate_forward",path:"collections::dlist",desc:"Move the last element to the front of the list.",parent:'8215'},{ty:"method",name:"rotate_backward",path:"collections::dlist",desc:"Move the first element to the back of the list.",parent:'8215'},{ty:"method",name:"append",path:"collections::dlist",desc:"Add all elements from `other` to the end of the list",parent:'8215'},{ty:"method",name:"prepend",path:"collections::dlist",desc:"Add all elements from `other` to the beginning of the list",parent:'8215'},{ty:"method",name:"insert_when",path:"collections::dlist",desc:"Insert `elt` before the first `x` in the list where `f(x, elt)` is true,\nor at the end.",parent:'8215'},{ty:"method",name:"merge",path:"collections::dlist",desc:"Merge DList `other` into this DList, using the function `f`.\nIterate the both DList with `a` from self and `b` from `other`, and\nput `a` in the result if `f(a, b)` is true, else `b`.",parent:'8215'},{ty:"method",name:"iter",path:"collections::dlist",desc:"Provide a forward iterator",parent:'8215'},{ty:"method",name:"rev_iter",path:"collections::dlist",desc:"Provide a reverse iterator",parent:'8215'},{ty:"method",name:"mut_iter",path:"collections::dlist",desc:"Provide a forward iterator with mutable references",parent:'8215'},{ty:"method",name:"mut_rev_iter",path:"collections::dlist",desc:"Provide a reverse iterator with mutable references",parent:'8215'},{ty:"method",name:"move_iter",path:"collections::dlist",desc:"Consume the list into an iterator yielding elements by value",parent:'8215'},{ty:"method",name:"move_rev_iter",path:"collections::dlist",desc:"Consume the list into an iterator yielding elements by value, in reverse",parent:'8215'},{ty:"method",name:"insert_ordered",path:"collections::dlist",desc:"Insert `elt` sorted in ascending order",parent:'8215'},{ty:"method",name:"drop",path:"collections::dlist",desc:"",parent:'8215'},{ty:"method",name:"next",path:"collections::dlist",desc:"",parent:'8264'},{ty:"method",name:"size_hint",path:"collections::dlist",desc:"",parent:'8264'},{ty:"method",name:"next_back",path:"collections::dlist",desc:"",parent:'8264'},{ty:"method",name:"next",path:"collections::dlist",desc:"",parent:'8305'},{ty:"method",name:"size_hint",path:"collections::dlist",desc:"",parent:'8305'},{ty:"method",name:"next_back",path:"collections::dlist",desc:"",parent:'8305'},{ty:"method",name:"insert_next",path:"collections::dlist",desc:"",parent:'8305'},{ty:"method",name:"peek_next",path:"collections::dlist",desc:"",parent:'8305'},{ty:"method",name:"next",path:"collections::dlist",desc:"",parent:'8332'},{ty:"method",name:"size_hint",path:"collections::dlist",desc:"",parent:'8332'},{ty:"method",name:"next_back",path:"collections::dlist",desc:"",parent:'8332'},{ty:"method",name:"from_iterator",path:"collections::dlist",desc:"",parent:'8215'},{ty:"method",name:"extend",path:"collections::dlist",desc:"",parent:'8215'},{ty:"method",name:"eq",path:"collections::dlist",desc:"",parent:'8215'},{ty:"method",name:"ne",path:"collections::dlist",desc:"",parent:'8215'},{ty:"method",name:"lt",path:"collections::dlist",desc:"",parent:'8215'},{ty:"method",name:"le",path:"collections::dlist",desc:"",parent:'8215'},{ty:"method",name:"gt",path:"collections::dlist",desc:"",parent:'8215'},{ty:"method",name:"ge",path:"collections::dlist",desc:"",parent:'8215'},{ty:"method",name:"clone",path:"collections::dlist",desc:"",parent:'8215'},{ty:"mod",name:"enum_set",path:"collections",desc:"A structure for holding a set of enum variants"},{ty:"struct",name:"EnumSet",path:"collections::enum_set",desc:"A specialized Set implementation to use enum types."},{ty:"struct",name:"Items",path:"collections::enum_set",desc:"An iterator over an EnumSet"},{ty:"trait",name:"CLike",path:"collections::enum_set",desc:"An interface for casting C-like enum to uint and back."},{ty:"tymethod",name:"to_uint",path:"collections::enum_set",desc:"Converts C-like enum to uint.",parent:'10550'},{ty:"tymethod",name:"from_uint",path:"collections::enum_set",desc:"Converts uint to C-like enum.",parent:'10550'},{ty:"method",name:"fmt",path:"collections::enum_set",desc:"",parent:'10304'},{ty:"method",name:"hash",path:"collections::enum_set",desc:"",parent:'10304'},{ty:"method",name:"eq",path:"collections::enum_set",desc:"",parent:'10304'},{ty:"method",name:"ne",path:"collections::enum_set",desc:"",parent:'10304'},{ty:"method",name:"clone",path:"collections::enum_set",desc:"",parent:'10304'},{ty:"method",name:"empty",path:"collections::enum_set",desc:"Returns an empty EnumSet.",parent:'10304'},{ty:"method",name:"is_empty",path:"collections::enum_set",desc:"Returns true if an EnumSet is empty.",parent:'10304'},{ty:"method",name:"intersects",path:"collections::enum_set",desc:"Returns true if an EnumSet contains any enum of a given EnumSet",parent:'10304'},{ty:"method",name:"intersection",path:"collections::enum_set",desc:"Returns an intersection of both EnumSets.",parent:'10304'},{ty:"method",name:"contains",path:"collections::enum_set",desc:"Returns true if a given EnumSet is included in an EnumSet.",parent:'10304'},{ty:"method",name:"union",path:"collections::enum_set",desc:"Returns a union of both EnumSets.",parent:'10304'},{ty:"method",name:"add",path:"collections::enum_set",desc:"Add an enum to an EnumSet",parent:'10304'},{ty:"method",name:"contains_elem",path:"collections::enum_set",desc:"Returns true if an EnumSet contains a given enum",parent:'10304'},{ty:"method",name:"iter",path:"collections::enum_set",desc:"Returns an iterator over an EnumSet",parent:'10304'},{ty:"method",name:"sub",path:"collections::enum_set",desc:"",parent:'10304'},{ty:"method",name:"bitor",path:"collections::enum_set",desc:"",parent:'10304'},{ty:"method",name:"bitand",path:"collections::enum_set",desc:"",parent:'10304'},{ty:"method",name:"next",path:"collections::enum_set",desc:"",parent:'10854'},{ty:"method",name:"size_hint",path:"collections::enum_set",desc:"",parent:'10854'},{ty:"mod",name:"hashmap",path:"collections",desc:"Unordered containers, implemented as hash-tables (`HashSet` and `HashMap` types)"},{ty:"struct",name:"HashMap",path:"collections::hashmap",desc:"A hash map implementation which uses linear probing with Robin\nHood bucket stealing."},{ty:"struct",name:"HashSet",path:"collections::hashmap",desc:"An implementation of a hash set using the underlying representation of a\nHashMap where the value is (). As with the `HashMap` type, a `HashSet`\nrequires that the elements implement the `Eq` and `Hash` traits."},{ty:"typedef",name:"Entries",path:"collections::hashmap",desc:"HashMap iterator"},{ty:"typedef",name:"MutEntries",path:"collections::hashmap",desc:"HashMap mutable values iterator"},{ty:"typedef",name:"MoveEntries",path:"collections::hashmap",desc:"HashMap move iterator"},{ty:"typedef",name:"Keys",path:"collections::hashmap",desc:"HashMap keys iterator"},{ty:"typedef",name:"Values",path:"collections::hashmap",desc:"HashMap values iterator"},{ty:"typedef",name:"SetItems",path:"collections::hashmap",desc:"HashSet iterator"},{ty:"typedef",name:"SetMoveItems",path:"collections::hashmap",desc:"HashSet move iterator"},{ty:"typedef",name:"SetAlgebraItems",path:"collections::hashmap",desc:"Set operations iterator"},{ty:"method",name:"clone",path:"collections::hashmap",desc:"",parent:'13004'},{ty:"method",name:"len",path:"collections::hashmap",desc:"Return the number of elements in the map",parent:'13004'},{ty:"method",name:"clear",path:"collections::hashmap",desc:"Clear the map, removing all key-value pairs.",parent:'13004'},{ty:"method",name:"find",path:"collections::hashmap",desc:"",parent:'13004'},{ty:"method",name:"contains_key",path:"collections::hashmap",desc:"",parent:'13004'},{ty:"method",name:"find_mut",path:"collections::hashmap",desc:"",parent:'13004'},{ty:"method",name:"swap",path:"collections::hashmap",desc:"",parent:'13004'},{ty:"method",name:"pop",path:"collections::hashmap",desc:"",parent:'13004'},{ty:"method",name:"new",path:"collections::hashmap",desc:"Create an empty HashMap.",parent:'13004'},{ty:"method",name:"with_capacity",path:"collections::hashmap",desc:"",parent:'13004'},{ty:"method",name:"with_hasher",path:"collections::hashmap",desc:"",parent:'13004'},{ty:"method",name:"with_capacity_and_hasher",path:"collections::hashmap",desc:"Create an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",parent:'13004'},{ty:"method",name:"reserve",path:"collections::hashmap",desc:"The hashtable will never try to shrink below this size. You can use\nthis function to reduce reallocations if your hashtable frequently\ngrows and shrinks by large amounts.",parent:'13004'},{ty:"method",name:"find_or_insert",path:"collections::hashmap",desc:"Return the value corresponding to the key in the map, or insert\nand return the value if it doesn't exist.",parent:'13004'},{ty:"method",name:"find_or_insert_with",path:"collections::hashmap",desc:"Return the value corresponding to the key in the map, or create,\ninsert, and return a new value if it doesn't exist.",parent:'13004'},{ty:"method",name:"insert_or_update_with",path:"collections::hashmap",desc:"Insert a key-value pair into the map if the key is not already present.\nOtherwise, modify the existing value for the key.\nReturns the new or modified value for the key.",parent:'13004'},{ty:"method",name:"get",path:"collections::hashmap",desc:"Retrieves a value for the given key, failing if the key is not present.",parent:'13004'},{ty:"method",name:"get_mut",path:"collections::hashmap",desc:"Retrieves a (mutable) value for the given key, failing if the key is not present.",parent:'13004'},{ty:"method",name:"contains_key_equiv",path:"collections::hashmap",desc:"Return true if the map contains a value for the specified key,\nusing equivalence.",parent:'13004'},{ty:"method",name:"find_equiv",path:"collections::hashmap",desc:"Return the value corresponding to the key in the map, using\nequivalence.",parent:'13004'},{ty:"method",name:"keys",path:"collections::hashmap",desc:"An iterator visiting all keys in arbitrary order.\nIterator element type is &'a K.",parent:'13004'},{ty:"method",name:"values",path:"collections::hashmap",desc:"An iterator visiting all values in arbitrary order.\nIterator element type is &'a V.",parent:'13004'},{ty:"method",name:"iter",path:"collections::hashmap",desc:"An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is (&'a K, &'a V).",parent:'13004'},{ty:"method",name:"mut_iter",path:"collections::hashmap",desc:"An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is (&'a K, &'a mut V).",parent:'13004'},{ty:"method",name:"move_iter",path:"collections::hashmap",desc:"Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",parent:'13004'},{ty:"method",name:"find_copy",path:"collections::hashmap",desc:"Like `find`, but returns a copy of the value.",parent:'13004'},{ty:"method",name:"get_copy",path:"collections::hashmap",desc:"Like `get`, but returns a copy of the value.",parent:'13004'},{ty:"method",name:"eq",path:"collections::hashmap",desc:"",parent:'13004'},{ty:"method",name:"fmt",path:"collections::hashmap",desc:"",parent:'13004'},{ty:"method",name:"default",path:"collections::hashmap",desc:"",parent:'13004'},{ty:"method",name:"from_iterator",path:"collections::hashmap",desc:"",parent:'13004'},{ty:"method",name:"extend",path:"collections::hashmap",desc:"",parent:'13004'},{ty:"method",name:"clone",path:"collections::hashmap",desc:"",parent:'16570'},{ty:"method",name:"eq",path:"collections::hashmap",desc:"",parent:'16570'},{ty:"method",name:"len",path:"collections::hashmap",desc:"Return the number of elements in the set",parent:'16570'},{ty:"method",name:"clear",path:"collections::hashmap",desc:"Clear the set, removing all values.",parent:'16570'},{ty:"method",name:"contains",path:"collections::hashmap",desc:"Return true if the set contains a value",parent:'16570'},{ty:"method",name:"is_disjoint",path:"collections::hashmap",desc:"Return true if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",parent:'16570'},{ty:"method",name:"is_subset",path:"collections::hashmap",desc:"Return true if the set is a subset of another",parent:'16570'},{ty:"method",name:"is_superset",path:"collections::hashmap",desc:"Return true if the set is a superset of another",parent:'16570'},{ty:"method",name:"insert",path:"collections::hashmap",desc:"Add a value to the set. Return true if the value was not already\npresent in the set.",parent:'16570'},{ty:"method",name:"remove",path:"collections::hashmap",desc:"Remove a value from the set. Return true if the value was\npresent in the set.",parent:'16570'},{ty:"method",name:"new",path:"collections::hashmap",desc:"Create an empty HashSet",parent:'16570'},{ty:"method",name:"with_capacity",path:"collections::hashmap",desc:"Create an empty HashSet with space for at least `n` elements in\nthe hash table.",parent:'16570'},{ty:"method",name:"with_hasher",path:"collections::hashmap",desc:"",parent:'16570'},{ty:"method",name:"with_capacity_and_hasher",path:"collections::hashmap",desc:"Create an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",parent:'16570'},{ty:"method",name:"reserve",path:"collections::hashmap",desc:"Reserve space for at least `n` elements in the hash table.",parent:'16570'},{ty:"method",name:"contains_equiv",path:"collections::hashmap",desc:"Returns true if the hash set contains a value equivalent to the\ngiven query value.",parent:'16570'},{ty:"method",name:"iter",path:"collections::hashmap",desc:"An iterator visiting all elements in arbitrary order.\nIterator element type is &'a T.",parent:'16570'},{ty:"method",name:"move_iter",path:"collections::hashmap",desc:"Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",parent:'16570'},{ty:"method",name:"difference",path:"collections::hashmap",desc:"Visit the values representing the difference",parent:'16570'},{ty:"method",name:"symmetric_difference",path:"collections::hashmap",desc:"Visit the values representing the symmetric difference",parent:'16570'},{ty:"method",name:"intersection",path:"collections::hashmap",desc:"Visit the values representing the intersection",parent:'16570'},{ty:"method",name:"union",path:"collections::hashmap",desc:"Visit the values representing the union",parent:'16570'},{ty:"method",name:"fmt",path:"collections::hashmap",desc:"",parent:'16570'},{ty:"method",name:"from_iterator",path:"collections::hashmap",desc:"",parent:'16570'},{ty:"method",name:"extend",path:"collections::hashmap",desc:"",parent:'16570'},{ty:"method",name:"default",path:"collections::hashmap",desc:"",parent:'16570'},{ty:"mod",name:"list",path:"collections",desc:"A standard, garbage-collected linked list."},{ty:"struct",name:"Items",path:"collections::list",desc:""},{ty:"enum",name:"List",path:"collections::list",desc:""},{ty:"variant",name:"Cons",path:"collections::list",desc:"",parent:'17754'},{ty:"variant",name:"Nil",path:"collections::list",desc:"",parent:'17754'},{ty:"method",name:"eq",path:"collections::list",desc:"",parent:'17754'},{ty:"method",name:"ne",path:"collections::list",desc:"",parent:'17754'},{ty:"method",name:"clone",path:"collections::list",desc:"",parent:'17754'},{ty:"method",name:"next",path:"collections::list",desc:"",parent:'17920'},{ty:"method",name:"iter",path:"collections::list",desc:"Returns a forward iterator",parent:'17754'},{ty:"method",name:"head",path:"collections::list",desc:"Returns the first element of a list",parent:'17754'},{ty:"method",name:"tail",path:"collections::list",desc:"Returns all but the first element of a list",parent:'17754'},{ty:"method",name:"len",path:"collections::list",desc:"Returns the length of a list",parent:'17754'},{ty:"method",name:"is_empty",path:"collections::list",desc:"Returns true if the list is empty",parent:'17754'},{ty:"method",name:"contains",path:"collections::list",desc:"Returns true if a list contains an element with the given value",parent:'17754'},{ty:"method",name:"from_vec",path:"collections::list",desc:"Create a list from a vector",parent:'17754'},{ty:"method",name:"append",path:"collections::list",desc:"Appends one list to another, returning a new list",parent:'17754'},{ty:"method",name:"unshift",path:"collections::list",desc:"Push one element into the front of a list, returning a new list",parent:'17754'},{ty:"mod",name:"lru_cache",path:"collections",desc:"A cache that holds a limited number of key-value pairs. When the\ncapacity of the cache is exceeded, the least-recently-used\n(where \"used\" means a look-up or putting the pair into the cache)\npair is automatically removed."},{ty:"struct",name:"LruCache",path:"collections::lru_cache",desc:"An LRU Cache."},{ty:"method",name:"new",path:"collections::lru_cache",desc:"Create an LRU Cache that holds at most `capacity` items.",parent:'18291'},{ty:"method",name:"put",path:"collections::lru_cache",desc:"Put a key-value pair into cache.",parent:'18291'},{ty:"method",name:"get",path:"collections::lru_cache",desc:"Return a value corresponding to the key in the cache.",parent:'18291'},{ty:"method",name:"pop",path:"collections::lru_cache",desc:"Remove and return a value corresponding to the key from the cache.",parent:'18291'},{ty:"method",name:"capacity",path:"collections::lru_cache",desc:"Return the maximum number of key-value pairs the cache can hold.",parent:'18291'},{ty:"method",name:"change_capacity",path:"collections::lru_cache",desc:"Change the number of key-value pairs the cache can hold. Remove\nleast-recently-used key-value pairs if necessary.",parent:'18291'},{ty:"method",name:"fmt",path:"collections::lru_cache",desc:"Return a string that lists the key-value pairs from most-recently\nused to least-recently used.",parent:'18291'},{ty:"method",name:"len",path:"collections::lru_cache",desc:"Return the number of key-value pairs in the cache.",parent:'18291'},{ty:"method",name:"clear",path:"collections::lru_cache",desc:"Clear the cache of all key-value pairs.",parent:'18291'},{ty:"method",name:"drop",path:"collections::lru_cache",desc:"",parent:'18291'},{ty:"mod",name:"priority_queue",path:"collections",desc:"A priority queue implemented with a binary heap"},{ty:"struct",name:"PriorityQueue",path:"collections::priority_queue",desc:"A priority queue implemented with a binary heap"},{ty:"struct",name:"Items",path:"collections::priority_queue",desc:"PriorityQueue iterator"},{ty:"method",name:"clone",path:"collections::priority_queue",desc:"",parent:'19718'},{ty:"method",name:"len",path:"collections::priority_queue",desc:"Returns the length of the queue",parent:'19718'},{ty:"method",name:"clear",path:"collections::priority_queue",desc:"Drop all items from the queue",parent:'19718'},{ty:"method",name:"iter",path:"collections::priority_queue",desc:"An iterator visiting all values in underlying vector, in\narbitrary order.",parent:'19718'},{ty:"method",name:"top",path:"collections::priority_queue",desc:"Returns the greatest item in the queue - fails if empty",parent:'19718'},{ty:"method",name:"maybe_top",path:"collections::priority_queue",desc:"Returns the greatest item in the queue - None if empty",parent:'19718'},{ty:"method",name:"capacity",path:"collections::priority_queue",desc:"Returns the number of elements the queue can hold without reallocating",parent:'19718'},{ty:"method",name:"reserve_exact",path:"collections::priority_queue",desc:"Reserve capacity for exactly n elements in the PriorityQueue.\nDo nothing if the capacity is already sufficient.",parent:'19718'},{ty:"method",name:"reserve",path:"collections::priority_queue",desc:"Reserve capacity for at least n elements in the PriorityQueue.\nDo nothing if the capacity is already sufficient.",parent:'19718'},{ty:"method",name:"pop",path:"collections::priority_queue",desc:"Pop the greatest item from the queue - fails if empty",parent:'19718'},{ty:"method",name:"maybe_pop",path:"collections::priority_queue",desc:"Pop the greatest item from the queue - None if empty",parent:'19718'},{ty:"method",name:"push",path:"collections::priority_queue",desc:"Push an item onto the queue",parent:'19718'},{ty:"method",name:"push_pop",path:"collections::priority_queue",desc:"Optimized version of a push followed by a pop",parent:'19718'},{ty:"method",name:"replace",path:"collections::priority_queue",desc:"Optimized version of a pop followed by a push - fails if empty",parent:'19718'},{ty:"method",name:"to_vec",path:"collections::priority_queue",desc:"Consume the PriorityQueue and return the underlying vector",parent:'19718'},{ty:"method",name:"to_sorted_vec",path:"collections::priority_queue",desc:"Consume the PriorityQueue and return a vector in sorted\n(ascending) order",parent:'19718'},{ty:"method",name:"new",path:"collections::priority_queue",desc:"Create an empty PriorityQueue",parent:'19718'},{ty:"method",name:"from_vec",path:"collections::priority_queue",desc:"Create a PriorityQueue from a vector (heapify)",parent:'19718'},{ty:"method",name:"next",path:"collections::priority_queue",desc:"",parent:'20383'},{ty:"method",name:"size_hint",path:"collections::priority_queue",desc:"",parent:'20383'},{ty:"method",name:"from_iterator",path:"collections::priority_queue",desc:"",parent:'19718'},{ty:"method",name:"extend",path:"collections::priority_queue",desc:"",parent:'19718'},{ty:"mod",name:"ringbuf",path:"collections",desc:"A double-ended queue implemented as a circular buffer"},{ty:"struct",name:"RingBuf",path:"collections::ringbuf",desc:"RingBuf is a circular buffer that implements Deque."},{ty:"struct",name:"Items",path:"collections::ringbuf",desc:"RingBuf iterator"},{ty:"struct",name:"MutItems",path:"collections::ringbuf",desc:"RingBuf mutable iterator"},{ty:"method",name:"clone",path:"collections::ringbuf",desc:"",parent:'20551'},{ty:"method",name:"len",path:"collections::ringbuf",desc:"Return the number of elements in the RingBuf",parent:'20551'},{ty:"method",name:"clear",path:"collections::ringbuf",desc:"Clear the RingBuf, removing all values.",parent:'20551'},{ty:"method",name:"front",path:"collections::ringbuf",desc:"Return a reference to the first element in the RingBuf",parent:'20551'},{ty:"method",name:"front_mut",path:"collections::ringbuf",desc:"Return a mutable reference to the first element in the RingBuf",parent:'20551'},{ty:"method",name:"back",path:"collections::ringbuf",desc:"Return a reference to the last element in the RingBuf",parent:'20551'},{ty:"method",name:"back_mut",path:"collections::ringbuf",desc:"Return a mutable reference to the last element in the RingBuf",parent:'20551'},{ty:"method",name:"pop_front",path:"collections::ringbuf",desc:"Remove and return the first element in the RingBuf, or None if it is empty",parent:'20551'},{ty:"method",name:"pop_back",path:"collections::ringbuf",desc:"Remove and return the last element in the RingBuf, or None if it is empty",parent:'20551'},{ty:"method",name:"push_front",path:"collections::ringbuf",desc:"Prepend an element to the RingBuf",parent:'20551'},{ty:"method",name:"push_back",path:"collections::ringbuf",desc:"Append an element to the RingBuf",parent:'20551'},{ty:"method",name:"new",path:"collections::ringbuf",desc:"Create an empty RingBuf",parent:'20551'},{ty:"method",name:"with_capacity",path:"collections::ringbuf",desc:"Create an empty RingBuf with space for at least `n` elements.",parent:'20551'},{ty:"method",name:"get",path:"collections::ringbuf",desc:"Retrieve an element in the RingBuf by index",parent:'20551'},{ty:"method",name:"get_mut",path:"collections::ringbuf",desc:"Retrieve an element in the RingBuf by index",parent:'20551'},{ty:"method",name:"swap",path:"collections::ringbuf",desc:"Swap elements at indices `i` and `j`",parent:'20551'},{ty:"method",name:"reserve_exact",path:"collections::ringbuf",desc:"Reserve capacity for exactly `n` elements in the given RingBuf,\ndoing nothing if `self`'s capacity is already equal to or greater\nthan the requested capacity",parent:'20551'},{ty:"method",name:"reserve",path:"collections::ringbuf",desc:"Reserve capacity for at least `n` elements in the given RingBuf,\nover-allocating in case the caller needs to reserve additional\nspace.",parent:'20551'},{ty:"method",name:"iter",path:"collections::ringbuf",desc:"Front-to-back iterator.",parent:'20551'},{ty:"method",name:"rev_iter",path:"collections::ringbuf",desc:"Back-to-front iterator.",parent:'20551'},{ty:"method",name:"mut_iter",path:"collections::ringbuf",desc:"Front-to-back iterator which returns mutable values.",parent:'20551'},{ty:"method",name:"mut_rev_iter",path:"collections::ringbuf",desc:"Back-to-front iterator which returns mutable values.",parent:'20551'},{ty:"method",name:"next",path:"collections::ringbuf",desc:"",parent:'21483'},{ty:"method",name:"size_hint",path:"collections::ringbuf",desc:"",parent:'21483'},{ty:"method",name:"next_back",path:"collections::ringbuf",desc:"",parent:'21483'},{ty:"method",name:"indexable",path:"collections::ringbuf",desc:"",parent:'21483'},{ty:"method",name:"idx",path:"collections::ringbuf",desc:"",parent:'21483'},{ty:"method",name:"next",path:"collections::ringbuf",desc:"",parent:'21733'},{ty:"method",name:"size_hint",path:"collections::ringbuf",desc:"",parent:'21733'},{ty:"method",name:"next_back",path:"collections::ringbuf",desc:"",parent:'21733'},{ty:"method",name:"eq",path:"collections::ringbuf",desc:"",parent:'20551'},{ty:"method",name:"ne",path:"collections::ringbuf",desc:"",parent:'20551'},{ty:"method",name:"from_iterator",path:"collections::ringbuf",desc:"",parent:'20551'},{ty:"method",name:"extend",path:"collections::ringbuf",desc:"",parent:'20551'},{ty:"mod",name:"smallintmap",path:"collections",desc:"A simple map based on a vector for small integer keys. Space requirements\nare O(highest integer key)."},{ty:"struct",name:"SmallIntMap",path:"collections::smallintmap",desc:""},{ty:"struct",name:"Entries",path:"collections::smallintmap",desc:""},{ty:"struct",name:"MutEntries",path:"collections::smallintmap",desc:""},{ty:"typedef",name:"RevEntries",path:"collections::smallintmap",desc:""},{ty:"typedef",name:"RevMutEntries",path:"collections::smallintmap",desc:""},{ty:"method",name:"len",path:"collections::smallintmap",desc:"Return the number of elements in the map",parent:'22611'},{ty:"method",name:"is_empty",path:"collections::smallintmap",desc:"Return true if there are no elements in the map",parent:'22611'},{ty:"method",name:"clear",path:"collections::smallintmap",desc:"Clear the map, removing all key-value pairs.",parent:'22611'},{ty:"method",name:"find",path:"collections::smallintmap",desc:"Return a reference to the value corresponding to the key",parent:'22611'},{ty:"method",name:"find_mut",path:"collections::smallintmap",desc:"Return a mutable reference to the value corresponding to the key",parent:'22611'},{ty:"method",name:"insert",path:"collections::smallintmap",desc:"Insert a key-value pair into the map. An existing value for a\nkey is replaced by the new value. Return true if the key did\nnot already exist in the map.",parent:'22611'},{ty:"method",name:"remove",path:"collections::smallintmap",desc:"Remove a key-value pair from the map. Return true if the key\nwas present in the map, otherwise false.",parent:'22611'},{ty:"method",name:"swap",path:"collections::smallintmap",desc:"Insert a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise None is returned.",parent:'22611'},{ty:"method",name:"pop",path:"collections::smallintmap",desc:"Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",parent:'22611'},{ty:"method",name:"new",path:"collections::smallintmap",desc:"Create an empty SmallIntMap",parent:'22611'},{ty:"method",name:"get",path:"collections::smallintmap",desc:"",parent:'22611'},{ty:"method",name:"iter",path:"collections::smallintmap",desc:"An iterator visiting all key-value pairs in ascending order by the keys.\nIterator element type is (uint, &'r V)",parent:'22611'},{ty:"method",name:"mut_iter",path:"collections::smallintmap",desc:"An iterator visiting all key-value pairs in ascending order by the keys,\nwith mutable references to the values\nIterator element type is (uint, &'r mut V)",parent:'22611'},{ty:"method",name:"rev_iter",path:"collections::smallintmap",desc:"An iterator visiting all key-value pairs in descending order by the keys.\nIterator element type is (uint, &'r V)",parent:'22611'},{ty:"method",name:"mut_rev_iter",path:"collections::smallintmap",desc:"An iterator visiting all key-value pairs in descending order by the keys,\nwith mutable references to the values\nIterator element type is (uint, &'r mut V)",parent:'22611'},{ty:"method",name:"move_iter",path:"collections::smallintmap",desc:"Empties the hash map, moving all values into the specified closure",parent:'22611'},{ty:"method",name:"update_with_key",path:"collections::smallintmap",desc:"",parent:'22611'},{ty:"method",name:"update",path:"collections::smallintmap",desc:"",parent:'22611'},{ty:"method",name:"next",path:"collections::smallintmap",desc:"",parent:'23224'},{ty:"method",name:"size_hint",path:"collections::smallintmap",desc:"",parent:'23224'},{ty:"method",name:"next_back",path:"collections::smallintmap",desc:"",parent:'23224'},{ty:"method",name:"next",path:"collections::smallintmap",desc:"",parent:'23423'},{ty:"method",name:"size_hint",path:"collections::smallintmap",desc:"",parent:'23423'},{ty:"method",name:"next_back",path:"collections::smallintmap",desc:"",parent:'23423'},{ty:"mod",name:"treemap",path:"collections",desc:"An ordered map and set implemented as self-balancing binary search\ntrees. The only requirement for the types is that the key implements\n`TotalOrd`."},{ty:"struct",name:"TreeMap",path:"collections::treemap",desc:""},{ty:"struct",name:"Entries",path:"collections::treemap",desc:"Lazy forward iterator over a map"},{ty:"struct",name:"RevEntries",path:"collections::treemap",desc:"Lazy backward iterator over a map"},{ty:"struct",name:"MutEntries",path:"collections::treemap",desc:"Lazy forward iterator over a map that allows for the mutation of\nthe values."},{ty:"struct",name:"RevMutEntries",path:"collections::treemap",desc:"Lazy backward iterator over a map"},{ty:"struct",name:"MoveEntries",path:"collections::treemap",desc:"Lazy forward iterator over a map that consumes the map while iterating"},{ty:"struct",name:"TreeSet",path:"collections::treemap",desc:"A implementation of the `Set` trait on top of the `TreeMap` container. The\nonly requirement is that the type of the elements contained ascribes to the\n`TotalOrd` trait."},{ty:"struct",name:"SetItems",path:"collections::treemap",desc:"Lazy forward iterator over a set"},{ty:"struct",name:"RevSetItems",path:"collections::treemap",desc:"Lazy backward iterator over a set"},{ty:"struct",name:"DifferenceItems",path:"collections::treemap",desc:"Lazy iterator producing elements in the set difference (in-order)"},{ty:"struct",name:"SymDifferenceItems",path:"collections::treemap",desc:"Lazy iterator producing elements in the set symmetric difference (in-order)"},{ty:"struct",name:"IntersectionItems",path:"collections::treemap",desc:"Lazy iterator producing elements in the set intersection (in-order)"},{ty:"struct",name:"UnionItems",path:"collections::treemap",desc:"Lazy iterator producing elements in the set intersection (in-order)"},{ty:"method",name:"clone",path:"collections::treemap",desc:"",parent:'23631'},{ty:"method",name:"eq",path:"collections::treemap",desc:"",parent:'23631'},{ty:"method",name:"lt",path:"collections::treemap",desc:"",parent:'23631'},{ty:"method",name:"le",path:"collections::treemap",desc:"",parent:'23631'},{ty:"method",name:"ge",path:"collections::treemap",desc:"",parent:'23631'},{ty:"method",name:"gt",path:"collections::treemap",desc:"",parent:'23631'},{ty:"method",name:"len",path:"collections::treemap",desc:"Return the number of elements in the map",parent:'23631'},{ty:"method",name:"is_empty",path:"collections::treemap",desc:"Return true if the map contains no elements",parent:'23631'},{ty:"method",name:"clear",path:"collections::treemap",desc:"Clear the map, removing all key-value pairs.",parent:'23631'},{ty:"method",name:"find",path:"collections::treemap",desc:"Return a reference to the value corresponding to the key",parent:'23631'},{ty:"method",name:"find_mut",path:"collections::treemap",desc:"Return a mutable reference to the value corresponding to the key",parent:'23631'},{ty:"method",name:"swap",path:"collections::treemap",desc:"Insert a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise None is returned.",parent:'23631'},{ty:"method",name:"pop",path:"collections::treemap",desc:"Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",parent:'23631'},{ty:"method",name:"new",path:"collections::treemap",desc:"Create an empty TreeMap",parent:'23631'},{ty:"method",name:"iter",path:"collections::treemap",desc:"Get a lazy iterator over the key-value pairs in the map.\nRequires that it be frozen (immutable).",parent:'23631'},{ty:"method",name:"rev_iter",path:"collections::treemap",desc:"Get a lazy reverse iterator over the key-value pairs in the map.\nRequires that it be frozen (immutable).",parent:'23631'},{ty:"method",name:"mut_iter",path:"collections::treemap",desc:"Get a lazy forward iterator over the key-value pairs in the\nmap, with the values being mutable.",parent:'23631'},{ty:"method",name:"mut_rev_iter",path:"collections::treemap",desc:"Get a lazy reverse iterator over the key-value pairs in the\nmap, with the values being mutable.",parent:'23631'},{ty:"method",name:"move_iter",path:"collections::treemap",desc:"Get a lazy iterator that consumes the treemap.",parent:'23631'},{ty:"method",name:"lower_bound",path:"collections::treemap",desc:"Return a lazy iterator to the first key-value pair whose key is not less than `k`\nIf all keys in map are less than `k` an empty iterator is returned.",parent:'23631'},{ty:"method",name:"upper_bound",path:"collections::treemap",desc:"Return a lazy iterator to the first key-value pair whose key is greater than `k`\nIf all keys in map are not greater than `k` an empty iterator is returned.",parent:'23631'},{ty:"method",name:"mut_lower_bound",path:"collections::treemap",desc:"Return a lazy value iterator to the first key-value pair (with\nthe value being mutable) whose key is not less than `k`.",parent:'23631'},{ty:"method",name:"mut_upper_bound",path:"collections::treemap",desc:"Return a lazy iterator to the first key-value pair (with the\nvalue being mutable) whose key is greater than `k`.",parent:'23631'},{ty:"method",name:"next",path:"collections::treemap",desc:"Advance the iterator to the next node (in order) and return a\ntuple with a reference to the key and value. If there are no\nmore nodes, return `None`.",parent:'24714'},{ty:"method",name:"size_hint",path:"collections::treemap",desc:"",parent:'24714'},{ty:"method",name:"next",path:"collections::treemap",desc:"",parent:'24743'},{ty:"method",name:"size_hint",path:"collections::treemap",desc:"",parent:'24743'},{ty:"method",name:"next",path:"collections::treemap",desc:"Advance the iterator to the next node (in order) and return a\ntuple with a reference to the key and value. If there are no\nmore nodes, return `None`.",parent:'24755'},{ty:"method",name:"size_hint",path:"collections::treemap",desc:"",parent:'24755'},{ty:"method",name:"next",path:"collections::treemap",desc:"",parent:'24784'},{ty:"method",name:"size_hint",path:"collections::treemap",desc:"",parent:'24784'},{ty:"method",name:"next",path:"collections::treemap",desc:"",parent:'25604'},{ty:"method",name:"size_hint",path:"collections::treemap",desc:"",parent:'25604'},{ty:"method",name:"next",path:"collections::treemap",desc:"Advance the iterator to the next node (in order). If there are no more nodes, return `None`.",parent:'26412'},{ty:"method",name:"next",path:"collections::treemap",desc:"Advance the iterator to the next node (in order). If there are no more nodes, return `None`.",parent:'26422'},{ty:"method",name:"clone",path:"collections::treemap",desc:"",parent:'25813'},{ty:"method",name:"eq",path:"collections::treemap",desc:"",parent:'25813'},{ty:"method",name:"ne",path:"collections::treemap",desc:"",parent:'25813'},{ty:"method",name:"lt",path:"collections::treemap",desc:"",parent:'25813'},{ty:"method",name:"le",path:"collections::treemap",desc:"",parent:'25813'},{ty:"method",name:"ge",path:"collections::treemap",desc:"",parent:'25813'},{ty:"method",name:"gt",path:"collections::treemap",desc:"",parent:'25813'},{ty:"method",name:"len",path:"collections::treemap",desc:"Return the number of elements in the set",parent:'25813'},{ty:"method",name:"is_empty",path:"collections::treemap",desc:"Return true if the set contains no elements",parent:'25813'},{ty:"method",name:"clear",path:"collections::treemap",desc:"Clear the set, removing all values.",parent:'25813'},{ty:"method",name:"contains",path:"collections::treemap",desc:"Return true if the set contains a value",parent:'25813'},{ty:"method",name:"is_disjoint",path:"collections::treemap",desc:"Return true if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",parent:'25813'},{ty:"method",name:"is_subset",path:"collections::treemap",desc:"Return true if the set is a subset of another",parent:'25813'},{ty:"method",name:"is_superset",path:"collections::treemap",desc:"Return true if the set is a superset of another",parent:'25813'},{ty:"method",name:"insert",path:"collections::treemap",desc:"Add a value to the set. Return true if the value was not already\npresent in the set.",parent:'25813'},{ty:"method",name:"remove",path:"collections::treemap",desc:"Remove a value from the set. Return true if the value was\npresent in the set.",parent:'25813'},{ty:"method",name:"new",path:"collections::treemap",desc:"Create an empty TreeSet",parent:'25813'},{ty:"method",name:"iter",path:"collections::treemap",desc:"Get a lazy iterator over the values in the set.\nRequires that it be frozen (immutable).",parent:'25813'},{ty:"method",name:"rev_iter",path:"collections::treemap",desc:"Get a lazy iterator over the values in the set.\nRequires that it be frozen (immutable).",parent:'25813'},{ty:"method",name:"lower_bound",path:"collections::treemap",desc:"Get a lazy iterator pointing to the first value not less than `v` (greater or equal).\nIf all elements in the set are less than `v` empty iterator is returned.",parent:'25813'},{ty:"method",name:"upper_bound",path:"collections::treemap",desc:"Get a lazy iterator pointing to the first value greater than `v`.\nIf all elements in the set are not greater than `v` empty iterator is returned.",parent:'25813'},{ty:"method",name:"difference",path:"collections::treemap",desc:"Visit the values (in-order) representing the difference",parent:'25813'},{ty:"method",name:"symmetric_difference",path:"collections::treemap",desc:"Visit the values (in-order) representing the symmetric difference",parent:'25813'},{ty:"method",name:"intersection",path:"collections::treemap",desc:"Visit the values (in-order) representing the intersection",parent:'25813'},{ty:"method",name:"union",path:"collections::treemap",desc:"Visit the values (in-order) representing the union",parent:'25813'},{ty:"method",name:"next",path:"collections::treemap",desc:"",parent:'26432'},{ty:"method",name:"next",path:"collections::treemap",desc:"",parent:'26459'},{ty:"method",name:"next",path:"collections::treemap",desc:"",parent:'26486'},{ty:"method",name:"next",path:"collections::treemap",desc:"",parent:'26513'},{ty:"method",name:"from_iterator",path:"collections::treemap",desc:"",parent:'23631'},{ty:"method",name:"extend",path:"collections::treemap",desc:"",parent:'23631'},{ty:"method",name:"from_iterator",path:"collections::treemap",desc:"",parent:'25813'},{ty:"method",name:"extend",path:"collections::treemap",desc:"",parent:'25813'},{ty:"mod",name:"trie",path:"collections",desc:"Ordered containers with integer keys, implemented as radix tries (`TrieSet` and `TrieMap` types)"},{ty:"struct",name:"TrieMap",path:"collections::trie",desc:""},{ty:"struct",name:"TrieSet",path:"collections::trie",desc:""},{ty:"struct",name:"Entries",path:"collections::trie",desc:"Forward iterator over a map"},{ty:"struct",name:"MutEntries",path:"collections::trie",desc:"Forward iterator over the key-value pairs of a map, with the\nvalues being mutable."},{ty:"struct",name:"SetItems",path:"collections::trie",desc:"Forward iterator over a set"},{ty:"method",name:"len",path:"collections::trie",desc:"Return the number of elements in the map",parent:'27989'},{ty:"method",name:"clear",path:"collections::trie",desc:"Clear the map, removing all values.",parent:'27989'},{ty:"method",name:"find",path:"collections::trie",desc:"Return a reference to the value corresponding to the key",parent:'27989'},{ty:"method",name:"find_mut",path:"collections::trie",desc:"Return a mutable reference to the value corresponding to the key",parent:'27989'},{ty:"method",name:"swap",path:"collections::trie",desc:"Insert a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise None is returned.",parent:'27989'},{ty:"method",name:"pop",path:"collections::trie",desc:"Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",parent:'27989'},{ty:"method",name:"new",path:"collections::trie",desc:"Create an empty TrieMap",parent:'27989'},{ty:"method",name:"each_reverse",path:"collections::trie",desc:"Visit all key-value pairs in reverse order",parent:'27989'},{ty:"method",name:"iter",path:"collections::trie",desc:"Get an iterator over the key-value pairs in the map",parent:'27989'},{ty:"method",name:"mut_iter",path:"collections::trie",desc:"Get an iterator over the key-value pairs in the map, with the\nability to mutate the values.",parent:'27989'},{ty:"method",name:"lower_bound",path:"collections::trie",desc:"Get an iterator pointing to the first key-value pair whose key is not less than `key`.\nIf all keys in the map are less than `key` an empty iterator is returned.",parent:'27989'},{ty:"method",name:"upper_bound",path:"collections::trie",desc:"Get an iterator pointing to the first key-value pair whose key is greater than `key`.\nIf all keys in the map are not greater than `key` an empty iterator is returned.",parent:'27989'},{ty:"method",name:"mut_lower_bound",path:"collections::trie",desc:"Get an iterator pointing to the first key-value pair whose key is not less than `key`.\nIf all keys in the map are less than `key` an empty iterator is returned.",parent:'27989'},{ty:"method",name:"mut_upper_bound",path:"collections::trie",desc:"Get an iterator pointing to the first key-value pair whose key is greater than `key`.\nIf all keys in the map are not greater than `key` an empty iterator is returned.",parent:'27989'},{ty:"method",name:"from_iterator",path:"collections::trie",desc:"",parent:'27989'},{ty:"method",name:"extend",path:"collections::trie",desc:"",parent:'27989'},{ty:"method",name:"len",path:"collections::trie",desc:"Return the number of elements in the set",parent:'28926'},{ty:"method",name:"clear",path:"collections::trie",desc:"Clear the set, removing all values.",parent:'28926'},{ty:"method",name:"new",path:"collections::trie",desc:"Create an empty TrieSet",parent:'28926'},{ty:"method",name:"contains",path:"collections::trie",desc:"Return true if the set contains a value",parent:'28926'},{ty:"method",name:"insert",path:"collections::trie",desc:"Add a value to the set. Return true if the value was not already\npresent in the set.",parent:'28926'},{ty:"method",name:"remove",path:"collections::trie",desc:"Remove a value from the set. Return true if the value was\npresent in the set.",parent:'28926'},{ty:"method",name:"each_reverse",path:"collections::trie",desc:"Visit all values in reverse order",parent:'28926'},{ty:"method",name:"iter",path:"collections::trie",desc:"Get an iterator over the values in the set",parent:'28926'},{ty:"method",name:"lower_bound",path:"collections::trie",desc:"Get an iterator pointing to the first value that is not less than `val`.\nIf all values in the set are less than `val` an empty iterator is returned.",parent:'28926'},{ty:"method",name:"upper_bound",path:"collections::trie",desc:"Get an iterator pointing to the first value that key is greater than `val`.\nIf all values in the set are not greater than `val` an empty iterator is returned.",parent:'28926'},{ty:"method",name:"from_iterator",path:"collections::trie",desc:"",parent:'28926'},{ty:"method",name:"extend",path:"collections::trie",desc:"",parent:'28926'},{ty:"method",name:"next",path:"collections::trie",desc:"",parent:'29683'},{ty:"method",name:"size_hint",path:"collections::trie",desc:"",parent:'29683'},{ty:"method",name:"next",path:"collections::trie",desc:"",parent:'29705'},{ty:"method",name:"size_hint",path:"collections::trie",desc:"",parent:'29705'},{ty:"method",name:"next",path:"collections::trie",desc:"",parent:'30137'},{ty:"method",name:"size_hint",path:"collections::trie",desc:"",parent:'30137'}];allPaths['collections'] = {'2533':{type:'fn',name:'from_fn'},'16302':{type:'typedef',name:'MutEntries'},'10854':{type:'struct',name:'Items'},'23423':{type:'struct',name:'MutEntries'},'23413':{type:'typedef',name:'RevEntries'},'8120':{type:'trait',name:'Deque'},'28926':{type:'struct',name:'TrieSet'},'23622':{type:'mod',name:'treemap'},'2510':{type:'fn',name:'from_bools'},'30137':{type:'struct',name:'SetItems'},'2682':{type:'struct',name:'Bits'},'23612':{type:'typedef',name:'RevMutEntries'},'1179':{type:'struct',name:'Bitv'},'23631':{type:'struct',name:'TreeMap'},'20383':{type:'struct',name:'Items'},'2457':{type:'fn',name:'from_bytes'},'18248':{type:'mod',name:'lru_cache'},'23':{type:'mod',name:'bitv'},'8215':{type:'struct',name:'DList'},'4453':{type:'mod',name:'btree'},'8205':{type:'mod',name:'dlist'},'17920':{type:'struct',name:'Items'},'10304':{type:'struct',name:'EnumSet'},'8117':{type:'mod',name:'deque'},'26513':{type:'struct',name:'UnionItems'},'4457':{type:'struct',name:'BTree'},'8264':{type:'struct',name:'Items'},'20535':{type:'mod',name:'ringbuf'},'18291':{type:'struct',name:'LruCache'},'4369':{type:'struct',name:'BitPositions'},'17765':{type:'enum',name:'List'},'17764':{type:'enum',name:'List'},'10550':{type:'trait',name:'CLike'},'26459':{type:'struct',name:'SymDifferenceItems'},'25604':{type:'struct',name:'MoveEntries'},'23224':{type:'struct',name:'Entries'},'22603':{type:'mod',name:'smallintmap'},'27989':{type:'struct',name:'TrieMap'},'20551':{type:'struct',name:'RingBuf'},'13004':{type:'struct',name:'HashMap'},'21483':{type:'struct',name:'Items'},'24784':{type:'struct',name:'RevMutEntries'},'26412':{type:'struct',name:'SetItems'},'27941':{type:'mod',name:'trie'},'19718':{type:'struct',name:'PriorityQueue'},'26422':{type:'struct',name:'RevSetItems'},'2860':{type:'struct',name:'BitvSet'},'24755':{type:'struct',name:'MutEntries'},'8305':{type:'struct',name:'MutItems'},'26432':{type:'struct',name:'DifferenceItems'},'10301':{type:'mod',name:'enum_set'},'16530':{type:'typedef',name:'SetItems'},'21733':{type:'struct',name:'MutItems'},'9810':{type:'trait',name:'ListInsertion'},'19709':{type:'mod',name:'priority_queue'},'29683':{type:'struct',name:'Entries'},'29705':{type:'struct',name:'MutEntries'},'16337':{type:'typedef',name:'Keys'},'16554':{type:'typedef',name:'SetMoveItems'},'22611':{type:'struct',name:'SmallIntMap'},'17751':{type:'mod',name:'list'},'10976':{type:'mod',name:'hashmap'},'0':{type:'mod',name:'collections'},'17754':{type:'enum',name:'List'},'16364':{type:'typedef',name:'Values'},'17710':{type:'typedef',name:'SetAlgebraItems'},'24743':{type:'struct',name:'RevEntries'},'16291':{type:'typedef',name:'Entries'},'26486':{type:'struct',name:'IntersectionItems'},'24714':{type:'struct',name:'Entries'},'16313':{type:'typedef',name:'MoveEntries'},'16570':{type:'struct',name:'HashSet'},'8332':{type:'struct',name:'MoveItems'},'25813':{type:'struct',name:'TreeSet'}};

searchIndex['getopts'] = [{ty:"mod",name:"",path:"getopts",desc:"Simple getopt alternative."},{ty:"struct",name:"Opt",path:"getopts",desc:"A description of a possible option."},{ty:"structfield",name:"name",path:"getopts",desc:"Name of the option",parent:'374'},{ty:"structfield",name:"hasarg",path:"getopts",desc:"Whether it has an argument",parent:'374'},{ty:"structfield",name:"occur",path:"getopts",desc:"How often it can occur",parent:'374'},{ty:"struct",name:"OptGroup",path:"getopts",desc:"One group of options, e.g., both -h and --help, along with\ntheir shared description and properties."},{ty:"structfield",name:"short_name",path:"getopts",desc:"Short Name of the `OptGroup`",parent:'559'},{ty:"structfield",name:"long_name",path:"getopts",desc:"Long Name of the `OptGroup`",parent:'559'},{ty:"structfield",name:"hint",path:"getopts",desc:"Hint",parent:'559'},{ty:"structfield",name:"desc",path:"getopts",desc:"Description",parent:'559'},{ty:"structfield",name:"hasarg",path:"getopts",desc:"Whether it has an argument",parent:'559'},{ty:"structfield",name:"occur",path:"getopts",desc:"How often it can occur",parent:'559'},{ty:"struct",name:"Matches",path:"getopts",desc:"The result of checking command line arguments. Contains a vector\nof matches and a vector of free strings."},{ty:"structfield",name:"free",path:"getopts",desc:"Free string fragments",parent:'925'},{ty:"enum",name:"Name",path:"getopts",desc:"Name of an option. Either a string or a single char."},{ty:"variant",name:"Long",path:"getopts",desc:"A string representing the long name of an option.\nFor example: \"help\"",parent:'12'},{ty:"variant",name:"Short",path:"getopts",desc:"A char representing the short name of an option.\nFor example: 'h'",parent:'12'},{ty:"enum",name:"HasArg",path:"getopts",desc:"Describes whether an option has an argument."},{ty:"variant",name:"Yes",path:"getopts",desc:"The option requires an argument.",parent:'162'},{ty:"variant",name:"No",path:"getopts",desc:"The option is just a flag, therefore no argument.",parent:'162'},{ty:"variant",name:"Maybe",path:"getopts",desc:"The option argument is optional and it could or not exist.",parent:'162'},{ty:"enum",name:"Occur",path:"getopts",desc:"Describes how often an option may occur."},{ty:"variant",name:"Req",path:"getopts",desc:"The option occurs once.",parent:'268'},{ty:"variant",name:"Optional",path:"getopts",desc:"The option could or not occur.",parent:'268'},{ty:"variant",name:"Multi",path:"getopts",desc:"The option occurs once or multiple times.",parent:'268'},{ty:"enum",name:"Fail_",path:"getopts",desc:"The type returned when the command line does not conform to the\nexpected format. Call the `to_err_msg` method to retrieve the\nerror as a string."},{ty:"variant",name:"ArgumentMissing",path:"getopts",desc:"The option requires an argument but none was passed.",parent:'1087'},{ty:"variant",name:"UnrecognizedOption",path:"getopts",desc:"The passed option is not declared among the possible options.",parent:'1087'},{ty:"variant",name:"OptionMissing",path:"getopts",desc:"A required option is not present.",parent:'1087'},{ty:"variant",name:"OptionDuplicated",path:"getopts",desc:"A single occurence option is being used multiple times.",parent:'1087'},{ty:"variant",name:"UnexpectedArgument",path:"getopts",desc:"There's an argument being passed to a non-argument option.",parent:'1087'},{ty:"enum",name:"FailType",path:"getopts",desc:"The type of failure that occurred."},{ty:"variant",name:"ArgumentMissing_",path:"getopts",desc:"",parent:'1765'},{ty:"variant",name:"UnrecognizedOption_",path:"getopts",desc:"",parent:'1765'},{ty:"variant",name:"OptionMissing_",path:"getopts",desc:"",parent:'1765'},{ty:"variant",name:"OptionDuplicated_",path:"getopts",desc:"",parent:'1765'},{ty:"variant",name:"UnexpectedArgument_",path:"getopts",desc:"",parent:'1765'},{ty:"fn",name:"reqopt",path:"getopts",desc:"Create a long option that is required and takes an argument."},{ty:"fn",name:"optopt",path:"getopts",desc:"Create a long option that is optional and takes an argument."},{ty:"fn",name:"optflag",path:"getopts",desc:"Create a long option that is optional and does not take an argument."},{ty:"fn",name:"optflagmulti",path:"getopts",desc:"Create a long option that can occur more than once and does not\ntake an argument."},{ty:"fn",name:"optflagopt",path:"getopts",desc:"Create a long option that is optional and takes an optional argument."},{ty:"fn",name:"optmulti",path:"getopts",desc:"Create a long option that is optional, takes an argument, and may occur\nmultiple times."},{ty:"fn",name:"opt",path:"getopts",desc:"Create a generic option group, stating all parameters explicitly"},{ty:"fn",name:"getopts",path:"getopts",desc:"Parse command line arguments according to the provided options."},{ty:"fn",name:"usage",path:"getopts",desc:"Derive a usage message from a set of long options."},{ty:"fn",name:"short_usage",path:"getopts",desc:"Derive a short one-line usage summary from a set of long options."},{ty:"typedef",name:"Result",path:"getopts",desc:"The result of parsing a command line with a set of options."},{ty:"method",name:"eq",path:"getopts",desc:"",parent:'12'},{ty:"method",name:"ne",path:"getopts",desc:"",parent:'12'},{ty:"method",name:"clone",path:"getopts",desc:"",parent:'12'},{ty:"method",name:"eq",path:"getopts",desc:"",parent:'162'},{ty:"method",name:"ne",path:"getopts",desc:"",parent:'162'},{ty:"method",name:"clone",path:"getopts",desc:"",parent:'162'},{ty:"method",name:"eq",path:"getopts",desc:"",parent:'268'},{ty:"method",name:"ne",path:"getopts",desc:"",parent:'268'},{ty:"method",name:"clone",path:"getopts",desc:"",parent:'268'},{ty:"method",name:"eq",path:"getopts",desc:"",parent:'374'},{ty:"method",name:"ne",path:"getopts",desc:"",parent:'374'},{ty:"method",name:"clone",path:"getopts",desc:"",parent:'374'},{ty:"method",name:"eq",path:"getopts",desc:"",parent:'559'},{ty:"method",name:"ne",path:"getopts",desc:"",parent:'559'},{ty:"method",name:"clone",path:"getopts",desc:"",parent:'559'},{ty:"method",name:"eq",path:"getopts",desc:"",parent:'925'},{ty:"method",name:"ne",path:"getopts",desc:"",parent:'925'},{ty:"method",name:"clone",path:"getopts",desc:"",parent:'925'},{ty:"method",name:"fmt",path:"getopts",desc:"",parent:'1087'},{ty:"method",name:"eq",path:"getopts",desc:"",parent:'1087'},{ty:"method",name:"ne",path:"getopts",desc:"",parent:'1087'},{ty:"method",name:"clone",path:"getopts",desc:"",parent:'1087'},{ty:"method",name:"eq",path:"getopts",desc:"",parent:'1765'},{ty:"method",name:"ne",path:"getopts",desc:"",parent:'1765'},{ty:"method",name:"long_to_short",path:"getopts",desc:"Translate OptGroup into Opt.\n(Both short and long names correspond to different Opts).",parent:'559'},{ty:"method",name:"opt_present",path:"getopts",desc:"Returns true if an option was matched.",parent:'925'},{ty:"method",name:"opt_count",path:"getopts",desc:"Returns the number of times an option was matched.",parent:'925'},{ty:"method",name:"opts_present",path:"getopts",desc:"Returns true if any of several options were matched.",parent:'925'},{ty:"method",name:"opts_str",path:"getopts",desc:"Returns the string argument supplied to one of several matching options or `None`.",parent:'925'},{ty:"method",name:"opt_strs",path:"getopts",desc:"Returns a vector of the arguments provided to all matches of the given\noption.",parent:'925'},{ty:"method",name:"opt_str",path:"getopts",desc:"Returns the string argument supplied to a matching option or `None`.",parent:'925'},{ty:"method",name:"opt_default",path:"getopts",desc:"Returns the matching string, a default, or none.",parent:'925'},{ty:"method",name:"to_err_msg",path:"getopts",desc:"Convert a `Fail_` enum into an error string.",parent:'1087'}];allPaths['getopts'] = {'1766':{type:'enum',name:'FailType'},'21':{type:'enum',name:'Name'},'3067':{type:'fn',name:'optflagopt'},'2833':{type:'fn',name:'optflag'},'1087':{type:'enum',name:'Fail_'},'1885':{type:'typedef',name:'Result'},'268':{type:'enum',name:'Occur'},'1765':{type:'enum',name:'FailType'},'162':{type:'enum',name:'HasArg'},'271':{type:'enum',name:'Occur'},'1767':{type:'enum',name:'FailType'},'2950':{type:'fn',name:'optflagmulti'},'270':{type:'enum',name:'Occur'},'1092':{type:'enum',name:'Fail_'},'1768':{type:'enum',name:'FailType'},'1770':{type:'enum',name:'FailType'},'3764':{type:'fn',name:'getopts'},'4366':{type:'fn',name:'usage'},'2589':{type:'fn',name:'reqopt'},'559':{type:'struct',name:'OptGroup'},'4806':{type:'fn',name:'short_usage'},'2711':{type:'fn',name:'optopt'},'3189':{type:'fn',name:'optmulti'},'163':{type:'enum',name:'HasArg'},'1097':{type:'enum',name:'Fail_'},'164':{type:'enum',name:'HasArg'},'1102':{type:'enum',name:'Fail_'},'1107':{type:'enum',name:'Fail_'},'925':{type:'struct',name:'Matches'},'0':{type:'mod',name:'getopts'},'3311':{type:'fn',name:'opt'},'374':{type:'struct',name:'Opt'},'12':{type:'enum',name:'Name'},'1112':{type:'enum',name:'Fail_'},'1769':{type:'enum',name:'FailType'},'165':{type:'enum',name:'HasArg'},'17':{type:'enum',name:'Name'},'269':{type:'enum',name:'Occur'}};

searchIndex['sync'] = [{ty:"mod",name:"",path:"sync",desc:"Concurrency-enabled mechanisms and primitives."},{ty:"struct",name:"Arc",path:"sync",desc:"An atomically reference counted wrapper for shared immutable state."},{ty:"struct",name:"MutexArc",path:"sync",desc:"An Arc with mutable data protected by a blocking mutex."},{ty:"struct",name:"RWArc",path:"sync",desc:"A dual-mode Arc protected by a reader-writer lock. The data can be accessed\nmutably or immutably, and immutably-accessing tasks may run concurrently."},{ty:"struct",name:"RWWriteMode",path:"sync",desc:"The \"write permission\" token used for RWArc.write_downgrade()."},{ty:"struct",name:"RWReadMode",path:"sync",desc:"The \"read permission\" token used for RWArc.write_downgrade()."},{ty:"struct",name:"ArcCondvar",path:"sync",desc:"As sync::condvar, a mechanism for unlock-and-descheduling and\nsignaling, for use with the Arc types."},{ty:"struct",name:"CowArc",path:"sync",desc:""},{ty:"struct",name:"Mutex",path:"sync",desc:"A blocking, bounded-waiting, mutual exclusion lock with an associated\nFIFO condition variable."},{ty:"struct",name:"RWLock",path:"sync",desc:"A blocking, no-starvation, reader-writer lock with an associated condvar."},{ty:"struct",name:"Condvar",path:"sync",desc:"A mechanism for atomic-unlock-and-deschedule blocking and signalling."},{ty:"struct",name:"Semaphore",path:"sync",desc:"A counting, blocking, bounded-waiting semaphore."},{ty:"struct",name:"RWLockWriteMode",path:"sync",desc:"The \"write permission\" token used for rwlock.write_downgrade()."},{ty:"struct",name:"RWLockReadMode",path:"sync",desc:"The \"read permission\" token used for rwlock.write_downgrade()."},{ty:"struct",name:"Barrier",path:"sync",desc:"A barrier enables multiple tasks to synchronize the beginning\nof some computation."},{ty:"struct",name:"DuplexStream",path:"sync",desc:"An extension of `pipes::stream` that allows both sending and receiving."},{ty:"struct",name:"SyncSender",path:"sync",desc:"An extension of `pipes::stream` that provides synchronous message sending."},{ty:"struct",name:"SyncReceiver",path:"sync",desc:"An extension of `pipes::stream` that acknowledges each message received."},{ty:"struct",name:"TaskPool",path:"sync",desc:""},{ty:"struct",name:"Future",path:"sync",desc:"A type encapsulating the result of a computation which may not be complete"},{ty:"fn",name:"rendezvous",path:"sync",desc:"Creates a stream whose channel, upon sending a message, blocks until the\nmessage is received."},{ty:"fn",name:"duplex",path:"sync",desc:"Creates a bidirectional stream."},{ty:"mod",name:"one",path:"sync",desc:"A \"once initialization\" primitive"},{ty:"struct",name:"Once",path:"sync::one",desc:"A type which can be used to run a one-time global initialization. This type\nis *unsafe* to use because it is built on top of the `Mutex` in this module.\nIt does not know whether the currently running task is in a green or native\ncontext, and a blocking mutex should *not* be used under normal\ncircumstances on a green task."},{ty:"static",name:"ONCE_INIT",path:"sync::one",desc:"Initialization value for static `Once` values."},{ty:"method",name:"doit",path:"sync::one",desc:"Perform an initialization routine once and only once. The given closure\nwill be executed if this is the first time `doit` has been called, and\notherwise the routine will *not* be invoked.",parent:'4048'},{ty:"mod",name:"mutex",path:"sync",desc:"A proper mutex implementation regardless of the \"flavor of task\" which is\nacquiring the lock."},{ty:"struct",name:"Mutex",path:"sync::mutex",desc:"A mutual exclusion primitive useful for protecting shared data"},{ty:"struct",name:"StaticMutex",path:"sync::mutex",desc:"The static mutex type is provided to allow for static allocation of mutexes."},{ty:"struct",name:"Guard",path:"sync::mutex",desc:"An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked."},{ty:"static",name:"LOCKED",path:"sync::mutex",desc:""},{ty:"static",name:"GREEN_BLOCKED",path:"sync::mutex",desc:""},{ty:"static",name:"NATIVE_BLOCKED",path:"sync::mutex",desc:""},{ty:"static",name:"MUTEX_INIT",path:"sync::mutex",desc:"Static initialization of a mutex. This constant can be used to initialize\nother mutex constants."},{ty:"method",name:"try_lock",path:"sync::mutex",desc:"Attempts to grab this lock, see `Mutex::try_lock`",parent:'1938'},{ty:"method",name:"lock",path:"sync::mutex",desc:"Acquires this lock, see `Mutex::lock`",parent:'1938'},{ty:"method",name:"destroy",path:"sync::mutex",desc:"Deallocates resources associated with this static mutex.",parent:'1938'},{ty:"method",name:"new",path:"sync::mutex",desc:"Creates a new mutex in an unlocked state ready for use.",parent:'1624'},{ty:"method",name:"try_lock",path:"sync::mutex",desc:"Attempts to acquire this lock.",parent:'1624'},{ty:"method",name:"lock",path:"sync::mutex",desc:"Acquires a mutex, blocking the current task until it is able to do so.",parent:'1624'},{ty:"method",name:"drop",path:"sync::mutex",desc:"",parent:'1962'},{ty:"method",name:"drop",path:"sync::mutex",desc:"",parent:'1624'}];allPaths['sync'] = {'6913':{type:'struct',name:'SyncReceiver'},'29':{type:'mod',name:'arc'},'1482':{type:'struct',name:'CowArc'},'6789':{type:'fn',name:'duplex'},'7084':{type:'struct',name:'TaskPool'},'6776':{type:'struct',name:'DuplexStream'},'1586':{type:'mod',name:'sync'},'1319':{type:'struct',name:'RWReadMode'},'1304':{type:'struct',name:'RWWriteMode'},'5761':{type:'struct',name:'RWLock'},'0':{type:'mod',name:'sync'},'456':{type:'struct',name:'MutexArc'},'5572':{type:'struct',name:'Semaphore'},'7042':{type:'fn',name:'rendezvous'},'4975':{type:'struct',name:'Condvar'},'4048':{type:'struct',name:'Once'},'6905':{type:'struct',name:'SyncSender'},'7354':{type:'struct',name:'Future'},'39':{type:'struct',name:'ArcCondvar'},'4151':{type:'mod',name:'mpsc_intrusive'},'5657':{type:'struct',name:'Mutex'},'6551':{type:'struct',name:'RWLockWriteMode'},'1962':{type:'struct',name:'Guard'},'781':{type:'struct',name:'RWArc'},'4041':{type:'mod',name:'one'},'1596':{type:'mod',name:'mutex'},'1938':{type:'struct',name:'StaticMutex'},'7351':{type:'mod',name:'future'},'7068':{type:'mod',name:'task_pool'},'6773':{type:'mod',name:'comm'},'376':{type:'struct',name:'Arc'},'1624':{type:'struct',name:'Mutex'},'6644':{type:'struct',name:'Barrier'},'6561':{type:'struct',name:'RWLockReadMode'}};

searchIndex['serialize'] = [{ty:"mod",name:"",path:"serialize",desc:"Support code for encoding and decoding types."},{ty:"mod",name:"base64",path:"serialize",desc:"Base64 binary-to-text encoding"},{ty:"struct",name:"Config",path:"serialize::base64",desc:"Contains configuration parameters for `to_base64`."},{ty:"structfield",name:"char_set",path:"serialize::base64",desc:"Character set to use",parent:'5566'},{ty:"structfield",name:"pad",path:"serialize::base64",desc:"True to pad output with `=` characters",parent:'5566'},{ty:"structfield",name:"line_length",path:"serialize::base64",desc:"`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",parent:'5566'},{ty:"enum",name:"CharacterSet",path:"serialize::base64",desc:"Available encoding character sets"},{ty:"variant",name:"Standard",path:"serialize::base64",desc:"The standard character set (uses `+` and `/`)",parent:'5563'},{ty:"variant",name:"UrlSafe",path:"serialize::base64",desc:"The URL safe character set (uses `-` and `_`)",parent:'5563'},{ty:"enum",name:"FromBase64Error",path:"serialize::base64",desc:"Errors that can occur when decoding a base64 encoded string"},{ty:"variant",name:"InvalidBase64Character",path:"serialize::base64",desc:"The input contained a character not part of the base64 format",parent:'6135'},{ty:"variant",name:"InvalidBase64Length",path:"serialize::base64",desc:"The input had an invalid length",parent:'6135'},{ty:"static",name:"STANDARD",path:"serialize::base64",desc:"Configuration for RFC 4648 standard base64 encoding"},{ty:"static",name:"URL_SAFE",path:"serialize::base64",desc:"Configuration for RFC 4648 base64url encoding"},{ty:"static",name:"MIME",path:"serialize::base64",desc:"Configuration for RFC 2045 MIME base64 encoding"},{ty:"trait",name:"ToBase64",path:"serialize::base64",desc:"A trait for converting a value to base64 encoding."},{ty:"tymethod",name:"to_base64",path:"serialize::base64",desc:"Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",parent:'5745'},{ty:"trait",name:"FromBase64",path:"serialize::base64",desc:"A trait for converting from base64 encoded values."},{ty:"tymethod",name:"from_base64",path:"serialize::base64",desc:"Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",parent:'6122'},{ty:"method",name:"fmt",path:"serialize::base64",desc:"",parent:'6135'},{ty:"mod",name:"ebml",path:"serialize",desc:""},{ty:"struct",name:"Doc",path:"serialize::ebml",desc:""},{ty:"structfield",name:"data",path:"serialize::ebml",desc:"",parent:'6594'},{ty:"structfield",name:"start",path:"serialize::ebml",desc:"",parent:'6594'},{ty:"structfield",name:"end",path:"serialize::ebml",desc:"",parent:'6594'},{ty:"struct",name:"TaggedDoc",path:"serialize::ebml",desc:""},{ty:"structfield",name:"doc",path:"serialize::ebml",desc:"",parent:'6698'},{ty:"enum",name:"EbmlEncoderTag",path:"serialize::ebml",desc:""},{ty:"variant",name:"EsUint",path:"serialize::ebml",desc:"",parent:'6707'},{ty:"variant",name:"EsU64",path:"serialize::ebml",desc:"",parent:'6707'},{ty:"variant",name:"EsU32",path:"serialize::ebml",desc:"",parent:'6707'},{ty:"variant",name:"EsU16",path:"serialize::ebml",desc:"",parent:'6707'},{ty:"variant",name:"EsU8",path:"serialize::ebml",desc:"",parent:'6707'},{ty:"variant",name:"EsInt",path:"serialize::ebml",desc:"",parent:'6707'},{ty:"variant",name:"EsI64",path:"serialize::ebml",desc:"",parent:'6707'},{ty:"variant",name:"EsI32",path:"serialize::ebml",desc:"",parent:'6707'},{ty:"variant",name:"EsI16",path:"serialize::ebml",desc:"",parent:'6707'},{ty:"variant",name:"EsI8",path:"serialize::ebml",desc:"",parent:'6707'},{ty:"variant",name:"EsBool",path:"serialize::ebml",desc:"",parent:'6707'},{ty:"variant",name:"EsChar",path:"serialize::ebml",desc:"",parent:'6707'},{ty:"variant",name:"EsStr",path:"serialize::ebml",desc:"",parent:'6707'},{ty:"variant",name:"EsF64",path:"serialize::ebml",desc:"",parent:'6707'},{ty:"variant",name:"EsF32",path:"serialize::ebml",desc:"",parent:'6707'},{ty:"variant",name:"EsFloat",path:"serialize::ebml",desc:"",parent:'6707'},{ty:"variant",name:"EsEnum",path:"serialize::ebml",desc:"",parent:'6707'},{ty:"variant",name:"EsEnumVid",path:"serialize::ebml",desc:"",parent:'6707'},{ty:"variant",name:"EsEnumBody",path:"serialize::ebml",desc:"",parent:'6707'},{ty:"variant",name:"EsVec",path:"serialize::ebml",desc:"",parent:'6707'},{ty:"variant",name:"EsVecLen",path:"serialize::ebml",desc:"",parent:'6707'},{ty:"variant",name:"EsVecElt",path:"serialize::ebml",desc:"",parent:'6707'},{ty:"variant",name:"EsMap",path:"serialize::ebml",desc:"",parent:'6707'},{ty:"variant",name:"EsMapLen",path:"serialize::ebml",desc:"",parent:'6707'},{ty:"variant",name:"EsMapKey",path:"serialize::ebml",desc:"",parent:'6707'},{ty:"variant",name:"EsMapVal",path:"serialize::ebml",desc:"",parent:'6707'},{ty:"variant",name:"EsOpaque",path:"serialize::ebml",desc:"",parent:'6707'},{ty:"variant",name:"EsLabel",path:"serialize::ebml",desc:"",parent:'6707'},{ty:"mod",name:"reader",path:"serialize::ebml",desc:""},{ty:"struct",name:"Res",path:"serialize::ebml::reader",desc:""},{ty:"structfield",name:"val",path:"serialize::ebml::reader",desc:"",parent:'6778'},{ty:"structfield",name:"next",path:"serialize::ebml::reader",desc:"",parent:'6778'},{ty:"struct",name:"Decoder",path:"serialize::ebml::reader",desc:""},{ty:"fn",name:"vuint_at",path:"serialize::ebml::reader",desc:""},{ty:"fn",name:"Doc",path:"serialize::ebml::reader",desc:""},{ty:"fn",name:"doc_at",path:"serialize::ebml::reader",desc:""},{ty:"fn",name:"maybe_get_doc",path:"serialize::ebml::reader",desc:""},{ty:"fn",name:"get_doc",path:"serialize::ebml::reader",desc:""},{ty:"fn",name:"docs",path:"serialize::ebml::reader",desc:""},{ty:"fn",name:"tagged_docs",path:"serialize::ebml::reader",desc:""},{ty:"fn",name:"with_doc_data",path:"serialize::ebml::reader",desc:""},{ty:"fn",name:"doc_as_u8",path:"serialize::ebml::reader",desc:""},{ty:"fn",name:"doc_as_u16",path:"serialize::ebml::reader",desc:""},{ty:"fn",name:"doc_as_u32",path:"serialize::ebml::reader",desc:""},{ty:"fn",name:"doc_as_u64",path:"serialize::ebml::reader",desc:""},{ty:"fn",name:"doc_as_i8",path:"serialize::ebml::reader",desc:""},{ty:"fn",name:"doc_as_i16",path:"serialize::ebml::reader",desc:""},{ty:"fn",name:"doc_as_i32",path:"serialize::ebml::reader",desc:""},{ty:"fn",name:"doc_as_i64",path:"serialize::ebml::reader",desc:""},{ty:"fn",name:"Decoder",path:"serialize::ebml::reader",desc:""},{ty:"method",name:"read_opaque",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_nil",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_u64",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_u32",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_u16",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_u8",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_uint",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_i64",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_i32",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_i16",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_i8",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_int",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_bool",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_f64",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_f32",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_char",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_str",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_enum",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_enum_variant",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_enum_variant_arg",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_enum_struct_variant",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_enum_struct_variant_field",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_struct",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_struct_field",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_tuple",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_tuple_arg",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_tuple_struct",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_tuple_struct_arg",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_option",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_seq",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_seq_elt",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_map",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_map_elt_key",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"method",name:"read_map_elt_val",path:"serialize::ebml::reader",desc:"",parent:'8272'},{ty:"mod",name:"writer",path:"serialize::ebml",desc:""},{ty:"struct",name:"Encoder",path:"serialize::ebml::writer",desc:""},{ty:"structfield",name:"writer",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"structfield",name:"last_error",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"fn",name:"Encoder",path:"serialize::ebml::writer",desc:""},{ty:"method",name:"unsafe_clone",path:"serialize::ebml::writer",desc:"FIXME(pcwalton): Workaround for badness in trans. DO NOT USE ME.",parent:'12669'},{ty:"method",name:"start_tag",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"end_tag",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"wr_tag",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"wr_tagged_bytes",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"wr_tagged_u64",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"wr_tagged_u32",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"wr_tagged_u16",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"wr_tagged_u8",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"wr_tagged_i64",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"wr_tagged_i32",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"wr_tagged_i16",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"wr_tagged_i8",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"wr_tagged_str",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"wr_bytes",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"wr_str",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_opaque",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_nil",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_uint",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_u64",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_u32",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_u16",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_u8",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_int",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_i64",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_i32",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_i16",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_i8",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_bool",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_f64",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_f32",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_char",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_str",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_enum",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_enum_variant",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_enum_variant_arg",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_enum_struct_variant",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_enum_struct_variant_field",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_struct",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_struct_field",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_tuple",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_tuple_arg",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_tuple_struct",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_tuple_struct_arg",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_option",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_option_none",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_option_some",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_seq",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_seq_elt",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_map",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_map_elt_key",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"emit_map_elt_val",path:"serialize::ebml::writer",desc:"",parent:'12669'},{ty:"method",name:"clone",path:"serialize::ebml",desc:"",parent:'6594'},{ty:"method",name:"get",path:"serialize::ebml",desc:"",parent:'6594'},{ty:"method",name:"as_str_slice",path:"serialize::ebml",desc:"",parent:'6594'},{ty:"method",name:"as_str",path:"serialize::ebml",desc:"",parent:'6594'},{ty:"mod",name:"hex",path:"serialize",desc:"Hex binary-to-text encoding"},{ty:"enum",name:"FromHexError",path:"serialize::hex",desc:"Errors that can occur when decoding a hex encoded string"},{ty:"variant",name:"InvalidHexCharacter",path:"serialize::hex",desc:"The input contained a character not part of the hex format",parent:'15178'},{ty:"variant",name:"InvalidHexLength",path:"serialize::hex",desc:"The input had an invalid length",parent:'15178'},{ty:"trait",name:"ToHex",path:"serialize::hex",desc:"A trait for converting a value to hexadecimal encoding"},{ty:"tymethod",name:"to_hex",path:"serialize::hex",desc:"Converts the value of `self` to a hex value, returning the owned\nstring.",parent:'15068'},{ty:"trait",name:"FromHex",path:"serialize::hex",desc:"A trait for converting hexadecimal encoded values"},{ty:"tymethod",name:"from_hex",path:"serialize::hex",desc:"Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",parent:'15165'},{ty:"method",name:"fmt",path:"serialize::hex",desc:"",parent:'15178'},{ty:"mod",name:"json",path:"serialize",desc:"JSON parsing and serialization"},{ty:"struct",name:"Error",path:"serialize::json",desc:"If an error occurs while parsing some JSON, this is the structure which is\nreturned"},{ty:"struct",name:"Encoder",path:"serialize::json",desc:"A structure for implementing serialization to JSON."},{ty:"struct",name:"PrettyEncoder",path:"serialize::json",desc:"Another encoder for JSON, but prints out human-readable JSON instead of\ncompact data"},{ty:"struct",name:"Parser",path:"serialize::json",desc:""},{ty:"struct",name:"Decoder",path:"serialize::json",desc:"A structure to decode JSON to values in rust."},{ty:"enum",name:"Json",path:"serialize::json",desc:"Represents a json value"},{ty:"variant",name:"Number",path:"serialize::json",desc:"",parent:'15538'},{ty:"variant",name:"String",path:"serialize::json",desc:"",parent:'15538'},{ty:"variant",name:"Boolean",path:"serialize::json",desc:"",parent:'15538'},{ty:"variant",name:"List",path:"serialize::json",desc:"",parent:'15538'},{ty:"variant",name:"Object",path:"serialize::json",desc:"",parent:'15538'},{ty:"variant",name:"Null",path:"serialize::json",desc:"",parent:'15538'},{ty:"fn",name:"from_reader",path:"serialize::json",desc:"Decodes a json value from an `&mut io::Reader`"},{ty:"fn",name:"from_str",path:"serialize::json",desc:"Decodes a json value from a string"},{ty:"typedef",name:"List",path:"serialize::json",desc:""},{ty:"typedef",name:"Object",path:"serialize::json",desc:""},{ty:"trait",name:"ToJson",path:"serialize::json",desc:"A trait for converting values to JSON"},{ty:"tymethod",name:"to_json",path:"serialize::json",desc:"Converts the value of `self` to an instance of JSON",parent:'27983'},{ty:"method",name:"eq",path:"serialize::json",desc:"",parent:'15538'},{ty:"method",name:"ne",path:"serialize::json",desc:"",parent:'15538'},{ty:"method",name:"clone",path:"serialize::json",desc:"",parent:'15538'},{ty:"method",name:"eq",path:"serialize::json",desc:"",parent:'15871'},{ty:"method",name:"ne",path:"serialize::json",desc:"",parent:'15871'},{ty:"method",name:"new",path:"serialize::json",desc:"Creates a new JSON encoder whose output will be written to the writer\nspecified.",parent:'16179'},{ty:"method",name:"buffer_encode",path:"serialize::json",desc:"Encode the specified struct into a json [u8]",parent:'16179'},{ty:"method",name:"str_encode",path:"serialize::json",desc:"Encode the specified struct into a json str",parent:'16179'},{ty:"method",name:"emit_nil",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_uint",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_u64",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_u32",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_u16",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_u8",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_int",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_i64",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_i32",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_i16",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_i8",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_bool",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_f64",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_f32",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_char",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_str",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_enum",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_enum_variant",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_enum_variant_arg",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_enum_struct_variant",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_enum_struct_variant_field",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_struct",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_struct_field",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_tuple",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_tuple_arg",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_tuple_struct",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_tuple_struct_arg",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_option",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_option_none",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_option_some",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_seq",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_seq_elt",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_map",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_map_elt_key",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"emit_map_elt_val",path:"serialize::json",desc:"",parent:'16179'},{ty:"method",name:"new",path:"serialize::json",desc:"Creates a new encoder whose output will be written to the specified writer",parent:'18957'},{ty:"method",name:"emit_nil",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_uint",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_u64",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_u32",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_u16",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_u8",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_int",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_i64",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_i32",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_i16",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_i8",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_bool",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_f64",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_f32",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_char",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_str",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_enum",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_enum_variant",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_enum_variant_arg",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_enum_struct_variant",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_enum_struct_variant_field",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_struct",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_struct_field",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_tuple",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_tuple_arg",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_tuple_struct",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_tuple_struct_arg",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_option",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_option_none",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_option_some",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_seq",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_seq_elt",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_map",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_map_elt_key",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"emit_map_elt_val",path:"serialize::json",desc:"",parent:'18957'},{ty:"method",name:"encode",path:"serialize::json",desc:"",parent:'15538'},{ty:"method",name:"to_writer",path:"serialize::json",desc:"Encodes a json value into a io::writer.  Uses a single line.",parent:'15538'},{ty:"method",name:"to_pretty_writer",path:"serialize::json",desc:"Encodes a json value into a io::writer.\nPretty-prints in a more readable format.",parent:'15538'},{ty:"method",name:"to_pretty_str",path:"serialize::json",desc:"Encodes a json value into a string",parent:'15538'},{ty:"method",name:"find",path:"serialize::json",desc:"If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",parent:'15538'},{ty:"method",name:"find_path",path:"serialize::json",desc:"Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",parent:'15538'},{ty:"method",name:"search",path:"serialize::json",desc:"If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",parent:'15538'},{ty:"method",name:"is_object",path:"serialize::json",desc:"Returns true if the Json value is an Object. Returns false otherwise.",parent:'15538'},{ty:"method",name:"as_object",path:"serialize::json",desc:"If the Json value is an Object, returns the associated TreeMap.\nReturns None otherwise.",parent:'15538'},{ty:"method",name:"is_list",path:"serialize::json",desc:"Returns true if the Json value is a List. Returns false otherwise.",parent:'15538'},{ty:"method",name:"as_list",path:"serialize::json",desc:"If the Json value is a List, returns the associated vector.\nReturns None otherwise.",parent:'15538'},{ty:"method",name:"is_string",path:"serialize::json",desc:"Returns true if the Json value is a String. Returns false otherwise.",parent:'15538'},{ty:"method",name:"as_string",path:"serialize::json",desc:"If the Json value is a String, returns the associated str.\nReturns None otherwise.",parent:'15538'},{ty:"method",name:"is_number",path:"serialize::json",desc:"Returns true if the Json value is a Number. Returns false otherwise.",parent:'15538'},{ty:"method",name:"as_number",path:"serialize::json",desc:"If the Json value is a Number, returns the associated f64.\nReturns None otherwise.",parent:'15538'},{ty:"method",name:"is_boolean",path:"serialize::json",desc:"Returns true if the Json value is a Boolean. Returns false otherwise.",parent:'15538'},{ty:"method",name:"as_boolean",path:"serialize::json",desc:"If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",parent:'15538'},{ty:"method",name:"is_null",path:"serialize::json",desc:"Returns true if the Json value is a Null. Returns false otherwise.",parent:'15538'},{ty:"method",name:"as_null",path:"serialize::json",desc:"If the Json value is a Null, returns ().\nReturns None otherwise.",parent:'15538'},{ty:"method",name:"new",path:"serialize::json",desc:"Decode a json value from an Iterator<char>",parent:'22962'},{ty:"method",name:"parse",path:"serialize::json",desc:"",parent:'22962'},{ty:"method",name:"new",path:"serialize::json",desc:"Creates a new decoder instance for decoding the specified JSON value.",parent:'24385'},{ty:"method",name:"read_nil",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_u64",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_u32",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_u16",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_u8",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_uint",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_i64",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_i32",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_i16",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_i8",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_int",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_bool",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_f64",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_f32",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_char",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_str",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_enum",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_enum_variant",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_enum_variant_arg",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_enum_struct_variant",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_enum_struct_variant_field",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_struct",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_struct_field",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_tuple",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_tuple_arg",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_tuple_struct",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_tuple_struct_arg",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_option",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_seq",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_seq_elt",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_map",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_map_elt_key",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"read_map_elt_val",path:"serialize::json",desc:"",parent:'24385'},{ty:"method",name:"lt",path:"serialize::json",desc:"",parent:'15538'},{ty:"method",name:"to_json",path:"serialize::json",desc:"",parent:'15538'},{ty:"method",name:"fmt",path:"serialize::json",desc:"Encodes a json value into a string",parent:'15538'},{ty:"method",name:"fmt",path:"serialize::json",desc:"",parent:'15871'},{ty:"trait",name:"Decoder",path:"serialize",desc:""},{ty:"tymethod",name:"read_nil",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_uint",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_u64",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_u32",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_u16",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_u8",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_int",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_i64",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_i32",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_i16",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_i8",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_bool",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_f64",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_f32",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_char",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_str",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_enum",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_enum_variant",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_enum_variant_arg",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_enum_struct_variant",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_enum_struct_variant_field",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_struct",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_struct_field",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_tuple",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_tuple_arg",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_tuple_struct",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_tuple_struct_arg",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_option",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_seq",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_seq_elt",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_map",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_map_elt_key",path:"serialize",desc:"",parent:'520'},{ty:"tymethod",name:"read_map_elt_val",path:"serialize",desc:"",parent:'520'},{ty:"trait",name:"Encoder",path:"serialize",desc:""},{ty:"tymethod",name:"emit_nil",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_uint",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_u64",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_u32",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_u16",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_u8",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_int",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_i64",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_i32",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_i16",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_i8",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_bool",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_f64",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_f32",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_char",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_str",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_enum",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_enum_variant",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_enum_variant_arg",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_enum_struct_variant",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_enum_struct_variant_field",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_struct",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_struct_field",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_tuple",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_tuple_arg",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_tuple_struct",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_tuple_struct_arg",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_option",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_option_none",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_option_some",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_seq",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_seq_elt",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_map",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_map_elt_key",path:"serialize",desc:"",parent:'18'},{ty:"tymethod",name:"emit_map_elt_val",path:"serialize",desc:"",parent:'18'},{ty:"trait",name:"Decodable",path:"serialize",desc:""},{ty:"tymethod",name:"decode",path:"serialize",desc:"",parent:'1023'},{ty:"trait",name:"Encodable",path:"serialize",desc:""},{ty:"tymethod",name:"encode",path:"serialize",desc:"",parent:'1010'},{ty:"trait",name:"DecoderHelpers",path:"serialize",desc:""},{ty:"tymethod",name:"read_to_vec",path:"serialize",desc:"",parent:'3914'},{ty:"trait",name:"EncoderHelpers",path:"serialize",desc:""},{ty:"tymethod",name:"emit_from_vec",path:"serialize",desc:"",parent:'3808'}];allPaths['serialize'] = {'6729':{type:'enum',name:'EbmlEncoderTag'},'6735':{type:'enum',name:'EbmlEncoderTag'},'15561':{type:'enum',name:'Json'},'6721':{type:'enum',name:'EbmlEncoderTag'},'24385':{type:'struct',name:'Decoder'},'15178':{type:'enum',name:'FromHexError'},'6720':{type:'enum',name:'EbmlEncoderTag'},'27983':{type:'trait',name:'ToJson'},'6730':{type:'enum',name:'EbmlEncoderTag'},'8258':{type:'fn',name:'doc_as_i64'},'6715':{type:'enum',name:'EbmlEncoderTag'},'15185':{type:'enum',name:'FromHexError'},'5566':{type:'struct',name:'Config'},'6717':{type:'enum',name:'EbmlEncoderTag'},'6727':{type:'enum',name:'EbmlEncoderTag'},'16179':{type:'struct',name:'Encoder'},'6708':{type:'enum',name:'EbmlEncoderTag'},'24362':{type:'fn',name:'from_str'},'6723':{type:'enum',name:'EbmlEncoderTag'},'24301':{type:'fn',name:'from_reader'},'6722':{type:'enum',name:'EbmlEncoderTag'},'6734':{type:'enum',name:'EbmlEncoderTag'},'6726':{type:'enum',name:'EbmlEncoderTag'},'12669':{type:'struct',name:'Encoder'},'15538':{type:'enum',name:'Json'},'15165':{type:'trait',name:'FromHex'},'6718':{type:'enum',name:'EbmlEncoderTag'},'18':{type:'trait',name:'Encoder'},'8216':{type:'fn',name:'doc_as_i8'},'6733':{type:'enum',name:'EbmlEncoderTag'},'6712':{type:'enum',name:'EbmlEncoderTag'},'7616':{type:'fn',name:'doc_as_u8'},'0':{type:'mod',name:'serialize'},'6698':{type:'struct',name:'TaggedDoc'},'15863':{type:'typedef',name:'Object'},'8244':{type:'fn',name:'doc_as_i32'},'6716':{type:'enum',name:'EbmlEncoderTag'},'12629':{type:'mod',name:'writer'},'15551':{type:'enum',name:'Json'},'6122':{type:'trait',name:'FromBase64'},'15186':{type:'enum',name:'FromHexError'},'15858':{type:'typedef',name:'List'},'520':{type:'trait',name:'Decoder'},'7200':{type:'fn',name:'maybe_get_doc'},'15547':{type:'enum',name:'Json'},'12':{type:'mod',name:'serialize'},'3808':{type:'trait',name:'EncoderHelpers'},'5565':{type:'enum',name:'CharacterSet'},'15063':{type:'mod',name:'hex'},'7915':{type:'fn',name:'doc_as_u32'},'7274':{type:'fn',name:'get_doc'},'6731':{type:'enum',name:'EbmlEncoderTag'},'6725':{type:'enum',name:'EbmlEncoderTag'},'6709':{type:'enum',name:'EbmlEncoderTag'},'8067':{type:'fn',name:'doc_as_u64'},'7131':{type:'fn',name:'Doc'},'1010':{type:'trait',name:'Encodable'},'22962':{type:'struct',name:'Parser'},'15542':{type:'enum',name:'Json'},'15068':{type:'trait',name:'ToHex'},'6713':{type:'enum',name:'EbmlEncoderTag'},'7763':{type:'fn',name:'doc_as_u16'},'6732':{type:'enum',name:'EbmlEncoderTag'},'7584':{type:'fn',name:'with_doc_data'},'1023':{type:'trait',name:'Decodable'},'6591':{type:'mod',name:'ebml'},'6135':{type:'enum',name:'FromBase64Error'},'6728':{type:'enum',name:'EbmlEncoderTag'},'15560':{type:'enum',name:'Json'},'6971':{type:'fn',name:'vuint_at'},'15871':{type:'struct',name:'Error'},'18957':{type:'struct',name:'PrettyEncoder'},'5563':{type:'enum',name:'CharacterSet'},'15526':{type:'mod',name:'json'},'7404':{type:'fn',name:'docs'},'5564':{type:'enum',name:'CharacterSet'},'6143':{type:'enum',name:'FromBase64Error'},'7149':{type:'fn',name:'doc_at'},'8281':{type:'fn',name:'Decoder'},'3914':{type:'trait',name:'DecoderHelpers'},'15555':{type:'enum',name:'Json'},'6719':{type:'enum',name:'EbmlEncoderTag'},'5559':{type:'mod',name:'base64'},'6594':{type:'struct',name:'Doc'},'7492':{type:'fn',name:'tagged_docs'},'3996':{type:'mod',name:'collection_impls'},'6142':{type:'enum',name:'FromBase64Error'},'6736':{type:'mod',name:'reader'},'6714':{type:'enum',name:'EbmlEncoderTag'},'6724':{type:'enum',name:'EbmlEncoderTag'},'6710':{type:'enum',name:'EbmlEncoderTag'},'6707':{type:'enum',name:'EbmlEncoderTag'},'13008':{type:'fn',name:'Encoder'},'6711':{type:'enum',name:'EbmlEncoderTag'},'6778':{type:'struct',name:'Res'},'8272':{type:'struct',name:'Decoder'},'5745':{type:'trait',name:'ToBase64'},'8230':{type:'fn',name:'doc_as_i16'}};

searchIndex['uuid'] = [{ty:"mod",name:"",path:"uuid",desc:"Generate and parse UUIDs"},{ty:"struct",name:"Uuid",path:"uuid",desc:"A Universally Unique Identifier (UUID)"},{ty:"structfield",name:"bytes",path:"uuid",desc:"The 128-bit number stored in 16 bytes",parent:'255'},{ty:"enum",name:"UuidVersion",path:"uuid",desc:"The version of the UUID, denoting the generating algorithm"},{ty:"variant",name:"Version1Mac",path:"uuid",desc:"Version 1: MAC address",parent:'27'},{ty:"variant",name:"Version2Dce",path:"uuid",desc:"Version 2: DCE Security",parent:'27'},{ty:"variant",name:"Version3Md5",path:"uuid",desc:"Version 3: MD5 hash",parent:'27'},{ty:"variant",name:"Version4Random",path:"uuid",desc:"Version 4: Random",parent:'27'},{ty:"variant",name:"Version5Sha1",path:"uuid",desc:"Version 5: SHA-1 hash",parent:'27'},{ty:"enum",name:"UuidVariant",path:"uuid",desc:"The reserved variants of UUIDs"},{ty:"variant",name:"VariantNCS",path:"uuid",desc:"Reserved by the NCS for backward compatibility",parent:'152'},{ty:"variant",name:"VariantRFC4122",path:"uuid",desc:"As described in the RFC4122 Specification (default)",parent:'152'},{ty:"variant",name:"VariantMicrosoft",path:"uuid",desc:"Reserved by Microsoft for backward compatibility",parent:'152'},{ty:"variant",name:"VariantFuture",path:"uuid",desc:"Reserved for future expansion",parent:'152'},{ty:"enum",name:"ParseError",path:"uuid",desc:"Error details for string parsing failures"},{ty:"variant",name:"ErrorInvalidLength",path:"uuid",desc:"",parent:'297'},{ty:"variant",name:"ErrorInvalidCharacter",path:"uuid",desc:"",parent:'297'},{ty:"variant",name:"ErrorInvalidGroups",path:"uuid",desc:"",parent:'297'},{ty:"variant",name:"ErrorInvalidGroupLength",path:"uuid",desc:"",parent:'297'},{ty:"typedef",name:"UuidBytes",path:"uuid",desc:"A 128-bit (16 byte) buffer containing the ID"},{ty:"method",name:"eq",path:"uuid",desc:"",parent:'27'},{ty:"method",name:"ne",path:"uuid",desc:"",parent:'27'},{ty:"method",name:"eq",path:"uuid",desc:"",parent:'152'},{ty:"method",name:"ne",path:"uuid",desc:"",parent:'152'},{ty:"method",name:"hash",path:"uuid",desc:"",parent:'255'},{ty:"method",name:"fmt",path:"uuid",desc:"",parent:'297'},{ty:"method",name:"nil",path:"uuid",desc:"Returns a nil or empty UUID (containing all zeroes)",parent:'255'},{ty:"method",name:"new",path:"uuid",desc:"Create a new UUID of the specified version",parent:'255'},{ty:"method",name:"new_v4",path:"uuid",desc:"Creates a new random UUID",parent:'255'},{ty:"method",name:"from_fields",path:"uuid",desc:"Creates a UUID using the supplied field values",parent:'255'},{ty:"method",name:"from_bytes",path:"uuid",desc:"Creates a UUID using the supplied bytes",parent:'255'},{ty:"method",name:"get_variant",path:"uuid",desc:"Returns the variant of the UUID structure",parent:'255'},{ty:"method",name:"get_version_num",path:"uuid",desc:"Returns the version number of the UUID",parent:'255'},{ty:"method",name:"get_version",path:"uuid",desc:"Returns the version of the UUID",parent:'255'},{ty:"method",name:"as_bytes",path:"uuid",desc:"Return an array of 16 octets containing the UUID data",parent:'255'},{ty:"method",name:"to_simple_str",path:"uuid",desc:"Returns the UUID as a string of 16 hexadecimal digits",parent:'255'},{ty:"method",name:"to_hyphenated_str",path:"uuid",desc:"Returns a string of hexadecimal digits, separated into groups with a hyphen.",parent:'255'},{ty:"method",name:"to_urn_str",path:"uuid",desc:"Returns the UUID formatted as a full URN string",parent:'255'},{ty:"method",name:"parse_string",path:"uuid",desc:"Parses a UUID from a string of hexadecimal digits with optional hyphens",parent:'255'},{ty:"method",name:"is_nil",path:"uuid",desc:"Tests if the UUID is nil",parent:'255'},{ty:"method",name:"default",path:"uuid",desc:"Returns the nil UUID, which is all zeroes",parent:'255'},{ty:"method",name:"clone",path:"uuid",desc:"Returns a copy of the UUID",parent:'255'},{ty:"method",name:"from_str",path:"uuid",desc:"Parse a hex string and interpret as a UUID",parent:'255'},{ty:"method",name:"fmt",path:"uuid",desc:"",parent:'255'},{ty:"method",name:"eq",path:"uuid",desc:"",parent:'255'},{ty:"method",name:"equals",path:"uuid",desc:"",parent:'255'},{ty:"method",name:"encode",path:"uuid",desc:"Encode a UUID as a hypenated string",parent:'255'},{ty:"method",name:"decode",path:"uuid",desc:"Decode a UUID from a string",parent:'255'},{ty:"method",name:"rand",path:"uuid",desc:"",parent:'255'}];allPaths['uuid'] = {'154':{type:'enum',name:'UuidVariant'},'255':{type:'struct',name:'Uuid'},'35':{type:'enum',name:'UuidVersion'},'301':{type:'enum',name:'ParseError'},'153':{type:'enum',name:'UuidVariant'},'308':{type:'enum',name:'ParseError'},'312':{type:'enum',name:'ParseError'},'322':{type:'enum',name:'ParseError'},'152':{type:'enum',name:'UuidVariant'},'297':{type:'enum',name:'ParseError'},'33':{type:'enum',name:'UuidVersion'},'0':{type:'mod',name:'uuid'},'31':{type:'enum',name:'UuidVersion'},'29':{type:'enum',name:'UuidVersion'},'37':{type:'enum',name:'UuidVersion'},'155':{type:'enum',name:'UuidVariant'},'27':{type:'enum',name:'UuidVersion'},'156':{type:'enum',name:'UuidVariant'},'22':{type:'typedef',name:'UuidBytes'}};

searchIndex['semver'] = [{ty:"mod",name:"",path:"semver",desc:"Semantic version parsing and comparison."},{ty:"struct",name:"Version",path:"semver",desc:"Represents a version number conforming to the semantic versioning scheme."},{ty:"structfield",name:"major",path:"semver",desc:"The major version, to be incremented on incompatible changes.",parent:'245'},{ty:"structfield",name:"minor",path:"semver",desc:"The minor version, to be incremented when functionality is added in a\nbackwards-compatible manner.",parent:'245'},{ty:"structfield",name:"patch",path:"semver",desc:"The patch version, to be incremented when backwards-compatible bug\nfixes are made.",parent:'245'},{ty:"structfield",name:"pre",path:"semver",desc:"The pre-release version identifier, if one exists.",parent:'245'},{ty:"structfield",name:"build",path:"semver",desc:"The build metadata, ignored when determining version precedence.",parent:'245'},{ty:"enum",name:"Identifier",path:"semver",desc:"An identifier in the pre-release or build metadata. If the identifier can\nbe parsed as a decimal value, it will be represented with `Numeric`."},{ty:"variant",name:"Numeric",path:"semver",desc:"",parent:'12'},{ty:"variant",name:"AlphaNumeric",path:"semver",desc:"",parent:'12'},{ty:"fn",name:"parse",path:"semver",desc:"Parse a string into a semver object."},{ty:"method",name:"eq",path:"semver",desc:"",parent:'12'},{ty:"method",name:"ne",path:"semver",desc:"",parent:'12'},{ty:"method",name:"clone",path:"semver",desc:"",parent:'12'},{ty:"method",name:"lt",path:"semver",desc:"",parent:'12'},{ty:"method",name:"fmt",path:"semver",desc:"",parent:'12'},{ty:"method",name:"clone",path:"semver",desc:"",parent:'245'},{ty:"method",name:"fmt",path:"semver",desc:"",parent:'245'},{ty:"method",name:"eq",path:"semver",desc:"",parent:'245'},{ty:"method",name:"lt",path:"semver",desc:"",parent:'245'}];allPaths['semver'] = {'16':{type:'enum',name:'Identifier'},'245':{type:'struct',name:'Version'},'0':{type:'mod',name:'semver'},'12':{type:'enum',name:'Identifier'},'21':{type:'enum',name:'Identifier'},'1442':{type:'fn',name:'parse'}};

searchIndex['term'] = [{ty:"mod",name:"",path:"term",desc:"Simple ANSI color library"},{ty:"struct",name:"Terminal",path:"term",desc:""},{ty:"mod",name:"terminfo",path:"term",desc:""},{ty:"struct",name:"TermInfo",path:"term::terminfo",desc:"A parsed terminfo entry."},{ty:"structfield",name:"numbers",path:"term::terminfo",desc:"Map of capability name to numeric value",parent:'18'},{ty:"structfield",name:"strings",path:"term::terminfo",desc:"Map of capability name to raw (unexpanded) string",parent:'18'},{ty:"mod",name:"searcher",path:"term::terminfo",desc:""},{ty:"fn",name:"get_dbpath_for_term",path:"term::terminfo::searcher",desc:"Return path to database entry for `term`"},{ty:"fn",name:"open",path:"term::terminfo::searcher",desc:"Return open file for `term`"},{ty:"mod",name:"parser",path:"term::terminfo",desc:""},{ty:"mod",name:"compiled",path:"term::terminfo::parser",desc:""},{ty:"fn",name:"parse",path:"term::terminfo::parser::compiled",desc:"Parse a compiled terminfo entry, using long capability names if `longnames` is true"},{ty:"fn",name:"msys_terminfo",path:"term::terminfo::parser::compiled",desc:"Create a dummy TermInfo struct for msys terminals"},{ty:"static",name:"boolfnames",path:"term::terminfo::parser::compiled",desc:""},{ty:"static",name:"boolnames",path:"term::terminfo::parser::compiled",desc:""},{ty:"static",name:"numfnames",path:"term::terminfo::parser::compiled",desc:""},{ty:"static",name:"numnames",path:"term::terminfo::parser::compiled",desc:""},{ty:"static",name:"stringfnames",path:"term::terminfo::parser::compiled",desc:""},{ty:"static",name:"stringnames",path:"term::terminfo::parser::compiled",desc:""},{ty:"mod",name:"parm",path:"term::terminfo",desc:"Parameterized string expansion"},{ty:"struct",name:"Variables",path:"term::terminfo::parm",desc:"Container for static and dynamic variable arrays"},{ty:"enum",name:"Param",path:"term::terminfo::parm",desc:"Types of parameters a capability can use"},{ty:"variant",name:"String",path:"term::terminfo::parm",desc:"",parent:'3617'},{ty:"variant",name:"Number",path:"term::terminfo::parm",desc:"",parent:'3617'},{ty:"fn",name:"expand",path:"term::terminfo::parm",desc:"Expand a parameterized capability"},{ty:"method",name:"clone",path:"term::terminfo::parm",desc:"",parent:'3617'},{ty:"method",name:"new",path:"term::terminfo::parm",desc:"Return a new zero-initialized Variables",parent:'3657'},{ty:"mod",name:"color",path:"term",desc:""},{ty:"typedef",name:"Color",path:"term::color",desc:""},{ty:"static",name:"BLACK",path:"term::color",desc:""},{ty:"static",name:"RED",path:"term::color",desc:""},{ty:"static",name:"GREEN",path:"term::color",desc:""},{ty:"static",name:"YELLOW",path:"term::color",desc:""},{ty:"static",name:"BLUE",path:"term::color",desc:""},{ty:"static",name:"MAGENTA",path:"term::color",desc:""},{ty:"static",name:"CYAN",path:"term::color",desc:""},{ty:"static",name:"WHITE",path:"term::color",desc:""},{ty:"static",name:"BRIGHT_BLACK",path:"term::color",desc:""},{ty:"static",name:"BRIGHT_RED",path:"term::color",desc:""},{ty:"static",name:"BRIGHT_GREEN",path:"term::color",desc:""},{ty:"static",name:"BRIGHT_YELLOW",path:"term::color",desc:""},{ty:"static",name:"BRIGHT_BLUE",path:"term::color",desc:""},{ty:"static",name:"BRIGHT_MAGENTA",path:"term::color",desc:""},{ty:"static",name:"BRIGHT_CYAN",path:"term::color",desc:""},{ty:"static",name:"BRIGHT_WHITE",path:"term::color",desc:""},{ty:"mod",name:"attr",path:"term",desc:""},{ty:"enum",name:"Attr",path:"term::attr",desc:"Terminal attributes for use with term.attr().\nMost attributes can only be turned on and must be turned off with term.reset().\nThe ones that can be turned off explicitly take a boolean value.\nColor is also represented as an attribute for convenience."},{ty:"variant",name:"Bold",path:"term::attr",desc:"Bold (or possibly bright) mode",parent:'6792'},{ty:"variant",name:"Dim",path:"term::attr",desc:"Dim mode, also called faint or half-bright. Often not supported",parent:'6792'},{ty:"variant",name:"Italic",path:"term::attr",desc:"Italics mode. Often not supported",parent:'6792'},{ty:"variant",name:"Underline",path:"term::attr",desc:"Underline mode",parent:'6792'},{ty:"variant",name:"Blink",path:"term::attr",desc:"Blink mode",parent:'6792'},{ty:"variant",name:"Standout",path:"term::attr",desc:"Standout mode. Often implemented as Reverse, sometimes coupled with Bold",parent:'6792'},{ty:"variant",name:"Reverse",path:"term::attr",desc:"Reverse mode, inverts the foreground and background colors",parent:'6792'},{ty:"variant",name:"Secure",path:"term::attr",desc:"Secure mode, also called invis mode. Hides the printed text",parent:'6792'},{ty:"variant",name:"ForegroundColor",path:"term::attr",desc:"Convenience attribute to set the foreground color",parent:'6792'},{ty:"variant",name:"BackgroundColor",path:"term::attr",desc:"Convenience attribute to set the background color",parent:'6792'},{ty:"method",name:"new",path:"term",desc:"",parent:'6870'},{ty:"method",name:"fg",path:"term",desc:"Sets the foreground color to the given color.",parent:'6870'},{ty:"method",name:"bg",path:"term",desc:"Sets the background color to the given color.",parent:'6870'},{ty:"method",name:"attr",path:"term",desc:"Sets the given terminal attribute, if supported.\nReturns Ok(true) if the attribute was supported, Ok(false) otherwise,\nand Err(e) if there was an I/O error.",parent:'6870'},{ty:"method",name:"supports_attr",path:"term",desc:"Returns whether the given terminal attribute is supported.",parent:'6870'},{ty:"method",name:"reset",path:"term",desc:"Resets all terminal attributes and color to the default.",parent:'6870'},{ty:"method",name:"unwrap",path:"term",desc:"",parent:'6870'},{ty:"method",name:"get_ref",path:"term",desc:"",parent:'6870'},{ty:"method",name:"get_mut",path:"term",desc:"",parent:'6870'},{ty:"method",name:"write",path:"term",desc:"",parent:'6870'},{ty:"method",name:"flush",path:"term",desc:"",parent:'6870'}];allPaths['term'] = {'463':{type:'mod',name:'parser'},'6798':{type:'enum',name:'Attr'},'6793':{type:'enum',name:'Attr'},'6721':{type:'mod',name:'color'},'3014':{type:'fn',name:'msys_terminfo'},'3617':{type:'enum',name:'Param'},'15':{type:'mod',name:'terminfo'},'3094':{type:'mod',name:'parm'},'3834':{type:'fn',name:'expand'},'51':{type:'mod',name:'searcher'},'3622':{type:'enum',name:'Param'},'3626':{type:'enum',name:'Param'},'6813':{type:'enum',name:'Attr'},'6807':{type:'enum',name:'Attr'},'317':{type:'fn',name:'open'},'6802':{type:'enum',name:'Attr'},'6723':{type:'typedef',name:'Color'},'465':{type:'mod',name:'compiled'},'6794':{type:'enum',name:'Attr'},'18':{type:'struct',name:'TermInfo'},'6803':{type:'enum',name:'Attr'},'6808':{type:'enum',name:'Attr'},'1527':{type:'fn',name:'parse'},'6790':{type:'mod',name:'attr'},'6817':{type:'enum',name:'Attr'},'0':{type:'mod',name:'term'},'3657':{type:'struct',name:'Variables'},'6792':{type:'enum',name:'Attr'},'58':{type:'fn',name:'get_dbpath_for_term'},'6870':{type:'struct',name:'Terminal'},'6809':{type:'enum',name:'Attr'}};

searchIndex['glob'] = [{ty:"mod",name:"",path:"glob",desc:"Support for matching file paths against Unix shell style patterns."},{ty:"struct",name:"Paths",path:"glob",desc:"An iterator that yields Paths from the filesystem that match a particular\npattern - see the `glob` function for more details."},{ty:"struct",name:"Pattern",path:"glob",desc:"A compiled Unix shell style pattern."},{ty:"struct",name:"MatchOptions",path:"glob",desc:"Configuration options to modify the behaviour of `Pattern::matches_with(..)`"},{ty:"fn",name:"glob",path:"glob",desc:"\nReturn an iterator that produces all the Paths that match the given pattern,\nwhich may be absolute or relative to the current working directory."},{ty:"fn",name:"glob_with",path:"glob",desc:"Return an iterator that produces all the Paths that match the given pattern,\nwhich may be absolute or relative to the current working directory."},{ty:"method",name:"next",path:"glob",desc:"",parent:'10'},{ty:"method",name:"default",path:"glob",desc:"",parent:'319'},{ty:"method",name:"hash",path:"glob",desc:"",parent:'319'},{ty:"method",name:"cmp",path:"glob",desc:"",parent:'319'},{ty:"method",name:"lt",path:"glob",desc:"",parent:'319'},{ty:"method",name:"le",path:"glob",desc:"",parent:'319'},{ty:"method",name:"gt",path:"glob",desc:"",parent:'319'},{ty:"method",name:"ge",path:"glob",desc:"",parent:'319'},{ty:"method",name:"equals",path:"glob",desc:"",parent:'319'},{ty:"method",name:"eq",path:"glob",desc:"",parent:'319'},{ty:"method",name:"ne",path:"glob",desc:"",parent:'319'},{ty:"method",name:"clone",path:"glob",desc:"",parent:'319'},{ty:"method",name:"new",path:"glob",desc:"This function compiles Unix shell style patterns: `?` matches any single\ncharacter, `*` matches any (possibly empty) sequence of characters and\n`[...]` matches any character inside the brackets, unless the first\ncharacter is `!` in which case it matches any character except those\nbetween the `!` and the `]`. Character sequences can also specify ranges\nof characters, as ordered by Unicode, so e.g. `[0-9]` specifies any\ncharacter between 0 and 9 inclusive.",parent:'319'},{ty:"method",name:"escape",path:"glob",desc:"Escape metacharacters within the given string by surrounding them in\nbrackets. The resulting string will, when compiled into a `Pattern`,\nmatch the input string and nothing else.",parent:'319'},{ty:"method",name:"matches",path:"glob",desc:"Return if the given `str` matches this `Pattern` using the default\nmatch options (i.e. `MatchOptions::new()`).",parent:'319'},{ty:"method",name:"matches_path",path:"glob",desc:"Return if the given `Path`, when converted to a `str`, matches this `Pattern`\nusing the default match options (i.e. `MatchOptions::new()`).",parent:'319'},{ty:"method",name:"matches_with",path:"glob",desc:"Return if the given `str` matches this `Pattern` using the specified match options.",parent:'319'},{ty:"method",name:"matches_path_with",path:"glob",desc:"Return if the given `Path`, when converted to a `str`, matches this `Pattern`\nusing the specified match options.",parent:'319'},{ty:"method",name:"default",path:"glob",desc:"",parent:'3707'},{ty:"method",name:"hash",path:"glob",desc:"",parent:'3707'},{ty:"method",name:"cmp",path:"glob",desc:"",parent:'3707'},{ty:"method",name:"lt",path:"glob",desc:"",parent:'3707'},{ty:"method",name:"le",path:"glob",desc:"",parent:'3707'},{ty:"method",name:"gt",path:"glob",desc:"",parent:'3707'},{ty:"method",name:"ge",path:"glob",desc:"",parent:'3707'},{ty:"method",name:"equals",path:"glob",desc:"",parent:'3707'},{ty:"method",name:"eq",path:"glob",desc:"",parent:'3707'},{ty:"method",name:"ne",path:"glob",desc:"",parent:'3707'},{ty:"method",name:"clone",path:"glob",desc:"",parent:'3707'},{ty:"method",name:"new",path:"glob",desc:"Constructs a new `MatchOptions` with default field values. This is used\nwhen calling functions that do not take an explicit `MatchOptions` parameter.",parent:'3707'}];allPaths['glob'] = {'44':{type:'fn',name:'glob_with'},'10':{type:'struct',name:'Paths'},'30':{type:'fn',name:'glob'},'319':{type:'struct',name:'Pattern'},'0':{type:'mod',name:'glob'},'3707':{type:'struct',name:'MatchOptions'}};

searchIndex['arena'] = [{ty:"mod",name:"",path:"arena",desc:"The arena, a fast but limited type of allocator."},{ty:"struct",name:"Arena",path:"arena",desc:""},{ty:"struct",name:"TypedArena",path:"arena",desc:"An arena that can hold objects of only one type."},{ty:"method",name:"new",path:"arena",desc:"",parent:'221'},{ty:"method",name:"new_with_size",path:"arena",desc:"",parent:'221'},{ty:"method",name:"drop",path:"arena",desc:"",parent:'221'},{ty:"method",name:"alloc",path:"arena",desc:"",parent:'221'},{ty:"method",name:"new",path:"arena",desc:"Creates a new arena with preallocated space for 8 objects.",parent:'1068'},{ty:"method",name:"with_capacity",path:"arena",desc:"Creates a new arena with preallocated space for the given number of\nobjects.",parent:'1068'},{ty:"method",name:"alloc",path:"arena",desc:"Allocates an object into this arena.",parent:'1068'},{ty:"method",name:"drop",path:"arena",desc:"",parent:'1068'}];allPaths['arena'] = {'221':{type:'struct',name:'Arena'},'0':{type:'mod',name:'arena'},'1068':{type:'struct',name:'TypedArena'}};

searchIndex['flate'] = [{ty:"mod",name:"",path:"flate",desc:"Simple compression"},{ty:"fn",name:"deflate_bytes",path:"flate",desc:""},{ty:"fn",name:"deflate_bytes_zlib",path:"flate",desc:""},{ty:"fn",name:"inflate_bytes",path:"flate",desc:""},{ty:"fn",name:"inflate_bytes_zlib",path:"flate",desc:""},{ty:"mod",name:"rustrt",path:"flate",desc:""},{ty:"ffi",name:"tdefl_compress_mem_to_heap",path:"flate::rustrt",desc:""},{ty:"ffi",name:"tinfl_decompress_mem_to_heap",path:"flate::rustrt",desc:""}];allPaths['flate'] = {'9':{type:'mod',name:'rustrt'},'382':{type:'fn',name:'inflate_bytes'},'398':{type:'fn',name:'inflate_bytes_zlib'},'226':{type:'fn',name:'deflate_bytes_zlib'},'38':{type:'ffi',name:'tinfl_decompress_mem_to_heap'},'210':{type:'fn',name:'deflate_bytes'},'16':{type:'ffi',name:'tdefl_compress_mem_to_heap'},'0':{type:'mod',name:'flate'}};

searchIndex['native'] = [{ty:"mod",name:"",path:"native",desc:"The native I/O and threading crate"},{ty:"fn",name:"start",path:"native",desc:"Executes the given procedure after initializing the runtime with the given\nargc/argv."},{ty:"fn",name:"run",path:"native",desc:"Executes a procedure on the current thread in a Rust task context."},{ty:"mod",name:"io",path:"native",desc:"Native thread-blocking I/O implementation"},{ty:"struct",name:"IoFactory",path:"native::io",desc:"Implementation of rt::rtio's IoFactory trait to generate handles to the\nnative I/O functionality."},{ty:"mod",name:"addrinfo",path:"native::io",desc:""},{ty:"struct",name:"GetAddrInfoRequest",path:"native::io::addrinfo",desc:""},{ty:"method",name:"run",path:"native::io::addrinfo",desc:"",parent:'46'},{ty:"mod",name:"net",path:"native::io",desc:""},{ty:"struct",name:"TcpStream",path:"native::io::net",desc:""},{ty:"struct",name:"TcpListener",path:"native::io::net",desc:""},{ty:"struct",name:"TcpAcceptor",path:"native::io::net",desc:""},{ty:"struct",name:"UdpSocket",path:"native::io::net",desc:""},{ty:"fn",name:"htons",path:"native::io::net",desc:""},{ty:"fn",name:"ntohs",path:"native::io::net",desc:""},{ty:"fn",name:"sockaddr_to_addr",path:"native::io::net",desc:""},{ty:"fn",name:"init",path:"native::io::net",desc:""},{ty:"typedef",name:"sock_t",path:"native::io::net",desc:""},{ty:"method",name:"connect",path:"native::io::net",desc:"",parent:'1622'},{ty:"method",name:"fd",path:"native::io::net",desc:"",parent:'1622'},{ty:"method",name:"read",path:"native::io::net",desc:"",parent:'1622'},{ty:"method",name:"write",path:"native::io::net",desc:"",parent:'1622'},{ty:"method",name:"peer_name",path:"native::io::net",desc:"",parent:'1622'},{ty:"method",name:"control_congestion",path:"native::io::net",desc:"",parent:'1622'},{ty:"method",name:"nodelay",path:"native::io::net",desc:"",parent:'1622'},{ty:"method",name:"keepalive",path:"native::io::net",desc:"",parent:'1622'},{ty:"method",name:"letdie",path:"native::io::net",desc:"",parent:'1622'},{ty:"method",name:"clone",path:"native::io::net",desc:"",parent:'1622'},{ty:"method",name:"close_write",path:"native::io::net",desc:"",parent:'1622'},{ty:"method",name:"socket_name",path:"native::io::net",desc:"",parent:'1622'},{ty:"method",name:"bind",path:"native::io::net",desc:"",parent:'2100'},{ty:"method",name:"fd",path:"native::io::net",desc:"",parent:'2100'},{ty:"method",name:"native_listen",path:"native::io::net",desc:"",parent:'2100'},{ty:"method",name:"listen",path:"native::io::net",desc:"",parent:'2100'},{ty:"method",name:"socket_name",path:"native::io::net",desc:"",parent:'2100'},{ty:"method",name:"fd",path:"native::io::net",desc:"",parent:'2316'},{ty:"method",name:"native_accept",path:"native::io::net",desc:"",parent:'2316'},{ty:"method",name:"socket_name",path:"native::io::net",desc:"",parent:'2316'},{ty:"method",name:"accept",path:"native::io::net",desc:"",parent:'2316'},{ty:"method",name:"accept_simultaneously",path:"native::io::net",desc:"",parent:'2316'},{ty:"method",name:"dont_accept_simultaneously",path:"native::io::net",desc:"",parent:'2316'},{ty:"method",name:"bind",path:"native::io::net",desc:"",parent:'2490'},{ty:"method",name:"fd",path:"native::io::net",desc:"",parent:'2490'},{ty:"method",name:"set_broadcast",path:"native::io::net",desc:"",parent:'2490'},{ty:"method",name:"set_multicast_loop",path:"native::io::net",desc:"",parent:'2490'},{ty:"method",name:"set_membership",path:"native::io::net",desc:"",parent:'2490'},{ty:"method",name:"socket_name",path:"native::io::net",desc:"",parent:'2490'},{ty:"method",name:"recvfrom",path:"native::io::net",desc:"",parent:'2490'},{ty:"method",name:"sendto",path:"native::io::net",desc:"",parent:'2490'},{ty:"method",name:"join_multicast",path:"native::io::net",desc:"",parent:'2490'},{ty:"method",name:"leave_multicast",path:"native::io::net",desc:"",parent:'2490'},{ty:"method",name:"loop_multicast_locally",path:"native::io::net",desc:"",parent:'2490'},{ty:"method",name:"dont_loop_multicast_locally",path:"native::io::net",desc:"",parent:'2490'},{ty:"method",name:"multicast_time_to_live",path:"native::io::net",desc:"",parent:'2490'},{ty:"method",name:"time_to_live",path:"native::io::net",desc:"",parent:'2490'},{ty:"method",name:"hear_broadcasts",path:"native::io::net",desc:"",parent:'2490'},{ty:"method",name:"ignore_broadcasts",path:"native::io::net",desc:"",parent:'2490'},{ty:"method",name:"clone",path:"native::io::net",desc:"",parent:'2490'},{ty:"mod",name:"process",path:"native::io",desc:""},{ty:"struct",name:"Process",path:"native::io::process",desc:"A value representing a child process."},{ty:"method",name:"spawn",path:"native::io::process",desc:"Creates a new process using native process-spawning abilities provided\nby the OS. Operations on this process will be blocking instead of using\nthe runtime for sleeping just this current task.",parent:'3127'},{ty:"method",name:"kill",path:"native::io::process",desc:"",parent:'3127'},{ty:"method",name:"id",path:"native::io::process",desc:"",parent:'3127'},{ty:"method",name:"wait",path:"native::io::process",desc:"",parent:'3127'},{ty:"method",name:"kill",path:"native::io::process",desc:"",parent:'3127'},{ty:"method",name:"drop",path:"native::io::process",desc:"",parent:'3127'},{ty:"mod",name:"file",path:"native::io",desc:"Blocking win32-based file I/O"},{ty:"struct",name:"FileDesc",path:"native::io::file",desc:""},{ty:"fn",name:"open",path:"native::io::file",desc:""},{ty:"fn",name:"mkdir",path:"native::io::file",desc:""},{ty:"fn",name:"readdir",path:"native::io::file",desc:""},{ty:"fn",name:"unlink",path:"native::io::file",desc:""},{ty:"fn",name:"rename",path:"native::io::file",desc:""},{ty:"fn",name:"chmod",path:"native::io::file",desc:""},{ty:"fn",name:"rmdir",path:"native::io::file",desc:""},{ty:"fn",name:"chown",path:"native::io::file",desc:""},{ty:"fn",name:"readlink",path:"native::io::file",desc:""},{ty:"fn",name:"symlink",path:"native::io::file",desc:""},{ty:"fn",name:"link",path:"native::io::file",desc:""},{ty:"fn",name:"stat",path:"native::io::file",desc:""},{ty:"fn",name:"lstat",path:"native::io::file",desc:""},{ty:"fn",name:"utime",path:"native::io::file",desc:""},{ty:"typedef",name:"fd_t",path:"native::io::file",desc:""},{ty:"method",name:"new",path:"native::io::file",desc:"Create a `FileDesc` from an open C file descriptor.",parent:'5948'},{ty:"method",name:"inner_read",path:"native::io::file",desc:"",parent:'5948'},{ty:"method",name:"inner_write",path:"native::io::file",desc:"",parent:'5948'},{ty:"method",name:"fd",path:"native::io::file",desc:"",parent:'5948'},{ty:"method",name:"handle",path:"native::io::file",desc:"",parent:'5948'},{ty:"method",name:"read",path:"native::io::file",desc:"",parent:'5948'},{ty:"method",name:"write",path:"native::io::file",desc:"",parent:'5948'},{ty:"method",name:"read",path:"native::io::file",desc:"",parent:'5948'},{ty:"method",name:"write",path:"native::io::file",desc:"",parent:'5948'},{ty:"method",name:"pread",path:"native::io::file",desc:"",parent:'5948'},{ty:"method",name:"pwrite",path:"native::io::file",desc:"",parent:'5948'},{ty:"method",name:"seek",path:"native::io::file",desc:"",parent:'5948'},{ty:"method",name:"tell",path:"native::io::file",desc:"",parent:'5948'},{ty:"method",name:"fsync",path:"native::io::file",desc:"",parent:'5948'},{ty:"method",name:"datasync",path:"native::io::file",desc:"",parent:'5948'},{ty:"method",name:"truncate",path:"native::io::file",desc:"",parent:'5948'},{ty:"method",name:"read",path:"native::io::file",desc:"",parent:'5948'},{ty:"method",name:"write",path:"native::io::file",desc:"",parent:'5948'},{ty:"method",name:"clone",path:"native::io::file",desc:"",parent:'5948'},{ty:"method",name:"read",path:"native::io::file",desc:"",parent:'5948'},{ty:"method",name:"write",path:"native::io::file",desc:"",parent:'5948'},{ty:"method",name:"set_raw",path:"native::io::file",desc:"",parent:'5948'},{ty:"method",name:"get_winsize",path:"native::io::file",desc:"",parent:'5948'},{ty:"method",name:"isatty",path:"native::io::file",desc:"",parent:'5948'},{ty:"mod",name:"timer",path:"native::io",desc:"Timers based on win32 WaitableTimers"},{ty:"struct",name:"Timer",path:"native::io::timer",desc:""},{ty:"enum",name:"Req",path:"native::io::timer",desc:""},{ty:"variant",name:"NewTimer",path:"native::io::timer",desc:"",parent:'8292'},{ty:"variant",name:"RemoveTimer",path:"native::io::timer",desc:"",parent:'8292'},{ty:"variant",name:"Shutdown",path:"native::io::timer",desc:"",parent:'8292'},{ty:"method",name:"new",path:"native::io::timer",desc:"",parent:'8285'},{ty:"method",name:"sleep",path:"native::io::timer",desc:"",parent:'8285'},{ty:"method",name:"sleep",path:"native::io::timer",desc:"",parent:'8285'},{ty:"method",name:"oneshot",path:"native::io::timer",desc:"",parent:'8285'},{ty:"method",name:"period",path:"native::io::timer",desc:"",parent:'8285'},{ty:"method",name:"drop",path:"native::io::timer",desc:"",parent:'8285'},{ty:"mod",name:"pipe",path:"native::io",desc:"Named pipes implementation for windows"},{ty:"struct",name:"UnixStream",path:"native::io::pipe",desc:""},{ty:"struct",name:"UnixListener",path:"native::io::pipe",desc:""},{ty:"struct",name:"UnixAcceptor",path:"native::io::pipe",desc:""},{ty:"method",name:"connect",path:"native::io::pipe",desc:"",parent:'9788'},{ty:"method",name:"read",path:"native::io::pipe",desc:"",parent:'9788'},{ty:"method",name:"write",path:"native::io::pipe",desc:"",parent:'9788'},{ty:"method",name:"clone",path:"native::io::pipe",desc:"",parent:'9788'},{ty:"method",name:"bind",path:"native::io::pipe",desc:"",parent:'10426'},{ty:"method",name:"native_listen",path:"native::io::pipe",desc:"",parent:'10426'},{ty:"method",name:"drop",path:"native::io::pipe",desc:"",parent:'10426'},{ty:"method",name:"listen",path:"native::io::pipe",desc:"",parent:'10426'},{ty:"method",name:"native_accept",path:"native::io::pipe",desc:"",parent:'10566'},{ty:"method",name:"accept",path:"native::io::pipe",desc:"",parent:'10566'},{ty:"typedef",name:"IoResult",path:"native::io",desc:""},{ty:"method",name:"new",path:"native::io",desc:"",parent:'11729'},{ty:"method",name:"tcp_connect",path:"native::io",desc:"",parent:'11729'},{ty:"method",name:"tcp_bind",path:"native::io",desc:"",parent:'11729'},{ty:"method",name:"udp_bind",path:"native::io",desc:"",parent:'11729'},{ty:"method",name:"unix_bind",path:"native::io",desc:"",parent:'11729'},{ty:"method",name:"unix_connect",path:"native::io",desc:"",parent:'11729'},{ty:"method",name:"get_host_addresses",path:"native::io",desc:"",parent:'11729'},{ty:"method",name:"fs_from_raw_fd",path:"native::io",desc:"",parent:'11729'},{ty:"method",name:"fs_open",path:"native::io",desc:"",parent:'11729'},{ty:"method",name:"fs_unlink",path:"native::io",desc:"",parent:'11729'},{ty:"method",name:"fs_stat",path:"native::io",desc:"",parent:'11729'},{ty:"method",name:"fs_mkdir",path:"native::io",desc:"",parent:'11729'},{ty:"method",name:"fs_chmod",path:"native::io",desc:"",parent:'11729'},{ty:"method",name:"fs_rmdir",path:"native::io",desc:"",parent:'11729'},{ty:"method",name:"fs_rename",path:"native::io",desc:"",parent:'11729'},{ty:"method",name:"fs_readdir",path:"native::io",desc:"",parent:'11729'},{ty:"method",name:"fs_lstat",path:"native::io",desc:"",parent:'11729'},{ty:"method",name:"fs_chown",path:"native::io",desc:"",parent:'11729'},{ty:"method",name:"fs_readlink",path:"native::io",desc:"",parent:'11729'},{ty:"method",name:"fs_symlink",path:"native::io",desc:"",parent:'11729'},{ty:"method",name:"fs_link",path:"native::io",desc:"",parent:'11729'},{ty:"method",name:"fs_utime",path:"native::io",desc:"",parent:'11729'},{ty:"method",name:"timer_init",path:"native::io",desc:"",parent:'11729'},{ty:"method",name:"spawn",path:"native::io",desc:"",parent:'11729'},{ty:"method",name:"kill",path:"native::io",desc:"",parent:'11729'},{ty:"method",name:"pipe_open",path:"native::io",desc:"",parent:'11729'},{ty:"method",name:"tty_open",path:"native::io",desc:"",parent:'11729'},{ty:"method",name:"signal",path:"native::io",desc:"",parent:'11729'},{ty:"mod",name:"task",path:"native",desc:"Tasks implemented on top of OS threads"},{ty:"fn",name:"new",path:"native::task",desc:"Creates a new Task which is ready to execute as a 1:1 task."},{ty:"fn",name:"spawn",path:"native::task",desc:"Spawns a function with the default configuration"},{ty:"fn",name:"spawn_opts",path:"native::task",desc:"Spawns a new task given the configuration options and a procedure to run\ninside the task."}];allPaths['native'] = {'13178':{type:'fn',name:'start'},'5948':{type:'struct',name:'FileDesc'},'489':{type:'fn',name:'htons'},'2490':{type:'struct',name:'UdpSocket'},'7155':{type:'fn',name:'mkdir'},'0':{type:'mod',name:'native'},'8205':{type:'fn',name:'lstat'},'11403':{type:'typedef',name:'IoResult'},'7635':{type:'fn',name:'chmod'},'8150':{type:'fn',name:'stat'},'12575':{type:'fn',name:'spawn_opts'},'7699':{type:'fn',name:'chown'},'3127':{type:'struct',name:'Process'},'32':{type:'mod',name:'addrinfo'},'10426':{type:'struct',name:'UnixListener'},'9788':{type:'struct',name:'UnixStream'},'5':{type:'mod',name:'io'},'7191':{type:'fn',name:'readdir'},'8311':{type:'enum',name:'Req'},'2316':{type:'struct',name:'TcpAcceptor'},'7921':{type:'fn',name:'symlink'},'1622':{type:'struct',name:'TcpStream'},'6940':{type:'fn',name:'open'},'10566':{type:'struct',name:'UnixAcceptor'},'12563':{type:'fn',name:'spawn'},'3112':{type:'mod',name:'process'},'5938':{type:'typedef',name:'fd_t'},'12486':{type:'mod',name:'task'},'2100':{type:'struct',name:'TcpListener'},'7585':{type:'fn',name:'rename'},'10867':{type:'mod',name:'timer_helper'},'13284':{type:'fn',name:'run'},'46':{type:'struct',name:'GetAddrInfoRequest'},'7671':{type:'fn',name:'rmdir'},'8220':{type:'fn',name:'utime'},'8303':{type:'enum',name:'Req'},'12505':{type:'fn',name:'new'},'486':{type:'typedef',name:'sock_t'},'8292':{type:'enum',name:'Req'},'989':{type:'fn',name:'sockaddr_to_addr'},'7974':{type:'fn',name:'link'},'8277':{type:'mod',name:'timer'},'11729':{type:'struct',name:'IoFactory'},'473':{type:'mod',name:'net'},'8285':{type:'struct',name:'Timer'},'9612':{type:'mod',name:'pipe'},'7720':{type:'fn',name:'readlink'},'5918':{type:'mod',name:'file'},'8312':{type:'enum',name:'Req'},'1384':{type:'fn',name:'init'},'506':{type:'fn',name:'ntohs'},'7555':{type:'fn',name:'unlink'}};

searchIndex['rustuv'] = [{ty:"mod",name:"",path:"rustuv",desc:"Bindings to libuv, along with the default implementation of `std::rt::rtio`."},{ty:"struct",name:"ForbidSwitch",path:"rustuv",desc:""},{ty:"struct",name:"ForbidUnwind",path:"rustuv",desc:""},{ty:"structfield",name:"msg",path:"rustuv",desc:"",parent:'21565'},{ty:"structfield",name:"failing_before",path:"rustuv",desc:"",parent:'21565'},{ty:"struct",name:"Request",path:"rustuv",desc:""},{ty:"structfield",name:"handle",path:"rustuv",desc:"",parent:'21931'},{ty:"struct",name:"Loop",path:"rustuv",desc:"FIXME: Loop(*handle) is buggy with destructors. Normal structs\nwith dtors may not be destructured, but tuple structs can,\nbut the results are not correct."},{ty:"struct",name:"UvError",path:"rustuv",desc:""},{ty:"fn",name:"uv_error_to_io_error",path:"rustuv",desc:""},{ty:"fn",name:"status_to_maybe_uv_error",path:"rustuv",desc:"Given a uv error code, convert a callback status to a UvError"},{ty:"fn",name:"status_to_io_result",path:"rustuv",desc:""},{ty:"fn",name:"empty_buf",path:"rustuv",desc:""},{ty:"fn",name:"slice_to_uv_buf",path:"rustuv",desc:"Borrow a slice to a Buf"},{ty:"mod",name:"uvio",path:"rustuv",desc:"The implementation of `rtio` for libuv\nThe implementation of `rtio` for libuv"},{ty:"struct",name:"UvEventLoop",path:"rustuv::uvio",desc:""},{ty:"struct",name:"UvIoFactory",path:"rustuv::uvio",desc:""},{ty:"structfield",name:"loop_",path:"rustuv::uvio",desc:"",parent:'2152'},{ty:"fn",name:"new_loop",path:"rustuv::uvio",desc:""},{ty:"method",name:"new",path:"rustuv::uvio",desc:"",parent:'1951'},{ty:"method",name:"drop",path:"rustuv::uvio",desc:"",parent:'1951'},{ty:"method",name:"run",path:"rustuv::uvio",desc:"",parent:'1951'},{ty:"method",name:"callback",path:"rustuv::uvio",desc:"",parent:'1951'},{ty:"method",name:"pausable_idle_callback",path:"rustuv::uvio",desc:"",parent:'1951'},{ty:"method",name:"remote_callback",path:"rustuv::uvio",desc:"",parent:'1951'},{ty:"method",name:"io",path:"rustuv::uvio",desc:"",parent:'1951'},{ty:"method",name:"has_active_io",path:"rustuv::uvio",desc:"",parent:'1951'},{ty:"method",name:"uv_loop",path:"rustuv::uvio",desc:"",parent:'2152'},{ty:"method",name:"make_handle",path:"rustuv::uvio",desc:"",parent:'2152'},{ty:"method",name:"tcp_connect",path:"rustuv::uvio",desc:"",parent:'2152'},{ty:"method",name:"tcp_bind",path:"rustuv::uvio",desc:"",parent:'2152'},{ty:"method",name:"udp_bind",path:"rustuv::uvio",desc:"",parent:'2152'},{ty:"method",name:"timer_init",path:"rustuv::uvio",desc:"",parent:'2152'},{ty:"method",name:"get_host_addresses",path:"rustuv::uvio",desc:"",parent:'2152'},{ty:"method",name:"fs_from_raw_fd",path:"rustuv::uvio",desc:"",parent:'2152'},{ty:"method",name:"fs_open",path:"rustuv::uvio",desc:"",parent:'2152'},{ty:"method",name:"fs_unlink",path:"rustuv::uvio",desc:"",parent:'2152'},{ty:"method",name:"fs_lstat",path:"rustuv::uvio",desc:"",parent:'2152'},{ty:"method",name:"fs_stat",path:"rustuv::uvio",desc:"",parent:'2152'},{ty:"method",name:"fs_mkdir",path:"rustuv::uvio",desc:"",parent:'2152'},{ty:"method",name:"fs_rmdir",path:"rustuv::uvio",desc:"",parent:'2152'},{ty:"method",name:"fs_rename",path:"rustuv::uvio",desc:"",parent:'2152'},{ty:"method",name:"fs_chmod",path:"rustuv::uvio",desc:"",parent:'2152'},{ty:"method",name:"fs_readdir",path:"rustuv::uvio",desc:"",parent:'2152'},{ty:"method",name:"fs_link",path:"rustuv::uvio",desc:"",parent:'2152'},{ty:"method",name:"fs_symlink",path:"rustuv::uvio",desc:"",parent:'2152'},{ty:"method",name:"fs_chown",path:"rustuv::uvio",desc:"",parent:'2152'},{ty:"method",name:"fs_readlink",path:"rustuv::uvio",desc:"",parent:'2152'},{ty:"method",name:"fs_utime",path:"rustuv::uvio",desc:"",parent:'2152'},{ty:"method",name:"spawn",path:"rustuv::uvio",desc:"",parent:'2152'},{ty:"method",name:"kill",path:"rustuv::uvio",desc:"",parent:'2152'},{ty:"method",name:"unix_bind",path:"rustuv::uvio",desc:"",parent:'2152'},{ty:"method",name:"unix_connect",path:"rustuv::uvio",desc:"",parent:'2152'},{ty:"method",name:"tty_open",path:"rustuv::uvio",desc:"",parent:'2152'},{ty:"method",name:"pipe_open",path:"rustuv::uvio",desc:"",parent:'2152'},{ty:"method",name:"signal",path:"rustuv::uvio",desc:"",parent:'2152'},{ty:"mod",name:"uvll",path:"rustuv",desc:"C bindings to libuv\nC bindings to libuv\nLow-level bindings to the libuv library."},{ty:"struct",name:"uv_buf_t",path:"rustuv::uvll",desc:""},{ty:"structfield",name:"len",path:"rustuv::uvll",desc:"",parent:'3397'},{ty:"structfield",name:"base",path:"rustuv::uvll",desc:"",parent:'3397'},{ty:"struct",name:"uv_process_options_t",path:"rustuv::uvll",desc:""},{ty:"structfield",name:"exit_cb",path:"rustuv::uvll",desc:"",parent:'3410'},{ty:"structfield",name:"file",path:"rustuv::uvll",desc:"",parent:'3410'},{ty:"structfield",name:"args",path:"rustuv::uvll",desc:"",parent:'3410'},{ty:"structfield",name:"env",path:"rustuv::uvll",desc:"",parent:'3410'},{ty:"structfield",name:"cwd",path:"rustuv::uvll",desc:"",parent:'3410'},{ty:"structfield",name:"flags",path:"rustuv::uvll",desc:"",parent:'3410'},{ty:"structfield",name:"stdio_count",path:"rustuv::uvll",desc:"",parent:'3410'},{ty:"structfield",name:"stdio",path:"rustuv::uvll",desc:"",parent:'3410'},{ty:"structfield",name:"uid",path:"rustuv::uvll",desc:"",parent:'3410'},{ty:"structfield",name:"gid",path:"rustuv::uvll",desc:"",parent:'3410'},{ty:"struct",name:"uv_stdio_container_t",path:"rustuv::uvll",desc:""},{ty:"struct",name:"uv_timespec_t",path:"rustuv::uvll",desc:""},{ty:"structfield",name:"tv_sec",path:"rustuv::uvll",desc:"",parent:'3516'},{ty:"structfield",name:"tv_nsec",path:"rustuv::uvll",desc:"",parent:'3516'},{ty:"struct",name:"uv_stat_t",path:"rustuv::uvll",desc:""},{ty:"structfield",name:"st_dev",path:"rustuv::uvll",desc:"",parent:'3523'},{ty:"structfield",name:"st_mode",path:"rustuv::uvll",desc:"",parent:'3523'},{ty:"structfield",name:"st_nlink",path:"rustuv::uvll",desc:"",parent:'3523'},{ty:"structfield",name:"st_uid",path:"rustuv::uvll",desc:"",parent:'3523'},{ty:"structfield",name:"st_gid",path:"rustuv::uvll",desc:"",parent:'3523'},{ty:"structfield",name:"st_rdev",path:"rustuv::uvll",desc:"",parent:'3523'},{ty:"structfield",name:"st_ino",path:"rustuv::uvll",desc:"",parent:'3523'},{ty:"structfield",name:"st_size",path:"rustuv::uvll",desc:"",parent:'3523'},{ty:"structfield",name:"st_blksize",path:"rustuv::uvll",desc:"",parent:'3523'},{ty:"structfield",name:"st_blocks",path:"rustuv::uvll",desc:"",parent:'3523'},{ty:"structfield",name:"st_flags",path:"rustuv::uvll",desc:"",parent:'3523'},{ty:"structfield",name:"st_gen",path:"rustuv::uvll",desc:"",parent:'3523'},{ty:"structfield",name:"st_atim",path:"rustuv::uvll",desc:"",parent:'3523'},{ty:"structfield",name:"st_mtim",path:"rustuv::uvll",desc:"",parent:'3523'},{ty:"structfield",name:"st_ctim",path:"rustuv::uvll",desc:"",parent:'3523'},{ty:"structfield",name:"st_birthtim",path:"rustuv::uvll",desc:"",parent:'3523'},{ty:"enum",name:"uv_run_mode",path:"rustuv::uvll",desc:""},{ty:"variant",name:"RUN_DEFAULT",path:"rustuv::uvll",desc:"",parent:'3405'},{ty:"variant",name:"RUN_ONCE",path:"rustuv::uvll",desc:"",parent:'3405'},{ty:"variant",name:"RUN_NOWAIT",path:"rustuv::uvll",desc:"",parent:'3405'},{ty:"enum",name:"uv_handle_type",path:"rustuv::uvll",desc:""},{ty:"variant",name:"UV_UNKNOWN_HANDLE",path:"rustuv::uvll",desc:"",parent:'3882'},{ty:"variant",name:"UV_ASYNC",path:"rustuv::uvll",desc:"",parent:'3882'},{ty:"variant",name:"UV_CHECK",path:"rustuv::uvll",desc:"",parent:'3882'},{ty:"variant",name:"UV_FS_EVENT",path:"rustuv::uvll",desc:"",parent:'3882'},{ty:"variant",name:"UV_FS_POLL",path:"rustuv::uvll",desc:"",parent:'3882'},{ty:"variant",name:"UV_HANDLE",path:"rustuv::uvll",desc:"",parent:'3882'},{ty:"variant",name:"UV_IDLE",path:"rustuv::uvll",desc:"",parent:'3882'},{ty:"variant",name:"UV_NAMED_PIPE",path:"rustuv::uvll",desc:"",parent:'3882'},{ty:"variant",name:"UV_POLL",path:"rustuv::uvll",desc:"",parent:'3882'},{ty:"variant",name:"UV_PREPARE",path:"rustuv::uvll",desc:"",parent:'3882'},{ty:"variant",name:"UV_PROCESS",path:"rustuv::uvll",desc:"",parent:'3882'},{ty:"variant",name:"UV_STREAM",path:"rustuv::uvll",desc:"",parent:'3882'},{ty:"variant",name:"UV_TCP",path:"rustuv::uvll",desc:"",parent:'3882'},{ty:"variant",name:"UV_TIMER",path:"rustuv::uvll",desc:"",parent:'3882'},{ty:"variant",name:"UV_TTY",path:"rustuv::uvll",desc:"",parent:'3882'},{ty:"variant",name:"UV_UDP",path:"rustuv::uvll",desc:"",parent:'3882'},{ty:"variant",name:"UV_SIGNAL",path:"rustuv::uvll",desc:"",parent:'3882'},{ty:"variant",name:"UV_FILE",path:"rustuv::uvll",desc:"",parent:'3882'},{ty:"variant",name:"UV_HANDLE_TYPE_MAX",path:"rustuv::uvll",desc:"",parent:'3882'},{ty:"enum",name:"uv_req_type",path:"rustuv::uvll",desc:""},{ty:"variant",name:"UV_UNKNOWN_REQ",path:"rustuv::uvll",desc:"",parent:'4240'},{ty:"variant",name:"UV_REQ",path:"rustuv::uvll",desc:"",parent:'4240'},{ty:"variant",name:"UV_CONNECT",path:"rustuv::uvll",desc:"",parent:'4240'},{ty:"variant",name:"UV_WRITE",path:"rustuv::uvll",desc:"",parent:'4240'},{ty:"variant",name:"UV_SHUTDOWN",path:"rustuv::uvll",desc:"",parent:'4240'},{ty:"variant",name:"UV_UDP_SEND",path:"rustuv::uvll",desc:"",parent:'4240'},{ty:"variant",name:"UV_FS",path:"rustuv::uvll",desc:"",parent:'4240'},{ty:"variant",name:"UV_WORK",path:"rustuv::uvll",desc:"",parent:'4240'},{ty:"variant",name:"UV_GETADDRINFO",path:"rustuv::uvll",desc:"",parent:'4240'},{ty:"variant",name:"UV_ACCEPT",path:"rustuv::uvll",desc:"",parent:'4240'},{ty:"variant",name:"UV_FS_EVENT_REQ",path:"rustuv::uvll",desc:"",parent:'4240'},{ty:"variant",name:"UV_POLL_REQ",path:"rustuv::uvll",desc:"",parent:'4240'},{ty:"variant",name:"UV_PROCESS_EXIT",path:"rustuv::uvll",desc:"",parent:'4240'},{ty:"variant",name:"UV_READ",path:"rustuv::uvll",desc:"",parent:'4240'},{ty:"variant",name:"UV_UDP_RECV",path:"rustuv::uvll",desc:"",parent:'4240'},{ty:"variant",name:"UV_WAKEUP",path:"rustuv::uvll",desc:"",parent:'4240'},{ty:"variant",name:"UV_SIGNAL_REQ",path:"rustuv::uvll",desc:"",parent:'4240'},{ty:"variant",name:"UV_REQ_TYPE_MAX",path:"rustuv::uvll",desc:"",parent:'4240'},{ty:"enum",name:"uv_membership",path:"rustuv::uvll",desc:""},{ty:"variant",name:"UV_LEAVE_GROUP",path:"rustuv::uvll",desc:"",parent:'4581'},{ty:"variant",name:"UV_JOIN_GROUP",path:"rustuv::uvll",desc:"",parent:'4581'},{ty:"fn",name:"malloc_handle",path:"rustuv::uvll",desc:""},{ty:"fn",name:"free_handle",path:"rustuv::uvll",desc:""},{ty:"fn",name:"malloc_req",path:"rustuv::uvll",desc:""},{ty:"fn",name:"free_req",path:"rustuv::uvll",desc:""},{ty:"fn",name:"loop_new",path:"rustuv::uvll",desc:""},{ty:"fn",name:"uv_write",path:"rustuv::uvll",desc:""},{ty:"fn",name:"uv_udp_send",path:"rustuv::uvll",desc:""},{ty:"fn",name:"get_udp_handle_from_send_req",path:"rustuv::uvll",desc:""},{ty:"fn",name:"process_pid",path:"rustuv::uvll",desc:""},{ty:"fn",name:"set_stdio_container_flags",path:"rustuv::uvll",desc:""},{ty:"fn",name:"set_stdio_container_fd",path:"rustuv::uvll",desc:""},{ty:"fn",name:"set_stdio_container_stream",path:"rustuv::uvll",desc:""},{ty:"fn",name:"get_result_from_fs_req",path:"rustuv::uvll",desc:""},{ty:"fn",name:"get_ptr_from_fs_req",path:"rustuv::uvll",desc:""},{ty:"fn",name:"get_path_from_fs_req",path:"rustuv::uvll",desc:""},{ty:"fn",name:"get_loop_from_fs_req",path:"rustuv::uvll",desc:""},{ty:"fn",name:"get_loop_from_getaddrinfo_req",path:"rustuv::uvll",desc:""},{ty:"fn",name:"get_loop_for_uv_handle",path:"rustuv::uvll",desc:""},{ty:"fn",name:"get_stream_handle_from_connect_req",path:"rustuv::uvll",desc:""},{ty:"fn",name:"get_stream_handle_from_write_req",path:"rustuv::uvll",desc:""},{ty:"fn",name:"get_data_for_uv_loop",path:"rustuv::uvll",desc:""},{ty:"fn",name:"set_data_for_uv_loop",path:"rustuv::uvll",desc:""},{ty:"fn",name:"get_data_for_uv_handle",path:"rustuv::uvll",desc:""},{ty:"fn",name:"set_data_for_uv_handle",path:"rustuv::uvll",desc:""},{ty:"fn",name:"get_data_for_req",path:"rustuv::uvll",desc:""},{ty:"fn",name:"set_data_for_req",path:"rustuv::uvll",desc:""},{ty:"fn",name:"populate_stat",path:"rustuv::uvll",desc:""},{ty:"fn",name:"guess_handle",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_loop_delete",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_ref",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_unref",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_handle_size",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_req_size",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_run",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_close",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_walk",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_buf_init",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_strerror",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_err_name",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_listen",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_accept",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_read_start",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_read_stop",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_shutdown",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_idle_init",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_idle_start",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_idle_stop",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_async_init",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_async_send",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_tcp_init",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_tcp_connect",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_tcp_bind",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_tcp_nodelay",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_tcp_keepalive",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_tcp_simultaneous_accepts",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_tcp_getsockname",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_tcp_getpeername",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_udp_init",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_udp_bind",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_udp_recv_start",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_udp_set_membership",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_udp_recv_stop",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_udp_set_multicast_loop",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_udp_set_multicast_ttl",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_udp_set_ttl",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_udp_set_broadcast",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_udp_getsockname",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_timer_init",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_timer_start",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_timer_stop",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_fs_open",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_fs_unlink",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_fs_write",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_fs_read",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_fs_close",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_fs_stat",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_fs_fstat",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_fs_mkdir",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_fs_rmdir",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_fs_readdir",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_fs_req_cleanup",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_fs_fsync",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_fs_fdatasync",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_fs_ftruncate",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_fs_readlink",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_fs_symlink",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_fs_rename",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_fs_utime",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_fs_link",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_fs_chown",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_fs_chmod",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_fs_lstat",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_getaddrinfo",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_freeaddrinfo",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_spawn",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_process_kill",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_kill",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_pipe_init",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_pipe_open",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_pipe_bind",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_pipe_connect",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_tty_init",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_tty_set_mode",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_tty_get_winsize",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_signal_init",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_signal_start",path:"rustuv::uvll",desc:""},{ty:"ffi",name:"uv_signal_stop",path:"rustuv::uvll",desc:""},{ty:"mod",name:"errors",path:"rustuv::uvll",desc:""},{ty:"static",name:"EACCES",path:"rustuv::uvll::errors",desc:""},{ty:"static",name:"ECONNREFUSED",path:"rustuv::uvll::errors",desc:""},{ty:"static",name:"ECONNRESET",path:"rustuv::uvll::errors",desc:""},{ty:"static",name:"ENOENT",path:"rustuv::uvll::errors",desc:""},{ty:"static",name:"ENOTCONN",path:"rustuv::uvll::errors",desc:""},{ty:"static",name:"EPIPE",path:"rustuv::uvll::errors",desc:""},{ty:"static",name:"ECONNABORTED",path:"rustuv::uvll::errors",desc:""},{ty:"static",name:"ECANCELED",path:"rustuv::uvll::errors",desc:""},{ty:"static",name:"EBADF",path:"rustuv::uvll::errors",desc:""},{ty:"static",name:"EADDRNOTAVAIL",path:"rustuv::uvll::errors",desc:""},{ty:"typedef",name:"uv_buf_len_t",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_handle_t",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_req_t",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_loop_t",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_idle_t",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_tcp_t",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_udp_t",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_connect_t",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_connection_t",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_write_t",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_async_t",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_timer_t",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_stream_t",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_fs_t",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_udp_send_t",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_getaddrinfo_t",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_process_t",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_pipe_t",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_tty_t",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_signal_t",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_shutdown_t",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_idle_cb",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_alloc_cb",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_read_cb",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_udp_send_cb",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_udp_recv_cb",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_close_cb",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_walk_cb",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_async_cb",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_connect_cb",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_connection_cb",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_timer_cb",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_write_cb",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_getaddrinfo_cb",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_exit_cb",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_signal_cb",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_fs_cb",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_shutdown_cb",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_uid_t",path:"rustuv::uvll",desc:""},{ty:"typedef",name:"uv_gid_t",path:"rustuv::uvll",desc:""},{ty:"static",name:"OK",path:"rustuv::uvll",desc:""},{ty:"static",name:"EOF",path:"rustuv::uvll",desc:""},{ty:"static",name:"UNKNOWN",path:"rustuv::uvll",desc:""},{ty:"static",name:"PROCESS_SETUID",path:"rustuv::uvll",desc:""},{ty:"static",name:"PROCESS_SETGID",path:"rustuv::uvll",desc:""},{ty:"static",name:"PROCESS_WINDOWS_VERBATIM_ARGUMENTS",path:"rustuv::uvll",desc:""},{ty:"static",name:"PROCESS_DETACHED",path:"rustuv::uvll",desc:""},{ty:"static",name:"PROCESS_WINDOWS_HIDE",path:"rustuv::uvll",desc:""},{ty:"static",name:"STDIO_IGNORE",path:"rustuv::uvll",desc:""},{ty:"static",name:"STDIO_CREATE_PIPE",path:"rustuv::uvll",desc:""},{ty:"static",name:"STDIO_INHERIT_FD",path:"rustuv::uvll",desc:""},{ty:"static",name:"STDIO_INHERIT_STREAM",path:"rustuv::uvll",desc:""},{ty:"static",name:"STDIO_READABLE_PIPE",path:"rustuv::uvll",desc:""},{ty:"static",name:"STDIO_WRITABLE_PIPE",path:"rustuv::uvll",desc:""},{ty:"method",name:"new",path:"rustuv::uvll",desc:"",parent:'3523'},{ty:"method",name:"is_file",path:"rustuv::uvll",desc:"",parent:'3523'},{ty:"method",name:"is_dir",path:"rustuv::uvll",desc:"",parent:'3523'},{ty:"method",name:"eq",path:"rustuv::uvll",desc:"",parent:'3882'},{ty:"method",name:"ne",path:"rustuv::uvll",desc:"",parent:'3882'},{ty:"method",name:"eq",path:"rustuv::uvll",desc:"",parent:'4240'},{ty:"method",name:"ne",path:"rustuv::uvll",desc:"",parent:'4240'},{ty:"method",name:"eq",path:"rustuv::uvll",desc:"",parent:'4581'},{ty:"method",name:"ne",path:"rustuv::uvll",desc:"",parent:'4581'},{ty:"mod",name:"file",path:"rustuv",desc:""},{ty:"struct",name:"FsRequest",path:"rustuv::file",desc:""},{ty:"structfield",name:"req",path:"rustuv::file",desc:"",parent:'6970'},{ty:"struct",name:"FileWatcher",path:"rustuv::file",desc:""},{ty:"method",name:"open",path:"rustuv::file",desc:"",parent:'6970'},{ty:"method",name:"unlink",path:"rustuv::file",desc:"",parent:'6970'},{ty:"method",name:"lstat",path:"rustuv::file",desc:"",parent:'6970'},{ty:"method",name:"stat",path:"rustuv::file",desc:"",parent:'6970'},{ty:"method",name:"write",path:"rustuv::file",desc:"",parent:'6970'},{ty:"method",name:"read",path:"rustuv::file",desc:"",parent:'6970'},{ty:"method",name:"mkdir",path:"rustuv::file",desc:"",parent:'6970'},{ty:"method",name:"rmdir",path:"rustuv::file",desc:"",parent:'6970'},{ty:"method",name:"rename",path:"rustuv::file",desc:"",parent:'6970'},{ty:"method",name:"chmod",path:"rustuv::file",desc:"",parent:'6970'},{ty:"method",name:"readdir",path:"rustuv::file",desc:"",parent:'6970'},{ty:"method",name:"readlink",path:"rustuv::file",desc:"",parent:'6970'},{ty:"method",name:"chown",path:"rustuv::file",desc:"",parent:'6970'},{ty:"method",name:"truncate",path:"rustuv::file",desc:"",parent:'6970'},{ty:"method",name:"link",path:"rustuv::file",desc:"",parent:'6970'},{ty:"method",name:"symlink",path:"rustuv::file",desc:"",parent:'6970'},{ty:"method",name:"fsync",path:"rustuv::file",desc:"",parent:'6970'},{ty:"method",name:"datasync",path:"rustuv::file",desc:"",parent:'6970'},{ty:"method",name:"utime",path:"rustuv::file",desc:"",parent:'6970'},{ty:"method",name:"get_result",path:"rustuv::file",desc:"",parent:'6970'},{ty:"method",name:"get_stat",path:"rustuv::file",desc:"",parent:'6970'},{ty:"method",name:"get_ptr",path:"rustuv::file",desc:"",parent:'6970'},{ty:"method",name:"mkstat",path:"rustuv::file",desc:"",parent:'6970'},{ty:"method",name:"drop",path:"rustuv::file",desc:"",parent:'6970'},{ty:"method",name:"home",path:"rustuv::file",desc:"",parent:'6978'},{ty:"method",name:"new",path:"rustuv::file",desc:"",parent:'6978'},{ty:"method",name:"drop",path:"rustuv::file",desc:"",parent:'6978'},{ty:"method",name:"read",path:"rustuv::file",desc:"",parent:'6978'},{ty:"method",name:"write",path:"rustuv::file",desc:"",parent:'6978'},{ty:"method",name:"pread",path:"rustuv::file",desc:"",parent:'6978'},{ty:"method",name:"pwrite",path:"rustuv::file",desc:"",parent:'6978'},{ty:"method",name:"seek",path:"rustuv::file",desc:"",parent:'6978'},{ty:"method",name:"tell",path:"rustuv::file",desc:"",parent:'6978'},{ty:"method",name:"fsync",path:"rustuv::file",desc:"",parent:'6978'},{ty:"method",name:"datasync",path:"rustuv::file",desc:"",parent:'6978'},{ty:"method",name:"truncate",path:"rustuv::file",desc:"",parent:'6978'},{ty:"mod",name:"net",path:"rustuv",desc:""},{ty:"struct",name:"TcpWatcher",path:"rustuv::net",desc:"TCP implementation"},{ty:"structfield",name:"handle",path:"rustuv::net",desc:"",parent:'10000'},{ty:"structfield",name:"stream",path:"rustuv::net",desc:"",parent:'10000'},{ty:"structfield",name:"home",path:"rustuv::net",desc:"",parent:'10000'},{ty:"struct",name:"TcpListener",path:"rustuv::net",desc:""},{ty:"structfield",name:"home",path:"rustuv::net",desc:"",parent:'10020'},{ty:"structfield",name:"handle",path:"rustuv::net",desc:"",parent:'10020'},{ty:"struct",name:"TcpAcceptor",path:"rustuv::net",desc:""},{ty:"structfield",name:"listener",path:"rustuv::net",desc:"",parent:'10053'},{ty:"struct",name:"UdpWatcher",path:"rustuv::net",desc:"UDP implementation"},{ty:"structfield",name:"handle",path:"rustuv::net",desc:"",parent:'11825'},{ty:"structfield",name:"home",path:"rustuv::net",desc:"",parent:'11825'},{ty:"fn",name:"htons",path:"rustuv::net",desc:"Generic functions related to dealing with sockaddr things"},{ty:"fn",name:"ntohs",path:"rustuv::net",desc:""},{ty:"fn",name:"sockaddr_to_addr",path:"rustuv::net",desc:""},{ty:"method",name:"new",path:"rustuv::net",desc:"",parent:'10000'},{ty:"method",name:"connect",path:"rustuv::net",desc:"",parent:'10000'},{ty:"method",name:"home",path:"rustuv::net",desc:"",parent:'10000'},{ty:"method",name:"socket_name",path:"rustuv::net",desc:"",parent:'10000'},{ty:"method",name:"read",path:"rustuv::net",desc:"",parent:'10000'},{ty:"method",name:"write",path:"rustuv::net",desc:"",parent:'10000'},{ty:"method",name:"peer_name",path:"rustuv::net",desc:"",parent:'10000'},{ty:"method",name:"control_congestion",path:"rustuv::net",desc:"",parent:'10000'},{ty:"method",name:"nodelay",path:"rustuv::net",desc:"",parent:'10000'},{ty:"method",name:"keepalive",path:"rustuv::net",desc:"",parent:'10000'},{ty:"method",name:"letdie",path:"rustuv::net",desc:"",parent:'10000'},{ty:"method",name:"clone",path:"rustuv::net",desc:"",parent:'10000'},{ty:"method",name:"close_write",path:"rustuv::net",desc:"",parent:'10000'},{ty:"method",name:"uv_handle",path:"rustuv::net",desc:"",parent:'10000'},{ty:"method",name:"drop",path:"rustuv::net",desc:"",parent:'10000'},{ty:"method",name:"bind",path:"rustuv::net",desc:"",parent:'10020'},{ty:"method",name:"home",path:"rustuv::net",desc:"",parent:'10020'},{ty:"method",name:"uv_handle",path:"rustuv::net",desc:"",parent:'10020'},{ty:"method",name:"socket_name",path:"rustuv::net",desc:"",parent:'10020'},{ty:"method",name:"listen",path:"rustuv::net",desc:"",parent:'10020'},{ty:"method",name:"drop",path:"rustuv::net",desc:"",parent:'10020'},{ty:"method",name:"home",path:"rustuv::net",desc:"",parent:'10053'},{ty:"method",name:"socket_name",path:"rustuv::net",desc:"",parent:'10053'},{ty:"method",name:"accept",path:"rustuv::net",desc:"",parent:'10053'},{ty:"method",name:"accept_simultaneously",path:"rustuv::net",desc:"",parent:'10053'},{ty:"method",name:"dont_accept_simultaneously",path:"rustuv::net",desc:"",parent:'10053'},{ty:"method",name:"bind",path:"rustuv::net",desc:"",parent:'11825'},{ty:"method",name:"uv_handle",path:"rustuv::net",desc:"",parent:'11825'},{ty:"method",name:"home",path:"rustuv::net",desc:"",parent:'11825'},{ty:"method",name:"socket_name",path:"rustuv::net",desc:"",parent:'11825'},{ty:"method",name:"recvfrom",path:"rustuv::net",desc:"",parent:'11825'},{ty:"method",name:"sendto",path:"rustuv::net",desc:"",parent:'11825'},{ty:"method",name:"join_multicast",path:"rustuv::net",desc:"",parent:'11825'},{ty:"method",name:"leave_multicast",path:"rustuv::net",desc:"",parent:'11825'},{ty:"method",name:"loop_multicast_locally",path:"rustuv::net",desc:"",parent:'11825'},{ty:"method",name:"dont_loop_multicast_locally",path:"rustuv::net",desc:"",parent:'11825'},{ty:"method",name:"multicast_time_to_live",path:"rustuv::net",desc:"",parent:'11825'},{ty:"method",name:"time_to_live",path:"rustuv::net",desc:"",parent:'11825'},{ty:"method",name:"hear_broadcasts",path:"rustuv::net",desc:"",parent:'11825'},{ty:"method",name:"ignore_broadcasts",path:"rustuv::net",desc:"",parent:'11825'},{ty:"method",name:"clone",path:"rustuv::net",desc:"",parent:'11825'},{ty:"method",name:"drop",path:"rustuv::net",desc:"",parent:'11825'},{ty:"mod",name:"idle",path:"rustuv",desc:""},{ty:"struct",name:"IdleWatcher",path:"rustuv::idle",desc:""},{ty:"structfield",name:"handle",path:"rustuv::idle",desc:"",parent:'13268'},{ty:"structfield",name:"idle_flag",path:"rustuv::idle",desc:"",parent:'13268'},{ty:"structfield",name:"closed",path:"rustuv::idle",desc:"",parent:'13268'},{ty:"structfield",name:"callback",path:"rustuv::idle",desc:"",parent:'13268'},{ty:"method",name:"new",path:"rustuv::idle",desc:"",parent:'13268'},{ty:"method",name:"onetime",path:"rustuv::idle",desc:"",parent:'13268'},{ty:"method",name:"pause",path:"rustuv::idle",desc:"",parent:'13268'},{ty:"method",name:"resume",path:"rustuv::idle",desc:"",parent:'13268'},{ty:"method",name:"uv_handle",path:"rustuv::idle",desc:"",parent:'13268'},{ty:"method",name:"drop",path:"rustuv::idle",desc:"",parent:'13268'},{ty:"mod",name:"timer",path:"rustuv",desc:""},{ty:"struct",name:"TimerWatcher",path:"rustuv::timer",desc:""},{ty:"structfield",name:"handle",path:"rustuv::timer",desc:"",parent:'14599'},{ty:"structfield",name:"home",path:"rustuv::timer",desc:"",parent:'14599'},{ty:"structfield",name:"action",path:"rustuv::timer",desc:"",parent:'14599'},{ty:"structfield",name:"blocker",path:"rustuv::timer",desc:"",parent:'14599'},{ty:"structfield",name:"id",path:"rustuv::timer",desc:"",parent:'14599'},{ty:"enum",name:"NextAction",path:"rustuv::timer",desc:""},{ty:"variant",name:"WakeTask",path:"rustuv::timer",desc:"",parent:'14620'},{ty:"variant",name:"SendOnce",path:"rustuv::timer",desc:"",parent:'14620'},{ty:"variant",name:"SendMany",path:"rustuv::timer",desc:"",parent:'14620'},{ty:"method",name:"new",path:"rustuv::timer",desc:"",parent:'14599'},{ty:"method",name:"home",path:"rustuv::timer",desc:"",parent:'14599'},{ty:"method",name:"uv_handle",path:"rustuv::timer",desc:"",parent:'14599'},{ty:"method",name:"sleep",path:"rustuv::timer",desc:"",parent:'14599'},{ty:"method",name:"oneshot",path:"rustuv::timer",desc:"",parent:'14599'},{ty:"method",name:"period",path:"rustuv::timer",desc:"",parent:'14599'},{ty:"method",name:"drop",path:"rustuv::timer",desc:"",parent:'14599'},{ty:"mod",name:"async",path:"rustuv",desc:""},{ty:"struct",name:"AsyncWatcher",path:"rustuv::async",desc:""},{ty:"structfield",name:"handle",path:"rustuv::async",desc:"",parent:'15616'},{ty:"structfield",name:"exit_flag",path:"rustuv::async",desc:"",parent:'15616'},{ty:"method",name:"new",path:"rustuv::async",desc:"",parent:'15616'},{ty:"method",name:"uv_handle",path:"rustuv::async",desc:"",parent:'15616'},{ty:"method",name:"from_uv_handle",path:"rustuv::async",desc:"",parent:'15616'},{ty:"method",name:"fire",path:"rustuv::async",desc:"",parent:'15616'},{ty:"method",name:"drop",path:"rustuv::async",desc:"",parent:'15616'},{ty:"mod",name:"addrinfo",path:"rustuv",desc:""},{ty:"struct",name:"GetAddrInfoRequest",path:"rustuv::addrinfo",desc:""},{ty:"fn",name:"accum_addrinfo",path:"rustuv::addrinfo",desc:""},{ty:"method",name:"run",path:"rustuv::addrinfo",desc:"",parent:'16115'},{ty:"mod",name:"process",path:"rustuv",desc:""},{ty:"struct",name:"Process",path:"rustuv::process",desc:""},{ty:"structfield",name:"handle",path:"rustuv::process",desc:"",parent:'16805'},{ty:"structfield",name:"home",path:"rustuv::process",desc:"",parent:'16805'},{ty:"structfield",name:"to_wake",path:"rustuv::process",desc:"Task to wake up (may be null) for when the process exits",parent:'16805'},{ty:"structfield",name:"exit_status",path:"rustuv::process",desc:"Collected from the exit_cb",parent:'16805'},{ty:"method",name:"spawn",path:"rustuv::process",desc:"Spawn a new process inside the specified event loop.",parent:'16805'},{ty:"method",name:"kill",path:"rustuv::process",desc:"",parent:'16805'},{ty:"method",name:"home",path:"rustuv::process",desc:"",parent:'16805'},{ty:"method",name:"uv_handle",path:"rustuv::process",desc:"",parent:'16805'},{ty:"method",name:"id",path:"rustuv::process",desc:"",parent:'16805'},{ty:"method",name:"kill",path:"rustuv::process",desc:"",parent:'16805'},{ty:"method",name:"wait",path:"rustuv::process",desc:"",parent:'16805'},{ty:"method",name:"drop",path:"rustuv::process",desc:"",parent:'16805'},{ty:"mod",name:"pipe",path:"rustuv",desc:""},{ty:"struct",name:"PipeWatcher",path:"rustuv::pipe",desc:""},{ty:"structfield",name:"stream",path:"rustuv::pipe",desc:"",parent:'18075'},{ty:"structfield",name:"home",path:"rustuv::pipe",desc:"",parent:'18075'},{ty:"struct",name:"PipeListener",path:"rustuv::pipe",desc:""},{ty:"structfield",name:"home",path:"rustuv::pipe",desc:"",parent:'18094'},{ty:"structfield",name:"pipe",path:"rustuv::pipe",desc:"",parent:'18094'},{ty:"struct",name:"PipeAcceptor",path:"rustuv::pipe",desc:""},{ty:"structfield",name:"listener",path:"rustuv::pipe",desc:"",parent:'18122'},{ty:"method",name:"new",path:"rustuv::pipe",desc:"",parent:'18075'},{ty:"method",name:"new_home",path:"rustuv::pipe",desc:"",parent:'18075'},{ty:"method",name:"open",path:"rustuv::pipe",desc:"",parent:'18075'},{ty:"method",name:"connect",path:"rustuv::pipe",desc:"",parent:'18075'},{ty:"method",name:"handle",path:"rustuv::pipe",desc:"",parent:'18075'},{ty:"method",name:"read",path:"rustuv::pipe",desc:"",parent:'18075'},{ty:"method",name:"write",path:"rustuv::pipe",desc:"",parent:'18075'},{ty:"method",name:"clone",path:"rustuv::pipe",desc:"",parent:'18075'},{ty:"method",name:"home",path:"rustuv::pipe",desc:"",parent:'18075'},{ty:"method",name:"uv_handle",path:"rustuv::pipe",desc:"",parent:'18075'},{ty:"method",name:"drop",path:"rustuv::pipe",desc:"",parent:'18075'},{ty:"method",name:"bind",path:"rustuv::pipe",desc:"",parent:'18094'},{ty:"method",name:"listen",path:"rustuv::pipe",desc:"",parent:'18094'},{ty:"method",name:"home",path:"rustuv::pipe",desc:"",parent:'18094'},{ty:"method",name:"uv_handle",path:"rustuv::pipe",desc:"",parent:'18094'},{ty:"method",name:"drop",path:"rustuv::pipe",desc:"",parent:'18094'},{ty:"method",name:"accept",path:"rustuv::pipe",desc:"",parent:'18122'},{ty:"method",name:"home",path:"rustuv::pipe",desc:"",parent:'18122'},{ty:"mod",name:"tty",path:"rustuv",desc:""},{ty:"struct",name:"TtyWatcher",path:"rustuv::tty",desc:""},{ty:"structfield",name:"tty",path:"rustuv::tty",desc:"",parent:'19424'},{ty:"structfield",name:"stream",path:"rustuv::tty",desc:"",parent:'19424'},{ty:"structfield",name:"home",path:"rustuv::tty",desc:"",parent:'19424'},{ty:"structfield",name:"fd",path:"rustuv::tty",desc:"",parent:'19424'},{ty:"method",name:"new",path:"rustuv::tty",desc:"",parent:'19424'},{ty:"method",name:"read",path:"rustuv::tty",desc:"",parent:'19424'},{ty:"method",name:"write",path:"rustuv::tty",desc:"",parent:'19424'},{ty:"method",name:"set_raw",path:"rustuv::tty",desc:"",parent:'19424'},{ty:"method",name:"get_winsize",path:"rustuv::tty",desc:"",parent:'19424'},{ty:"method",name:"isatty",path:"rustuv::tty",desc:"",parent:'19424'},{ty:"method",name:"uv_handle",path:"rustuv::tty",desc:"",parent:'19424'},{ty:"method",name:"home",path:"rustuv::tty",desc:"",parent:'19424'},{ty:"method",name:"drop",path:"rustuv::tty",desc:"",parent:'19424'},{ty:"mod",name:"signal",path:"rustuv",desc:""},{ty:"struct",name:"SignalWatcher",path:"rustuv::signal",desc:""},{ty:"structfield",name:"handle",path:"rustuv::signal",desc:"",parent:'19854'},{ty:"structfield",name:"home",path:"rustuv::signal",desc:"",parent:'19854'},{ty:"structfield",name:"channel",path:"rustuv::signal",desc:"",parent:'19854'},{ty:"structfield",name:"signal",path:"rustuv::signal",desc:"",parent:'19854'},{ty:"method",name:"new",path:"rustuv::signal",desc:"",parent:'19854'},{ty:"method",name:"home",path:"rustuv::signal",desc:"",parent:'19854'},{ty:"method",name:"uv_handle",path:"rustuv::signal",desc:"",parent:'19854'},{ty:"method",name:"drop",path:"rustuv::signal",desc:"",parent:'19854'},{ty:"mod",name:"stream",path:"rustuv",desc:""},{ty:"struct",name:"StreamWatcher",path:"rustuv::stream",desc:""},{ty:"structfield",name:"handle",path:"rustuv::stream",desc:"",parent:'20317'},{ty:"method",name:"new",path:"rustuv::stream",desc:"",parent:'20317'},{ty:"method",name:"read",path:"rustuv::stream",desc:"",parent:'20317'},{ty:"method",name:"write",path:"rustuv::stream",desc:"",parent:'20317'},{ty:"typedef",name:"Buf",path:"rustuv",desc:"The uv buffer type"},{ty:"trait",name:"UvHandle",path:"rustuv",desc:"A type that wraps a uv handle"},{ty:"tymethod",name:"uv_handle",path:"rustuv",desc:"",parent:'21129'},{ty:"method",name:"uv_loop",path:"rustuv",desc:"",parent:'21129'},{ty:"method",name:"alloc",path:"rustuv",desc:"",parent:'21129'},{ty:"method",name:"from_uv_handle",path:"rustuv",desc:"",parent:'21129'},{ty:"method",name:"install",path:"rustuv",desc:"",parent:'21129'},{ty:"method",name:"close_async_",path:"rustuv",desc:"",parent:'21129'},{ty:"method",name:"close",path:"rustuv",desc:"",parent:'21129'},{ty:"method",name:"drop",path:"rustuv",desc:"",parent:'21449'},{ty:"method",name:"drop",path:"rustuv",desc:"",parent:'21565'},{ty:"method",name:"new",path:"rustuv",desc:"",parent:'21931'},{ty:"method",name:"wrap",path:"rustuv",desc:"",parent:'21931'},{ty:"method",name:"set_data",path:"rustuv",desc:"",parent:'21931'},{ty:"method",name:"get_data",path:"rustuv",desc:"",parent:'21931'},{ty:"method",name:"defuse",path:"rustuv",desc:"",parent:'21931'},{ty:"method",name:"drop",path:"rustuv",desc:"",parent:'21931'},{ty:"method",name:"new",path:"rustuv",desc:"",parent:'22131'},{ty:"method",name:"wrap",path:"rustuv",desc:"",parent:'22131'},{ty:"method",name:"run",path:"rustuv",desc:"",parent:'22131'},{ty:"method",name:"close",path:"rustuv",desc:"",parent:'22131'},{ty:"method",name:"name",path:"rustuv",desc:"",parent:'22458'},{ty:"method",name:"desc",path:"rustuv",desc:"",parent:'22458'},{ty:"method",name:"is_eof",path:"rustuv",desc:"",parent:'22458'},{ty:"method",name:"fmt",path:"rustuv",desc:"",parent:'22458'}];allPaths['rustuv'] = {'4247':{type:'enum',name:'uv_req_type'},'6162':{type:'ffi',name:'uv_fs_open'},'5673':{type:'ffi',name:'uv_close'},'5811':{type:'ffi',name:'uv_idle_start'},'9250':{type:'fn',name:'ntohs'},'4253':{type:'enum',name:'uv_req_type'},'3456':{type:'typedef',name:'uv_handle_t'},'3408':{type:'enum',name:'uv_run_mode'},'3895':{type:'enum',name:'uv_handle_type'},'3892':{type:'enum',name:'uv_handle_type'},'3738':{type:'typedef',name:'uv_walk_cb'},'6103':{type:'ffi',name:'uv_udp_getsockname'},'3495':{type:'typedef',name:'uv_udp_send_t'},'4243':{type:'enum',name:'uv_req_type'},'5066':{type:'fn',name:'get_udp_handle_from_send_req'},'5744':{type:'ffi',name:'uv_accept'},'3483':{type:'typedef',name:'uv_async_t'},'6303':{type:'ffi',name:'uv_fs_stat'},'5684':{type:'ffi',name:'uv_walk'},'21129':{type:'trait',name:'UvHandle'},'6214':{type:'ffi',name:'uv_fs_write'},'5198':{type:'fn',name:'get_loop_from_getaddrinfo_req'},'5081':{type:'fn',name:'process_pid'},'3516':{type:'struct',name:'uv_timespec_t'},'6025':{type:'ffi',name:'uv_udp_set_membership'},'4252':{type:'enum',name:'uv_req_type'},'3471':{type:'typedef',name:'uv_udp_t'},'3448':{type:'struct',name:'uv_stdio_container_t'},'5159':{type:'fn',name:'get_ptr_from_fs_req'},'6325':{type:'ffi',name:'uv_fs_fstat'},'5728':{type:'ffi',name:'uv_listen'},'6448':{type:'ffi',name:'uv_fs_fdatasync'},'10000':{type:'struct',name:'TcpWatcher'},'10020':{type:'struct',name:'TcpListener'},'3486':{type:'typedef',name:'uv_timer_t'},'22960':{type:'fn',name:'status_to_io_result'},'4879':{type:'fn',name:'free_req'},'3763':{type:'typedef',name:'uv_connect_cb'},'6047':{type:'ffi',name:'uv_udp_recv_stop'},'3899':{type:'enum',name:'uv_handle_type'},'6709':{type:'ffi',name:'uv_getaddrinfo'},'6346':{type:'ffi',name:'uv_fs_mkdir'},'4650':{type:'fn',name:'malloc_handle'},'16805':{type:'struct',name:'Process'},'6818':{type:'ffi',name:'uv_pipe_bind'},'6009':{type:'ffi',name:'uv_udp_recv_start'},'6789':{type:'ffi',name:'uv_pipe_init'},'5868':{type:'ffi',name:'uv_tcp_connect'},'4251':{type:'enum',name:'uv_req_type'},'6091':{type:'ffi',name:'uv_udp_set_broadcast'},'4242':{type:'enum',name:'uv_req_type'},'6916':{type:'ffi',name:'uv_signal_start'},'2140':{type:'fn',name:'new_loop'},'3465':{type:'typedef',name:'uv_idle_t'},'5661':{type:'ffi',name:'uv_run'},'5292':{type:'fn',name:'get_data_for_uv_handle'},'3897':{type:'enum',name:'uv_handle_type'},'22937':{type:'fn',name:'status_to_maybe_uv_error'},'6121':{type:'ffi',name:'uv_timer_init'},'22806':{type:'fn',name:'uv_error_to_io_error'},'5388':{type:'fn',name:'populate_stat'},'13268':{type:'struct',name:'IdleWatcher'},'1894':{type:'mod',name:'uvio'},'6970':{type:'struct',name:'FsRequest'},'3888':{type:'enum',name:'uv_handle_type'},'6831':{type:'ffi',name:'uv_pipe_connect'},'15604':{type:'mod',name:'async'},'5129':{type:'fn',name:'set_stdio_container_stream'},'18094':{type:'struct',name:'PipeListener'},'19854':{type:'struct',name:'SignalWatcher'},'22991':{type:'fn',name:'empty_buf'},'3510':{type:'typedef',name:'uv_signal_t'},'19424':{type:'struct',name:'TtyWatcher'},'3882':{type:'enum',name:'uv_handle_type'},'21565':{type:'struct',name:'ForbidUnwind'},'5626':{type:'ffi',name:'uv_loop_delete'},'3513':{type:'typedef',name:'uv_shutdown_t'},'3646':{type:'typedef',name:'uv_idle_cb'},'685':{type:'mod',name:'homing'},'3751':{type:'typedef',name:'uv_async_cb'},'6420':{type:'ffi',name:'uv_fs_req_cleanup'},'5640':{type:'ffi',name:'uv_unref'},'6055':{type:'ffi',name:'uv_udp_set_multicast_loop'},'5633':{type:'ffi',name:'uv_ref'},'6516':{type:'ffi',name:'uv_fs_symlink'},'4894':{type:'fn',name:'loop_new'},'3864':{type:'typedef',name:'uv_shutdown_cb'},'4240':{type:'enum',name:'uv_req_type'},'5848':{type:'ffi',name:'uv_async_send'},'3468':{type:'typedef',name:'uv_tcp_t'},'4248':{type:'enum',name:'uv_req_type'},'5720':{type:'ffi',name:'uv_err_name'},'9198':{type:'mod',name:'net'},'3887':{type:'enum',name:'uv_handle_type'},'4254':{type:'enum',name:'uv_req_type'},'5757':{type:'ffi',name:'uv_read_start'},'3507':{type:'typedef',name:'uv_tty_t'},'6631':{type:'ffi',name:'uv_fs_chown'},'6932':{type:'ffi',name:'uv_signal_stop'},'5943':{type:'ffi',name:'uv_tcp_getsockname'},'3856':{type:'typedef',name:'uv_fs_cb'},'15616':{type:'struct',name:'AsyncWatcher'},'3900':{type:'enum',name:'uv_handle_type'},'14620':{type:'enum',name:'NextAction'},'4757':{type:'fn',name:'free_handle'},'5095':{type:'fn',name:'set_stdio_container_flags'},'6067':{type:'ffi',name:'uv_udp_set_multicast_ttl'},'0':{type:'mod',name:'rustuv'},'3492':{type:'typedef',name:'uv_fs_t'},'3896':{type:'enum',name:'uv_handle_type'},'6978':{type:'struct',name:'FileWatcher'},'5172':{type:'fn',name:'get_path_from_fs_req'},'3459':{type:'typedef',name:'uv_req_t'},'20298':{type:'mod',name:'stream'},'3886':{type:'enum',name:'uv_handle_type'},'6903':{type:'ffi',name:'uv_signal_init'},'4250':{type:'enum',name:'uv_req_type'},'3844':{type:'typedef',name:'uv_signal_cb'},'6574':{type:'ffi',name:'uv_fs_utime'},'5231':{type:'fn',name:'get_stream_handle_from_connect_req'},'3246':{type:'mod',name:'uvll'},'4246':{type:'enum',name:'uv_req_type'},'3474':{type:'typedef',name:'uv_connect_t'},'5246':{type:'fn',name:'get_stream_handle_from_write_req'},'6547':{type:'ffi',name:'uv_fs_rename'},'20317':{type:'struct',name:'StreamWatcher'},'5647':{type:'ffi',name:'uv_handle_size'},'9233':{type:'fn',name:'htons'},'19408':{type:'mod',name:'tty'},'3811':{type:'typedef',name:'uv_getaddrinfo_cb'},'21931':{type:'struct',name:'Request'},'4244':{type:'enum',name:'uv_req_type'},'22131':{type:'struct',name:'Loop'},'6766':{type:'ffi',name:'uv_process_kill'},'6134':{type:'ffi',name:'uv_timer_start'},'16115':{type:'struct',name:'GetAddrInfoRequest'},'3787':{type:'typedef',name:'uv_timer_cb'},'5798':{type:'ffi',name:'uv_idle_init'},'5405':{type:'fn',name:'guess_handle'},'3462':{type:'typedef',name:'uv_loop_t'},'14599':{type:'struct',name:'TimerWatcher'},'6248':{type:'ffi',name:'uv_fs_read'},'3730':{type:'typedef',name:'uv_close_cb'},'3799':{type:'typedef',name:'uv_write_cb'},'5831':{type:'ffi',name:'uv_async_init'},'5781':{type:'ffi',name:'uv_shutdown'},'5340':{type:'fn',name:'get_data_for_req'},'797':{type:'trait',name:'HomingIO'},'6885':{type:'ffi',name:'uv_tty_get_winsize'},'6604':{type:'ffi',name:'uv_fs_link'},'5274':{type:'fn',name:'set_data_for_uv_loop'},'3498':{type:'typedef',name:'uv_getaddrinfo_t'},'3394':{type:'typedef',name:'uv_buf_len_t'},'3658':{type:'typedef',name:'uv_alloc_cb'},'5979':{type:'ffi',name:'uv_udp_init'},'3397':{type:'struct',name:'uv_buf_t'},'3523':{type:'struct',name:'uv_stat_t'},'13255':{type:'mod',name:'idle'},'14634':{type:'enum',name:'NextAction'},'3410':{type:'struct',name:'uv_process_options_t'},'3407':{type:'enum',name:'uv_run_mode'},'9267':{type:'fn',name:'sockaddr_to_addr'},'6192':{type:'ffi',name:'uv_fs_unlink'},'19841':{type:'mod',name:'signal'},'1129':{type:'mod',name:'queue'},'3405':{type:'enum',name:'uv_run_mode'},'4257':{type:'enum',name:'uv_req_type'},'5903':{type:'ffi',name:'uv_tcp_nodelay'},'11825':{type:'struct',name:'UdpWatcher'},'18075':{type:'struct',name:'PipeWatcher'},'6941':{type:'mod',name:'file'},'6687':{type:'ffi',name:'uv_fs_lstat'},'3883':{type:'enum',name:'uv_handle_type'},'3477':{type:'typedef',name:'uv_connection_t'},'5654':{type:'ffi',name:'uv_req_size'},'3890':{type:'enum',name:'uv_handle_type'},'3675':{type:'typedef',name:'uv_read_cb'},'6873':{type:'ffi',name:'uv_tty_set_mode'},'16080':{type:'mod',name:'addrinfo'},'5185':{type:'fn',name:'get_loop_from_fs_req'},'6806':{type:'ffi',name:'uv_pipe_open'},'4582':{type:'enum',name:'uv_membership'},'5112':{type:'fn',name:'set_stdio_container_fd'},'2152':{type:'struct',name:'UvIoFactory'},'10053':{type:'struct',name:'TcpAcceptor'},'6427':{type:'ffi',name:'uv_fs_fsync'},'3884':{type:'enum',name:'uv_handle_type'},'4241':{type:'enum',name:'uv_req_type'},'4979':{type:'fn',name:'uv_udp_send'},'18122':{type:'struct',name:'PipeAcceptor'},'5312':{type:'fn',name:'set_data_for_uv_handle'},'5992':{type:'ffi',name:'uv_udp_bind'},'5712':{type:'ffi',name:'uv_strerror'},'4245':{type:'enum',name:'uv_req_type'},'6282':{type:'ffi',name:'uv_fs_close'},'6852':{type:'ffi',name:'uv_tty_init'},'3287':{type:'mod',name:'errors'},'4255':{type:'enum',name:'uv_req_type'},'5961':{type:'ffi',name:'uv_tcp_getpeername'},'5890':{type:'ffi',name:'uv_tcp_bind'},'4256':{type:'enum',name:'uv_req_type'},'6469':{type:'ffi',name:'uv_fs_ftruncate'},'5855':{type:'ffi',name:'uv_tcp_init'},'14626':{type:'enum',name:'NextAction'},'16654':{type:'fn',name:'accum_addrinfo'},'22458':{type:'struct',name:'UvError'},'3893':{type:'enum',name:'uv_handle_type'},'6154':{type:'ffi',name:'uv_timer_stop'},'4772':{type:'fn',name:'malloc_req'},'6748':{type:'ffi',name:'uv_spawn'},'14583':{type:'mod',name:'timer'},'6494':{type:'ffi',name:'uv_fs_readlink'},'5700':{type:'ffi',name:'uv_buf_init'},'3898':{type:'enum',name:'uv_handle_type'},'5931':{type:'ffi',name:'uv_tcp_simultaneous_accepts'},'3894':{type:'enum',name:'uv_handle_type'},'6741':{type:'ffi',name:'uv_freeaddrinfo'},'3409':{type:'enum',name:'uv_run_mode'},'3891':{type:'enum',name:'uv_handle_type'},'6661':{type:'ffi',name:'uv_fs_chmod'},'5261':{type:'fn',name:'get_data_for_uv_loop'},'4903':{type:'fn',name:'uv_write'},'6079':{type:'ffi',name:'uv_udp_set_ttl'},'16783':{type:'mod',name:'process'},'22988':{type:'typedef',name:'Buf'},'3885':{type:'enum',name:'uv_handle_type'},'5773':{type:'ffi',name:'uv_read_stop'},'5360':{type:'fn',name:'set_data_for_req'},'3504':{type:'typedef',name:'uv_pipe_t'},'3876':{type:'typedef',name:'uv_uid_t'},'3879':{type:'typedef',name:'uv_gid_t'},'14621':{type:'enum',name:'NextAction'},'6372':{type:'ffi',name:'uv_fs_rmdir'},'4581':{type:'enum',name:'uv_membership'},'5211':{type:'fn',name:'get_loop_for_uv_handle'},'4258':{type:'enum',name:'uv_req_type'},'4249':{type:'enum',name:'uv_req_type'},'3489':{type:'typedef',name:'uv_stream_t'},'5823':{type:'ffi',name:'uv_idle_stop'},'3775':{type:'typedef',name:'uv_connection_cb'},'4583':{type:'enum',name:'uv_membership'},'21449':{type:'struct',name:'ForbidSwitch'},'18049':{type:'mod',name:'pipe'},'3889':{type:'enum',name:'uv_handle_type'},'3704':{type:'typedef',name:'uv_udp_recv_cb'},'5147':{type:'fn',name:'get_result_from_fs_req'},'3501':{type:'typedef',name:'uv_process_t'},'3480':{type:'typedef',name:'uv_write_t'},'6394':{type:'ffi',name:'uv_fs_readdir'},'22999':{type:'fn',name:'slice_to_uv_buf'},'6778':{type:'ffi',name:'uv_kill'},'3901':{type:'enum',name:'uv_handle_type'},'3828':{type:'typedef',name:'uv_exit_cb'},'3692':{type:'typedef',name:'uv_udp_send_cb'},'5915':{type:'ffi',name:'uv_tcp_keepalive'},'1951':{type:'struct',name:'UvEventLoop'}};

searchIndex['green'] = [{ty:"mod",name:"",path:"green",desc:"The \"green scheduling\" library"},{ty:"struct",name:"PoolConfig",path:"green",desc:"Configuration of how an M:N pool of schedulers is spawned."},{ty:"structfield",name:"threads",path:"green",desc:"The number of schedulers (OS threads) to spawn into this M:N pool.",parent:'8842'},{ty:"structfield",name:"event_loop_factory",path:"green",desc:"A factory function used to create new event loops. If this is not\nspecified then the default event loop factory is used.",parent:'8842'},{ty:"struct",name:"SchedPool",path:"green",desc:"A structure representing a handle to a pool of schedulers. This handle is\nused to keep the pool alive and also reap the status from the pool."},{ty:"fn",name:"lang_start",path:"green",desc:""},{ty:"fn",name:"start",path:"green",desc:"Set up a default runtime configuration, given compiler-supplied arguments."},{ty:"fn",name:"run",path:"green",desc:"Execute the main function in a pool of M:N schedulers."},{ty:"mod",name:"basic",path:"green",desc:"This is a basic event loop implementation not meant for any \"real purposes\"\nother than testing the scheduler and proving that it's possible to have a\npluggable event loop."},{ty:"fn",name:"event_loop",path:"green::basic",desc:"This is the only exported function from this module."},{ty:"mod",name:"context",path:"green",desc:""},{ty:"struct",name:"Context",path:"green::context",desc:""},{ty:"fn",name:"mut_offset",path:"green::context",desc:""},{ty:"typedef",name:"InitFn",path:"green::context",desc:""},{ty:"method",name:"empty",path:"green::context",desc:"",parent:'1772'},{ty:"method",name:"new",path:"green::context",desc:"Create a new context that will resume execution by running proc()",parent:'1772'},{ty:"method",name:"swap",path:"green::context",desc:"",parent:'1772'},{ty:"mod",name:"coroutine",path:"green",desc:""},{ty:"struct",name:"Coroutine",path:"green::coroutine",desc:"A coroutine is nothing more than a (register context, stack) pair."},{ty:"structfield",name:"current_stack_segment",path:"green::coroutine",desc:"The segment of stack on which the task is currently running or\nif the task is blocked, on which the task will resume\nexecution.",parent:'2338'},{ty:"structfield",name:"saved_context",path:"green::coroutine",desc:"Always valid if the task is alive and not running.",parent:'2338'},{ty:"method",name:"empty",path:"green::coroutine",desc:"",parent:'2338'},{ty:"method",name:"recycle",path:"green::coroutine",desc:"Destroy coroutine and try to reuse std::stack segment.",parent:'2338'},{ty:"mod",name:"sched",path:"green",desc:""},{ty:"struct",name:"Scheduler",path:"green::sched",desc:"A scheduler is responsible for coordinating the execution of Tasks\non a single thread. The scheduler runs inside a slightly modified\nRust Task. When not running this task is stored in the scheduler\nstruct. The scheduler struct acts like a baton, all scheduling\nactions are transfers of the baton."},{ty:"structfield",name:"pool_id",path:"green::sched",desc:"ID number of the pool that this scheduler is a member of. When\nreawakening green tasks, this is used to ensure that tasks aren't\nreawoken on the wrong pool of schedulers.",parent:'2409'},{ty:"structfield",name:"work_queue",path:"green::sched",desc:"There are N work queues, one per scheduler.",parent:'2409'},{ty:"structfield",name:"work_queues",path:"green::sched",desc:"Work queues for the other schedulers. These are created by\ncloning the core work queues.",parent:'2409'},{ty:"structfield",name:"message_queue",path:"green::sched",desc:"The queue of incoming messages from other schedulers.\nThese are enqueued by SchedHandles after which a remote callback\nis triggered to handle the message.",parent:'2409'},{ty:"structfield",name:"message_producer",path:"green::sched",desc:"Producer used to clone sched handles from",parent:'2409'},{ty:"structfield",name:"sleeper_list",path:"green::sched",desc:"A shared list of sleeping schedulers. We'll use this to wake\nup schedulers when pushing work onto the work queue.",parent:'2409'},{ty:"structfield",name:"sleepy",path:"green::sched",desc:"Indicates that we have previously pushed a handle onto the\nSleeperList but have not yet received the Wake message.\nBeing `true` does not necessarily mean that the scheduler is\nnot active since there are multiple event sources that may\nwake the scheduler. It just prevents the scheduler from pushing\nmultiple handles onto the sleeper list.",parent:'2409'},{ty:"structfield",name:"no_sleep",path:"green::sched",desc:"A flag to indicate we've received the shutdown message and should\nno longer try to go to sleep, but exit instead.",parent:'2409'},{ty:"structfield",name:"stack_pool",path:"green::sched",desc:"",parent:'2409'},{ty:"structfield",name:"sched_task",path:"green::sched",desc:"The scheduler runs on a special task. When it is not running\nit is stored here instead of the work queue.",parent:'2409'},{ty:"structfield",name:"cleanup_job",path:"green::sched",desc:"An action performed after a context switch on behalf of the\ncode running before the context switch",parent:'2409'},{ty:"structfield",name:"friend_handle",path:"green::sched",desc:"If the scheduler shouldn't run some tasks, a friend to send\nthem to.",parent:'2409'},{ty:"structfield",name:"run_anything",path:"green::sched",desc:"Should this scheduler run any task, or only pinned tasks?",parent:'2409'},{ty:"structfield",name:"rng",path:"green::sched",desc:"A fast XorShift rng for scheduler use",parent:'2409'},{ty:"structfield",name:"idle_callback",path:"green::sched",desc:"A togglable idle callback",parent:'2409'},{ty:"structfield",name:"yield_check_count",path:"green::sched",desc:"A countdown that starts at a random value and is decremented\nevery time a yield check is performed. When it hits 0 a task\nwill yield.",parent:'2409'},{ty:"structfield",name:"steal_for_yield",path:"green::sched",desc:"A flag to tell the scheduler loop it needs to do some stealing\nin order to introduce randomness as part of a yield",parent:'2409'},{ty:"structfield",name:"task_state",path:"green::sched",desc:"Bookkeeping for the number of tasks which are currently running around\ninside this pool of schedulers",parent:'2409'},{ty:"structfield",name:"event_loop",path:"green::sched",desc:"The event loop used to drive the scheduler and perform I/O",parent:'2409'},{ty:"struct",name:"SchedHandle",path:"green::sched",desc:""},{ty:"structfield",name:"sched_id",path:"green::sched",desc:"",parent:'6120'},{ty:"enum",name:"SchedMessage",path:"green::sched",desc:""},{ty:"variant",name:"Wake",path:"green::sched",desc:"",parent:'6095'},{ty:"variant",name:"Shutdown",path:"green::sched",desc:"",parent:'6095'},{ty:"variant",name:"NewNeighbor",path:"green::sched",desc:"",parent:'6095'},{ty:"variant",name:"PinnedTask",path:"green::sched",desc:"",parent:'6095'},{ty:"variant",name:"TaskFromFriend",path:"green::sched",desc:"",parent:'6095'},{ty:"variant",name:"RunOnce",path:"green::sched",desc:"",parent:'6095'},{ty:"trait",name:"ClosureConverter",path:"green::sched",desc:""},{ty:"tymethod",name:"from_fn",path:"green::sched",desc:"",parent:'6231'},{ty:"tymethod",name:"to_fn",path:"green::sched",desc:"",parent:'6231'},{ty:"method",name:"new",path:"green::sched",desc:"",parent:'2409'},{ty:"method",name:"new_special",path:"green::sched",desc:"",parent:'2409'},{ty:"method",name:"bootstrap",path:"green::sched",desc:"",parent:'2409'},{ty:"method",name:"run",path:"green::sched",desc:"",parent:'2409'},{ty:"method",name:"enqueue_task",path:"green::sched",desc:"Schedule a task to be executed later.",parent:'2409'},{ty:"method",name:"change_task_context",path:"green::sched",desc:"",parent:'2409'},{ty:"method",name:"get_contexts",path:"green::sched",desc:"",parent:'2409'},{ty:"method",name:"resume_task_immediately",path:"green::sched",desc:"",parent:'2409'},{ty:"method",name:"deschedule_running_task_and_then",path:"green::sched",desc:"Block a running task, context switch to the scheduler, then pass the\nblocked task to a closure.",parent:'2409'},{ty:"method",name:"switch_running_tasks_and_then",path:"green::sched",desc:"",parent:'2409'},{ty:"method",name:"terminate_current_task",path:"green::sched",desc:"Called by a running task to end execution, after which it will\nbe recycled by the scheduler for reuse in a new task.",parent:'2409'},{ty:"method",name:"run_task",path:"green::sched",desc:"",parent:'2409'},{ty:"method",name:"run_task_later",path:"green::sched",desc:"",parent:'2409'},{ty:"method",name:"yield_now",path:"green::sched",desc:"Yield control to the scheduler, executing another task. This is guaranteed\nto introduce some amount of randomness to the scheduler. Currently the\nrandomness is a result of performing a round of work stealing (which\nmay end up stealing from the current scheduler).",parent:'2409'},{ty:"method",name:"maybe_yield",path:"green::sched",desc:"",parent:'2409'},{ty:"method",name:"sched_id",path:"green::sched",desc:"",parent:'2409'},{ty:"method",name:"run_cleanup_job",path:"green::sched",desc:"",parent:'2409'},{ty:"method",name:"make_handle",path:"green::sched",desc:"",parent:'2409'},{ty:"method",name:"send",path:"green::sched",desc:"",parent:'6120'},{ty:"mod",name:"sleeper_list",path:"green",desc:"Maintains a shared list of sleeping schedulers. Schedulers\nuse this to wake each other up."},{ty:"struct",name:"SleeperList",path:"green::sleeper_list",desc:""},{ty:"method",name:"new",path:"green::sleeper_list",desc:"",parent:'6324'},{ty:"method",name:"push",path:"green::sleeper_list",desc:"",parent:'6324'},{ty:"method",name:"pop",path:"green::sleeper_list",desc:"",parent:'6324'},{ty:"method",name:"casual_pop",path:"green::sleeper_list",desc:"",parent:'6324'},{ty:"method",name:"clone",path:"green::sleeper_list",desc:"",parent:'6324'},{ty:"mod",name:"stack",path:"green",desc:""},{ty:"struct",name:"Stack",path:"green::stack",desc:"A task's stack. The name \"Stack\" is a vestige of segmented stacks."},{ty:"struct",name:"StackPool",path:"green::stack",desc:""},{ty:"method",name:"new",path:"green::stack",desc:"Allocate a new stack of `size`. If size = 0, this will fail. Use\n`dummy_stack` if you want a zero-sized stack.",parent:'6481'},{ty:"method",name:"dummy_stack",path:"green::stack",desc:"Create a 0-length stack which starts (and ends) at 0.",parent:'6481'},{ty:"method",name:"start",path:"green::stack",desc:"Point to the low end of the allocated stack",parent:'6481'},{ty:"method",name:"end",path:"green::stack",desc:"Point one uint beyond the high end of the allocated stack",parent:'6481'},{ty:"method",name:"drop",path:"green::stack",desc:"",parent:'6481'},{ty:"method",name:"new",path:"green::stack",desc:"",parent:'6854'},{ty:"method",name:"take_stack",path:"green::stack",desc:"",parent:'6854'},{ty:"method",name:"give_stack",path:"green::stack",desc:"",parent:'6854'},{ty:"mod",name:"task",path:"green",desc:"The Green Task implementation"},{ty:"struct",name:"GreenTask",path:"green::task",desc:"The necessary fields needed to keep track of a green task (as opposed to a\n1:1 task)."},{ty:"structfield",name:"coroutine",path:"green::task",desc:"Coroutine that this task is running on, otherwise known as the register\ncontext and the stack that this task owns. This field is optional to\nrelinquish ownership back to a scheduler to recycle stacks at a later\ndate.",parent:'6972'},{ty:"structfield",name:"handle",path:"green::task",desc:"Optional handle back into the home sched pool of this task. This field\nis lazily initialized.",parent:'6972'},{ty:"structfield",name:"sched",path:"green::task",desc:"Slot for maintaining ownership of a scheduler. If a task is running,\nthis value will be Some(sched) where the task is running on \"sched\".",parent:'6972'},{ty:"structfield",name:"task",path:"green::task",desc:"Temporary ownership slot of a std::rt::task::Task object. This is used\nto squirrel that libstd task away while we're performing green task\noperations.",parent:'6972'},{ty:"structfield",name:"task_type",path:"green::task",desc:"Dictates whether this is a sched task or a normal green task",parent:'6972'},{ty:"structfield",name:"pool_id",path:"green::task",desc:"Home pool that this task was spawned into. This field is lazily\ninitialized until when the task is initially scheduled, and is used to\nmake sure that tasks are always woken up in the correct pool of\nschedulers.",parent:'6972'},{ty:"structfield",name:"nasty_deschedule_lock",path:"green::task",desc:"",parent:'6972'},{ty:"enum",name:"TaskType",path:"green::task",desc:""},{ty:"variant",name:"TypeGreen",path:"green::task",desc:"",parent:'7004'},{ty:"variant",name:"TypeSched",path:"green::task",desc:"",parent:'7004'},{ty:"enum",name:"Home",path:"green::task",desc:""},{ty:"variant",name:"AnySched",path:"green::task",desc:"",parent:'7012'},{ty:"variant",name:"HomeSched",path:"green::task",desc:"",parent:'7012'},{ty:"method",name:"new",path:"green::task",desc:"Creates a new green task which is not homed to any particular scheduler\nand will not have any contained Task structure.",parent:'6972'},{ty:"method",name:"new_homed",path:"green::task",desc:"Creates a new task (like `new`), but specifies the home for new task.",parent:'6972'},{ty:"method",name:"new_typed",path:"green::task",desc:"Creates a new green task with the specified coroutine and type, this is\nuseful when creating scheduler tasks.",parent:'6972'},{ty:"method",name:"configure",path:"green::task",desc:"Creates a new green task with the given configuration options for the\ncontained Task object. The given stack pool is also used to allocate a\nnew stack for this task.",parent:'6972'},{ty:"method",name:"convert",path:"green::task",desc:"Just like the `maybe_take_runtime` function, this function should *not*\nexist. Usage of this function is _strongly_ discouraged. This is an\nabsolute last resort necessary for converting a libstd task to a green\ntask.",parent:'6972'},{ty:"method",name:"give_home",path:"green::task",desc:"",parent:'6972'},{ty:"method",name:"take_unwrap_home",path:"green::task",desc:"",parent:'6972'},{ty:"method",name:"is_home_no_tls",path:"green::task",desc:"",parent:'6972'},{ty:"method",name:"homed",path:"green::task",desc:"",parent:'6972'},{ty:"method",name:"is_sched",path:"green::task",desc:"",parent:'6972'},{ty:"method",name:"as_uint",path:"green::task",desc:"",parent:'6972'},{ty:"method",name:"from_uint",path:"green::task",desc:"",parent:'6972'},{ty:"method",name:"put_with_sched",path:"green::task",desc:"",parent:'6972'},{ty:"method",name:"put_task",path:"green::task",desc:"",parent:'6972'},{ty:"method",name:"swap",path:"green::task",desc:"",parent:'6972'},{ty:"method",name:"put",path:"green::task",desc:"",parent:'6972'},{ty:"method",name:"yield_now",path:"green::task",desc:"",parent:'6972'},{ty:"method",name:"maybe_yield",path:"green::task",desc:"",parent:'6972'},{ty:"method",name:"deschedule",path:"green::task",desc:"",parent:'6972'},{ty:"method",name:"reawaken",path:"green::task",desc:"",parent:'6972'},{ty:"method",name:"spawn_sibling",path:"green::task",desc:"",parent:'6972'},{ty:"method",name:"local_io",path:"green::task",desc:"",parent:'6972'},{ty:"method",name:"stack_bounds",path:"green::task",desc:"",parent:'6972'},{ty:"method",name:"can_block",path:"green::task",desc:"",parent:'6972'},{ty:"method",name:"wrap",path:"green::task",desc:"",parent:'6972'},{ty:"method",name:"new",path:"green",desc:"Returns the default configuration, as determined the environment\nvariables of this process.",parent:'8842'},{ty:"method",name:"new",path:"green",desc:"Execute the main function in a pool of M:N schedulers.",parent:'8864'},{ty:"method",name:"task",path:"green",desc:"Creates a new task configured to run inside of this pool of schedulers.\nThis is useful to create a task which can then be sent to a specific\nscheduler created by `spawn_sched` (and possibly pin it to that\nscheduler).",parent:'8864'},{ty:"method",name:"spawn",path:"green",desc:"Spawns a new task into this pool of schedulers, using the specified\noptions to configure the new task which is spawned.",parent:'8864'},{ty:"method",name:"spawn_sched",path:"green",desc:"Spawns a new scheduler into this M:N pool. A handle is returned to the\nscheduler for use. The scheduler will not exit as long as this handle is\nactive.",parent:'8864'},{ty:"method",name:"shutdown",path:"green",desc:"Consumes the pool of schedulers, waiting for all tasks to exit and all\nschedulers to shut down.",parent:'8864'},{ty:"method",name:"drop",path:"green",desc:"",parent:'8864'}];allPaths['green'] = {'6972':{type:'struct',name:'GreenTask'},'7017':{type:'enum',name:'Home'},'2338':{type:'struct',name:'Coroutine'},'2296':{type:'fn',name:'mut_offset'},'7010':{type:'enum',name:'TaskType'},'8717':{type:'fn',name:'start'},'6109':{type:'enum',name:'SchedMessage'},'1763':{type:'mod',name:'context'},'8842':{type:'struct',name:'PoolConfig'},'6097':{type:'enum',name:'SchedMessage'},'8777':{type:'fn',name:'run'},'1006':{type:'fn',name:'event_loop'},'1785':{type:'typedef',name:'InitFn'},'6949':{type:'mod',name:'task'},'995':{type:'mod',name:'basic'},'1772':{type:'struct',name:'Context'},'6119':{type:'enum',name:'SchedMessage'},'6320':{type:'mod',name:'sleeper_list'},'6095':{type:'enum',name:'SchedMessage'},'7004':{type:'enum',name:'TaskType'},'6096':{type:'enum',name:'SchedMessage'},'6231':{type:'trait',name:'ClosureConverter'},'6120':{type:'struct',name:'SchedHandle'},'7013':{type:'enum',name:'Home'},'6854':{type:'struct',name:'StackPool'},'413':{type:'mod',name:'simple'},'6469':{type:'mod',name:'stack'},'2332':{type:'mod',name:'coroutine'},'8675':{type:'fn',name:'lang_start'},'2380':{type:'mod',name:'sched'},'7012':{type:'enum',name:'Home'},'6104':{type:'enum',name:'SchedMessage'},'0':{type:'mod',name:'green'},'6114':{type:'enum',name:'SchedMessage'},'6324':{type:'struct',name:'SleeperList'},'2409':{type:'struct',name:'Scheduler'},'8864':{type:'struct',name:'SchedPool'},'6481':{type:'struct',name:'Stack'},'7011':{type:'enum',name:'TaskType'}};

searchIndex['std'] = [{ty:"mod",name:"",path:"std",desc:"# The Rust standard library"},{ty:"mod",name:"macros",path:"std",desc:"Standard library macros"},{ty:"macro",name:"fail",path:"std::macros",desc:"The entry point for failure of rust tasks."},{ty:"macro",name:"assert",path:"std::macros",desc:"Ensure that a boolean expression is `true` at runtime."},{ty:"macro",name:"assert_eq",path:"std::macros",desc:"Asserts that two expressions are equal to each other, testing equality in\nboth directions."},{ty:"macro",name:"unreachable",path:"std::macros",desc:"A utility macro for indicating unreachable code. It will fail if\nexecuted. This is occasionally useful to put after loops that never\nterminate normally, but instead directly return from a function."},{ty:"macro",name:"unimplemented",path:"std::macros",desc:"A standardised placeholder for marking unfinished code. It fails with the\nmessage `\"not yet implemented\"` when executed."},{ty:"macro",name:"format",path:"std::macros",desc:"Use the syntax described in `std::fmt` to create a value of type `~str`.\nSee `std::fmt` for more information."},{ty:"macro",name:"write",path:"std::macros",desc:"Use the `format!` syntax to write data into a buffer of type `&mut Writer`.\nSee `std::fmt` for more information."},{ty:"macro",name:"writeln",path:"std::macros",desc:"Equivalent to the `write!` macro, except that a newline is appended after\nthe message is written."},{ty:"macro",name:"print",path:"std::macros",desc:"Equivalent to the `println!` macro except that a newline is not printed at\nthe end of the message."},{ty:"macro",name:"println",path:"std::macros",desc:"Macro for printing to a task's stdout handle."},{ty:"macro",name:"local_data_key",path:"std::macros",desc:"Declare a task-local key with a specific type."},{ty:"macro",name:"try",path:"std::macros",desc:"Helper macro for unwrapping `Result` values while returning early with an\nerror if the value of the expression is `Err`. For more information, see\n`std::io`."},{ty:"macro",name:"vec",path:"std::macros",desc:"Create a `std::vec_ng::Vec` containing the arguments."},{ty:"macro",name:"select",path:"std::macros",desc:"A macro to select an event from a number of ports."},{ty:"mod",name:"prelude",path:"std",desc:"The standard module imported by default into all Rust modules"},{ty:"mod",name:"int",path:"std",desc:"Operations and constants for architecture-sized signed integers (`int` type)"},{ty:"fn",name:"parse_bytes",path:"std::int",desc:"Parse a byte slice as a number in the given base."},{ty:"fn",name:"to_str_bytes",path:"std::int",desc:"Convert to a string as a byte slice in a given base."},{ty:"static",name:"BITS",path:"std::int",desc:""},{ty:"static",name:"BYTES",path:"std::int",desc:""},{ty:"static",name:"MIN",path:"std::int",desc:""},{ty:"static",name:"MAX",path:"std::int",desc:""},{ty:"mod",name:"i8",path:"std",desc:"Operations and constants for signed 8-bits integers (`i8` type)"},{ty:"fn",name:"parse_bytes",path:"std::i8",desc:"Parse a byte slice as a number in the given base."},{ty:"fn",name:"to_str_bytes",path:"std::i8",desc:"Convert to a string as a byte slice in a given base."},{ty:"static",name:"BITS",path:"std::i8",desc:""},{ty:"static",name:"BYTES",path:"std::i8",desc:""},{ty:"static",name:"MIN",path:"std::i8",desc:""},{ty:"static",name:"MAX",path:"std::i8",desc:""},{ty:"mod",name:"i16",path:"std",desc:"Operations and constants for signed 16-bits integers (`i16` type)"},{ty:"fn",name:"parse_bytes",path:"std::i16",desc:"Parse a byte slice as a number in the given base."},{ty:"fn",name:"to_str_bytes",path:"std::i16",desc:"Convert to a string as a byte slice in a given base."},{ty:"static",name:"BITS",path:"std::i16",desc:""},{ty:"static",name:"BYTES",path:"std::i16",desc:""},{ty:"static",name:"MIN",path:"std::i16",desc:""},{ty:"static",name:"MAX",path:"std::i16",desc:""},{ty:"mod",name:"i32",path:"std",desc:"Operations and constants for signed 32-bits integers (`i32` type)"},{ty:"fn",name:"parse_bytes",path:"std::i32",desc:"Parse a byte slice as a number in the given base."},{ty:"fn",name:"to_str_bytes",path:"std::i32",desc:"Convert to a string as a byte slice in a given base."},{ty:"static",name:"BITS",path:"std::i32",desc:""},{ty:"static",name:"BYTES",path:"std::i32",desc:""},{ty:"static",name:"MIN",path:"std::i32",desc:""},{ty:"static",name:"MAX",path:"std::i32",desc:""},{ty:"mod",name:"i64",path:"std",desc:"Operations and constants for signed 64-bits integers (`i64` type)"},{ty:"fn",name:"parse_bytes",path:"std::i64",desc:"Parse a byte slice as a number in the given base."},{ty:"fn",name:"to_str_bytes",path:"std::i64",desc:"Convert to a string as a byte slice in a given base."},{ty:"static",name:"BITS",path:"std::i64",desc:""},{ty:"static",name:"BYTES",path:"std::i64",desc:""},{ty:"static",name:"MIN",path:"std::i64",desc:""},{ty:"static",name:"MAX",path:"std::i64",desc:""},{ty:"mod",name:"uint",path:"std",desc:"Operations and constants for architecture-sized unsigned integers (`uint` type)"},{ty:"fn",name:"parse_bytes",path:"std::uint",desc:"Parse a byte slice as a number in the given base."},{ty:"fn",name:"to_str_bytes",path:"std::uint",desc:"Convert to a string as a byte slice in a given base."},{ty:"static",name:"BITS",path:"std::uint",desc:""},{ty:"static",name:"BYTES",path:"std::uint",desc:""},{ty:"static",name:"MIN",path:"std::uint",desc:""},{ty:"static",name:"MAX",path:"std::uint",desc:""},{ty:"mod",name:"u8",path:"std",desc:"Operations and constants for unsigned 8-bits integers (`u8` type)"},{ty:"fn",name:"parse_bytes",path:"std::u8",desc:"Parse a byte slice as a number in the given base."},{ty:"fn",name:"to_str_bytes",path:"std::u8",desc:"Convert to a string as a byte slice in a given base."},{ty:"static",name:"BITS",path:"std::u8",desc:""},{ty:"static",name:"BYTES",path:"std::u8",desc:""},{ty:"static",name:"MIN",path:"std::u8",desc:""},{ty:"static",name:"MAX",path:"std::u8",desc:""},{ty:"mod",name:"u16",path:"std",desc:"Operations and constants for unsigned 16-bits integers (`u16` type)"},{ty:"fn",name:"parse_bytes",path:"std::u16",desc:"Parse a byte slice as a number in the given base."},{ty:"fn",name:"to_str_bytes",path:"std::u16",desc:"Convert to a string as a byte slice in a given base."},{ty:"static",name:"BITS",path:"std::u16",desc:""},{ty:"static",name:"BYTES",path:"std::u16",desc:""},{ty:"static",name:"MIN",path:"std::u16",desc:""},{ty:"static",name:"MAX",path:"std::u16",desc:""},{ty:"mod",name:"u32",path:"std",desc:"Operations and constants for unsigned 32-bits integers (`u32` type)"},{ty:"fn",name:"parse_bytes",path:"std::u32",desc:"Parse a byte slice as a number in the given base."},{ty:"fn",name:"to_str_bytes",path:"std::u32",desc:"Convert to a string as a byte slice in a given base."},{ty:"static",name:"BITS",path:"std::u32",desc:""},{ty:"static",name:"BYTES",path:"std::u32",desc:""},{ty:"static",name:"MIN",path:"std::u32",desc:""},{ty:"static",name:"MAX",path:"std::u32",desc:""},{ty:"mod",name:"u64",path:"std",desc:"Operations and constants for unsigned 64-bits integer (`u64` type)"},{ty:"fn",name:"parse_bytes",path:"std::u64",desc:"Parse a byte slice as a number in the given base."},{ty:"fn",name:"to_str_bytes",path:"std::u64",desc:"Convert to a string as a byte slice in a given base."},{ty:"static",name:"BITS",path:"std::u64",desc:""},{ty:"static",name:"BYTES",path:"std::u64",desc:""},{ty:"static",name:"MIN",path:"std::u64",desc:""},{ty:"static",name:"MAX",path:"std::u64",desc:""},{ty:"mod",name:"f32",path:"std",desc:"Operations and constants for 32-bits floats (`f32` type)"},{ty:"fn",name:"sqrt",path:"std::f32",desc:""},{ty:"fn",name:"powi",path:"std::f32",desc:""},{ty:"fn",name:"sin",path:"std::f32",desc:""},{ty:"fn",name:"cos",path:"std::f32",desc:""},{ty:"fn",name:"pow",path:"std::f32",desc:""},{ty:"fn",name:"exp",path:"std::f32",desc:""},{ty:"fn",name:"exp2",path:"std::f32",desc:""},{ty:"fn",name:"ln",path:"std::f32",desc:""},{ty:"fn",name:"log10",path:"std::f32",desc:""},{ty:"fn",name:"log2",path:"std::f32",desc:""},{ty:"fn",name:"mul_add",path:"std::f32",desc:""},{ty:"fn",name:"abs",path:"std::f32",desc:""},{ty:"fn",name:"copysign",path:"std::f32",desc:""},{ty:"fn",name:"floor",path:"std::f32",desc:""},{ty:"fn",name:"ceil",path:"std::f32",desc:""},{ty:"fn",name:"trunc",path:"std::f32",desc:""},{ty:"fn",name:"rint",path:"std::f32",desc:""},{ty:"fn",name:"nearbyint",path:"std::f32",desc:""},{ty:"fn",name:"round",path:"std::f32",desc:""},{ty:"fn",name:"acos",path:"std::f32",desc:""},{ty:"fn",name:"asin",path:"std::f32",desc:""},{ty:"fn",name:"atan",path:"std::f32",desc:""},{ty:"fn",name:"atan2",path:"std::f32",desc:""},{ty:"fn",name:"cbrt",path:"std::f32",desc:""},{ty:"fn",name:"cosh",path:"std::f32",desc:""},{ty:"fn",name:"exp_m1",path:"std::f32",desc:""},{ty:"fn",name:"abs_sub",path:"std::f32",desc:""},{ty:"fn",name:"next_after",path:"std::f32",desc:""},{ty:"fn",name:"frexp",path:"std::f32",desc:""},{ty:"fn",name:"hypot",path:"std::f32",desc:""},{ty:"fn",name:"ldexp",path:"std::f32",desc:""},{ty:"fn",name:"ln_1p",path:"std::f32",desc:""},{ty:"fn",name:"sinh",path:"std::f32",desc:""},{ty:"fn",name:"tan",path:"std::f32",desc:""},{ty:"fn",name:"tanh",path:"std::f32",desc:""},{ty:"fn",name:"to_str",path:"std::f32",desc:"Converts a float to a string"},{ty:"fn",name:"to_str_hex",path:"std::f32",desc:"Converts a float to a string in hexadecimal format"},{ty:"fn",name:"to_str_radix_special",path:"std::f32",desc:"Converts a float to a string in a given radix, and a flag indicating\nwhether it's a special value"},{ty:"fn",name:"to_str_exact",path:"std::f32",desc:"Converts a float to a string with exactly the number of\nprovided significant digits"},{ty:"fn",name:"to_str_digits",path:"std::f32",desc:"Converts a float to a string with a maximum number of\nsignificant digits"},{ty:"fn",name:"to_str_exp_exact",path:"std::f32",desc:"Converts a float to a string using the exponential notation with exactly the number of\nprovided digits after the decimal point in the significand"},{ty:"fn",name:"to_str_exp_digits",path:"std::f32",desc:"Converts a float to a string using the exponential notation with the maximum number of\ndigits after the decimal point in the significand"},{ty:"fn",name:"from_str_hex",path:"std::f32",desc:"Convert a string in base 16 to a float.\nAccepts an optional binary exponent."},{ty:"mod",name:"consts",path:"std::f32",desc:""},{ty:"static",name:"PI",path:"std::f32::consts",desc:"Archimedes' constant"},{ty:"static",name:"FRAC_PI_2",path:"std::f32::consts",desc:"pi/2.0"},{ty:"static",name:"FRAC_PI_4",path:"std::f32::consts",desc:"pi/4.0"},{ty:"static",name:"FRAC_1_PI",path:"std::f32::consts",desc:"1.0/pi"},{ty:"static",name:"FRAC_2_PI",path:"std::f32::consts",desc:"2.0/pi"},{ty:"static",name:"FRAC_2_SQRTPI",path:"std::f32::consts",desc:"2.0/sqrt(pi)"},{ty:"static",name:"SQRT2",path:"std::f32::consts",desc:"sqrt(2.0)"},{ty:"static",name:"FRAC_1_SQRT2",path:"std::f32::consts",desc:"1.0/sqrt(2.0)"},{ty:"static",name:"E",path:"std::f32::consts",desc:"Euler's number"},{ty:"static",name:"LOG2_E",path:"std::f32::consts",desc:"log2(e)"},{ty:"static",name:"LOG10_E",path:"std::f32::consts",desc:"log10(e)"},{ty:"static",name:"LN_2",path:"std::f32::consts",desc:"ln(2.0)"},{ty:"static",name:"LN_10",path:"std::f32::consts",desc:"ln(10.0)"},{ty:"static",name:"RADIX",path:"std::f32",desc:""},{ty:"static",name:"MANTISSA_DIGITS",path:"std::f32",desc:""},{ty:"static",name:"DIGITS",path:"std::f32",desc:""},{ty:"static",name:"EPSILON",path:"std::f32",desc:""},{ty:"static",name:"MIN_VALUE",path:"std::f32",desc:""},{ty:"static",name:"MAX_VALUE",path:"std::f32",desc:""},{ty:"static",name:"MIN_EXP",path:"std::f32",desc:""},{ty:"static",name:"MAX_EXP",path:"std::f32",desc:""},{ty:"static",name:"MIN_10_EXP",path:"std::f32",desc:""},{ty:"static",name:"MAX_10_EXP",path:"std::f32",desc:""},{ty:"static",name:"NAN",path:"std::f32",desc:""},{ty:"static",name:"INFINITY",path:"std::f32",desc:""},{ty:"static",name:"NEG_INFINITY",path:"std::f32",desc:""},{ty:"mod",name:"f64",path:"std",desc:"Operations and constants for 64-bits floats (`f64` type)"},{ty:"fn",name:"sqrt",path:"std::f64",desc:""},{ty:"fn",name:"powi",path:"std::f64",desc:""},{ty:"fn",name:"sin",path:"std::f64",desc:""},{ty:"fn",name:"cos",path:"std::f64",desc:""},{ty:"fn",name:"pow",path:"std::f64",desc:""},{ty:"fn",name:"exp",path:"std::f64",desc:""},{ty:"fn",name:"exp2",path:"std::f64",desc:""},{ty:"fn",name:"ln",path:"std::f64",desc:""},{ty:"fn",name:"log10",path:"std::f64",desc:""},{ty:"fn",name:"log2",path:"std::f64",desc:""},{ty:"fn",name:"mul_add",path:"std::f64",desc:""},{ty:"fn",name:"abs",path:"std::f64",desc:""},{ty:"fn",name:"copysign",path:"std::f64",desc:""},{ty:"fn",name:"floor",path:"std::f64",desc:""},{ty:"fn",name:"ceil",path:"std::f64",desc:""},{ty:"fn",name:"trunc",path:"std::f64",desc:""},{ty:"fn",name:"rint",path:"std::f64",desc:""},{ty:"fn",name:"nearbyint",path:"std::f64",desc:""},{ty:"fn",name:"round",path:"std::f64",desc:""},{ty:"fn",name:"acos",path:"std::f64",desc:""},{ty:"fn",name:"asin",path:"std::f64",desc:""},{ty:"fn",name:"atan",path:"std::f64",desc:""},{ty:"fn",name:"atan2",path:"std::f64",desc:""},{ty:"fn",name:"cbrt",path:"std::f64",desc:""},{ty:"fn",name:"cosh",path:"std::f64",desc:""},{ty:"fn",name:"exp_m1",path:"std::f64",desc:""},{ty:"fn",name:"abs_sub",path:"std::f64",desc:""},{ty:"fn",name:"next_after",path:"std::f64",desc:""},{ty:"fn",name:"frexp",path:"std::f64",desc:""},{ty:"fn",name:"hypot",path:"std::f64",desc:""},{ty:"fn",name:"ldexp",path:"std::f64",desc:""},{ty:"fn",name:"ln_1p",path:"std::f64",desc:""},{ty:"fn",name:"sinh",path:"std::f64",desc:""},{ty:"fn",name:"tan",path:"std::f64",desc:""},{ty:"fn",name:"tanh",path:"std::f64",desc:""},{ty:"fn",name:"to_str",path:"std::f64",desc:"Converts a float to a string"},{ty:"fn",name:"to_str_hex",path:"std::f64",desc:"Converts a float to a string in hexadecimal format"},{ty:"fn",name:"to_str_radix_special",path:"std::f64",desc:"Converts a float to a string in a given radix, and a flag indicating\nwhether it's a special value"},{ty:"fn",name:"to_str_exact",path:"std::f64",desc:"Converts a float to a string with exactly the number of\nprovided significant digits"},{ty:"fn",name:"to_str_digits",path:"std::f64",desc:"Converts a float to a string with a maximum number of\nsignificant digits"},{ty:"fn",name:"to_str_exp_exact",path:"std::f64",desc:"Converts a float to a string using the exponential notation with exactly the number of\nprovided digits after the decimal point in the significand"},{ty:"fn",name:"to_str_exp_digits",path:"std::f64",desc:"Converts a float to a string using the exponential notation with the maximum number of\ndigits after the decimal point in the significand"},{ty:"fn",name:"from_str_hex",path:"std::f64",desc:"Convert a string in base 16 to a float.\nAccepts an optional binary exponent."},{ty:"mod",name:"consts",path:"std::f64",desc:""},{ty:"static",name:"PI",path:"std::f64::consts",desc:"Archimedes' constant"},{ty:"static",name:"FRAC_PI_2",path:"std::f64::consts",desc:"pi/2.0"},{ty:"static",name:"FRAC_PI_4",path:"std::f64::consts",desc:"pi/4.0"},{ty:"static",name:"FRAC_1_PI",path:"std::f64::consts",desc:"1.0/pi"},{ty:"static",name:"FRAC_2_PI",path:"std::f64::consts",desc:"2.0/pi"},{ty:"static",name:"FRAC_2_SQRTPI",path:"std::f64::consts",desc:"2.0/sqrt(pi)"},{ty:"static",name:"SQRT2",path:"std::f64::consts",desc:"sqrt(2.0)"},{ty:"static",name:"FRAC_1_SQRT2",path:"std::f64::consts",desc:"1.0/sqrt(2.0)"},{ty:"static",name:"E",path:"std::f64::consts",desc:"Euler's number"},{ty:"static",name:"LOG2_E",path:"std::f64::consts",desc:"log2(e)"},{ty:"static",name:"LOG10_E",path:"std::f64::consts",desc:"log10(e)"},{ty:"static",name:"LN_2",path:"std::f64::consts",desc:"ln(2.0)"},{ty:"static",name:"LN_10",path:"std::f64::consts",desc:"ln(10.0)"},{ty:"static",name:"RADIX",path:"std::f64",desc:""},{ty:"static",name:"MANTISSA_DIGITS",path:"std::f64",desc:""},{ty:"static",name:"DIGITS",path:"std::f64",desc:""},{ty:"static",name:"EPSILON",path:"std::f64",desc:""},{ty:"static",name:"MIN_VALUE",path:"std::f64",desc:""},{ty:"static",name:"MAX_VALUE",path:"std::f64",desc:""},{ty:"static",name:"MIN_EXP",path:"std::f64",desc:""},{ty:"static",name:"MAX_EXP",path:"std::f64",desc:""},{ty:"static",name:"MIN_10_EXP",path:"std::f64",desc:""},{ty:"static",name:"MAX_10_EXP",path:"std::f64",desc:""},{ty:"static",name:"NAN",path:"std::f64",desc:""},{ty:"static",name:"INFINITY",path:"std::f64",desc:""},{ty:"static",name:"NEG_INFINITY",path:"std::f64",desc:""},{ty:"mod",name:"unit",path:"std",desc:"Functions for the unit type."},{ty:"mod",name:"bool",path:"std",desc:"Operations on boolean values (`bool` type)"},{ty:"fn",name:"to_bit",path:"std::bool",desc:"Convert a `bool` to an integer."},{ty:"mod",name:"char",path:"std",desc:"Character manipulation (`char` type, Unicode Scalar Value)"},{ty:"fn",name:"from_u32",path:"std::char",desc:"Converts from `u32` to a `char`"},{ty:"fn",name:"is_alphabetic",path:"std::char",desc:"Returns whether the specified `char` is considered a Unicode alphabetic\ncode point"},{ty:"fn",name:"is_XID_start",path:"std::char",desc:"Returns whether the specified `char` satisfies the 'XID_Start' Unicode property"},{ty:"fn",name:"is_XID_continue",path:"std::char",desc:"Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property"},{ty:"fn",name:"is_lowercase",path:"std::char",desc:"\nIndicates whether a `char` is in lower case"},{ty:"fn",name:"is_uppercase",path:"std::char",desc:"\nIndicates whether a `char` is in upper case"},{ty:"fn",name:"is_whitespace",path:"std::char",desc:"\nIndicates whether a `char` is whitespace"},{ty:"fn",name:"is_alphanumeric",path:"std::char",desc:"\nIndicates whether a `char` is alphanumeric"},{ty:"fn",name:"is_control",path:"std::char",desc:"\nIndicates whether a `char` is a control code point"},{ty:"fn",name:"is_digit",path:"std::char",desc:"Indicates whether the `char` is numeric (Nd, Nl, or No)"},{ty:"fn",name:"is_digit_radix",path:"std::char",desc:"\nChecks if a `char` parses as a numeric digit in the given radix"},{ty:"fn",name:"to_digit",path:"std::char",desc:"\nConverts a `char` to the corresponding digit"},{ty:"fn",name:"to_uppercase",path:"std::char",desc:"Convert a char to its uppercase equivalent"},{ty:"fn",name:"to_lowercase",path:"std::char",desc:"Convert a char to its lowercase equivalent"},{ty:"fn",name:"from_digit",path:"std::char",desc:"\nConverts a number to the character representing it"},{ty:"fn",name:"decompose_canonical",path:"std::char",desc:"Returns the canonical decomposition of a character"},{ty:"fn",name:"decompose_compatible",path:"std::char",desc:"Returns the compatibility decomposition of a character"},{ty:"fn",name:"escape_unicode",path:"std::char",desc:"\nReturns the hexadecimal Unicode escape of a `char`"},{ty:"fn",name:"escape_default",path:"std::char",desc:"\nReturns a 'default' ASCII and C++11-like literal escape of a `char`"},{ty:"fn",name:"len_utf8_bytes",path:"std::char",desc:"Returns the amount of bytes this `char` would need if encoded in UTF-8"},{ty:"static",name:"MAX",path:"std::char",desc:"The highest valid code point"},{ty:"trait",name:"Char",path:"std::char",desc:""},{ty:"tymethod",name:"is_alphabetic",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"is_XID_start",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"is_XID_continue",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"is_lowercase",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"is_uppercase",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"is_whitespace",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"is_alphanumeric",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"is_control",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"is_digit",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"is_digit_radix",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"to_digit",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"to_lowercase",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"to_uppercase",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"from_digit",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"escape_unicode",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"escape_default",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"len_utf8_bytes",path:"std::char",desc:"",parent:'15418'},{ty:"tymethod",name:"encode_utf8",path:"std::char",desc:"Encodes this `char` as utf-8 into the provided byte-buffer",parent:'15418'},{ty:"mod",name:"tuple",path:"std",desc:"Operations on tuples"},{ty:"trait",name:"Tuple1",path:"std::tuple",desc:""},{ty:"tymethod",name:"val0",path:"std::tuple",desc:"",parent:'16051'},{ty:"tymethod",name:"ref0",path:"std::tuple",desc:"",parent:'16051'},{ty:"tymethod",name:"mut0",path:"std::tuple",desc:"",parent:'16051'},{ty:"trait",name:"Tuple2",path:"std::tuple",desc:""},{ty:"tymethod",name:"val0",path:"std::tuple",desc:"",parent:'16466'},{ty:"tymethod",name:"val1",path:"std::tuple",desc:"",parent:'16466'},{ty:"tymethod",name:"ref0",path:"std::tuple",desc:"",parent:'16466'},{ty:"tymethod",name:"ref1",path:"std::tuple",desc:"",parent:'16466'},{ty:"tymethod",name:"mut0",path:"std::tuple",desc:"",parent:'16466'},{ty:"tymethod",name:"mut1",path:"std::tuple",desc:"",parent:'16466'},{ty:"trait",name:"Tuple3",path:"std::tuple",desc:""},{ty:"tymethod",name:"val0",path:"std::tuple",desc:"",parent:'17357'},{ty:"tymethod",name:"val1",path:"std::tuple",desc:"",parent:'17357'},{ty:"tymethod",name:"val2",path:"std::tuple",desc:"",parent:'17357'},{ty:"tymethod",name:"ref0",path:"std::tuple",desc:"",parent:'17357'},{ty:"tymethod",name:"ref1",path:"std::tuple",desc:"",parent:'17357'},{ty:"tymethod",name:"ref2",path:"std::tuple",desc:"",parent:'17357'},{ty:"tymethod",name:"mut0",path:"std::tuple",desc:"",parent:'17357'},{ty:"tymethod",name:"mut1",path:"std::tuple",desc:"",parent:'17357'},{ty:"tymethod",name:"mut2",path:"std::tuple",desc:"",parent:'17357'},{ty:"trait",name:"Tuple4",path:"std::tuple",desc:""},{ty:"tymethod",name:"val0",path:"std::tuple",desc:"",parent:'18598'},{ty:"tymethod",name:"val1",path:"std::tuple",desc:"",parent:'18598'},{ty:"tymethod",name:"val2",path:"std::tuple",desc:"",parent:'18598'},{ty:"tymethod",name:"val3",path:"std::tuple",desc:"",parent:'18598'},{ty:"tymethod",name:"ref0",path:"std::tuple",desc:"",parent:'18598'},{ty:"tymethod",name:"ref1",path:"std::tuple",desc:"",parent:'18598'},{ty:"tymethod",name:"ref2",path:"std::tuple",desc:"",parent:'18598'},{ty:"tymethod",name:"ref3",path:"std::tuple",desc:"",parent:'18598'},{ty:"tymethod",name:"mut0",path:"std::tuple",desc:"",parent:'18598'},{ty:"tymethod",name:"mut1",path:"std::tuple",desc:"",parent:'18598'},{ty:"tymethod",name:"mut2",path:"std::tuple",desc:"",parent:'18598'},{ty:"tymethod",name:"mut3",path:"std::tuple",desc:"",parent:'18598'},{ty:"trait",name:"Tuple5",path:"std::tuple",desc:""},{ty:"tymethod",name:"val0",path:"std::tuple",desc:"",parent:'20195'},{ty:"tymethod",name:"val1",path:"std::tuple",desc:"",parent:'20195'},{ty:"tymethod",name:"val2",path:"std::tuple",desc:"",parent:'20195'},{ty:"tymethod",name:"val3",path:"std::tuple",desc:"",parent:'20195'},{ty:"tymethod",name:"val4",path:"std::tuple",desc:"",parent:'20195'},{ty:"tymethod",name:"ref0",path:"std::tuple",desc:"",parent:'20195'},{ty:"tymethod",name:"ref1",path:"std::tuple",desc:"",parent:'20195'},{ty:"tymethod",name:"ref2",path:"std::tuple",desc:"",parent:'20195'},{ty:"tymethod",name:"ref3",path:"std::tuple",desc:"",parent:'20195'},{ty:"tymethod",name:"ref4",path:"std::tuple",desc:"",parent:'20195'},{ty:"tymethod",name:"mut0",path:"std::tuple",desc:"",parent:'20195'},{ty:"tymethod",name:"mut1",path:"std::tuple",desc:"",parent:'20195'},{ty:"tymethod",name:"mut2",path:"std::tuple",desc:"",parent:'20195'},{ty:"tymethod",name:"mut3",path:"std::tuple",desc:"",parent:'20195'},{ty:"tymethod",name:"mut4",path:"std::tuple",desc:"",parent:'20195'},{ty:"trait",name:"Tuple6",path:"std::tuple",desc:""},{ty:"tymethod",name:"val0",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"val1",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"val2",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"val3",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"val4",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"val5",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"ref0",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"ref1",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"ref2",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"ref3",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"ref4",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"ref5",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"mut0",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"mut1",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"mut2",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"mut3",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"mut4",path:"std::tuple",desc:"",parent:'22154'},{ty:"tymethod",name:"mut5",path:"std::tuple",desc:"",parent:'22154'},{ty:"trait",name:"Tuple7",path:"std::tuple",desc:""},{ty:"tymethod",name:"val0",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"val1",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"val2",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"val3",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"val4",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"val5",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"val6",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"ref0",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"ref1",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"ref2",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"ref3",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"ref4",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"ref5",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"ref6",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"mut0",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"mut1",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"mut2",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"mut3",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"mut4",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"mut5",path:"std::tuple",desc:"",parent:'24481'},{ty:"tymethod",name:"mut6",path:"std::tuple",desc:"",parent:'24481'},{ty:"trait",name:"Tuple8",path:"std::tuple",desc:""},{ty:"tymethod",name:"val0",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"val1",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"val2",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"val3",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"val4",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"val5",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"val6",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"val7",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"ref0",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"ref1",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"ref2",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"ref3",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"ref4",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"ref5",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"ref6",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"ref7",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"mut0",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"mut1",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"mut2",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"mut3",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"mut4",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"mut5",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"mut6",path:"std::tuple",desc:"",parent:'27182'},{ty:"tymethod",name:"mut7",path:"std::tuple",desc:"",parent:'27182'},{ty:"trait",name:"Tuple9",path:"std::tuple",desc:""},{ty:"tymethod",name:"val0",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"val1",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"val2",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"val3",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"val4",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"val5",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"val6",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"val7",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"val8",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"ref0",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"ref1",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"ref2",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"ref3",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"ref4",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"ref5",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"ref6",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"ref7",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"ref8",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"mut0",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"mut1",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"mut2",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"mut3",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"mut4",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"mut5",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"mut6",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"mut7",path:"std::tuple",desc:"",parent:'30263'},{ty:"tymethod",name:"mut8",path:"std::tuple",desc:"",parent:'30263'},{ty:"trait",name:"Tuple10",path:"std::tuple",desc:""},{ty:"tymethod",name:"val0",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"val1",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"val2",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"val3",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"val4",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"val5",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"val6",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"val7",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"val8",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"val9",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"ref0",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"ref1",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"ref2",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"ref3",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"ref4",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"ref5",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"ref6",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"ref7",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"ref8",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"ref9",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"mut0",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"mut1",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"mut2",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"mut3",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"mut4",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"mut5",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"mut6",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"mut7",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"mut8",path:"std::tuple",desc:"",parent:'33730'},{ty:"tymethod",name:"mut9",path:"std::tuple",desc:"",parent:'33730'},{ty:"trait",name:"Tuple11",path:"std::tuple",desc:""},{ty:"tymethod",name:"val0",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"val1",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"val2",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"val3",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"val4",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"val5",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"val6",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"val7",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"val8",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"val9",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"val10",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"ref0",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"ref1",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"ref2",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"ref3",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"ref4",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"ref5",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"ref6",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"ref7",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"ref8",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"ref9",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"ref10",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"mut0",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"mut1",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"mut2",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"mut3",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"mut4",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"mut5",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"mut6",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"mut7",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"mut8",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"mut9",path:"std::tuple",desc:"",parent:'37589'},{ty:"tymethod",name:"mut10",path:"std::tuple",desc:"",parent:'37589'},{ty:"trait",name:"Tuple12",path:"std::tuple",desc:""},{ty:"tymethod",name:"val0",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"val1",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"val2",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"val3",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"val4",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"val5",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"val6",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"val7",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"val8",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"val9",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"val10",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"val11",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"ref0",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"ref1",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"ref2",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"ref3",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"ref4",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"ref5",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"ref6",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"ref7",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"ref8",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"ref9",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"ref10",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"ref11",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"mut0",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"mut1",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"mut2",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"mut3",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"mut4",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"mut5",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"mut6",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"mut7",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"mut8",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"mut9",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"mut10",path:"std::tuple",desc:"",parent:'41846'},{ty:"tymethod",name:"mut11",path:"std::tuple",desc:"",parent:'41846'},{ty:"mod",name:"vec",path:"std",desc:"Utilities for vector manipulation"},{ty:"struct",name:"Splits",path:"std::vec",desc:"An iterator over the slices of a vector separated by elements that\nmatch a predicate function."},{ty:"struct",name:"RevSplits",path:"std::vec",desc:"An iterator over the slices of a vector separated by elements that\nmatch a predicate function, from back to front."},{ty:"struct",name:"ElementSwaps",path:"std::vec",desc:"An Iterator that yields the element swaps needed to produce\na sequence of all possible permutations for an indexed sequence of\nelements. Each permutation is only a single swap apart."},{ty:"struct",name:"Permutations",path:"std::vec",desc:"An Iterator that uses `ElementSwaps` to iterate through\nall possible permutations of a vector."},{ty:"struct",name:"Windows",path:"std::vec",desc:"An iterator over the (overlapping) slices of length `size` within\na vector."},{ty:"struct",name:"Chunks",path:"std::vec",desc:"An iterator over a vector in (non-overlapping) chunks (`size`\nelements at a time)."},{ty:"struct",name:"Items",path:"std::vec",desc:"Immutable slice iterator"},{ty:"struct",name:"MutItems",path:"std::vec",desc:"Mutable slice iterator"},{ty:"struct",name:"MutSplits",path:"std::vec",desc:"An iterator over the subslices of the vector which are separated\nby elements that match `pred`."},{ty:"struct",name:"MutChunks",path:"std::vec",desc:"An iterator over a vector in (non-overlapping) mutable chunks (`size`  elements at a time). When\nthe vector len is not evenly divided by the chunk size, the last slice of the iteration will be\nthe remainder."},{ty:"struct",name:"MoveItems",path:"std::vec",desc:"An iterator that moves out of a vector."},{ty:"fn",name:"from_fn",path:"std::vec",desc:"Creates and initializes an owned vector."},{ty:"fn",name:"from_elem",path:"std::vec",desc:"Creates and initializes an owned vector."},{ty:"fn",name:"with_capacity",path:"std::vec",desc:"Creates a new vector with a capacity of `capacity`"},{ty:"fn",name:"build",path:"std::vec",desc:"Builds a vector by calling a provided function with an argument\nfunction that pushes an element to the back of a vector.\nThe initial capacity for the vector may optionally be specified."},{ty:"fn",name:"ref_slice",path:"std::vec",desc:"Converts a pointer to A into a slice of length 1 (without copying)."},{ty:"fn",name:"mut_ref_slice",path:"std::vec",desc:"Converts a pointer to A into a slice of length 1 (without copying)."},{ty:"fn",name:"append",path:"std::vec",desc:"Iterates over the `rhs` vector, copying each element and appending it to the\n`lhs`. Afterwards, the `lhs` is then returned for use again."},{ty:"fn",name:"append_one",path:"std::vec",desc:"Appends one element to the vector provided. The vector itself is then\nreturned for use again."},{ty:"fn",name:"flat_map",path:"std::vec",desc:"Apply a function to each element of a vector and return a concatenation\nof each result vector"},{ty:"fn",name:"unzip",path:"std::vec",desc:"Convert an iterator of pairs into a pair of vectors."},{ty:"fn",name:"from_buf",path:"std::vec",desc:"Constructs a vector from an unsafe pointer to a buffer"},{ty:"mod",name:"traits",path:"std::vec",desc:""},{ty:"mod",name:"raw",path:"std::vec",desc:"Unsafe operations"},{ty:"fn",name:"buf_as_slice",path:"std::vec::raw",desc:"Form a slice from a pointer and length (as a number of units,\nnot bytes)."},{ty:"fn",name:"mut_buf_as_slice",path:"std::vec::raw",desc:"Form a slice from a pointer and length (as a number of units,\nnot bytes)."},{ty:"fn",name:"from_buf_raw",path:"std::vec::raw",desc:"Constructs a vector from an unsafe pointer to a buffer"},{ty:"fn",name:"shift_ptr",path:"std::vec::raw",desc:"Returns a pointer to first element in slice and adjusts\nslice so it no longer contains that element. Fails if\nslice is empty. O(1)."},{ty:"fn",name:"pop_ptr",path:"std::vec::raw",desc:"Returns a pointer to last element in slice and adjusts\nslice so it no longer contains that element. Fails if\nslice is empty. O(1)."},{ty:"mod",name:"bytes",path:"std::vec",desc:"Operations on `[u8]`."},{ty:"fn",name:"copy_memory",path:"std::vec::bytes",desc:"Copies data from `src` to `dst`"},{ty:"fn",name:"push_bytes",path:"std::vec::bytes",desc:"Allocate space in `dst` and append the data to `src`."},{ty:"trait",name:"MutableByteVector",path:"std::vec::bytes",desc:"A trait for operations on mutable `[u8]`s."},{ty:"tymethod",name:"set_memory",path:"std::vec::bytes",desc:"Sets all bytes of the receiver to the given value.",parent:'55232'},{ty:"typedef",name:"RevItems",path:"std::vec",desc:""},{ty:"typedef",name:"RevMutItems",path:"std::vec",desc:""},{ty:"typedef",name:"RevMoveItems",path:"std::vec",desc:"An iterator that moves out of a vector in reverse order."},{ty:"trait",name:"VectorVector",path:"std::vec",desc:""},{ty:"tymethod",name:"concat_vec",path:"std::vec",desc:"Flattens a vector of vectors of T into a single vector of T.",parent:'47504'},{ty:"tymethod",name:"connect_vec",path:"std::vec",desc:"Concatenate a vector of vectors, placing a given separator between each.",parent:'47504'},{ty:"trait",name:"Vector",path:"std::vec",desc:"Any vector that can be represented as a slice."},{ty:"tymethod",name:"as_slice",path:"std::vec",desc:"Work with `self` as a slice.",parent:'49175'},{ty:"trait",name:"CloneableVector",path:"std::vec",desc:"Extension methods for vector slices with cloneable elements"},{ty:"tymethod",name:"to_owned",path:"std::vec",desc:"Copy `self` into a new owned vector",parent:'49281'},{ty:"tymethod",name:"into_owned",path:"std::vec",desc:"Convert `self` into an owned vector, not making a copy if possible.",parent:'49281'},{ty:"trait",name:"ImmutableVector",path:"std::vec",desc:"Extension methods for vectors"},{ty:"tymethod",name:"slice",path:"std::vec",desc:"Returns a slice of self between `start` and `end`.",parent:'49395'},{ty:"tymethod",name:"slice_from",path:"std::vec",desc:"Returns a slice of self from `start` to the end of the vec.",parent:'49395'},{ty:"tymethod",name:"slice_to",path:"std::vec",desc:"Returns a slice of self from the start of the vec to `end`.",parent:'49395'},{ty:"tymethod",name:"iter",path:"std::vec",desc:"Returns an iterator over the vector",parent:'49395'},{ty:"tymethod",name:"rev_iter",path:"std::vec",desc:"Returns a reversed iterator over a vector",parent:'49395'},{ty:"tymethod",name:"split",path:"std::vec",desc:"Returns an iterator over the subslices of the vector which are\nseparated by elements that match `pred`.  The matched element\nis not contained in the subslices.",parent:'49395'},{ty:"tymethod",name:"splitn",path:"std::vec",desc:"Returns an iterator over the subslices of the vector which are\nseparated by elements that match `pred`, limited to splitting\nat most `n` times.  The matched element is not contained in\nthe subslices.",parent:'49395'},{ty:"tymethod",name:"rsplit",path:"std::vec",desc:"Returns an iterator over the subslices of the vector which are\nseparated by elements that match `pred`. This starts at the\nend of the vector and works backwards.  The matched element is\nnot contained in the subslices.",parent:'49395'},{ty:"tymethod",name:"rsplitn",path:"std::vec",desc:"Returns an iterator over the subslices of the vector which are\nseparated by elements that match `pred` limited to splitting\nat most `n` times. This starts at the end of the vector and\nworks backwards.  The matched element is not contained in the\nsubslices.",parent:'49395'},{ty:"tymethod",name:"windows",path:"std::vec",desc:"Returns an iterator over all contiguous windows of length\n`size`. The windows overlap. If the vector is shorter than\n`size`, the iterator returns no values.",parent:'49395'},{ty:"tymethod",name:"chunks",path:"std::vec",desc:"\nReturns an iterator over `size` elements of the vector at a\ntime. The chunks do not overlap. If `size` does not divide the\nlength of the vector, then the last chunk will not have length\n`size`.",parent:'49395'},{ty:"tymethod",name:"get",path:"std::vec",desc:"Returns the element of a vector at the given index, or `None` if the\nindex is out of bounds",parent:'49395'},{ty:"tymethod",name:"head",path:"std::vec",desc:"Returns the first element of a vector, or `None` if it is empty",parent:'49395'},{ty:"tymethod",name:"tail",path:"std::vec",desc:"Returns all but the first element of a vector",parent:'49395'},{ty:"tymethod",name:"tailn",path:"std::vec",desc:"Returns all but the first `n' elements of a vector",parent:'49395'},{ty:"tymethod",name:"init",path:"std::vec",desc:"Returns all but the last element of a vector",parent:'49395'},{ty:"tymethod",name:"initn",path:"std::vec",desc:"Returns all but the last `n' elements of a vector",parent:'49395'},{ty:"tymethod",name:"last",path:"std::vec",desc:"Returns the last element of a vector, or `None` if it is empty.",parent:'49395'},{ty:"tymethod",name:"flat_map",path:"std::vec",desc:"Apply a function to each element of a vector and return a concatenation\nof each result vector",parent:'49395'},{ty:"tymethod",name:"unsafe_ref",path:"std::vec",desc:"Returns a pointer to the element at the given index, without doing\nbounds checking.",parent:'49395'},{ty:"tymethod",name:"as_ptr",path:"std::vec",desc:"Returns an unsafe pointer to the vector's buffer",parent:'49395'},{ty:"tymethod",name:"bsearch",path:"std::vec",desc:"Binary search a sorted vector with a comparator function.",parent:'49395'},{ty:"tymethod",name:"map",path:"std::vec",desc:"Deprecated, use iterators where possible\n(`self.iter().map(f)`). Apply a function to each element\nof a vector and return the results.",parent:'49395'},{ty:"tymethod",name:"shift_ref",path:"std::vec",desc:"Returns a mutable reference to the first element in this slice\nand adjusts the slice in place so that it no longer contains\nthat element. O(1).",parent:'49395'},{ty:"tymethod",name:"pop_ref",path:"std::vec",desc:"Returns a mutable reference to the last element in this slice\nand adjusts the slice in place so that it no longer contains\nthat element. O(1).",parent:'49395'},{ty:"trait",name:"ImmutableEqVector",path:"std::vec",desc:"Extension methods for vectors contain `Eq` elements."},{ty:"tymethod",name:"position_elem",path:"std::vec",desc:"Find the first index containing a matching value",parent:'50760'},{ty:"tymethod",name:"rposition_elem",path:"std::vec",desc:"Find the last index containing a matching value",parent:'50760'},{ty:"tymethod",name:"contains",path:"std::vec",desc:"Return true if a vector contains an element with the given value",parent:'50760'},{ty:"tymethod",name:"starts_with",path:"std::vec",desc:"Returns true if `needle` is a prefix of the vector.",parent:'50760'},{ty:"tymethod",name:"ends_with",path:"std::vec",desc:"Returns true if `needle` is a suffix of the vector.",parent:'50760'},{ty:"trait",name:"ImmutableTotalOrdVector",path:"std::vec",desc:"Extension methods for vectors containing `TotalOrd` elements."},{ty:"tymethod",name:"bsearch_elem",path:"std::vec",desc:"Binary search a sorted vector for a given element.",parent:'50982'},{ty:"trait",name:"ImmutableCloneableVector",path:"std::vec",desc:"Extension methods for vectors containing `Clone` elements."},{ty:"tymethod",name:"partitioned",path:"std::vec",desc:"Partitions the vector into two vectors `(A,B)`, where all\nelements of `A` satisfy `f` and all elements of `B` do not.",parent:'51035'},{ty:"tymethod",name:"permutations",path:"std::vec",desc:"Create an iterator that yields every possible permutation of the\nvector in succession.",parent:'51035'},{ty:"trait",name:"OwnedVector",path:"std::vec",desc:"Extension methods for owned vectors."},{ty:"tymethod",name:"move_iter",path:"std::vec",desc:"Creates a consuming iterator, that is, one that moves each\nvalue out of the vector (from start to end). The vector cannot\nbe used after calling this.",parent:'51173'},{ty:"tymethod",name:"move_rev_iter",path:"std::vec",desc:"Creates a consuming iterator that moves out of the vector in\nreverse order.",parent:'51173'},{ty:"tymethod",name:"reserve_exact",path:"std::vec",desc:"Reserves capacity for exactly `n` elements in the given vector.",parent:'51173'},{ty:"tymethod",name:"reserve",path:"std::vec",desc:"Reserves capacity for at least `n` elements in the given vector.",parent:'51173'},{ty:"tymethod",name:"reserve_additional",path:"std::vec",desc:"Reserves capacity for at least `n` additional elements in the given vector.",parent:'51173'},{ty:"tymethod",name:"capacity",path:"std::vec",desc:"Returns the number of elements the vector can hold without reallocating.",parent:'51173'},{ty:"tymethod",name:"shrink_to_fit",path:"std::vec",desc:"Shrink the capacity of the vector to match the length",parent:'51173'},{ty:"tymethod",name:"push",path:"std::vec",desc:"Append an element to a vector",parent:'51173'},{ty:"tymethod",name:"push_all_move",path:"std::vec",desc:"Takes ownership of the vector `rhs`, moving all elements into\nthe current vector. This does not copy any elements, and it is\nillegal to use the `rhs` vector after calling this method\n(because it is moved here).",parent:'51173'},{ty:"tymethod",name:"pop",path:"std::vec",desc:"Remove the last element from a vector and return it, or `None` if it is empty",parent:'51173'},{ty:"tymethod",name:"shift",path:"std::vec",desc:"Removes the first element from a vector and return it, or `None` if it is empty",parent:'51173'},{ty:"tymethod",name:"unshift",path:"std::vec",desc:"Prepend an element to the vector",parent:'51173'},{ty:"tymethod",name:"insert",path:"std::vec",desc:"Insert an element at position i within v, shifting all\nelements after position i one position to the right.",parent:'51173'},{ty:"tymethod",name:"remove",path:"std::vec",desc:"Remove and return the element at position `i` within `v`,\nshifting all elements after position `i` one position to the\nleft. Returns `None` if `i` is out of bounds.",parent:'51173'},{ty:"tymethod",name:"swap_remove",path:"std::vec",desc:"Remove an element from anywhere in the vector and return it, replacing it\nwith the last element. This does not preserve ordering, but is O(1).",parent:'51173'},{ty:"tymethod",name:"truncate",path:"std::vec",desc:"Shorten a vector, dropping excess elements.",parent:'51173'},{ty:"tymethod",name:"retain",path:"std::vec",desc:"Like `filter()`, but in place.  Preserves order of `v`.  Linear time.",parent:'51173'},{ty:"tymethod",name:"partition",path:"std::vec",desc:"Partitions the vector into two vectors `(A,B)`, where all\nelements of `A` satisfy `f` and all elements of `B` do not.",parent:'51173'},{ty:"tymethod",name:"grow_fn",path:"std::vec",desc:"Expands a vector in place, initializing the new elements to the result of\na function.",parent:'51173'},{ty:"tymethod",name:"set_len",path:"std::vec",desc:"Sets the length of a vector",parent:'51173'},{ty:"trait",name:"OwnedCloneableVector",path:"std::vec",desc:"Extension methods for owned vectors containing `Clone` elements."},{ty:"tymethod",name:"push_all",path:"std::vec",desc:"Iterates over the slice `rhs`, copies each element, and then appends it to\nthe vector provided `v`. The `rhs` vector is traversed in-order.",parent:'52675'},{ty:"tymethod",name:"grow",path:"std::vec",desc:"Expands a vector in place, initializing the new elements to a given value",parent:'52675'},{ty:"tymethod",name:"grow_set",path:"std::vec",desc:"Sets the value of a vector element at a given index, growing the vector as\nneeded",parent:'52675'},{ty:"trait",name:"OwnedEqVector",path:"std::vec",desc:"Extension methods for owned vectors containing `Eq` elements."},{ty:"tymethod",name:"dedup",path:"std::vec",desc:"Remove consecutive repeated elements from a vector; if the vector is\nsorted, this removes all duplicates.",parent:'52873'},{ty:"trait",name:"MutableVector",path:"std::vec",desc:"Extension methods for vectors such that their elements are\nmutable."},{ty:"tymethod",name:"as_mut_slice",path:"std::vec",desc:"Work with `self` as a mut slice.\nPrimarily intended for getting a &mut [T] from a [T, ..N].",parent:'53641'},{ty:"tymethod",name:"mut_slice",path:"std::vec",desc:"Return a slice that points into another slice.",parent:'53641'},{ty:"tymethod",name:"mut_slice_from",path:"std::vec",desc:"Returns a slice of self from `start` to the end of the vec.",parent:'53641'},{ty:"tymethod",name:"mut_slice_to",path:"std::vec",desc:"Returns a slice of self from the start of the vec to `end`.",parent:'53641'},{ty:"tymethod",name:"mut_iter",path:"std::vec",desc:"Returns an iterator that allows modifying each value",parent:'53641'},{ty:"tymethod",name:"mut_last",path:"std::vec",desc:"Returns a mutable pointer to the last item in the vector.",parent:'53641'},{ty:"tymethod",name:"mut_rev_iter",path:"std::vec",desc:"Returns a reversed iterator that allows modifying each value",parent:'53641'},{ty:"tymethod",name:"mut_split",path:"std::vec",desc:"Returns an iterator over the mutable subslices of the vector\nwhich are separated by elements that match `pred`.  The\nmatched element is not contained in the subslices.",parent:'53641'},{ty:"tymethod",name:"mut_chunks",path:"std::vec",desc:"Returns an iterator over `size` elements of the vector at a time.\nThe chunks are mutable and do not overlap. If `size` does not divide the\nlength of the vector, then the last chunk will not have length\n`size`.",parent:'53641'},{ty:"tymethod",name:"mut_shift_ref",path:"std::vec",desc:"Returns a mutable reference to the first element in this slice\nand adjusts the slice in place so that it no longer contains\nthat element. O(1).",parent:'53641'},{ty:"tymethod",name:"mut_pop_ref",path:"std::vec",desc:"Returns a mutable reference to the last element in this slice\nand adjusts the slice in place so that it no longer contains\nthat element. O(1).",parent:'53641'},{ty:"tymethod",name:"swap",path:"std::vec",desc:"Swaps two elements in a vector.",parent:'53641'},{ty:"tymethod",name:"mut_split_at",path:"std::vec",desc:"Divides one `&mut` into two at an index.",parent:'53641'},{ty:"tymethod",name:"reverse",path:"std::vec",desc:"Reverse the order of elements in a vector, in place.",parent:'53641'},{ty:"tymethod",name:"sort_by",path:"std::vec",desc:"Sort the vector, in place, using `compare` to compare\nelements.",parent:'53641'},{ty:"tymethod",name:"move_from",path:"std::vec",desc:"Consumes `src` and moves as many elements as it can into `self`\nfrom the range [start,end).",parent:'53641'},{ty:"tymethod",name:"unsafe_mut_ref",path:"std::vec",desc:"Returns an unsafe mutable pointer to the element in index",parent:'53641'},{ty:"tymethod",name:"as_mut_ptr",path:"std::vec",desc:"Return an unsafe mutable pointer to the vector's buffer.",parent:'53641'},{ty:"tymethod",name:"unsafe_set",path:"std::vec",desc:"Unsafely sets the element in index to the value.",parent:'53641'},{ty:"tymethod",name:"init_elem",path:"std::vec",desc:"Unchecked vector index assignment.  Does not drop the\nold value and hence is only suitable when the vector\nis newly allocated.",parent:'53641'},{ty:"tymethod",name:"copy_memory",path:"std::vec",desc:"Copies raw bytes from `src` to `self`.",parent:'53641'},{ty:"trait",name:"MutableCloneableVector",path:"std::vec",desc:"Trait for &[T] where T is Cloneable"},{ty:"tymethod",name:"copy_from",path:"std::vec",desc:"Copies as many elements from `src` as it can into `self` (the\nshorter of `self.len()` and `src.len()`). Returns the number\nof elements copied.",parent:'54883'},{ty:"trait",name:"MutableTotalOrdVector",path:"std::vec",desc:"Methods for mutable vectors with orderable elements, such as\nin-place sorting."},{ty:"tymethod",name:"sort",path:"std::vec",desc:"Sort the vector, in place.",parent:'54954'},{ty:"method",name:"next",path:"std::vec",desc:"",parent:'46986'},{ty:"method",name:"size_hint",path:"std::vec",desc:"",parent:'46986'},{ty:"method",name:"next",path:"std::vec",desc:"",parent:'47185'},{ty:"method",name:"size_hint",path:"std::vec",desc:"",parent:'47185'},{ty:"method",name:"new",path:"std::vec",desc:"Create an `ElementSwaps` iterator for a sequence of `length` elements",parent:'47764'},{ty:"method",name:"next",path:"std::vec",desc:"",parent:'47764'},{ty:"method",name:"next",path:"std::vec",desc:"",parent:'48003'},{ty:"method",name:"clone",path:"std::vec",desc:"",parent:'48064'},{ty:"method",name:"next",path:"std::vec",desc:"",parent:'48064'},{ty:"method",name:"size_hint",path:"std::vec",desc:"",parent:'48064'},{ty:"method",name:"clone",path:"std::vec",desc:"",parent:'48217'},{ty:"method",name:"next",path:"std::vec",desc:"",parent:'48217'},{ty:"method",name:"size_hint",path:"std::vec",desc:"",parent:'48217'},{ty:"method",name:"next_back",path:"std::vec",desc:"",parent:'48217'},{ty:"method",name:"indexable",path:"std::vec",desc:"",parent:'48217'},{ty:"method",name:"idx",path:"std::vec",desc:"",parent:'48217'},{ty:"method",name:"indexable",path:"std::vec",desc:"",parent:'55813'},{ty:"method",name:"idx",path:"std::vec",desc:"",parent:'55813'},{ty:"method",name:"next",path:"std::vec",desc:"",parent:'55813'},{ty:"method",name:"size_hint",path:"std::vec",desc:"",parent:'55813'},{ty:"method",name:"next_back",path:"std::vec",desc:"",parent:'55813'},{ty:"method",name:"clone",path:"std::vec",desc:"",parent:'55813'},{ty:"method",name:"next",path:"std::vec",desc:"",parent:'55828'},{ty:"method",name:"size_hint",path:"std::vec",desc:"",parent:'55828'},{ty:"method",name:"next_back",path:"std::vec",desc:"",parent:'55828'},{ty:"method",name:"next",path:"std::vec",desc:"",parent:'56353'},{ty:"method",name:"size_hint",path:"std::vec",desc:"",parent:'56353'},{ty:"method",name:"next_back",path:"std::vec",desc:"",parent:'56353'},{ty:"method",name:"next",path:"std::vec",desc:"",parent:'56639'},{ty:"method",name:"size_hint",path:"std::vec",desc:"",parent:'56639'},{ty:"method",name:"next_back",path:"std::vec",desc:"",parent:'56639'},{ty:"method",name:"next",path:"std::vec",desc:"",parent:'56881'},{ty:"method",name:"size_hint",path:"std::vec",desc:"",parent:'56881'},{ty:"method",name:"next_back",path:"std::vec",desc:"",parent:'56881'},{ty:"method",name:"drop",path:"std::vec",desc:"",parent:'56881'},{ty:"mod",name:"vec_ng",path:"std",desc:""},{ty:"struct",name:"Vec",path:"std::vec_ng",desc:""},{ty:"struct",name:"MoveItems",path:"std::vec_ng",desc:""},{ty:"fn",name:"append",path:"std::vec_ng",desc:""},{ty:"fn",name:"append_one",path:"std::vec_ng",desc:"Appends one element to the vector provided. The vector itself is then\nreturned for use again."},{ty:"method",name:"new",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"with_capacity",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"from_fn",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"partition",path:"std::vec_ng",desc:"Partitions the vector into two vectors `(A,B)`, where all\nelements of `A` satisfy `f` and all elements of `B` do not.",parent:'57199'},{ty:"method",name:"from_slice",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"from_elem",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"push_all",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"grow",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"grow_set",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"partitioned",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"clone",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"from_iterator",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"extend",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"eq",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"lt",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"equals",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"cmp",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"len",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"capacity",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"reserve_additional",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"reserve",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"reserve_exact",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"shrink_to_fit",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"pop",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"push",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"truncate",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"as_slice",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"as_mut_slice",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"move_iter",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"move_rev_iter",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"set_len",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"get",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"get_mut",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"iter",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"mut_iter",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"sort_by",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"slice",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"tail",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"tailn",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"last",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"mut_last",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"swap_remove",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"unshift",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"shift",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"insert",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"remove",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"rev_iter",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"map",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"push_all_move",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"mut_slice",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"reverse",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"slice_from",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"slice_to",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"init",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"as_ptr",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"as_mut_ptr",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"clear",path:"std::vec_ng",desc:"Clear the vector, removing all values.",parent:'57199'},{ty:"method",name:"contains",path:"std::vec_ng",desc:"Return true if a vector contains an element with the given value",parent:'57199'},{ty:"method",name:"dedup",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"drop",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"default",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"fmt",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"next",path:"std::vec_ng",desc:"",parent:'59438'},{ty:"method",name:"size_hint",path:"std::vec_ng",desc:"",parent:'59438'},{ty:"method",name:"next_back",path:"std::vec_ng",desc:"",parent:'59438'},{ty:"method",name:"drop",path:"std::vec_ng",desc:"",parent:'59438'},{ty:"mod",name:"str",path:"std",desc:"Unicode string manipulation (`str` type)"},{ty:"struct",name:"Chars",path:"std::str",desc:"External iterator for a string's characters.\nUse with the `std::iter` module."},{ty:"struct",name:"CharOffsets",path:"std::str",desc:"External iterator for a string's characters and their byte offsets.\nUse with the `std::iter` module."},{ty:"struct",name:"CharSplits",path:"std::str",desc:"An iterator over the substrings of a string, separated by `sep`."},{ty:"struct",name:"CharSplitsN",path:"std::str",desc:"An iterator over the substrings of a string, separated by `sep`,\nsplitting at most `count` times."},{ty:"struct",name:"MatchIndices",path:"std::str",desc:"An iterator over the start and end indices of the matches of a\nsubstring within a larger string"},{ty:"struct",name:"StrSplits",path:"std::str",desc:"An iterator over the substrings of a string separated by a given\nsearch string"},{ty:"struct",name:"Normalizations",path:"std::str",desc:"External iterator for a string's normalization's characters.\nUse with the `std::iter` module."},{ty:"struct",name:"UTF16Items",path:"std::str",desc:"An iterator that decodes UTF-16 encoded codepoints from a vector\nof `u16`s."},{ty:"struct",name:"CharRange",path:"std::str",desc:"Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string."},{ty:"structfield",name:"ch",path:"std::str",desc:"Current `char`",parent:'63563'},{ty:"structfield",name:"next",path:"std::str",desc:"Index of the first byte of the next `char`",parent:'63563'},{ty:"enum",name:"UTF16Item",path:"std::str",desc:"The possibilities for values decoded from a `u16` stream."},{ty:"variant",name:"ScalarValue",path:"std::str",desc:"A valid codepoint.",parent:'62578'},{ty:"variant",name:"LoneSurrogate",path:"std::str",desc:"An invalid surrogate without its pair.",parent:'62578'},{ty:"enum",name:"MaybeOwned",path:"std::str",desc:"A MaybeOwned is a string that can hold either a ~str or a &str.\nThis can be useful as an optimization when an allocation is sometimes\nneeded but not always."},{ty:"variant",name:"Slice",path:"std::str",desc:"A borrowed string",parent:'64156'},{ty:"variant",name:"Owned",path:"std::str",desc:"An owned string",parent:'64156'},{ty:"fn",name:"from_utf8_owned",path:"std::str",desc:"Consumes a vector of bytes to create a new utf-8 string.\nReturns None if the vector contains invalid UTF-8."},{ty:"fn",name:"from_utf8",path:"std::str",desc:"Converts a vector to a string slice without performing any allocations."},{ty:"fn",name:"from_byte",path:"std::str",desc:"Convert a byte to a UTF-8 string"},{ty:"fn",name:"from_char",path:"std::str",desc:"Convert a char to a string"},{ty:"fn",name:"from_chars",path:"std::str",desc:"Convert a vector of chars to a string"},{ty:"fn",name:"replace",path:"std::str",desc:"Replace all occurrences of one string with another"},{ty:"fn",name:"eq_slice",path:"std::str",desc:"Bytewise slice equality"},{ty:"fn",name:"eq",path:"std::str",desc:"Bytewise string equality"},{ty:"fn",name:"is_utf8",path:"std::str",desc:"Determines if a vector of bytes contains valid UTF-8."},{ty:"fn",name:"is_utf16",path:"std::str",desc:"Determines if a vector of `u16` contains valid UTF-16"},{ty:"fn",name:"utf16_items",path:"std::str",desc:"Create an iterator over the UTF-16 encoded codepoints in `v`,\nreturning invalid surrogates as `LoneSurrogate`s."},{ty:"fn",name:"truncate_utf16_at_nul",path:"std::str",desc:"Return a slice of `v` ending at (and not including) the first NUL\n(0)."},{ty:"fn",name:"from_utf16",path:"std::str",desc:"Decode a UTF-16 encoded vector `v` into a string, returning `None`\nif `v` contains any invalid data."},{ty:"fn",name:"from_utf16_lossy",path:"std::str",desc:"Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD)."},{ty:"fn",name:"with_capacity",path:"std::str",desc:"Allocates a new string with the specified capacity. The string returned is\nthe empty string, but has capacity for much more."},{ty:"fn",name:"utf8_char_width",path:"std::str",desc:"Given a first byte, determine how many bytes are in this UTF-8 character"},{ty:"fn",name:"from_utf8_lossy",path:"std::str",desc:"Converts a vector of bytes to a new utf-8 string.\nAny invalid utf-8 sequences are replaced with U+FFFD REPLACEMENT CHARACTER."},{ty:"mod",name:"raw",path:"std::str",desc:"Unsafe operations"},{ty:"fn",name:"from_buf_len",path:"std::str::raw",desc:"Create a Rust string from a *u8 buffer of the given length"},{ty:"fn",name:"from_c_str",path:"std::str::raw",desc:"Create a Rust string from a null-terminated C string"},{ty:"fn",name:"from_utf8",path:"std::str::raw",desc:"Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8."},{ty:"fn",name:"from_utf8_owned",path:"std::str::raw",desc:"Converts an owned vector of bytes to a new owned string. This assumes\nthat the utf-8-ness of the vector has already been validated"},{ty:"fn",name:"from_byte",path:"std::str::raw",desc:"Converts a byte to a string."},{ty:"fn",name:"c_str_to_static_slice",path:"std::str::raw",desc:"Form a slice from a C string. Unsafe because the caller must ensure the\nC string has the static lifetime, or else the return value may be\ninvalidated later."},{ty:"fn",name:"slice_bytes",path:"std::str::raw",desc:"Takes a bytewise (not UTF-8) slice from a string."},{ty:"fn",name:"slice_unchecked",path:"std::str::raw",desc:"Takes a bytewise (not UTF-8) slice from a string."},{ty:"fn",name:"push_byte",path:"std::str::raw",desc:"Appends a byte to a string.\nThe caller must preserve the valid UTF-8 property."},{ty:"fn",name:"push_bytes",path:"std::str::raw",desc:"Appends a vector of bytes to a string.\nThe caller must preserve the valid UTF-8 property."},{ty:"fn",name:"pop_byte",path:"std::str::raw",desc:"Removes the last byte from a string and returns it.\nReturns None when an empty string is passed.\nThe caller must preserve the valid UTF-8 property."},{ty:"fn",name:"shift_byte",path:"std::str::raw",desc:"Removes the first byte from a string and returns it.\nReturns None when an empty string is passed.\nThe caller must preserve the valid UTF-8 property."},{ty:"fn",name:"as_owned_vec",path:"std::str::raw",desc:"Access the str in its vector representation.\nThe caller must preserve the valid UTF-8 property when modifying."},{ty:"mod",name:"traits",path:"std::str",desc:""},{ty:"typedef",name:"RevChars",path:"std::str",desc:"External iterator for a string's characters in reverse order.\nUse with the `std::iter` module."},{ty:"typedef",name:"RevCharOffsets",path:"std::str",desc:"External iterator for a string's characters and their byte offsets in reverse order.\nUse with the `std::iter` module."},{ty:"typedef",name:"Bytes",path:"std::str",desc:"External iterator for a string's bytes.\nUse with the `std::iter` module."},{ty:"typedef",name:"RevBytes",path:"std::str",desc:"External iterator for a string's bytes in reverse order.\nUse with the `std::iter` module."},{ty:"typedef",name:"RevCharSplits",path:"std::str",desc:"An iterator over the substrings of a string, separated by `sep`,\nstarting from the back of the string."},{ty:"typedef",name:"Words",path:"std::str",desc:"An iterator over the words of a string, separated by a sequence of whitespace"},{ty:"typedef",name:"AnyLines",path:"std::str",desc:"An iterator over the lines of a string, separated by either `\\n` or (`\\r\\n`)."},{ty:"typedef",name:"SendStr",path:"std::str",desc:"SendStr is a specialization of `MaybeOwned` to be sendable"},{ty:"trait",name:"StrVector",path:"std::str",desc:"Methods for vectors of strings"},{ty:"tymethod",name:"concat",path:"std::str",desc:"Concatenate a vector of strings.",parent:'59849'},{ty:"tymethod",name:"connect",path:"std::str",desc:"Concatenate a vector of strings, placing a given separator between each.",parent:'59849'},{ty:"trait",name:"CharEq",path:"std::str",desc:"Something that can be used to compare against a character"},{ty:"tymethod",name:"matches",path:"std::str",desc:"Determine if the splitter should split at the given character",parent:'60085'},{ty:"tymethod",name:"only_ascii",path:"std::str",desc:"Indicate if this is only concerned about ASCII characters,\nwhich can allow for a faster implementation.",parent:'60085'},{ty:"trait",name:"IntoMaybeOwned",path:"std::str",desc:"Trait for moving into a `MaybeOwned`"},{ty:"tymethod",name:"into_maybe_owned",path:"std::str",desc:"Moves self into a `MaybeOwned`",parent:'64210'},{ty:"trait",name:"Str",path:"std::str",desc:"Any string that can be represented as a slice"},{ty:"tymethod",name:"as_slice",path:"std::str",desc:"Work with `self` as a slice.",parent:'65704'},{ty:"tymethod",name:"into_owned",path:"std::str",desc:"Convert `self` into a ~str, not making a copy if possible",parent:'65704'},{ty:"trait",name:"StrSlice",path:"std::str",desc:"Methods for string slices"},{ty:"tymethod",name:"contains",path:"std::str",desc:"Returns true if one string contains another",parent:'65836'},{ty:"tymethod",name:"contains_char",path:"std::str",desc:"Returns true if a string contains a char.",parent:'65836'},{ty:"tymethod",name:"chars",path:"std::str",desc:"An iterator over the characters of `self`. Note, this iterates\nover unicode code-points, not unicode graphemes.",parent:'65836'},{ty:"tymethod",name:"chars_rev",path:"std::str",desc:"An iterator over the characters of `self`, in reverse order.",parent:'65836'},{ty:"tymethod",name:"bytes",path:"std::str",desc:"An iterator over the bytes of `self`",parent:'65836'},{ty:"tymethod",name:"bytes_rev",path:"std::str",desc:"An iterator over the bytes of `self`, in reverse order",parent:'65836'},{ty:"tymethod",name:"char_indices",path:"std::str",desc:"An iterator over the characters of `self` and their byte offsets.",parent:'65836'},{ty:"tymethod",name:"char_indices_rev",path:"std::str",desc:"An iterator over the characters of `self` and their byte offsets,\nin reverse order.",parent:'65836'},{ty:"tymethod",name:"split",path:"std::str",desc:"An iterator over substrings of `self`, separated by characters\nmatched by `sep`.",parent:'65836'},{ty:"tymethod",name:"splitn",path:"std::str",desc:"An iterator over substrings of `self`, separated by characters\nmatched by `sep`, restricted to splitting at most `count`\ntimes.",parent:'65836'},{ty:"tymethod",name:"split_terminator",path:"std::str",desc:"An iterator over substrings of `self`, separated by characters\nmatched by `sep`.",parent:'65836'},{ty:"tymethod",name:"rsplit",path:"std::str",desc:"An iterator over substrings of `self`, separated by characters\nmatched by `sep`, in reverse order.",parent:'65836'},{ty:"tymethod",name:"rsplitn",path:"std::str",desc:"An iterator over substrings of `self`, separated by characters\nmatched by `sep`, starting from the end of the string.\nRestricted to splitting at most `count` times.",parent:'65836'},{ty:"tymethod",name:"match_indices",path:"std::str",desc:"An iterator over the start and end indices of the disjoint\nmatches of `sep` within `self`.",parent:'65836'},{ty:"tymethod",name:"split_str",path:"std::str",desc:"An iterator over the substrings of `self` separated by `sep`.",parent:'65836'},{ty:"tymethod",name:"lines",path:"std::str",desc:"An iterator over the lines of a string (subsequences separated\nby `\\n`). This does not include the empty string after a\ntrailing `\\n`.",parent:'65836'},{ty:"tymethod",name:"lines_any",path:"std::str",desc:"An iterator over the lines of a string, separated by either\n`\\n` or `\\r\\n`. As with `.lines()`, this does not include an\nempty trailing line.",parent:'65836'},{ty:"tymethod",name:"words",path:"std::str",desc:"An iterator over the words of a string (subsequences separated\nby any sequence of whitespace). Sequences of whitespace are\ncollapsed, so empty \"words\" are not included.",parent:'65836'},{ty:"tymethod",name:"nfd_chars",path:"std::str",desc:"An Iterator over the string in Unicode Normalization Form D\n(canonical decomposition).",parent:'65836'},{ty:"tymethod",name:"nfkd_chars",path:"std::str",desc:"An Iterator over the string in Unicode Normalization Form KD\n(compatibility decomposition).",parent:'65836'},{ty:"tymethod",name:"is_whitespace",path:"std::str",desc:"Returns true if the string contains only whitespace.",parent:'65836'},{ty:"tymethod",name:"is_alphanumeric",path:"std::str",desc:"Returns true if the string contains only alphanumeric code\npoints.",parent:'65836'},{ty:"tymethod",name:"char_len",path:"std::str",desc:"Returns the number of Unicode code points (`char`) that a\nstring holds.",parent:'65836'},{ty:"tymethod",name:"slice",path:"std::str",desc:"Returns a slice of the given string from the byte range\n[`begin`..`end`).",parent:'65836'},{ty:"tymethod",name:"slice_from",path:"std::str",desc:"Returns a slice of the string from `begin` to its end.",parent:'65836'},{ty:"tymethod",name:"slice_to",path:"std::str",desc:"Returns a slice of the string from the beginning to byte\n`end`.",parent:'65836'},{ty:"tymethod",name:"slice_chars",path:"std::str",desc:"Returns a slice of the string from the character range\n[`begin`..`end`).",parent:'65836'},{ty:"tymethod",name:"starts_with",path:"std::str",desc:"Returns true if `needle` is a prefix of the string.",parent:'65836'},{ty:"tymethod",name:"ends_with",path:"std::str",desc:"Returns true if `needle` is a suffix of the string.",parent:'65836'},{ty:"tymethod",name:"escape_default",path:"std::str",desc:"Escape each char in `s` with `char::escape_default`.",parent:'65836'},{ty:"tymethod",name:"escape_unicode",path:"std::str",desc:"Escape each char in `s` with `char::escape_unicode`.",parent:'65836'},{ty:"tymethod",name:"trim",path:"std::str",desc:"Returns a string with leading and trailing whitespace removed.",parent:'65836'},{ty:"tymethod",name:"trim_left",path:"std::str",desc:"Returns a string with leading whitespace removed.",parent:'65836'},{ty:"tymethod",name:"trim_right",path:"std::str",desc:"Returns a string with trailing whitespace removed.",parent:'65836'},{ty:"tymethod",name:"trim_chars",path:"std::str",desc:"Returns a string with characters that match `to_trim` removed.",parent:'65836'},{ty:"tymethod",name:"trim_left_chars",path:"std::str",desc:"Returns a string with leading `chars_to_trim` removed.",parent:'65836'},{ty:"tymethod",name:"trim_right_chars",path:"std::str",desc:"Returns a string with trailing `chars_to_trim` removed.",parent:'65836'},{ty:"tymethod",name:"replace",path:"std::str",desc:"Replace all occurrences of one string with another.",parent:'65836'},{ty:"tymethod",name:"to_owned",path:"std::str",desc:"Copy a slice into a new owned str.",parent:'65836'},{ty:"tymethod",name:"to_utf16",path:"std::str",desc:"Converts to a vector of `u16` encoded as UTF-16.",parent:'65836'},{ty:"tymethod",name:"is_char_boundary",path:"std::str",desc:"Check that `index`-th byte lies at the start and/or end of a\nUTF-8 code point sequence.",parent:'65836'},{ty:"tymethod",name:"char_range_at",path:"std::str",desc:"Pluck a character out of a string and return the index of the next\ncharacter.",parent:'65836'},{ty:"tymethod",name:"char_range_at_reverse",path:"std::str",desc:"Given a byte position and a str, return the previous char and its position.",parent:'65836'},{ty:"tymethod",name:"char_at",path:"std::str",desc:"Plucks the character starting at the `i`th byte of a string",parent:'65836'},{ty:"tymethod",name:"char_at_reverse",path:"std::str",desc:"Plucks the character ending at the `i`th byte of a string",parent:'65836'},{ty:"tymethod",name:"as_bytes",path:"std::str",desc:"Work with the byte buffer of a string as a byte slice.",parent:'65836'},{ty:"tymethod",name:"find",path:"std::str",desc:"Returns the byte index of the first character of `self` that\nmatches `search`.",parent:'65836'},{ty:"tymethod",name:"rfind",path:"std::str",desc:"Returns the byte index of the last character of `self` that\nmatches `search`.",parent:'65836'},{ty:"tymethod",name:"find_str",path:"std::str",desc:"Returns the byte index of the first matching substring",parent:'65836'},{ty:"tymethod",name:"repeat",path:"std::str",desc:"Given a string, make a new string with repeated copies of it.",parent:'65836'},{ty:"tymethod",name:"slice_shift_char",path:"std::str",desc:"Retrieves the first character from a string slice and returns\nit. This does not allocate a new string; instead, it returns a\nslice that point one character beyond the character that was\nshifted. If the string does not contain any characters,\na tuple of None and an empty string is returned instead.",parent:'65836'},{ty:"tymethod",name:"lev_distance",path:"std::str",desc:"Levenshtein Distance between two strings.",parent:'65836'},{ty:"tymethod",name:"subslice_offset",path:"std::str",desc:"Returns the byte offset of an inner slice relative to an enclosing outer slice.",parent:'65836'},{ty:"tymethod",name:"as_ptr",path:"std::str",desc:"Return an unsafe pointer to the strings buffer.",parent:'65836'},{ty:"trait",name:"OwnedStr",path:"std::str",desc:"Methods for owned strings"},{ty:"tymethod",name:"push_str_no_overallocate",path:"std::str",desc:"Appends a string slice to the back of a string, without overallocating.",parent:'69294'},{ty:"tymethod",name:"push_str",path:"std::str",desc:"Appends a string slice to the back of a string",parent:'69294'},{ty:"tymethod",name:"push_char",path:"std::str",desc:"Appends a character to the back of a string",parent:'69294'},{ty:"tymethod",name:"pop_char",path:"std::str",desc:"Remove the final character from a string and return it. Return None\nwhen the string is empty.",parent:'69294'},{ty:"tymethod",name:"shift_char",path:"std::str",desc:"Remove the first character from a string and return it. Return None\nwhen the string is empty.",parent:'69294'},{ty:"tymethod",name:"unshift_char",path:"std::str",desc:"Prepend a char to a string",parent:'69294'},{ty:"tymethod",name:"insert",path:"std::str",desc:"Insert a new sub-string at the given position in a string, in O(n + m) time\n(with n and m the lengths of the string and the substring.)\nThis fails if `position` is not at a character boundary.",parent:'69294'},{ty:"tymethod",name:"insert_char",path:"std::str",desc:"Insert a char at the given position in a string, in O(n + m) time\n(with n and m the lengths of the string and the substring.)\nThis fails if `position` is not at a character boundary.",parent:'69294'},{ty:"tymethod",name:"append",path:"std::str",desc:"Concatenate two strings together.",parent:'69294'},{ty:"tymethod",name:"reserve_exact",path:"std::str",desc:"Reserves capacity for exactly `n` bytes in the given string.",parent:'69294'},{ty:"tymethod",name:"reserve",path:"std::str",desc:"Reserves capacity for at least `n` bytes in the given string.",parent:'69294'},{ty:"tymethod",name:"capacity",path:"std::str",desc:"Returns the number of single-byte characters the string can hold without\nreallocating",parent:'69294'},{ty:"tymethod",name:"truncate",path:"std::str",desc:"Shorten a string to the specified length (which must be <= the current length)",parent:'69294'},{ty:"tymethod",name:"into_bytes",path:"std::str",desc:"Consumes the string, returning the underlying byte buffer.",parent:'69294'},{ty:"tymethod",name:"set_len",path:"std::str",desc:"Sets the length of a string",parent:'69294'},{ty:"method",name:"concat",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"connect",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"clone",path:"std::str",desc:"",parent:'60255'},{ty:"method",name:"next",path:"std::str",desc:"",parent:'60255'},{ty:"method",name:"size_hint",path:"std::str",desc:"",parent:'60255'},{ty:"method",name:"next_back",path:"std::str",desc:"",parent:'60255'},{ty:"method",name:"clone",path:"std::str",desc:"",parent:'60421'},{ty:"method",name:"next",path:"std::str",desc:"",parent:'60421'},{ty:"method",name:"size_hint",path:"std::str",desc:"",parent:'60421'},{ty:"method",name:"next_back",path:"std::str",desc:"",parent:'60421'},{ty:"method",name:"clone",path:"std::str",desc:"",parent:'60628'},{ty:"method",name:"clone",path:"std::str",desc:"",parent:'60708'},{ty:"method",name:"next",path:"std::str",desc:"",parent:'60628'},{ty:"method",name:"next_back",path:"std::str",desc:"",parent:'60628'},{ty:"method",name:"next",path:"std::str",desc:"",parent:'60708'},{ty:"method",name:"clone",path:"std::str",desc:"",parent:'61272'},{ty:"method",name:"clone",path:"std::str",desc:"",parent:'61321'},{ty:"method",name:"next",path:"std::str",desc:"",parent:'61272'},{ty:"method",name:"next",path:"std::str",desc:"",parent:'61321'},{ty:"method",name:"clone",path:"std::str",desc:"",parent:'61701'},{ty:"method",name:"next",path:"std::str",desc:"",parent:'61701'},{ty:"method",name:"size_hint",path:"std::str",desc:"",parent:'61701'},{ty:"method",name:"clone",path:"std::str",desc:"",parent:'62546'},{ty:"method",name:"fmt",path:"std::str",desc:"",parent:'62578'},{ty:"method",name:"clone",path:"std::str",desc:"",parent:'62578'},{ty:"method",name:"equals",path:"std::str",desc:"",parent:'62578'},{ty:"method",name:"eq",path:"std::str",desc:"",parent:'62578'},{ty:"method",name:"ne",path:"std::str",desc:"",parent:'62578'},{ty:"method",name:"to_char_lossy",path:"std::str",desc:"Convert `self` to a `char`, taking `LoneSurrogate`s to the\nreplacement character (U+FFFD).",parent:'62578'},{ty:"method",name:"next",path:"std::str",desc:"",parent:'62546'},{ty:"method",name:"size_hint",path:"std::str",desc:"",parent:'62546'},{ty:"method",name:"is_owned",path:"std::str",desc:"Returns `true` if this `MaybeOwned` wraps an owned string",parent:'64156'},{ty:"method",name:"is_slice",path:"std::str",desc:"Returns `true` if this `MaybeOwned` wraps a borrowed string",parent:'64156'},{ty:"method",name:"into_maybe_owned",path:"std::str",desc:"",parent:'64156'},{ty:"method",name:"eq",path:"std::str",desc:"",parent:'64156'},{ty:"method",name:"equals",path:"std::str",desc:"",parent:'64156'},{ty:"method",name:"lt",path:"std::str",desc:"",parent:'64156'},{ty:"method",name:"cmp",path:"std::str",desc:"",parent:'64156'},{ty:"method",name:"equiv",path:"std::str",desc:"",parent:'64156'},{ty:"method",name:"as_slice",path:"std::str",desc:"",parent:'64156'},{ty:"method",name:"into_owned",path:"std::str",desc:"",parent:'64156'},{ty:"method",name:"len",path:"std::str",desc:"",parent:'64156'},{ty:"method",name:"clone",path:"std::str",desc:"",parent:'64156'},{ty:"method",name:"default",path:"std::str",desc:"",parent:'64156'},{ty:"method",name:"hash",path:"std::str",desc:"",parent:'64156'},{ty:"method",name:"fmt",path:"std::str",desc:"",parent:'64156'},{ty:"mod",name:"ascii",path:"std",desc:"Operations on ASCII strings and characters"},{ty:"struct",name:"Ascii",path:"std::ascii",desc:"Datatype to hold one ascii character. It wraps a `u8`, with the highest bit always zero."},{ty:"trait",name:"AsciiCast",path:"std::ascii",desc:"Trait for converting into an ascii type."},{ty:"method",name:"to_ascii",path:"std::ascii",desc:"Convert to an ascii type, fail on non-ASCII input.",parent:'70847'},{ty:"method",name:"to_ascii_opt",path:"std::ascii",desc:"Convert to an ascii type, return None on non-ASCII input.",parent:'70847'},{ty:"tymethod",name:"to_ascii_nocheck",path:"std::ascii",desc:"Convert to an ascii type, not doing any range asserts",parent:'70847'},{ty:"tymethod",name:"is_ascii",path:"std::ascii",desc:"Check if convertible to ascii",parent:'70847'},{ty:"trait",name:"OwnedAsciiCast",path:"std::ascii",desc:"Trait for copyless casting to an ascii vector."},{ty:"tymethod",name:"is_ascii",path:"std::ascii",desc:"Check if convertible to ascii",parent:'71148'},{ty:"method",name:"into_ascii",path:"std::ascii",desc:"Take ownership and cast to an ascii vector. Fail on non-ASCII input.",parent:'71148'},{ty:"method",name:"into_ascii_opt",path:"std::ascii",desc:"Take ownership and cast to an ascii vector. Return None on non-ASCII input.",parent:'71148'},{ty:"tymethod",name:"into_ascii_nocheck",path:"std::ascii",desc:"Take ownership and cast to an ascii vector.\nDoes not perform validation checks.",parent:'71148'},{ty:"trait",name:"AsciiStr",path:"std::ascii",desc:"Trait for converting an ascii type to a string. Needed to convert\n`&[Ascii]` to `&str`."},{ty:"tymethod",name:"as_str_ascii",path:"std::ascii",desc:"Convert to a string.",parent:'71331'},{ty:"tymethod",name:"to_lower",path:"std::ascii",desc:"Convert to vector representing a lower cased ascii string.",parent:'71331'},{ty:"tymethod",name:"to_upper",path:"std::ascii",desc:"Convert to vector representing a upper cased ascii string.",parent:'71331'},{ty:"tymethod",name:"eq_ignore_case",path:"std::ascii",desc:"Compares two Ascii strings ignoring case.",parent:'71331'},{ty:"trait",name:"IntoBytes",path:"std::ascii",desc:"Trait to convert to an owned byte array by consuming self"},{ty:"tymethod",name:"into_bytes",path:"std::ascii",desc:"Converts to an owned byte array by consuming self",parent:'71513'},{ty:"trait",name:"OwnedStrAsciiExt",path:"std::ascii",desc:"Extension methods for ASCII-subset only operations on owned strings"},{ty:"tymethod",name:"into_ascii_upper",path:"std::ascii",desc:"Convert the string to ASCII upper case:\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.",parent:'71542'},{ty:"tymethod",name:"into_ascii_lower",path:"std::ascii",desc:"Convert the string to ASCII lower case:\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.",parent:'71542'},{ty:"trait",name:"StrAsciiExt",path:"std::ascii",desc:"Extension methods for ASCII-subset only operations on string slices"},{ty:"tymethod",name:"to_ascii_upper",path:"std::ascii",desc:"Makes a copy of the string in ASCII upper case:\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.",parent:'71557'},{ty:"tymethod",name:"to_ascii_lower",path:"std::ascii",desc:"Makes a copy of the string in ASCII lower case:\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.",parent:'71557'},{ty:"tymethod",name:"eq_ignore_ascii_case",path:"std::ascii",desc:"Check that two strings are an ASCII case-insensitive match.\nSame as `to_ascii_lower(a) == to_ascii_lower(b)`,\nbut without allocating and copying temporary strings.",parent:'71557'},{ty:"method",name:"hash",path:"std::ascii",desc:"",parent:'70188'},{ty:"method",name:"equals",path:"std::ascii",desc:"",parent:'70188'},{ty:"method",name:"cmp",path:"std::ascii",desc:"",parent:'70188'},{ty:"method",name:"lt",path:"std::ascii",desc:"",parent:'70188'},{ty:"method",name:"le",path:"std::ascii",desc:"",parent:'70188'},{ty:"method",name:"gt",path:"std::ascii",desc:"",parent:'70188'},{ty:"method",name:"ge",path:"std::ascii",desc:"",parent:'70188'},{ty:"method",name:"eq",path:"std::ascii",desc:"",parent:'70188'},{ty:"method",name:"ne",path:"std::ascii",desc:"",parent:'70188'},{ty:"method",name:"clone",path:"std::ascii",desc:"",parent:'70188'},{ty:"method",name:"to_byte",path:"std::ascii",desc:"Converts an ascii character into a `u8`.",parent:'70188'},{ty:"method",name:"to_char",path:"std::ascii",desc:"Converts an ascii character into a `char`.",parent:'70188'},{ty:"method",name:"to_lower",path:"std::ascii",desc:"Convert to lowercase.",parent:'70188'},{ty:"method",name:"to_upper",path:"std::ascii",desc:"Convert to uppercase.",parent:'70188'},{ty:"method",name:"eq_ignore_case",path:"std::ascii",desc:"Compares two ascii characters of equality, ignoring case.",parent:'70188'},{ty:"method",name:"is_alpha",path:"std::ascii",desc:"Check if the character is a letter (a-z, A-Z)",parent:'70188'},{ty:"method",name:"is_digit",path:"std::ascii",desc:"Check if the character is a number (0-9)",parent:'70188'},{ty:"method",name:"is_alnum",path:"std::ascii",desc:"Check if the character is a letter or number",parent:'70188'},{ty:"method",name:"is_blank",path:"std::ascii",desc:"Check if the character is a space or horizontal tab",parent:'70188'},{ty:"method",name:"is_control",path:"std::ascii",desc:"Check if the character is a control character",parent:'70188'},{ty:"method",name:"is_graph",path:"std::ascii",desc:"Checks if the character is printable (except space)",parent:'70188'},{ty:"method",name:"is_print",path:"std::ascii",desc:"Checks if the character is printable (including space)",parent:'70188'},{ty:"method",name:"is_lower",path:"std::ascii",desc:"Checks if the character is lowercase",parent:'70188'},{ty:"method",name:"is_upper",path:"std::ascii",desc:"Checks if the character is uppercase",parent:'70188'},{ty:"method",name:"is_punctuation",path:"std::ascii",desc:"Checks if the character is punctuation",parent:'70188'},{ty:"method",name:"is_hex",path:"std::ascii",desc:"Checks if the character is a valid hex digit",parent:'70188'},{ty:"method",name:"fmt",path:"std::ascii",desc:"",parent:'70188'},{ty:"method",name:"into_str",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"mod",name:"ptr",path:"std",desc:"Unsafe pointer utility functions"},{ty:"fn",name:"buf_len",path:"std::ptr",desc:"Return the offset of the first null pointer in `buf`."},{ty:"fn",name:"position",path:"std::ptr",desc:"Return the first offset `i` such that `f(buf[i]) == true`."},{ty:"fn",name:"null",path:"std::ptr",desc:"Create an unsafe null pointer"},{ty:"fn",name:"mut_null",path:"std::ptr",desc:"Create an unsafe mutable null pointer"},{ty:"fn",name:"copy_memory",path:"std::ptr",desc:"Copies data from one location to another."},{ty:"fn",name:"copy_nonoverlapping_memory",path:"std::ptr",desc:"Copies data from one location to another."},{ty:"fn",name:"set_memory",path:"std::ptr",desc:"Invokes memset on the specified pointer, setting `count * size_of::<T>()`\nbytes of memory starting at `dst` to `c`."},{ty:"fn",name:"zero_memory",path:"std::ptr",desc:"Zeroes out `count * size_of::<T>` bytes of memory at `dst`"},{ty:"fn",name:"swap",path:"std::ptr",desc:"Swap the values at two mutable locations of the same type, without\ndeinitialising either. They may overlap."},{ty:"fn",name:"replace",path:"std::ptr",desc:"Replace the value at a mutable location with a new one, returning the old\nvalue, without deinitialising either."},{ty:"fn",name:"read",path:"std::ptr",desc:"Reads the value from `*src` and returns it."},{ty:"fn",name:"read_and_zero",path:"std::ptr",desc:"Reads the value from `*src` and nulls it out.\nThis currently prevents destructors from executing."},{ty:"fn",name:"array_each_with_len",path:"std::ptr",desc:"Given a **T (pointer to an array of pointers),\niterate through each *T, up to the provided `len`,\npassing to the provided callback function"},{ty:"fn",name:"array_each",path:"std::ptr",desc:"Given a null-pointer-terminated **T (pointer to\nan array of pointers), iterate through each *T,\npassing to the provided callback function"},{ty:"trait",name:"RawPtr",path:"std::ptr",desc:"Extension methods for raw pointers."},{ty:"tymethod",name:"null",path:"std::ptr",desc:"Returns the null pointer.",parent:'72783'},{ty:"tymethod",name:"is_null",path:"std::ptr",desc:"Returns true if the pointer is equal to the null pointer.",parent:'72783'},{ty:"method",name:"is_not_null",path:"std::ptr",desc:"Returns true if the pointer is not equal to the null pointer.",parent:'72783'},{ty:"tymethod",name:"to_uint",path:"std::ptr",desc:"Returns the value of this pointer (ie, the address it points to)",parent:'72783'},{ty:"tymethod",name:"to_option",path:"std::ptr",desc:"Returns `None` if the pointer is null, or else returns the value wrapped\nin `Some`.",parent:'72783'},{ty:"tymethod",name:"offset",path:"std::ptr",desc:"Calculates the offset from a pointer. The offset *must* be in-bounds of\nthe object, or one-byte-past-the-end.  `count` is in units of T; e.g. a\n`count` of 3 represents a pointer offset of `3 * sizeof::<T>()` bytes.",parent:'72783'},{ty:"mod",name:"owned",path:"std",desc:"Operations on unique pointer types"},{ty:"static",name:"HEAP",path:"std::owned",desc:"A value that represents the global exchange heap. This is the default\nplace that the `box` keyword allocates into when no place is supplied."},{ty:"mod",name:"managed",path:"std",desc:"Operations on managed box types"},{ty:"fn",name:"refcount",path:"std::managed",desc:"Returns the refcount of a shared box (as just before calling this)"},{ty:"fn",name:"ptr_eq",path:"std::managed",desc:"Determine if two shared boxes point to the same object"},{ty:"mod",name:"rc",path:"std",desc:"Task-local reference-counted boxes (`Rc` type)"},{ty:"struct",name:"Rc",path:"std::rc",desc:"Immutable reference counted pointer type"},{ty:"struct",name:"Weak",path:"std::rc",desc:"Weak reference to a reference-counted box"},{ty:"method",name:"new",path:"std::rc",desc:"Construct a new reference-counted box",parent:'74556'},{ty:"method",name:"downgrade",path:"std::rc",desc:"Downgrade the reference-counted pointer to a weak reference",parent:'74556'},{ty:"method",name:"deref",path:"std::rc",desc:"Borrow the value contained in the reference-counted box",parent:'74556'},{ty:"method",name:"drop",path:"std::rc",desc:"",parent:'74556'},{ty:"method",name:"clone",path:"std::rc",desc:"",parent:'74556'},{ty:"method",name:"eq",path:"std::rc",desc:"",parent:'74556'},{ty:"method",name:"ne",path:"std::rc",desc:"",parent:'74556'},{ty:"method",name:"lt",path:"std::rc",desc:"",parent:'74556'},{ty:"method",name:"le",path:"std::rc",desc:"",parent:'74556'},{ty:"method",name:"gt",path:"std::rc",desc:"",parent:'74556'},{ty:"method",name:"ge",path:"std::rc",desc:"",parent:'74556'},{ty:"method",name:"upgrade",path:"std::rc",desc:"Upgrade a weak reference to a strong reference",parent:'74897'},{ty:"method",name:"drop",path:"std::rc",desc:"",parent:'74897'},{ty:"method",name:"clone",path:"std::rc",desc:"",parent:'74897'},{ty:"mod",name:"gc",path:"std",desc:"Task-local garbage-collected boxes"},{ty:"struct",name:"Gc",path:"std::gc",desc:"Immutable garbage-collected pointer type"},{ty:"static",name:"GC",path:"std::gc",desc:"An value that represents the task-local managed heap."},{ty:"method",name:"new",path:"std::gc",desc:"Construct a new garbage-collected box",parent:'75039'},{ty:"method",name:"borrow",path:"std::gc",desc:"Borrow the value contained in the garbage-collected box",parent:'75039'},{ty:"method",name:"ptr_eq",path:"std::gc",desc:"Determine if two garbage-collected boxes point to the same object",parent:'75039'},{ty:"method",name:"clone",path:"std::gc",desc:"Clone the pointer only",parent:'75039'},{ty:"mod",name:"kinds",path:"std",desc:"Primitive traits representing basic 'kinds' of types"},{ty:"mod",name:"marker",path:"std::kinds",desc:"Marker types are special types that are used with unsafe code to\ninform the compiler of special constraints. Marker types should\nonly be needed when you are creating an abstraction that is\nimplemented using unsafe code. In that case, you may want to embed\nsome of the marker types below into your type."},{ty:"struct",name:"CovariantType",path:"std::kinds::marker",desc:"A marker type whose type parameter `T` is considered to be\ncovariant with respect to the type itself. This is (typically)\nused to indicate that an instance of the type `T` is being stored\ninto memory and read from, even though that may not be apparent."},{ty:"struct",name:"ContravariantType",path:"std::kinds::marker",desc:"A marker type whose type parameter `T` is considered to be\ncontravariant with respect to the type itself. This is (typically)\nused to indicate that an instance of the type `T` will be consumed\n(but not read from), even though that may not be apparent."},{ty:"struct",name:"InvariantType",path:"std::kinds::marker",desc:"A marker type whose type parameter `T` is considered to be\ninvariant with respect to the type itself. This is (typically)\nused to indicate that instances of the type `T` may be read or\nwritten, even though that may not be apparent."},{ty:"struct",name:"CovariantLifetime",path:"std::kinds::marker",desc:"As `CovariantType`, but for lifetime parameters. Using\n`CovariantLifetime<'a>` indicates that it is ok to substitute\na *longer* lifetime for `'a` than the one you originally\nstarted with (e.g., you could convert any lifetime `'foo` to\n`'static`). You almost certainly want `ContravariantLifetime`\ninstead, or possibly `InvariantLifetime`. The only case where\nit would be appropriate is that you have a (type-casted, and\nhence hidden from the type system) function pointer with a\nsignature like `fn(&'a T)` (and no other uses of `'a`). In\nthis case, it is ok to substitute a larger lifetime for `'a`\n(e.g., `fn(&'static T)`), because the function is only\nbecoming more selective in terms of what it accepts as\nargument."},{ty:"struct",name:"ContravariantLifetime",path:"std::kinds::marker",desc:"As `ContravariantType`, but for lifetime parameters. Using\n`ContravariantLifetime<'a>` indicates that it is ok to\nsubstitute a *shorter* lifetime for `'a` than the one you\noriginally started with (e.g., you could convert `'static` to\nany lifetime `'foo`). This is appropriate for cases where you\nhave an unsafe pointer that is actually a pointer into some\nmemory with lifetime `'a`, and thus you want to limit the\nlifetime of your data structure to `'a`. An example of where\nthis is used is the iterator for vectors."},{ty:"struct",name:"InvariantLifetime",path:"std::kinds::marker",desc:"As `InvariantType`, but for lifetime parameters. Using\n`InvariantLifetime<'a>` indicates that it is not ok to\nsubstitute any other lifetime for `'a` besides its original\nvalue. This is appropriate for cases where you have an unsafe\npointer that is actually a pointer into memory with lifetime `'a`,\nand this pointer is itself stored in an inherently mutable\nlocation (such as a `Cell`)."},{ty:"struct",name:"NoFreeze",path:"std::kinds::marker",desc:"A type which is considered \"not freezable\", meaning that\nits contents could change even if stored in an immutable\ncontext or it is the referent of an `&T` pointer. This is\ntypically embedded in other types, such as `Cell`."},{ty:"struct",name:"NoSend",path:"std::kinds::marker",desc:"A type which is considered \"not sendable\", meaning that it cannot\nbe safely sent between tasks, even if it is owned. This is\ntypically embedded in other types, such as `Gc`, to ensure that\ntheir instances remain thread-local."},{ty:"struct",name:"NoPod",path:"std::kinds::marker",desc:"A type which is considered \"not POD\", meaning that it is not\nimplicitly copyable. This is typically embedded in other types to\nensure that they are never copied, even if they lack a destructor."},{ty:"struct",name:"Managed",path:"std::kinds::marker",desc:"A type which is considered managed by the GC. This is typically\nembedded in other types."},{ty:"method",name:"clone",path:"std::kinds::marker",desc:"",parent:'75132'},{ty:"method",name:"eq",path:"std::kinds::marker",desc:"",parent:'75132'},{ty:"method",name:"ne",path:"std::kinds::marker",desc:"",parent:'75132'},{ty:"method",name:"clone",path:"std::kinds::marker",desc:"",parent:'75211'},{ty:"method",name:"eq",path:"std::kinds::marker",desc:"",parent:'75211'},{ty:"method",name:"ne",path:"std::kinds::marker",desc:"",parent:'75211'},{ty:"method",name:"clone",path:"std::kinds::marker",desc:"",parent:'75290'},{ty:"method",name:"eq",path:"std::kinds::marker",desc:"",parent:'75290'},{ty:"method",name:"ne",path:"std::kinds::marker",desc:"",parent:'75290'},{ty:"method",name:"clone",path:"std::kinds::marker",desc:"",parent:'75369'},{ty:"method",name:"eq",path:"std::kinds::marker",desc:"",parent:'75369'},{ty:"method",name:"ne",path:"std::kinds::marker",desc:"",parent:'75369'},{ty:"method",name:"clone",path:"std::kinds::marker",desc:"",parent:'75441'},{ty:"method",name:"eq",path:"std::kinds::marker",desc:"",parent:'75441'},{ty:"method",name:"ne",path:"std::kinds::marker",desc:"",parent:'75441'},{ty:"method",name:"clone",path:"std::kinds::marker",desc:"",parent:'75513'},{ty:"method",name:"eq",path:"std::kinds::marker",desc:"",parent:'75513'},{ty:"method",name:"ne",path:"std::kinds::marker",desc:"",parent:'75513'},{ty:"method",name:"clone",path:"std::kinds::marker",desc:"",parent:'75585'},{ty:"method",name:"eq",path:"std::kinds::marker",desc:"",parent:'75585'},{ty:"method",name:"ne",path:"std::kinds::marker",desc:"",parent:'75585'},{ty:"method",name:"clone",path:"std::kinds::marker",desc:"",parent:'75649'},{ty:"method",name:"eq",path:"std::kinds::marker",desc:"",parent:'75649'},{ty:"method",name:"ne",path:"std::kinds::marker",desc:"",parent:'75649'},{ty:"method",name:"clone",path:"std::kinds::marker",desc:"",parent:'75713'},{ty:"method",name:"eq",path:"std::kinds::marker",desc:"",parent:'75713'},{ty:"method",name:"ne",path:"std::kinds::marker",desc:"",parent:'75713'},{ty:"method",name:"clone",path:"std::kinds::marker",desc:"",parent:'75777'},{ty:"method",name:"eq",path:"std::kinds::marker",desc:"",parent:'75777'},{ty:"method",name:"ne",path:"std::kinds::marker",desc:"",parent:'75777'},{ty:"trait",name:"Send",path:"std::kinds",desc:"Types able to be transferred across task boundaries."},{ty:"trait",name:"Freeze",path:"std::kinds",desc:"Types that are either immutable or have inherited mutability."},{ty:"trait",name:"Sized",path:"std::kinds",desc:"Types with a constant size known at compile-time."},{ty:"trait",name:"Pod",path:"std::kinds",desc:"Types that can be copied by simply copying bits (i.e. `memcpy`)."},{ty:"mod",name:"ops",path:"std",desc:"\nTraits representing built-in operators, useful for overloading"},{ty:"trait",name:"Drop",path:"std::ops",desc:"\nThe `Drop` trait is used to run some code when a value goes out of scope. This\nis sometimes called a 'destructor'."},{ty:"tymethod",name:"drop",path:"std::ops",desc:"The `drop` method, called when the value goes out of scope.",parent:'75842'},{ty:"trait",name:"Add",path:"std::ops",desc:"\nThe `Add` trait is used to specify the functionality of `+`."},{ty:"tymethod",name:"add",path:"std::ops",desc:"The method for the `+` operator",parent:'75848'},{ty:"trait",name:"Sub",path:"std::ops",desc:"\nThe `Sub` trait is used to specify the functionality of `-`."},{ty:"tymethod",name:"sub",path:"std::ops",desc:"The method for the `-` operator",parent:'75862'},{ty:"trait",name:"Mul",path:"std::ops",desc:"\nThe `Mul` trait is used to specify the functionality of `*`."},{ty:"tymethod",name:"mul",path:"std::ops",desc:"The method for the `*` operator",parent:'75876'},{ty:"trait",name:"Div",path:"std::ops",desc:"\nThe `Div` trait is used to specify the functionality of `/`."},{ty:"tymethod",name:"div",path:"std::ops",desc:"The method for the `/` operator",parent:'75890'},{ty:"trait",name:"Rem",path:"std::ops",desc:"\nThe `Rem` trait is used to specify the functionality of `%`."},{ty:"tymethod",name:"rem",path:"std::ops",desc:"The method for the `%` operator",parent:'75904'},{ty:"trait",name:"Neg",path:"std::ops",desc:"\nThe `Neg` trait is used to specify the functionality of unary `-`."},{ty:"tymethod",name:"neg",path:"std::ops",desc:"The method for the unary `-` operator",parent:'75918'},{ty:"trait",name:"Not",path:"std::ops",desc:"\nThe `Not` trait is used to specify the functionality of unary `!`."},{ty:"tymethod",name:"not",path:"std::ops",desc:"The method for the unary `!` operator",parent:'75926'},{ty:"trait",name:"BitAnd",path:"std::ops",desc:"\nThe `BitAnd` trait is used to specify the functionality of `&`."},{ty:"tymethod",name:"bitand",path:"std::ops",desc:"The method for the `&` operator",parent:'75934'},{ty:"trait",name:"BitOr",path:"std::ops",desc:"\nThe `BitOr` trait is used to specify the functionality of `|`."},{ty:"tymethod",name:"bitor",path:"std::ops",desc:"The method for the `|` operator",parent:'75948'},{ty:"trait",name:"BitXor",path:"std::ops",desc:"\nThe `BitXor` trait is used to specify the functionality of `^`."},{ty:"tymethod",name:"bitxor",path:"std::ops",desc:"The method for the `^` operator",parent:'75962'},{ty:"trait",name:"Shl",path:"std::ops",desc:"\nThe `Shl` trait is used to specify the functionality of `<<`."},{ty:"tymethod",name:"shl",path:"std::ops",desc:"The method for the `<<` operator",parent:'75976'},{ty:"trait",name:"Shr",path:"std::ops",desc:"\nThe `Shr` trait is used to specify the functionality of `>>`."},{ty:"tymethod",name:"shr",path:"std::ops",desc:"The method for the `>>` operator",parent:'75990'},{ty:"trait",name:"Index",path:"std::ops",desc:"\nThe `Index` trait is used to specify the functionality of indexing operations\nlike `arr[idx]`."},{ty:"tymethod",name:"index",path:"std::ops",desc:"The method for the indexing (`Foo[Bar]`) operation",parent:'76004'},{ty:"trait",name:"Deref",path:"std::ops",desc:"\nThe `Deref` trait is used to specify the functionality of dereferencing\noperations like `*v`."},{ty:"tymethod",name:"deref",path:"std::ops",desc:"The method called to dereference a value",parent:'76018'},{ty:"trait",name:"DerefMut",path:"std::ops",desc:"\nThe `DerefMut` trait is used to specify the functionality of dereferencing\nmutably like `*v = 1;`"},{ty:"tymethod",name:"deref_mut",path:"std::ops",desc:"The method called to mutably dereference a value",parent:'76030'},{ty:"mod",name:"cmp",path:"std",desc:"The `Ord` and `Eq` comparison traits"},{ty:"enum",name:"Ordering",path:"std::cmp",desc:""},{ty:"variant",name:"Less",path:"std::cmp",desc:"",parent:'76343'},{ty:"variant",name:"Equal",path:"std::cmp",desc:"",parent:'76343'},{ty:"variant",name:"Greater",path:"std::cmp",desc:"",parent:'76343'},{ty:"fn",name:"lexical_ordering",path:"std::cmp",desc:"Return `o1` if it is not `Equal`, otherwise `o2`. Simulates the\nlexical ordering on a type `(int, int)`."},{ty:"fn",name:"min",path:"std::cmp",desc:""},{ty:"fn",name:"max",path:"std::cmp",desc:""},{ty:"trait",name:"Eq",path:"std::cmp",desc:"Trait for values that can be compared for equality and inequality."},{ty:"tymethod",name:"eq",path:"std::cmp",desc:"",parent:'76046'},{ty:"method",name:"ne",path:"std::cmp",desc:"",parent:'76046'},{ty:"trait",name:"TotalEq",path:"std::cmp",desc:"Trait for equality comparisons where `a == b` and `a != b` are strict inverses."},{ty:"method",name:"equals",path:"std::cmp",desc:"This method must return the same value as `eq`. It exists to prevent\nderiving `TotalEq` from fields not implementing the `TotalEq` trait.",parent:'76074'},{ty:"trait",name:"TotalOrd",path:"std::cmp",desc:"Trait for types that form a total order"},{ty:"tymethod",name:"cmp",path:"std::cmp",desc:"",parent:'76613'},{ty:"trait",name:"Ord",path:"std::cmp",desc:"Trait for values that can be compared for a sort-order."},{ty:"tymethod",name:"lt",path:"std::cmp",desc:"",parent:'77110'},{ty:"method",name:"le",path:"std::cmp",desc:"",parent:'77110'},{ty:"method",name:"gt",path:"std::cmp",desc:"",parent:'77110'},{ty:"method",name:"ge",path:"std::cmp",desc:"",parent:'77110'},{ty:"trait",name:"Equiv",path:"std::cmp",desc:"The equivalence relation. Two values may be equivalent even if they are\nof different types. The most common use case for this relation is\ncontainer types; e.g. it is often desirable to be able to use `&str`\nvalues to look up entries in a container with `~str` keys."},{ty:"tymethod",name:"equiv",path:"std::cmp",desc:"",parent:'77170'},{ty:"method",name:"fmt",path:"std::cmp",desc:"",parent:'76343'},{ty:"method",name:"eq",path:"std::cmp",desc:"",parent:'76343'},{ty:"method",name:"ne",path:"std::cmp",desc:"",parent:'76343'},{ty:"method",name:"clone",path:"std::cmp",desc:"",parent:'76343'},{ty:"method",name:"equals",path:"std::cmp",desc:"",parent:'76343'},{ty:"method",name:"cmp",path:"std::cmp",desc:"",parent:'76343'},{ty:"method",name:"lt",path:"std::cmp",desc:"",parent:'76343'},{ty:"mod",name:"from_str",path:"std",desc:"The `FromStr` trait for types that can be created from strings"},{ty:"fn",name:"from_str",path:"std::from_str",desc:"A utility function that just calls FromStr::from_str"},{ty:"trait",name:"FromStr",path:"std::from_str",desc:"A trait to abstract the idea of creating a new instance of a type from a\nstring."},{ty:"tymethod",name:"from_str",path:"std::from_str",desc:"Parses a string `s` to return an optional value of this type. If the\nstring is ill-formatted, the None is returned.",parent:'77231'},{ty:"mod",name:"num",path:"std",desc:"Numeric traits and functions for generic mathematics"},{ty:"enum",name:"FPCategory",path:"std::num",desc:"Used for representing the classification of floating point numbers"},{ty:"variant",name:"FPNaN",path:"std::num",desc:"\"Not a Number\", often obtained by dividing by zero",parent:'81208'},{ty:"variant",name:"FPInfinite",path:"std::num",desc:"Positive or negative infinity",parent:'81208'},{ty:"variant",name:"FPZero",path:"std::num",desc:"Positive or negative zero",parent:'81208'},{ty:"variant",name:"FPSubnormal",path:"std::num",desc:"De-normalized floating point representation (less precise than `FPNormal`)",parent:'81208'},{ty:"variant",name:"FPNormal",path:"std::num",desc:"A regular floating point number",parent:'81208'},{ty:"fn",name:"div_rem",path:"std::num",desc:"Simultaneous division and remainder"},{ty:"fn",name:"zero",path:"std::num",desc:"Returns the additive identity, `0`."},{ty:"fn",name:"one",path:"std::num",desc:"Returns the multiplicative identity, `1`."},{ty:"fn",name:"abs",path:"std::num",desc:"Computes the absolute value."},{ty:"fn",name:"abs_sub",path:"std::num",desc:"The positive difference of two numbers."},{ty:"fn",name:"signum",path:"std::num",desc:"Returns the sign of the number."},{ty:"fn",name:"pow",path:"std::num",desc:"Raises a value to the power of exp, using exponentiation by squaring."},{ty:"fn",name:"next_power_of_two",path:"std::num",desc:"Returns the smallest power of 2 greater than or equal to `n`."},{ty:"fn",name:"checked_next_power_of_two",path:"std::num",desc:"Returns the smallest power of 2 greater than or equal to `n`. If the next\npower of two is greater than the type's maximum value, `None` is returned,\notherwise the power of 2 is wrapped in `Some`."},{ty:"fn",name:"exp_m1",path:"std::num",desc:"Returns the exponential of the number, minus `1`, `exp(n) - 1`, in a way\nthat is accurate even if the number is close to zero."},{ty:"fn",name:"ln_1p",path:"std::num",desc:"Returns the natural logarithm of the number plus `1`, `ln(n + 1)`, more\naccurately than if the operations were performed separately."},{ty:"fn",name:"mul_add",path:"std::num",desc:"Fused multiply-add. Computes `(a * b) + c` with only one rounding error."},{ty:"fn",name:"powf",path:"std::num",desc:"Raise a number to a power."},{ty:"fn",name:"sqrt",path:"std::num",desc:"Take the square root of a number."},{ty:"fn",name:"rsqrt",path:"std::num",desc:"Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`."},{ty:"fn",name:"cbrt",path:"std::num",desc:"Take the cubic root of a number."},{ty:"fn",name:"hypot",path:"std::num",desc:"Calculate the length of the hypotenuse of a right-angle triangle given legs\nof length `x` and `y`."},{ty:"fn",name:"sin",path:"std::num",desc:"Sine function."},{ty:"fn",name:"cos",path:"std::num",desc:"Cosine function."},{ty:"fn",name:"tan",path:"std::num",desc:"Tangent function."},{ty:"fn",name:"asin",path:"std::num",desc:"Compute the arcsine of the number."},{ty:"fn",name:"acos",path:"std::num",desc:"Compute the arccosine of the number."},{ty:"fn",name:"atan",path:"std::num",desc:"Compute the arctangent of the number."},{ty:"fn",name:"atan2",path:"std::num",desc:"Compute the arctangent with 2 arguments."},{ty:"fn",name:"sin_cos",path:"std::num",desc:"Simultaneously computes the sine and cosine of the number."},{ty:"fn",name:"exp",path:"std::num",desc:"Returns `e^(value)`, (the exponential function)."},{ty:"fn",name:"exp2",path:"std::num",desc:"Returns 2 raised to the power of the number, `2^(value)`."},{ty:"fn",name:"ln",path:"std::num",desc:"Returns the natural logarithm of the number."},{ty:"fn",name:"log",path:"std::num",desc:"Returns the logarithm of the number with respect to an arbitrary base."},{ty:"fn",name:"log2",path:"std::num",desc:"Returns the base 2 logarithm of the number."},{ty:"fn",name:"log10",path:"std::num",desc:"Returns the base 10 logarithm of the number."},{ty:"fn",name:"sinh",path:"std::num",desc:"Hyperbolic sine function."},{ty:"fn",name:"cosh",path:"std::num",desc:"Hyperbolic cosine function."},{ty:"fn",name:"tanh",path:"std::num",desc:"Hyperbolic tangent function."},{ty:"fn",name:"asinh",path:"std::num",desc:"Inverse hyperbolic sine function."},{ty:"fn",name:"acosh",path:"std::num",desc:"Inverse hyperbolic cosine function."},{ty:"fn",name:"atanh",path:"std::num",desc:"Inverse hyperbolic tangent function."},{ty:"fn",name:"from_int",path:"std::num",desc:"A utility function that just calls `FromPrimitive::from_int`."},{ty:"fn",name:"from_i8",path:"std::num",desc:"A utility function that just calls `FromPrimitive::from_i8`."},{ty:"fn",name:"from_i16",path:"std::num",desc:"A utility function that just calls `FromPrimitive::from_i16`."},{ty:"fn",name:"from_i32",path:"std::num",desc:"A utility function that just calls `FromPrimitive::from_i32`."},{ty:"fn",name:"from_i64",path:"std::num",desc:"A utility function that just calls `FromPrimitive::from_i64`."},{ty:"fn",name:"from_uint",path:"std::num",desc:"A utility function that just calls `FromPrimitive::from_uint`."},{ty:"fn",name:"from_u8",path:"std::num",desc:"A utility function that just calls `FromPrimitive::from_u8`."},{ty:"fn",name:"from_u16",path:"std::num",desc:"A utility function that just calls `FromPrimitive::from_u16`."},{ty:"fn",name:"from_u32",path:"std::num",desc:"A utility function that just calls `FromPrimitive::from_u32`."},{ty:"fn",name:"from_u64",path:"std::num",desc:"A utility function that just calls `FromPrimitive::from_u64`."},{ty:"fn",name:"from_f32",path:"std::num",desc:"A utility function that just calls `FromPrimitive::from_f32`."},{ty:"fn",name:"from_f64",path:"std::num",desc:"A utility function that just calls `FromPrimitive::from_f64`."},{ty:"fn",name:"cast",path:"std::num",desc:"Cast from one machine scalar to another."},{ty:"fn",name:"from_str_radix",path:"std::num",desc:"A utility function that just calls FromStrRadix::from_str_radix."},{ty:"mod",name:"strconv",path:"std::num",desc:""},{ty:"enum",name:"ExponentFormat",path:"std::num::strconv",desc:""},{ty:"variant",name:"ExpNone",path:"std::num::strconv",desc:"",parent:'77328'},{ty:"variant",name:"ExpDec",path:"std::num::strconv",desc:"",parent:'77328'},{ty:"variant",name:"ExpBin",path:"std::num::strconv",desc:"",parent:'77328'},{ty:"enum",name:"SignificantDigits",path:"std::num::strconv",desc:""},{ty:"variant",name:"DigAll",path:"std::num::strconv",desc:"",parent:'77332'},{ty:"variant",name:"DigMax",path:"std::num::strconv",desc:"",parent:'77332'},{ty:"variant",name:"DigExact",path:"std::num::strconv",desc:"",parent:'77332'},{ty:"enum",name:"SignFormat",path:"std::num::strconv",desc:""},{ty:"variant",name:"SignNone",path:"std::num::strconv",desc:"",parent:'77342'},{ty:"variant",name:"SignNeg",path:"std::num::strconv",desc:"",parent:'77342'},{ty:"variant",name:"SignAll",path:"std::num::strconv",desc:"",parent:'77342'},{ty:"fn",name:"int_to_str_bytes_common",path:"std::num::strconv",desc:"Converts an integral number to its string representation as a byte vector.\nThis is meant to be a common base implementation for all integral string\nconversion functions like `to_str()` or `to_str_radix()`."},{ty:"fn",name:"float_to_str_bytes_common",path:"std::num::strconv",desc:"Converts a number to its string representation as a byte vector.\nThis is meant to be a common base implementation for all numeric string\nconversion functions like `to_str()` or `to_str_radix()`."},{ty:"fn",name:"float_to_str_common",path:"std::num::strconv",desc:"Converts a number to its string representation. This is a wrapper for\n`to_str_bytes_common()`, for details see there."},{ty:"fn",name:"from_str_bytes_common",path:"std::num::strconv",desc:"Parses a byte slice as a number. This is meant to\nbe a common base implementation for all numeric string conversion\nfunctions like `from_str()` or `from_str_radix()`."},{ty:"fn",name:"from_str_common",path:"std::num::strconv",desc:"Parses a string as a number. This is a wrapper for\n`from_str_bytes_common()`, for details see there."},{ty:"trait",name:"NumStrConv",path:"std::num::strconv",desc:""},{ty:"tymethod",name:"nan",path:"std::num::strconv",desc:"",parent:'77346'},{ty:"tymethod",name:"inf",path:"std::num::strconv",desc:"",parent:'77346'},{ty:"tymethod",name:"neg_inf",path:"std::num::strconv",desc:"",parent:'77346'},{ty:"tymethod",name:"neg_zero",path:"std::num::strconv",desc:"",parent:'77346'},{ty:"tymethod",name:"round_to_zero",path:"std::num::strconv",desc:"",parent:'77346'},{ty:"tymethod",name:"fractional_part",path:"std::num::strconv",desc:"",parent:'77346'},{ty:"trait",name:"Num",path:"std::num",desc:"The base trait for numeric types"},{ty:"trait",name:"Zero",path:"std::num",desc:"Defines an additive identity element for `Self`."},{ty:"tymethod",name:"zero",path:"std::num",desc:"Returns the additive identity element of `Self`, `0`.",parent:'80761'},{ty:"tymethod",name:"is_zero",path:"std::num",desc:"Returns `true` if `self` is equal to the additive identity.",parent:'80761'},{ty:"trait",name:"One",path:"std::num",desc:"Defines a multiplicative identity element for `Self`."},{ty:"tymethod",name:"one",path:"std::num",desc:"Returns the multiplicative identity element of `Self`, `1`.",parent:'80784'},{ty:"trait",name:"Signed",path:"std::num",desc:""},{ty:"tymethod",name:"abs",path:"std::num",desc:"",parent:'80801'},{ty:"tymethod",name:"abs_sub",path:"std::num",desc:"",parent:'80801'},{ty:"tymethod",name:"signum",path:"std::num",desc:"",parent:'80801'},{ty:"tymethod",name:"is_positive",path:"std::num",desc:"",parent:'80801'},{ty:"tymethod",name:"is_negative",path:"std::num",desc:"",parent:'80801'},{ty:"trait",name:"Unsigned",path:"std::num",desc:""},{ty:"trait",name:"Round",path:"std::num",desc:"A collection of rounding operations."},{ty:"tymethod",name:"floor",path:"std::num",desc:"Return the largest integer less than or equal to a number.",parent:'80885'},{ty:"tymethod",name:"ceil",path:"std::num",desc:"Return the smallest integer greater than or equal to a number.",parent:'80885'},{ty:"tymethod",name:"round",path:"std::num",desc:"Return the nearest integer to a number. Round half-way cases away from\n`0.0`.",parent:'80885'},{ty:"tymethod",name:"trunc",path:"std::num",desc:"Return the integer part of a number.",parent:'80885'},{ty:"tymethod",name:"fract",path:"std::num",desc:"Return the fractional part of a number.",parent:'80885'},{ty:"trait",name:"Bounded",path:"std::num",desc:""},{ty:"tymethod",name:"min_value",path:"std::num",desc:"",parent:'80985'},{ty:"tymethod",name:"max_value",path:"std::num",desc:"",parent:'80985'},{ty:"trait",name:"Bitwise",path:"std::num",desc:"Numbers with a fixed binary representation."},{ty:"tymethod",name:"count_ones",path:"std::num",desc:"Returns the number of ones in the binary representation of the number.",parent:'80992'},{ty:"method",name:"count_zeros",path:"std::num",desc:"Returns the number of zeros in the binary representation of the number.",parent:'80992'},{ty:"tymethod",name:"leading_zeros",path:"std::num",desc:"Returns the number of leading zeros in the in the binary representation\nof the number.",parent:'80992'},{ty:"tymethod",name:"trailing_zeros",path:"std::num",desc:"Returns the number of trailing zeros in the in the binary representation\nof the number.",parent:'80992'},{ty:"trait",name:"Primitive",path:"std::num",desc:"Specifies the available operations common to all of Rust's core numeric primitives.\nThese may not always make sense from a purely mathematical point of view, but\nmay be useful for systems programming."},{ty:"trait",name:"Int",path:"std::num",desc:"A collection of traits relevant to primitive signed and unsigned integers"},{ty:"trait",name:"Float",path:"std::num",desc:"Primitive floating point numbers"},{ty:"tymethod",name:"max",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"min",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"nan",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"infinity",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"neg_infinity",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"neg_zero",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"is_nan",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"is_infinite",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"is_finite",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"is_normal",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"classify",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"mantissa_digits",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"digits",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"epsilon",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"min_exp",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"max_exp",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"min_10_exp",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"max_10_exp",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"ldexp",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"frexp",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"exp_m1",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"ln_1p",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"mul_add",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"next_after",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"integer_decode",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"pi",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"two_pi",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"frac_pi_2",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"frac_pi_3",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"frac_pi_4",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"frac_pi_6",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"frac_pi_8",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"frac_1_pi",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"frac_2_pi",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"frac_2_sqrtpi",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"sqrt2",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"frac_1_sqrt2",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"e",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"log2_e",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"log10_e",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"ln_2",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"ln_10",path:"std::num",desc:"",parent:'81582'},{ty:"tymethod",name:"recip",path:"std::num",desc:"Take the reciprocal (inverse) of a number, `1/x`.",parent:'81582'},{ty:"tymethod",name:"powf",path:"std::num",desc:"Raise a number to a power.",parent:'81582'},{ty:"tymethod",name:"sqrt",path:"std::num",desc:"Take the square root of a number.",parent:'81582'},{ty:"tymethod",name:"rsqrt",path:"std::num",desc:"Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.",parent:'81582'},{ty:"tymethod",name:"cbrt",path:"std::num",desc:"Take the cubic root of a number.",parent:'81582'},{ty:"tymethod",name:"hypot",path:"std::num",desc:"Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",parent:'81582'},{ty:"tymethod",name:"sin",path:"std::num",desc:"Computes the sine of a number (in radians).",parent:'81582'},{ty:"tymethod",name:"cos",path:"std::num",desc:"Computes the cosine of a number (in radians).",parent:'81582'},{ty:"tymethod",name:"tan",path:"std::num",desc:"Computes the tangent of a number (in radians).",parent:'81582'},{ty:"tymethod",name:"asin",path:"std::num",desc:"Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",parent:'81582'},{ty:"tymethod",name:"acos",path:"std::num",desc:"Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",parent:'81582'},{ty:"tymethod",name:"atan",path:"std::num",desc:"Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",parent:'81582'},{ty:"tymethod",name:"atan2",path:"std::num",desc:"Computes the four quadrant arctangent of a number, `y`, and another\nnumber `x`. Return value is in radians in the range [-pi, pi].",parent:'81582'},{ty:"tymethod",name:"sin_cos",path:"std::num",desc:"Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",parent:'81582'},{ty:"tymethod",name:"exp",path:"std::num",desc:"Returns `e^(self)`, (the exponential function).",parent:'81582'},{ty:"tymethod",name:"exp2",path:"std::num",desc:"Returns 2 raised to the power of the number, `2^(self)`.",parent:'81582'},{ty:"tymethod",name:"ln",path:"std::num",desc:"Returns the natural logarithm of the number.",parent:'81582'},{ty:"tymethod",name:"log",path:"std::num",desc:"Returns the logarithm of the number with respect to an arbitrary base.",parent:'81582'},{ty:"tymethod",name:"log2",path:"std::num",desc:"Returns the base 2 logarithm of the number.",parent:'81582'},{ty:"tymethod",name:"log10",path:"std::num",desc:"Returns the base 10 logarithm of the number.",parent:'81582'},{ty:"tymethod",name:"sinh",path:"std::num",desc:"Hyperbolic sine function.",parent:'81582'},{ty:"tymethod",name:"cosh",path:"std::num",desc:"Hyperbolic cosine function.",parent:'81582'},{ty:"tymethod",name:"tanh",path:"std::num",desc:"Hyperbolic tangent function.",parent:'81582'},{ty:"tymethod",name:"asinh",path:"std::num",desc:"Inverse hyperbolic sine function.",parent:'81582'},{ty:"tymethod",name:"acosh",path:"std::num",desc:"Inverse hyperbolic cosine function.",parent:'81582'},{ty:"tymethod",name:"atanh",path:"std::num",desc:"Inverse hyperbolic tangent function.",parent:'81582'},{ty:"tymethod",name:"to_degrees",path:"std::num",desc:"Convert radians to degrees.",parent:'81582'},{ty:"tymethod",name:"to_radians",path:"std::num",desc:"Convert degrees to radians.",parent:'81582'},{ty:"trait",name:"ToPrimitive",path:"std::num",desc:"A generic trait for converting a value to a number."},{ty:"method",name:"to_int",path:"std::num",desc:"Converts the value of `self` to an `int`.",parent:'82387'},{ty:"method",name:"to_i8",path:"std::num",desc:"Converts the value of `self` to an `i8`.",parent:'82387'},{ty:"method",name:"to_i16",path:"std::num",desc:"Converts the value of `self` to an `i16`.",parent:'82387'},{ty:"method",name:"to_i32",path:"std::num",desc:"Converts the value of `self` to an `i32`.",parent:'82387'},{ty:"tymethod",name:"to_i64",path:"std::num",desc:"Converts the value of `self` to an `i64`.",parent:'82387'},{ty:"method",name:"to_uint",path:"std::num",desc:"Converts the value of `self` to an `uint`.",parent:'82387'},{ty:"method",name:"to_u8",path:"std::num",desc:"Converts the value of `self` to an `u8`.",parent:'82387'},{ty:"method",name:"to_u16",path:"std::num",desc:"Converts the value of `self` to an `u16`.",parent:'82387'},{ty:"method",name:"to_u32",path:"std::num",desc:"Converts the value of `self` to an `u32`.",parent:'82387'},{ty:"tymethod",name:"to_u64",path:"std::num",desc:"Converts the value of `self` to an `u64`.",parent:'82387'},{ty:"method",name:"to_f32",path:"std::num",desc:"Converts the value of `self` to an `f32`.",parent:'82387'},{ty:"method",name:"to_f64",path:"std::num",desc:"Converts the value of `self` to an `f64`.",parent:'82387'},{ty:"trait",name:"FromPrimitive",path:"std::num",desc:"A generic trait for converting a number to a value."},{ty:"method",name:"from_int",path:"std::num",desc:"Convert an `int` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",parent:'89651'},{ty:"method",name:"from_i8",path:"std::num",desc:"Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",parent:'89651'},{ty:"method",name:"from_i16",path:"std::num",desc:"Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",parent:'89651'},{ty:"method",name:"from_i32",path:"std::num",desc:"Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",parent:'89651'},{ty:"tymethod",name:"from_i64",path:"std::num",desc:"Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",parent:'89651'},{ty:"method",name:"from_uint",path:"std::num",desc:"Convert an `uint` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",parent:'89651'},{ty:"method",name:"from_u8",path:"std::num",desc:"Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",parent:'89651'},{ty:"method",name:"from_u16",path:"std::num",desc:"Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",parent:'89651'},{ty:"method",name:"from_u32",path:"std::num",desc:"Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",parent:'89651'},{ty:"tymethod",name:"from_u64",path:"std::num",desc:"Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",parent:'89651'},{ty:"method",name:"from_f32",path:"std::num",desc:"Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",parent:'89651'},{ty:"method",name:"from_f64",path:"std::num",desc:"Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",parent:'89651'},{ty:"trait",name:"NumCast",path:"std::num",desc:"An interface for casting between machine scalars"},{ty:"tymethod",name:"from",path:"std::num",desc:"",parent:'91803'},{ty:"trait",name:"ToStrRadix",path:"std::num",desc:""},{ty:"tymethod",name:"to_str_radix",path:"std::num",desc:"",parent:'92032'},{ty:"trait",name:"FromStrRadix",path:"std::num",desc:""},{ty:"tymethod",name:"from_str_radix",path:"std::num",desc:"",parent:'92044'},{ty:"trait",name:"Saturating",path:"std::num",desc:"Saturating math operations"},{ty:"tymethod",name:"saturating_add",path:"std::num",desc:"Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",parent:'92080'},{ty:"tymethod",name:"saturating_sub",path:"std::num",desc:"Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",parent:'92080'},{ty:"trait",name:"CheckedAdd",path:"std::num",desc:""},{ty:"tymethod",name:"checked_add",path:"std::num",desc:"",parent:'92175'},{ty:"trait",name:"CheckedSub",path:"std::num",desc:""},{ty:"tymethod",name:"checked_sub",path:"std::num",desc:"",parent:'92194'},{ty:"trait",name:"CheckedMul",path:"std::num",desc:""},{ty:"tymethod",name:"checked_mul",path:"std::num",desc:"",parent:'92213'},{ty:"trait",name:"CheckedDiv",path:"std::num",desc:""},{ty:"tymethod",name:"checked_div",path:"std::num",desc:"",parent:'92232'},{ty:"method",name:"fmt",path:"std::num",desc:"",parent:'81208'},{ty:"method",name:"eq",path:"std::num",desc:"",parent:'81208'},{ty:"method",name:"ne",path:"std::num",desc:"",parent:'81208'},{ty:"mod",name:"iter",path:"std",desc:"Composable external iterators"},{ty:"struct",name:"Rev",path:"std::iter",desc:"An double-ended iterator with the direction inverted"},{ty:"struct",name:"ByRef",path:"std::iter",desc:"A mutable reference to an iterator"},{ty:"struct",name:"Cycle",path:"std::iter",desc:"An iterator that repeats endlessly"},{ty:"struct",name:"Chain",path:"std::iter",desc:"An iterator which strings two iterators together"},{ty:"struct",name:"Zip",path:"std::iter",desc:"An iterator which iterates two other iterators simultaneously"},{ty:"struct",name:"Map",path:"std::iter",desc:"An iterator which maps the values of `iter` with `f`"},{ty:"struct",name:"Filter",path:"std::iter",desc:"An iterator which filters the elements of `iter` with `predicate`"},{ty:"struct",name:"FilterMap",path:"std::iter",desc:"An iterator which uses `f` to both filter and map elements from `iter`"},{ty:"struct",name:"Enumerate",path:"std::iter",desc:"An iterator which yields the current count and the element during iteration"},{ty:"struct",name:"Peekable",path:"std::iter",desc:"An iterator with a `peek()` that returns an optional reference to the next element."},{ty:"struct",name:"SkipWhile",path:"std::iter",desc:"An iterator which rejects elements while `predicate` is true"},{ty:"struct",name:"TakeWhile",path:"std::iter",desc:"An iterator which only accepts elements while `predicate` is true"},{ty:"struct",name:"Skip",path:"std::iter",desc:"An iterator which skips over `n` elements of `iter`."},{ty:"struct",name:"Take",path:"std::iter",desc:"An iterator which only iterates over the first `n` iterations of `iter`."},{ty:"struct",name:"Scan",path:"std::iter",desc:"An iterator to maintain state while iterating another iterator"},{ty:"structfield",name:"state",path:"std::iter",desc:"The current internal state to be passed to the closure next.",parent:'97534'},{ty:"struct",name:"FlatMap",path:"std::iter",desc:"An iterator that maps each element to an iterator,\nand yields the elements of the produced iterators\n"},{ty:"struct",name:"Fuse",path:"std::iter",desc:"An iterator that yields `None` forever after the underlying iterator\nyields `None` once."},{ty:"struct",name:"Inspect",path:"std::iter",desc:"An iterator that calls a function with a reference to each\nelement before yielding it."},{ty:"struct",name:"Unfold",path:"std::iter",desc:"An iterator which just modifies the contained state throughout iteration."},{ty:"structfield",name:"state",path:"std::iter",desc:"Internal state that will be yielded on the next iteration",parent:'98358'},{ty:"struct",name:"Counter",path:"std::iter",desc:"An infinite iterator starting at `start` and advancing by `step` with each\niteration"},{ty:"struct",name:"Range",path:"std::iter",desc:"An iterator over the range [start, stop)"},{ty:"struct",name:"RangeInclusive",path:"std::iter",desc:"An iterator over the range [start, stop]"},{ty:"struct",name:"RangeStep",path:"std::iter",desc:"An iterator over the range [start, stop) by `step`. It handles overflow by stopping."},{ty:"struct",name:"RangeStepInclusive",path:"std::iter",desc:"An iterator over the range [start, stop] by `step`. It handles overflow by stopping."},{ty:"struct",name:"Repeat",path:"std::iter",desc:"An iterator that repeats an element endlessly"},{ty:"enum",name:"MinMaxResult",path:"std::iter",desc:"`MinMaxResult` is an enum returned by `min_max`. See `OrdIterator::min_max` for more detail."},{ty:"variant",name:"NoElements",path:"std::iter",desc:"Empty iterator",parent:'94259'},{ty:"variant",name:"OneElement",path:"std::iter",desc:"Iterator with one element, so the minimum and maximum are the same",parent:'94259'},{ty:"variant",name:"MinMax",path:"std::iter",desc:"More than one element in the iterator, the first element is not larger than the second",parent:'94259'},{ty:"fn",name:"count",path:"std::iter",desc:"Creates a new counter with the specified start/step"},{ty:"fn",name:"range",path:"std::iter",desc:"Return an iterator over the range [start, stop)"},{ty:"fn",name:"range_inclusive",path:"std::iter",desc:"Return an iterator over the range [start, stop]"},{ty:"fn",name:"range_step",path:"std::iter",desc:"Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping."},{ty:"fn",name:"range_step_inclusive",path:"std::iter",desc:"Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping."},{ty:"mod",name:"order",path:"std::iter",desc:"Functions for lexicographical ordering of sequences."},{ty:"fn",name:"equals",path:"std::iter::order",desc:"Compare `a` and `b` for equality using `TotalOrd`"},{ty:"fn",name:"cmp",path:"std::iter::order",desc:"Order `a` and `b` lexicographically using `TotalOrd`"},{ty:"fn",name:"eq",path:"std::iter::order",desc:"Compare `a` and `b` for equality (Using partial equality, `Eq`)"},{ty:"fn",name:"ne",path:"std::iter::order",desc:"Compare `a` and `b` for nonequality (Using partial equality, `Eq`)"},{ty:"fn",name:"lt",path:"std::iter::order",desc:"Return `a` < `b` lexicographically (Using partial order, `Ord`)"},{ty:"fn",name:"le",path:"std::iter::order",desc:"Return `a` <= `b` lexicographically (Using partial order, `Ord`)"},{ty:"fn",name:"gt",path:"std::iter::order",desc:"Return `a` > `b` lexicographically (Using partial order, `Ord`)"},{ty:"fn",name:"ge",path:"std::iter::order",desc:"Return `a` >= `b` lexicographically (Using partial order, `Ord`)"},{ty:"trait",name:"FromIterator",path:"std::iter",desc:"Conversion from an `Iterator`"},{ty:"tymethod",name:"from_iterator",path:"std::iter",desc:"Build a container with elements from an external iterator.",parent:'92276'},{ty:"trait",name:"Extendable",path:"std::iter",desc:"A type growable from an `Iterator` implementation"},{ty:"tymethod",name:"extend",path:"std::iter",desc:"Extend a container with the elements yielded by an iterator",parent:'92290'},{ty:"trait",name:"Iterator",path:"std::iter",desc:"An interface for dealing with \"external iterators\". These types of iterators\ncan be resumed at any time as all state is stored internally as opposed to\nbeing located on the call stack."},{ty:"tymethod",name:"next",path:"std::iter",desc:"Advance the iterator and return the next value. Return `None` when the end is reached.",parent:'92309'},{ty:"method",name:"size_hint",path:"std::iter",desc:"Return a lower bound and upper bound on the remaining length of the iterator.",parent:'92309'},{ty:"method",name:"chain",path:"std::iter",desc:"Chain this iterator with another, returning a new iterator which will\nfinish iterating over the current iterator, and then it will iterate\nover the other specified iterator.",parent:'92309'},{ty:"method",name:"zip",path:"std::iter",desc:"Creates an iterator which iterates over both this and the specified\niterators simultaneously, yielding the two elements as pairs. When\neither iterator returns None, all further invocations of next() will\nreturn None.",parent:'92309'},{ty:"method",name:"map",path:"std::iter",desc:"Creates a new iterator which will apply the specified function to each\nelement returned by the first, yielding the mapped element instead.",parent:'92309'},{ty:"method",name:"filter",path:"std::iter",desc:"Creates an iterator which applies the predicate to each element returned\nby this iterator. Only elements which have the predicate evaluate to\n`true` will be yielded.",parent:'92309'},{ty:"method",name:"filter_map",path:"std::iter",desc:"Creates an iterator which both filters and maps elements.\nIf the specified function returns None, the element is skipped.\nOtherwise the option is unwrapped and the new value is yielded.",parent:'92309'},{ty:"method",name:"enumerate",path:"std::iter",desc:"Creates an iterator which yields a pair of the value returned by this\niterator plus the current index of iteration.",parent:'92309'},{ty:"method",name:"peekable",path:"std::iter",desc:"Creates an iterator that has a `.peek()` method\nthat returns an optional reference to the next element.",parent:'92309'},{ty:"method",name:"skip_while",path:"std::iter",desc:"Creates an iterator which invokes the predicate on elements until it\nreturns false. Once the predicate returns false, all further elements are\nyielded.",parent:'92309'},{ty:"method",name:"take_while",path:"std::iter",desc:"Creates an iterator which yields elements so long as the predicate\nreturns true. After the predicate returns false for the first time, no\nfurther elements will be yielded.",parent:'92309'},{ty:"method",name:"skip",path:"std::iter",desc:"Creates an iterator which skips the first `n` elements of this iterator,\nand then it yields all further items.",parent:'92309'},{ty:"method",name:"take",path:"std::iter",desc:"Creates an iterator which yields the first `n` elements of this\niterator, and then it will always return None.",parent:'92309'},{ty:"method",name:"scan",path:"std::iter",desc:"Creates a new iterator which behaves in a similar fashion to foldl.\nThere is a state which is passed between each iteration and can be\nmutated as necessary. The yielded values from the closure are yielded\nfrom the Scan instance when not None.",parent:'92309'},{ty:"method",name:"flat_map",path:"std::iter",desc:"Creates an iterator that maps each element to an iterator,\nand yields the elements of the produced iterators",parent:'92309'},{ty:"method",name:"fuse",path:"std::iter",desc:"Creates an iterator that yields `None` forever after the underlying\niterator yields `None`. Random-access iterator behavior is not\naffected, only single and double-ended iterator behavior.",parent:'92309'},{ty:"method",name:"inspect",path:"std::iter",desc:"Creates an iterator that calls a function with a reference to each\nelement before yielding it. This is often useful for debugging an\niterator pipeline.",parent:'92309'},{ty:"method",name:"by_ref",path:"std::iter",desc:"Creates a wrapper around a mutable reference to the iterator.",parent:'92309'},{ty:"method",name:"advance",path:"std::iter",desc:"Apply a function to each element, or stop iterating if the\nfunction returns `false`.",parent:'92309'},{ty:"method",name:"collect",path:"std::iter",desc:"Loops through the entire iterator, collecting all of the elements into\na container implementing `FromIterator`.",parent:'92309'},{ty:"method",name:"to_owned_vec",path:"std::iter",desc:"Loops through the entire iterator, collecting all of the elements into\na unique vector. This is simply collect() specialized for vectors.",parent:'92309'},{ty:"method",name:"nth",path:"std::iter",desc:"Loops through `n` iterations, returning the `n`th element of the\niterator.",parent:'92309'},{ty:"method",name:"last",path:"std::iter",desc:"Loops through the entire iterator, returning the last element of the\niterator.",parent:'92309'},{ty:"method",name:"fold",path:"std::iter",desc:"Performs a fold operation over the entire iterator, returning the\neventual state at the end of the iteration.",parent:'92309'},{ty:"method",name:"len",path:"std::iter",desc:"Counts the number of elements in this iterator.",parent:'92309'},{ty:"method",name:"all",path:"std::iter",desc:"Tests whether the predicate holds true for all elements in the iterator.",parent:'92309'},{ty:"method",name:"any",path:"std::iter",desc:"Tests whether any element of an iterator satisfies the specified\npredicate.",parent:'92309'},{ty:"method",name:"find",path:"std::iter",desc:"Return the first element satisfying the specified predicate",parent:'92309'},{ty:"method",name:"position",path:"std::iter",desc:"Return the index of the first element satisfying the specified predicate",parent:'92309'},{ty:"method",name:"count",path:"std::iter",desc:"Count the number of elements satisfying the specified predicate",parent:'92309'},{ty:"method",name:"max_by",path:"std::iter",desc:"Return the element that gives the maximum value from the\nspecified function.",parent:'92309'},{ty:"method",name:"min_by",path:"std::iter",desc:"Return the element that gives the minimum value from the\nspecified function.",parent:'92309'},{ty:"trait",name:"DoubleEndedIterator",path:"std::iter",desc:"A range iterator able to yield elements from both ends"},{ty:"tymethod",name:"next_back",path:"std::iter",desc:"Yield an element from the end of the range, returning `None` if the range is empty.",parent:'93338'},{ty:"method",name:"rev",path:"std::iter",desc:"Change the direction of the iterator",parent:'93338'},{ty:"trait",name:"MutableDoubleEndedIterator",path:"std::iter",desc:"A double-ended iterator yielding mutable references"},{ty:"tymethod",name:"reverse_",path:"std::iter",desc:"Use an iterator to reverse a container in-place",parent:'93362'},{ty:"trait",name:"RandomAccessIterator",path:"std::iter",desc:"An object implementing random access indexing by `uint`"},{ty:"tymethod",name:"indexable",path:"std::iter",desc:"Return the number of indexable elements. At most `std::uint::MAX`\nelements are indexable, even if the iterator represents a longer range.",parent:'93405'},{ty:"tymethod",name:"idx",path:"std::iter",desc:"Return an element at an index",parent:'93405'},{ty:"trait",name:"ExactSize",path:"std::iter",desc:"An iterator that knows its exact length"},{ty:"method",name:"rposition",path:"std::iter",desc:"Return the index of the last element satisfying the specified predicate",parent:'93428'},{ty:"trait",name:"AdditiveIterator",path:"std::iter",desc:"A trait for iterators over elements which can be added together"},{ty:"tymethod",name:"sum",path:"std::iter",desc:"Iterates over the entire iterator, summing up all the elements",parent:'93893'},{ty:"trait",name:"MultiplicativeIterator",path:"std::iter",desc:"A trait for iterators over elements whose elements can be multiplied\ntogether."},{ty:"tymethod",name:"product",path:"std::iter",desc:"Iterates over the entire iterator, multiplying all the elements",parent:'93947'},{ty:"trait",name:"OrdIterator",path:"std::iter",desc:"A trait for iterators over elements which can be compared to one another.\nThe type of each element must ascribe to the `Ord` trait."},{ty:"tymethod",name:"max",path:"std::iter",desc:"Consumes the entire iterator to return the maximum element.",parent:'94001'},{ty:"tymethod",name:"min",path:"std::iter",desc:"Consumes the entire iterator to return the minimum element.",parent:'94001'},{ty:"tymethod",name:"min_max",path:"std::iter",desc:"`min_max` finds the minimum and maximum elements in the iterator.",parent:'94001'},{ty:"trait",name:"CloneableIterator",path:"std::iter",desc:"A trait for iterators that are cloneable."},{ty:"tymethod",name:"cycle",path:"std::iter",desc:"Repeats an iterator endlessly",parent:'94747'},{ty:"method",name:"clone",path:"std::iter",desc:"",parent:'93671'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'93671'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'93671'},{ty:"method",name:"next_back",path:"std::iter",desc:"",parent:'93671'},{ty:"method",name:"indexable",path:"std::iter",desc:"",parent:'93671'},{ty:"method",name:"idx",path:"std::iter",desc:"",parent:'93671'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'93816'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'93816'},{ty:"method",name:"next_back",path:"std::iter",desc:"",parent:'93816'},{ty:"method",name:"fmt",path:"std::iter",desc:"",parent:'94259'},{ty:"method",name:"eq",path:"std::iter",desc:"",parent:'94259'},{ty:"method",name:"ne",path:"std::iter",desc:"",parent:'94259'},{ty:"method",name:"clone",path:"std::iter",desc:"",parent:'94259'},{ty:"method",name:"into_option",path:"std::iter",desc:"`into_option` creates an `Option` of type `(T,T)`. The returned `Option` has variant\n`None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise variant\n`Some(x,y)` is returned where `x <= y`. If `MinMaxResult` has variant `OneElement(x)`,\nperforming this operation will make one clone of `x`.",parent:'94259'},{ty:"method",name:"clone",path:"std::iter",desc:"",parent:'94779'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'94779'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'94779'},{ty:"method",name:"indexable",path:"std::iter",desc:"",parent:'94779'},{ty:"method",name:"idx",path:"std::iter",desc:"",parent:'94779'},{ty:"method",name:"clone",path:"std::iter",desc:"",parent:'94981'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'94981'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'94981'},{ty:"method",name:"next_back",path:"std::iter",desc:"",parent:'94981'},{ty:"method",name:"indexable",path:"std::iter",desc:"",parent:'94981'},{ty:"method",name:"idx",path:"std::iter",desc:"",parent:'94981'},{ty:"method",name:"clone",path:"std::iter",desc:"",parent:'95273'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'95273'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'95273'},{ty:"method",name:"next_back",path:"std::iter",desc:"",parent:'95273'},{ty:"method",name:"indexable",path:"std::iter",desc:"",parent:'95273'},{ty:"method",name:"idx",path:"std::iter",desc:"",parent:'95273'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'95916'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'95916'},{ty:"method",name:"next_back",path:"std::iter",desc:"",parent:'95916'},{ty:"method",name:"indexable",path:"std::iter",desc:"",parent:'95916'},{ty:"method",name:"idx",path:"std::iter",desc:"",parent:'95916'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'96117'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'96117'},{ty:"method",name:"next_back",path:"std::iter",desc:"",parent:'96117'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'96273'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'96273'},{ty:"method",name:"next_back",path:"std::iter",desc:"",parent:'96273'},{ty:"method",name:"clone",path:"std::iter",desc:"",parent:'96433'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'96433'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'96433'},{ty:"method",name:"next_back",path:"std::iter",desc:"",parent:'96433'},{ty:"method",name:"indexable",path:"std::iter",desc:"",parent:'96433'},{ty:"method",name:"idx",path:"std::iter",desc:"",parent:'96433'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'96735'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'96735'},{ty:"method",name:"peek",path:"std::iter",desc:"Return a reference to the next element of the iterator with out advancing it,\nor None if the iterator is exhausted.",parent:'96735'},{ty:"method",name:"is_empty",path:"std::iter",desc:"Check whether peekable iterator is empty or not.",parent:'96735'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'96896'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'96896'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'97017'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'97017'},{ty:"method",name:"clone",path:"std::iter",desc:"",parent:'97123'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'97123'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'97123'},{ty:"method",name:"indexable",path:"std::iter",desc:"",parent:'97123'},{ty:"method",name:"idx",path:"std::iter",desc:"",parent:'97123'},{ty:"method",name:"clone",path:"std::iter",desc:"",parent:'97349'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'97349'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'97349'},{ty:"method",name:"indexable",path:"std::iter",desc:"",parent:'97349'},{ty:"method",name:"idx",path:"std::iter",desc:"",parent:'97349'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'97534'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'97534'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'97636'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'97636'},{ty:"method",name:"next_back",path:"std::iter",desc:"",parent:'97636'},{ty:"method",name:"clone",path:"std::iter",desc:"",parent:'97960'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'97960'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'97960'},{ty:"method",name:"next_back",path:"std::iter",desc:"",parent:'97960'},{ty:"method",name:"indexable",path:"std::iter",desc:"",parent:'97960'},{ty:"method",name:"idx",path:"std::iter",desc:"",parent:'97960'},{ty:"method",name:"reset_fuse",path:"std::iter",desc:"Resets the fuse such that the next call to .next() or .next_back() will\ncall the underlying iterator again even if it previously returned None.",parent:'97960'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'98170'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'98170'},{ty:"method",name:"next_back",path:"std::iter",desc:"",parent:'98170'},{ty:"method",name:"indexable",path:"std::iter",desc:"",parent:'98170'},{ty:"method",name:"idx",path:"std::iter",desc:"",parent:'98170'},{ty:"method",name:"new",path:"std::iter",desc:"Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the iterator",parent:'98358'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'98358'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'98358'},{ty:"method",name:"clone",path:"std::iter",desc:"",parent:'98463'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'98463'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'98463'},{ty:"method",name:"clone",path:"std::iter",desc:"",parent:'98579'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'98579'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'98579'},{ty:"method",name:"next_back",path:"std::iter",desc:"",parent:'98579'},{ty:"method",name:"clone",path:"std::iter",desc:"",parent:'98858'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'98858'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'98858'},{ty:"method",name:"next_back",path:"std::iter",desc:"",parent:'98858'},{ty:"method",name:"clone",path:"std::iter",desc:"",parent:'99135'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'99135'},{ty:"method",name:"clone",path:"std::iter",desc:"",parent:'99304'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'99304'},{ty:"method",name:"clone",path:"std::iter",desc:"",parent:'99486'},{ty:"method",name:"new",path:"std::iter",desc:"Create a new `Repeat` that endlessly repeats the element `elt`.",parent:'99486'},{ty:"method",name:"next",path:"std::iter",desc:"",parent:'99486'},{ty:"method",name:"size_hint",path:"std::iter",desc:"",parent:'99486'},{ty:"method",name:"next_back",path:"std::iter",desc:"",parent:'99486'},{ty:"method",name:"indexable",path:"std::iter",desc:"",parent:'99486'},{ty:"method",name:"idx",path:"std::iter",desc:"",parent:'99486'},{ty:"mod",name:"to_str",path:"std",desc:"The `ToStr` trait for converting to strings"},{ty:"trait",name:"ToStr",path:"std::to_str",desc:"A generic trait for converting a value to a string"},{ty:"tymethod",name:"to_str",path:"std::to_str",desc:"Converts the value of `self` to an owned string",parent:'100087'},{ty:"trait",name:"IntoStr",path:"std::to_str",desc:"Trait for converting a type to a string, consuming it in the process."},{ty:"tymethod",name:"into_str",path:"std::to_str",desc:"Consume and convert to a string.",parent:'100095'},{ty:"mod",name:"clone",path:"std",desc:"The `Clone` trait for types that cannot be 'implicitly copied'"},{ty:"trait",name:"Clone",path:"std::clone",desc:"A common trait for cloning an object."},{ty:"tymethod",name:"clone",path:"std::clone",desc:"Returns a copy of the value. The contents of owned pointers\nare copied to maintain uniqueness, while the contents of\nmanaged pointers are not copied.",parent:'100170'},{ty:"method",name:"clone_from",path:"std::clone",desc:"Perform copy-assignment from `source`.",parent:'100170'},{ty:"mod",name:"hash",path:"std",desc:"Generic hashing support."},{ty:"mod",name:"sip",path:"std::hash",desc:"Implementation of SipHash 2-4"},{ty:"struct",name:"SipState",path:"std::hash::sip",desc:"`SipState` computes a SipHash 2-4 hash over a stream of bytes."},{ty:"struct",name:"SipHasher",path:"std::hash::sip",desc:"`SipHasher` computes the SipHash algorithm from a stream of bytes."},{ty:"fn",name:"hash",path:"std::hash::sip",desc:"Hash a value using the SipHash algorithm."},{ty:"fn",name:"hash_with_keys",path:"std::hash::sip",desc:"Hash a value with the SipHash algorithm with the provided keys."},{ty:"method",name:"new",path:"std::hash::sip",desc:"Create a `SipState` that is keyed off the provided keys.",parent:'101003'},{ty:"method",name:"new_with_keys",path:"std::hash::sip",desc:"Create a `SipState` that is keyed off the provided keys.",parent:'101003'},{ty:"method",name:"reset",path:"std::hash::sip",desc:"Reset the state back to it's initial state.",parent:'101003'},{ty:"method",name:"result",path:"std::hash::sip",desc:"Return the computed hash.",parent:'101003'},{ty:"method",name:"write",path:"std::hash::sip",desc:"",parent:'101003'},{ty:"method",name:"clone",path:"std::hash::sip",desc:"",parent:'101003'},{ty:"method",name:"default",path:"std::hash::sip",desc:"",parent:'101003'},{ty:"method",name:"clone",path:"std::hash::sip",desc:"",parent:'103137'},{ty:"method",name:"new",path:"std::hash::sip",desc:"Create a `Sip`.",parent:'103137'},{ty:"method",name:"new_with_keys",path:"std::hash::sip",desc:"Create a `Sip` that is keyed off the provided keys.",parent:'103137'},{ty:"method",name:"hash",path:"std::hash::sip",desc:"",parent:'103137'},{ty:"method",name:"default",path:"std::hash::sip",desc:"",parent:'103137'},{ty:"trait",name:"Hash",path:"std::hash",desc:"A trait that represents a hashable type. The `S` type parameter is an\nabstract hash state that is used by the `Hash` to compute the hash.\nIt defaults to `std::hash::sip::SipState`."},{ty:"tymethod",name:"hash",path:"std::hash",desc:"Compute a hash of the value.",parent:'103307'},{ty:"trait",name:"Hasher",path:"std::hash",desc:"A trait that computes a hash for a value. The main users of this trait are\ncontainers like `HashMap`, which need a generic way hash multiple types."},{ty:"tymethod",name:"hash",path:"std::hash",desc:"Compute a hash of the value.",parent:'103321'},{ty:"method",name:"hash",path:"std::vec_ng",desc:"",parent:'57199'},{ty:"method",name:"hash",path:"std::rc",desc:"",parent:'74556'},{ty:"mod",name:"container",path:"std",desc:"Traits for generic containers (including `Map` and `Set`)"},{ty:"trait",name:"Container",path:"std::container",desc:"A trait to represent the abstract idea of a container. The only concrete\nknowledge known is the number of elements contained within."},{ty:"tymethod",name:"len",path:"std::container",desc:"Return the number of elements in the container",parent:'104711'},{ty:"method",name:"is_empty",path:"std::container",desc:"Return true if the container contains no elements",parent:'104711'},{ty:"trait",name:"Mutable",path:"std::container",desc:"A trait to represent mutable containers"},{ty:"tymethod",name:"clear",path:"std::container",desc:"Clear the container, removing all values.",parent:'104729'},{ty:"trait",name:"Map",path:"std::container",desc:"A map is a key-value store where values may be looked up by their keys. This\ntrait provides basic operations to operate on these stores."},{ty:"tymethod",name:"find",path:"std::container",desc:"Return a reference to the value corresponding to the key",parent:'104736'},{ty:"method",name:"contains_key",path:"std::container",desc:"Return true if the map contains a value for the specified key",parent:'104736'},{ty:"trait",name:"MutableMap",path:"std::container",desc:"This trait provides basic operations to modify the contents of a map."},{ty:"method",name:"insert",path:"std::container",desc:"Insert a key-value pair into the map. An existing value for a\nkey is replaced by the new value. Return true if the key did\nnot already exist in the map.",parent:'104773'},{ty:"method",name:"remove",path:"std::container",desc:"Remove a key-value pair from the map. Return true if the key\nwas present in the map, otherwise false.",parent:'104773'},{ty:"tymethod",name:"swap",path:"std::container",desc:"Insert a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise None is returned.",parent:'104773'},{ty:"tymethod",name:"pop",path:"std::container",desc:"Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",parent:'104773'},{ty:"tymethod",name:"find_mut",path:"std::container",desc:"Return a mutable reference to the value corresponding to the key",parent:'104773'},{ty:"trait",name:"Set",path:"std::container",desc:"A set is a group of objects which are each distinct from one another. This\ntrait represents actions which can be performed on sets to iterate over\nthem."},{ty:"tymethod",name:"contains",path:"std::container",desc:"Return true if the set contains a value",parent:'104864'},{ty:"tymethod",name:"is_disjoint",path:"std::container",desc:"Return true if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",parent:'104864'},{ty:"tymethod",name:"is_subset",path:"std::container",desc:"Return true if the set is a subset of another",parent:'104864'},{ty:"tymethod",name:"is_superset",path:"std::container",desc:"Return true if the set is a superset of another",parent:'104864'},{ty:"trait",name:"MutableSet",path:"std::container",desc:"This trait represents actions which can be performed on sets to mutate\nthem."},{ty:"tymethod",name:"insert",path:"std::container",desc:"Add a value to the set. Return true if the value was not already\npresent in the set.",parent:'104911'},{ty:"tymethod",name:"remove",path:"std::container",desc:"Remove a value from the set. Return true if the value was\npresent in the set.",parent:'104911'},{ty:"mod",name:"default",path:"std",desc:"The `Default` trait for types which may have meaningful default values"},{ty:"trait",name:"Default",path:"std::default",desc:"A trait that types which have a useful default value should implement."},{ty:"tymethod",name:"default",path:"std::default",desc:"Return the \"default value\" for a type.",parent:'104939'},{ty:"mod",name:"any",path:"std",desc:"Traits for dynamic typing of any type (through runtime reflection)"},{ty:"enum",name:"Void",path:"std::any",desc:"A type with no inhabitants"},{ty:"trait",name:"Any",path:"std::any",desc:"The `Any` trait is implemented by all types, and can be used as a trait object\nfor dynamic typing"},{ty:"tymethod",name:"get_type_id",path:"std::any",desc:"Get the `TypeId` of `self`",parent:'104990'},{ty:"trait",name:"AnyRefExt",path:"std::any",desc:"Extension methods for a referenced `Any` trait object"},{ty:"tymethod",name:"is",path:"std::any",desc:"Returns true if the boxed type is the same as `T`",parent:'105013'},{ty:"tymethod",name:"as_ref",path:"std::any",desc:"Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",parent:'105013'},{ty:"trait",name:"AnyMutRefExt",path:"std::any",desc:"Extension methods for a mutable referenced `Any` trait object"},{ty:"tymethod",name:"as_mut",path:"std::any",desc:"Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",parent:'105104'},{ty:"trait",name:"AnyOwnExt",path:"std::any",desc:"Extension methods for an owning `Any` trait object"},{ty:"tymethod",name:"move",path:"std::any",desc:"Returns the boxed value if it is of type `T`, or\n`Err(Self)` if it isn't.",parent:'105163'},{ty:"mod",name:"option",path:"std",desc:"Optionally nullable values (`Option` type)"},{ty:"struct",name:"Item",path:"std::option",desc:"An iterator that yields either one or zero elements"},{ty:"enum",name:"Option",path:"std::option",desc:"The option type"},{ty:"variant",name:"None",path:"std::option",desc:"No value",parent:'105285'},{ty:"variant",name:"Some",path:"std::option",desc:"Some value `T`",parent:'105285'},{ty:"fn",name:"collect",path:"std::option",desc:"Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\nvector containing the values of each `Option` is returned."},{ty:"method",name:"fmt",path:"std::option",desc:"",parent:'105285'},{ty:"method",name:"cmp",path:"std::option",desc:"",parent:'105285'},{ty:"method",name:"equals",path:"std::option",desc:"",parent:'105285'},{ty:"method",name:"lt",path:"std::option",desc:"",parent:'105285'},{ty:"method",name:"le",path:"std::option",desc:"",parent:'105285'},{ty:"method",name:"gt",path:"std::option",desc:"",parent:'105285'},{ty:"method",name:"ge",path:"std::option",desc:"",parent:'105285'},{ty:"method",name:"eq",path:"std::option",desc:"",parent:'105285'},{ty:"method",name:"ne",path:"std::option",desc:"",parent:'105285'},{ty:"method",name:"clone",path:"std::option",desc:"",parent:'105285'},{ty:"method",name:"is_some",path:"std::option",desc:"Returns true if the option contains a `Some` value",parent:'105285'},{ty:"method",name:"is_none",path:"std::option",desc:"Returns true if the option equals `None`",parent:'105285'},{ty:"method",name:"as_ref",path:"std::option",desc:"Convert from `Option<T>` to `Option<&T>`",parent:'105285'},{ty:"method",name:"as_mut",path:"std::option",desc:"Convert from `Option<T>` to `Option<&mut T>`",parent:'105285'},{ty:"method",name:"as_slice",path:"std::option",desc:"Convert from `Option<T>` to `&[T]` (without copying)",parent:'105285'},{ty:"method",name:"as_mut_slice",path:"std::option",desc:"Convert from `Option<T>` to `&mut [T]` (without copying)",parent:'105285'},{ty:"method",name:"expect",path:"std::option",desc:"Unwraps an option, yielding the content of a `Some`\nFails if the value is a `None` with a custom failure message provided by `msg`.",parent:'105285'},{ty:"method",name:"unwrap",path:"std::option",desc:"Moves a value out of an option type and returns it.",parent:'105285'},{ty:"method",name:"unwrap_or",path:"std::option",desc:"Returns the contained value or a default.",parent:'105285'},{ty:"method",name:"unwrap_or_else",path:"std::option",desc:"Returns the contained value or computes it from a closure.",parent:'105285'},{ty:"method",name:"map",path:"std::option",desc:"Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",parent:'105285'},{ty:"method",name:"map_or",path:"std::option",desc:"Applies a function to the contained value or returns a default.",parent:'105285'},{ty:"method",name:"mutate",path:"std::option",desc:"Applies a function to the contained value or does nothing.\nReturns true if the contained value was mutated.",parent:'105285'},{ty:"method",name:"mutate_or_set",path:"std::option",desc:"Applies a function to the contained value or sets it to a default.\nReturns true if the contained value was mutated, or false if set to the default.",parent:'105285'},{ty:"method",name:"iter",path:"std::option",desc:"Returns an iterator over the possibly contained value.",parent:'105285'},{ty:"method",name:"mut_iter",path:"std::option",desc:"Returns a mutable iterator over the possibly contained value.",parent:'105285'},{ty:"method",name:"move_iter",path:"std::option",desc:"Returns a consuming iterator over the possibly contained value.",parent:'105285'},{ty:"method",name:"and",path:"std::option",desc:"Returns `None` if the option is `None`, otherwise returns `optb`.",parent:'105285'},{ty:"method",name:"and_then",path:"std::option",desc:"Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",parent:'105285'},{ty:"method",name:"or",path:"std::option",desc:"Returns the option if it contains a value, otherwise returns `optb`.",parent:'105285'},{ty:"method",name:"or_else",path:"std::option",desc:"Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",parent:'105285'},{ty:"method",name:"take",path:"std::option",desc:"Takes the value out of the option, leaving a `None` in its place.",parent:'105285'},{ty:"method",name:"filtered",path:"std::option",desc:"Filters an optional value using a given function.",parent:'105285'},{ty:"method",name:"while_some",path:"std::option",desc:"Applies a function zero or more times until the result is `None`.",parent:'105285'},{ty:"method",name:"take_unwrap",path:"std::option",desc:"The option dance. Moves a value out of an option type and returns it,\nreplacing the original with `None`.",parent:'105285'},{ty:"method",name:"get_ref",path:"std::option",desc:"Gets an immutable reference to the value inside an option.",parent:'105285'},{ty:"method",name:"get_mut_ref",path:"std::option",desc:"Gets a mutable reference to the value inside an option.",parent:'105285'},{ty:"method",name:"unwrap_or_default",path:"std::option",desc:"Returns the contained value or default (for this type)",parent:'105285'},{ty:"method",name:"default",path:"std::option",desc:"",parent:'105285'},{ty:"method",name:"clone",path:"std::option",desc:"",parent:'106568'},{ty:"method",name:"next",path:"std::option",desc:"",parent:'106568'},{ty:"method",name:"size_hint",path:"std::option",desc:"",parent:'106568'},{ty:"method",name:"next_back",path:"std::option",desc:"",parent:'106568'},{ty:"mod",name:"result",path:"std",desc:"Signaling success or failure states (`Result` type)"},{ty:"enum",name:"Result",path:"std::result",desc:"`Result` is a type that represents either success (`Ok`) or failure (`Err`)."},{ty:"variant",name:"Ok",path:"std::result",desc:"Contains the success value",parent:'106765'},{ty:"variant",name:"Err",path:"std::result",desc:"Contains the error value",parent:'106765'},{ty:"fn",name:"collect",path:"std::result",desc:"Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\nvector containing the values of each `Result` is returned."},{ty:"fn",name:"fold",path:"std::result",desc:"Perform a fold operation over the result values from an iterator."},{ty:"fn",name:"fold_",path:"std::result",desc:"Perform a trivial fold operation over the result values\nfrom an iterator."},{ty:"method",name:"fmt",path:"std::result",desc:"",parent:'106765'},{ty:"method",name:"cmp",path:"std::result",desc:"",parent:'106765'},{ty:"method",name:"equals",path:"std::result",desc:"",parent:'106765'},{ty:"method",name:"lt",path:"std::result",desc:"",parent:'106765'},{ty:"method",name:"le",path:"std::result",desc:"",parent:'106765'},{ty:"method",name:"gt",path:"std::result",desc:"",parent:'106765'},{ty:"method",name:"ge",path:"std::result",desc:"",parent:'106765'},{ty:"method",name:"eq",path:"std::result",desc:"",parent:'106765'},{ty:"method",name:"ne",path:"std::result",desc:"",parent:'106765'},{ty:"method",name:"clone",path:"std::result",desc:"",parent:'106765'},{ty:"method",name:"is_ok",path:"std::result",desc:"Returns true if the result is `Ok`",parent:'106765'},{ty:"method",name:"is_err",path:"std::result",desc:"Returns true if the result is `Err`",parent:'106765'},{ty:"method",name:"ok",path:"std::result",desc:"Convert from `Result<T, E>` to `Option<T>`",parent:'106765'},{ty:"method",name:"err",path:"std::result",desc:"Convert from `Result<T, E>` to `Option<E>`",parent:'106765'},{ty:"method",name:"as_ref",path:"std::result",desc:"Convert from `Result<T, E>` to `Result<&T, &E>`",parent:'106765'},{ty:"method",name:"as_mut",path:"std::result",desc:"Convert from `Result<T, E>` to `Result<&mut T, &mut E>`",parent:'106765'},{ty:"method",name:"map",path:"std::result",desc:"Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",parent:'106765'},{ty:"method",name:"map_err",path:"std::result",desc:"Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",parent:'106765'},{ty:"method",name:"and",path:"std::result",desc:"Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",parent:'106765'},{ty:"method",name:"and_then",path:"std::result",desc:"Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",parent:'106765'},{ty:"method",name:"or",path:"std::result",desc:"Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",parent:'106765'},{ty:"method",name:"or_else",path:"std::result",desc:"Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",parent:'106765'},{ty:"method",name:"unwrap",path:"std::result",desc:"Unwraps a result, yielding the content of an `Ok`.\nFails if the value is an `Err`.",parent:'106765'},{ty:"method",name:"unwrap_err",path:"std::result",desc:"Unwraps a result, yielding the content of an `Err`.\nFails if the value is an `Ok`.",parent:'106765'},{ty:"mod",name:"cell",path:"std",desc:"Types dealing with dynamic mutability"},{ty:"struct",name:"Cell",path:"std::cell",desc:"A mutable memory location that admits only `Pod` data."},{ty:"struct",name:"RefCell",path:"std::cell",desc:"A mutable memory location with dynamically checked borrow rules"},{ty:"struct",name:"Ref",path:"std::cell",desc:"Wraps a borrowed reference to a value in a `RefCell` box."},{ty:"struct",name:"RefMut",path:"std::cell",desc:"Wraps a mutable borrowed reference to a value in a `RefCell` box."},{ty:"method",name:"new",path:"std::cell",desc:"Creates a new `Cell` containing the given value.",parent:'108173'},{ty:"method",name:"get",path:"std::cell",desc:"Returns a copy of the contained value.",parent:'108173'},{ty:"method",name:"set",path:"std::cell",desc:"Sets the contained value.",parent:'108173'},{ty:"method",name:"clone",path:"std::cell",desc:"",parent:'108173'},{ty:"method",name:"eq",path:"std::cell",desc:"",parent:'108173'},{ty:"method",name:"fmt",path:"std::cell",desc:"",parent:'108173'},{ty:"method",name:"new",path:"std::cell",desc:"Create a new `RefCell` containing `value`",parent:'108392'},{ty:"method",name:"unwrap",path:"std::cell",desc:"Consumes the `RefCell`, returning the wrapped value.",parent:'108392'},{ty:"method",name:"try_borrow",path:"std::cell",desc:"Attempts to immutably borrow the wrapped value.",parent:'108392'},{ty:"method",name:"borrow",path:"std::cell",desc:"Immutably borrows the wrapped value.",parent:'108392'},{ty:"method",name:"try_borrow_mut",path:"std::cell",desc:"Mutably borrows the wrapped value.",parent:'108392'},{ty:"method",name:"borrow_mut",path:"std::cell",desc:"Mutably borrows the wrapped value.",parent:'108392'},{ty:"method",name:"with",path:"std::cell",desc:"Immutably borrows the wrapped value and applies `blk` to it.",parent:'108392'},{ty:"method",name:"with_mut",path:"std::cell",desc:"Mutably borrows the wrapped value and applies `blk` to it.",parent:'108392'},{ty:"method",name:"set",path:"std::cell",desc:"Sets the value, replacing what was there.",parent:'108392'},{ty:"method",name:"get",path:"std::cell",desc:"Returns a copy of the contained value.",parent:'108392'},{ty:"method",name:"clone",path:"std::cell",desc:"",parent:'108392'},{ty:"method",name:"eq",path:"std::cell",desc:"",parent:'108392'},{ty:"method",name:"drop",path:"std::cell",desc:"",parent:'108839'},{ty:"method",name:"get",path:"std::cell",desc:"Retrieve an immutable reference to the stored value.",parent:'108839'},{ty:"method",name:"deref",path:"std::cell",desc:"",parent:'108839'},{ty:"method",name:"drop",path:"std::cell",desc:"",parent:'109007'},{ty:"method",name:"get",path:"std::cell",desc:"Retrieve a mutable reference to the stored value.",parent:'109007'},{ty:"method",name:"deref",path:"std::cell",desc:"",parent:'109007'},{ty:"method",name:"deref_mut",path:"std::cell",desc:"",parent:'109007'},{ty:"mod",name:"task",path:"std",desc:"Utilities for managing and scheduling tasks"},{ty:"struct",name:"TaskOpts",path:"std::task",desc:"Task configuration options"},{ty:"structfield",name:"notify_chan",path:"std::task",desc:"Enable lifecycle notifications on the given channel",parent:'109223'},{ty:"structfield",name:"name",path:"std::task",desc:"A name for the task-to-be, for identification in failure messages",parent:'109223'},{ty:"structfield",name:"stack_size",path:"std::task",desc:"The size of the stack for the spawned task",parent:'109223'},{ty:"structfield",name:"stdout",path:"std::task",desc:"Task-local stdout",parent:'109223'},{ty:"structfield",name:"stderr",path:"std::task",desc:"Task-local stderr",parent:'109223'},{ty:"struct",name:"TaskBuilder",path:"std::task",desc:"The task builder type."},{ty:"structfield",name:"opts",path:"std::task",desc:"Options to spawn the new task with",parent:'109253'},{ty:"fn",name:"task",path:"std::task",desc:"Generate the base configuration for spawning a task, off of which more\nconfiguration methods can be chained."},{ty:"fn",name:"spawn",path:"std::task",desc:"Creates and executes a new child task"},{ty:"fn",name:"try",path:"std::task",desc:"Execute a function in another task and return either the return value\nof the function or result::err."},{ty:"fn",name:"with_task_name",path:"std::task",desc:"Read the name of the current task."},{ty:"fn",name:"deschedule",path:"std::task",desc:"Yield control to the task scheduler"},{ty:"fn",name:"failing",path:"std::task",desc:"True if the running task has failed"},{ty:"typedef",name:"TaskResult",path:"std::task",desc:"Indicates the manner in which a task exited."},{ty:"method",name:"future_result",path:"std::task",desc:"Get a future representing the exit status of the task.",parent:'109253'},{ty:"method",name:"named",path:"std::task",desc:"Name the task-to-be. Currently the name is used for identification\nonly in failure messages.",parent:'109253'},{ty:"method",name:"with_wrapper",path:"std::task",desc:"Add a wrapper to the body of the spawned task.",parent:'109253'},{ty:"method",name:"spawn",path:"std::task",desc:"Creates and executes a new child task",parent:'109253'},{ty:"method",name:"try",path:"std::task",desc:"Execute a function in another task and return either the return value\nof the function or result::err.",parent:'109253'},{ty:"method",name:"new",path:"std::task",desc:"The default task options",parent:'109223'},{ty:"mod",name:"comm",path:"std",desc:"Communication primitives for concurrent tasks"},{ty:"struct",name:"Select",path:"std::comm",desc:"The \"receiver set\" of the select interface. This structure is used to manage\na set of receivers which are being selected over."},{ty:"struct",name:"Handle",path:"std::comm",desc:"A handle to a receiver which is currently a member of a `Select` set of\nreceivers.  This handle is used to keep the receiver in the set as well as\ninteract with the underlying receiver."},{ty:"struct",name:"Receiver",path:"std::comm",desc:"The receiving-half of Rust's channel type. This half can only be owned by\none task"},{ty:"struct",name:"Messages",path:"std::comm",desc:"An iterator over messages on a receiver, this iterator will block\nwhenever `next` is called, waiting for a new message, and `None` will be\nreturned when the corresponding channel has hung up."},{ty:"struct",name:"Sender",path:"std::comm",desc:"The sending-half of Rust's channel type. This half can only be owned by one\ntask"},{ty:"enum",name:"TryRecvResult",path:"std::comm",desc:"This enumeration is the list of the possible reasons that try_recv could not\nreturn data when called."},{ty:"variant",name:"Empty",path:"std::comm",desc:"This channel is currently empty, but the sender(s) have not yet\ndisconnected, so data may yet become available.",parent:'117053'},{ty:"variant",name:"Disconnected",path:"std::comm",desc:"This channel's sending half has become disconnected, and there will\nnever be any more data received on this channel",parent:'117053'},{ty:"variant",name:"Data",path:"std::comm",desc:"The channel had some data and we successfully popped it",parent:'117053'},{ty:"fn",name:"channel",path:"std::comm",desc:"Creates a new channel, returning the sender/receiver halves. All data sent\non the sender will become available on the receiver. See the documentation\nof `Receiver` and `Sender` to see what's possible with them."},{ty:"method",name:"fmt",path:"std::comm",desc:"",parent:'117053'},{ty:"method",name:"clone",path:"std::comm",desc:"",parent:'117053'},{ty:"method",name:"eq",path:"std::comm",desc:"",parent:'117053'},{ty:"method",name:"ne",path:"std::comm",desc:"",parent:'117053'},{ty:"method",name:"send",path:"std::comm",desc:"Sends a value along this channel to be received by the corresponding\nreceiver.",parent:'117038'},{ty:"method",name:"try_send",path:"std::comm",desc:"Attempts to send a value on this channel, returning whether it was\nsuccessfully sent.",parent:'117038'},{ty:"method",name:"clone",path:"std::comm",desc:"",parent:'117038'},{ty:"method",name:"drop",path:"std::comm",desc:"",parent:'117038'},{ty:"method",name:"recv",path:"std::comm",desc:"Blocks waiting for a value on this receiver",parent:'117013'},{ty:"method",name:"try_recv",path:"std::comm",desc:"Attempts to return a pending value on this receiver without blocking",parent:'117013'},{ty:"method",name:"recv_opt",path:"std::comm",desc:"Attempt to wait for a value on this receiver, but does not fail if the\ncorresponding channel has hung up.",parent:'117013'},{ty:"method",name:"iter",path:"std::comm",desc:"Returns an iterator which will block waiting for messages, but never\n`fail!`. It will return `None` when the channel has hung up.",parent:'117013'},{ty:"method",name:"next",path:"std::comm",desc:"",parent:'117028'},{ty:"method",name:"drop",path:"std::comm",desc:"",parent:'117013'},{ty:"mod",name:"local_data",path:"std",desc:"Task local data management"},{ty:"enum",name:"KeyValue",path:"std::local_data",desc:""},{ty:"variant",name:"Key",path:"std::local_data",desc:"",parent:'118645'},{ty:"fn",name:"pop",path:"std::local_data",desc:"Removes a task-local value from task-local storage. This will return\nSome(value) if the key was present in TLS, otherwise it will return None."},{ty:"fn",name:"get",path:"std::local_data",desc:"Retrieves a value from TLS. The closure provided is yielded `Some` of a\nreference to the value located in TLS if one exists, or `None` if the key\nprovided is not present in TLS currently."},{ty:"fn",name:"get_mut",path:"std::local_data",desc:"Retrieves a mutable value from TLS. The closure provided is yielded `Some`\nof a reference to the mutable value located in TLS if one exists, or `None`\nif the key provided is not present in TLS currently."},{ty:"fn",name:"set",path:"std::local_data",desc:"Inserts a value into task local storage. If the key is already present in\nTLS, then the previous value is removed and replaced with the provided data."},{ty:"fn",name:"modify",path:"std::local_data",desc:"Modifies a task-local value by temporarily removing it from task-local\nstorage and then re-inserting if `Some` is returned from the closure."},{ty:"typedef",name:"Key",path:"std::local_data",desc:"Indexes a task-local data slot. This pointer is used for comparison to\ndifferentiate keys from one another. The actual type `T` is not used anywhere\nas a member of this type, except that it is parameterized with it to define\nthe type of each key's value."},{ty:"trait",name:"LocalData",path:"std::local_data",desc:""},{ty:"mod",name:"sync",path:"std",desc:"Useful synchronization primitives"},{ty:"mod",name:"arc",path:"std::sync",desc:"Atomically reference counted data"},{ty:"struct",name:"UnsafeArc",path:"std::sync::arc",desc:"An atomically reference counted pointer."},{ty:"method",name:"new",path:"std::sync::arc",desc:"Creates a new `UnsafeArc` which wraps the given data.",parent:'119702'},{ty:"method",name:"new2",path:"std::sync::arc",desc:"As new(), but returns an extra pre-cloned handle.",parent:'119702'},{ty:"method",name:"newN",path:"std::sync::arc",desc:"As new(), but returns a vector of as many pre-cloned handles as\nrequested.",parent:'119702'},{ty:"method",name:"get",path:"std::sync::arc",desc:"Gets a pointer to the inner shared data. Note that care must be taken to\nensure that the outer `UnsafeArc` does not fall out of scope while this\npointer is in use, otherwise it could possibly contain a use-after-free.",parent:'119702'},{ty:"method",name:"get_immut",path:"std::sync::arc",desc:"Gets an immutable pointer to the inner shared data. This has the same\ncaveats as the `get` method.",parent:'119702'},{ty:"method",name:"is_owned",path:"std::sync::arc",desc:"checks if this is the only reference to the arc protected data",parent:'119702'},{ty:"method",name:"clone",path:"std::sync::arc",desc:"",parent:'119702'},{ty:"method",name:"drop",path:"std::sync::arc",desc:"",parent:'119702'},{ty:"mod",name:"atomics",path:"std::sync",desc:"Atomic types"},{ty:"struct",name:"AtomicBool",path:"std::sync::atomics",desc:"An atomic boolean type."},{ty:"struct",name:"AtomicInt",path:"std::sync::atomics",desc:"A signed atomic integer type, supporting basic atomic arithmetic operations"},{ty:"struct",name:"AtomicUint",path:"std::sync::atomics",desc:"An unsigned atomic integer type, supporting basic atomic arithmetic operations"},{ty:"struct",name:"AtomicU64",path:"std::sync::atomics",desc:"An unsigned atomic integer type that is forced to be 64-bits. This does not\nsupport all operations."},{ty:"struct",name:"AtomicPtr",path:"std::sync::atomics",desc:"An unsafe atomic pointer. Only supports basic atomic operations"},{ty:"struct",name:"AtomicOption",path:"std::sync::atomics",desc:"An atomic, nullable unique pointer"},{ty:"enum",name:"Ordering",path:"std::sync::atomics",desc:"Atomic memory orderings"},{ty:"variant",name:"Relaxed",path:"std::sync::atomics",desc:"No ordering constraints, only atomic operations",parent:'120387'},{ty:"variant",name:"Release",path:"std::sync::atomics",desc:"When coupled with a store, all previous writes become visible\nto another thread that performs a load with `Acquire` ordering\non the same value",parent:'120387'},{ty:"variant",name:"Acquire",path:"std::sync::atomics",desc:"When coupled with a load, all subsequent loads will see data\nwritten before a store with `Release` ordering on the same value\nin another thread",parent:'120387'},{ty:"variant",name:"AcqRel",path:"std::sync::atomics",desc:"When coupled with a load, uses `Acquire` ordering, and with a store\n`Release` ordering",parent:'120387'},{ty:"variant",name:"SeqCst",path:"std::sync::atomics",desc:"Like `AcqRel` with the additional guarantee that all threads see all\nsequentially consistent operations in the same order.",parent:'120387'},{ty:"fn",name:"atomic_store",path:"std::sync::atomics",desc:""},{ty:"fn",name:"atomic_load",path:"std::sync::atomics",desc:""},{ty:"fn",name:"atomic_swap",path:"std::sync::atomics",desc:""},{ty:"fn",name:"atomic_add",path:"std::sync::atomics",desc:"Returns the old value (like __sync_fetch_and_add)."},{ty:"fn",name:"atomic_sub",path:"std::sync::atomics",desc:"Returns the old value (like __sync_fetch_and_sub)."},{ty:"fn",name:"atomic_compare_and_swap",path:"std::sync::atomics",desc:""},{ty:"fn",name:"atomic_and",path:"std::sync::atomics",desc:""},{ty:"fn",name:"atomic_nand",path:"std::sync::atomics",desc:""},{ty:"fn",name:"atomic_or",path:"std::sync::atomics",desc:""},{ty:"fn",name:"atomic_xor",path:"std::sync::atomics",desc:""},{ty:"fn",name:"fence",path:"std::sync::atomics",desc:"An atomic fence."},{ty:"static",name:"INIT_ATOMIC_BOOL",path:"std::sync::atomics",desc:"An `AtomicBool` initialized to `false`"},{ty:"static",name:"INIT_ATOMIC_INT",path:"std::sync::atomics",desc:"An `AtomicInt` initialized to `0`"},{ty:"static",name:"INIT_ATOMIC_UINT",path:"std::sync::atomics",desc:"An `AtomicUint` initialized to `0`"},{ty:"static",name:"INIT_ATOMIC_U64",path:"std::sync::atomics",desc:"An `AtomicU64` initialized to `0`"},{ty:"method",name:"new",path:"std::sync::atomics",desc:"Create a new `AtomicBool`",parent:'120346'},{ty:"method",name:"load",path:"std::sync::atomics",desc:"Load the value",parent:'120346'},{ty:"method",name:"store",path:"std::sync::atomics",desc:"Store the value",parent:'120346'},{ty:"method",name:"swap",path:"std::sync::atomics",desc:"Store a value, returning the old value",parent:'120346'},{ty:"method",name:"compare_and_swap",path:"std::sync::atomics",desc:"If the current value is the same as expected, store a new value",parent:'120346'},{ty:"method",name:"fetch_and",path:"std::sync::atomics",desc:"A logical \"and\" operation",parent:'120346'},{ty:"method",name:"fetch_nand",path:"std::sync::atomics",desc:"A logical \"nand\" operation",parent:'120346'},{ty:"method",name:"fetch_or",path:"std::sync::atomics",desc:"A logical \"or\" operation",parent:'120346'},{ty:"method",name:"fetch_xor",path:"std::sync::atomics",desc:"A logical \"xor\" operation",parent:'120346'},{ty:"method",name:"new",path:"std::sync::atomics",desc:"Create a new `AtomicInt`",parent:'120353'},{ty:"method",name:"load",path:"std::sync::atomics",desc:"Load the value",parent:'120353'},{ty:"method",name:"store",path:"std::sync::atomics",desc:"Store the value",parent:'120353'},{ty:"method",name:"swap",path:"std::sync::atomics",desc:"Store a value, returning the old value",parent:'120353'},{ty:"method",name:"compare_and_swap",path:"std::sync::atomics",desc:"If the current value is the same as expected, store a new value",parent:'120353'},{ty:"method",name:"fetch_add",path:"std::sync::atomics",desc:"Add to the current value, returning the previous",parent:'120353'},{ty:"method",name:"fetch_sub",path:"std::sync::atomics",desc:"Subtract from the current value, returning the previous",parent:'120353'},{ty:"method",name:"new",path:"std::sync::atomics",desc:"",parent:'120367'},{ty:"method",name:"load",path:"std::sync::atomics",desc:"",parent:'120367'},{ty:"method",name:"store",path:"std::sync::atomics",desc:"",parent:'120367'},{ty:"method",name:"swap",path:"std::sync::atomics",desc:"",parent:'120367'},{ty:"method",name:"compare_and_swap",path:"std::sync::atomics",desc:"",parent:'120367'},{ty:"method",name:"fetch_add",path:"std::sync::atomics",desc:"",parent:'120367'},{ty:"method",name:"fetch_sub",path:"std::sync::atomics",desc:"",parent:'120367'},{ty:"method",name:"new",path:"std::sync::atomics",desc:"Create a new `AtomicUint`",parent:'120360'},{ty:"method",name:"load",path:"std::sync::atomics",desc:"Load the value",parent:'120360'},{ty:"method",name:"store",path:"std::sync::atomics",desc:"Store the value",parent:'120360'},{ty:"method",name:"swap",path:"std::sync::atomics",desc:"Store a value, returning the old value",parent:'120360'},{ty:"method",name:"compare_and_swap",path:"std::sync::atomics",desc:"If the current value is the same as expected, store a new value",parent:'120360'},{ty:"method",name:"fetch_add",path:"std::sync::atomics",desc:"Add to the current value, returning the previous",parent:'120360'},{ty:"method",name:"fetch_sub",path:"std::sync::atomics",desc:"Subtract from the current value, returning the previous",parent:'120360'},{ty:"method",name:"new",path:"std::sync::atomics",desc:"Create a new `AtomicPtr`",parent:'120374'},{ty:"method",name:"load",path:"std::sync::atomics",desc:"Load the value",parent:'120374'},{ty:"method",name:"store",path:"std::sync::atomics",desc:"Store the value",parent:'120374'},{ty:"method",name:"swap",path:"std::sync::atomics",desc:"Store a value, returning the old value",parent:'120374'},{ty:"method",name:"compare_and_swap",path:"std::sync::atomics",desc:"If the current value is the same as expected, store a new value",parent:'120374'},{ty:"method",name:"new",path:"std::sync::atomics",desc:"Create a new `AtomicOption`",parent:'120382'},{ty:"method",name:"empty",path:"std::sync::atomics",desc:"Create a new `AtomicOption` that doesn't contain a value",parent:'120382'},{ty:"method",name:"swap",path:"std::sync::atomics",desc:"Store a value, returning the old value",parent:'120382'},{ty:"method",name:"take",path:"std::sync::atomics",desc:"Remove the value, leaving the `AtomicOption` empty.",parent:'120382'},{ty:"method",name:"fill",path:"std::sync::atomics",desc:"Replace an empty value with a non-empty value.",parent:'120382'},{ty:"method",name:"is_empty",path:"std::sync::atomics",desc:"Returns `true` if the `AtomicOption` is empty.",parent:'120382'},{ty:"method",name:"drop",path:"std::sync::atomics",desc:"",parent:'120382'},{ty:"mod",name:"deque",path:"std::sync",desc:"A (mostly) lock-free concurrent work-stealing deque"},{ty:"struct",name:"Worker",path:"std::sync::deque",desc:"Worker half of the work-stealing deque. This worker has exclusive access to\none side of the deque, and uses `push` and `pop` method to manipulate it."},{ty:"struct",name:"Stealer",path:"std::sync::deque",desc:"The stealing half of the work-stealing deque. Stealers have access to the\nopposite end of the deque from the worker, and they only have access to the\n`steal` method."},{ty:"struct",name:"BufferPool",path:"std::sync::deque",desc:"The allocation pool for buffers used by work-stealing deques. Right now this\nstructure is used for reclamation of memory after it is no longer in use by\ndeques."},{ty:"enum",name:"Stolen",path:"std::sync::deque",desc:"When stealing some data, this is an enumeration of the possible outcomes."},{ty:"variant",name:"Empty",path:"std::sync::deque",desc:"The deque was empty at the time of stealing",parent:'122103'},{ty:"variant",name:"Abort",path:"std::sync::deque",desc:"The stealer lost the race for stealing data, and a retry may return more\ndata.",parent:'122103'},{ty:"variant",name:"Data",path:"std::sync::deque",desc:"The stealer has successfully stolen some data.",parent:'122103'},{ty:"method",name:"fmt",path:"std::sync::deque",desc:"",parent:'122103'},{ty:"method",name:"eq",path:"std::sync::deque",desc:"",parent:'122103'},{ty:"method",name:"ne",path:"std::sync::deque",desc:"",parent:'122103'},{ty:"method",name:"new",path:"std::sync::deque",desc:"Allocates a new buffer pool which in turn can be used to allocate new\ndeques.",parent:'122411'},{ty:"method",name:"deque",path:"std::sync::deque",desc:"Allocates a new work-stealing deque which will send/receiving memory to\nand from this buffer pool.",parent:'122411'},{ty:"method",name:"clone",path:"std::sync::deque",desc:"",parent:'122411'},{ty:"method",name:"push",path:"std::sync::deque",desc:"Pushes data onto the front of this work queue.",parent:'122085'},{ty:"method",name:"pop",path:"std::sync::deque",desc:"Pops data off the front of the work queue, returning `None` on an empty\nqueue.",parent:'122085'},{ty:"method",name:"pool",path:"std::sync::deque",desc:"Gets access to the buffer pool that this worker is attached to. This can\nbe used to create more deques which share the same buffer pool as this\ndeque.",parent:'122085'},{ty:"method",name:"steal",path:"std::sync::deque",desc:"Steals work off the end of the queue (opposite of the worker's end)",parent:'122094'},{ty:"method",name:"pool",path:"std::sync::deque",desc:"Gets access to the buffer pool that this stealer is attached to. This\ncan be used to create more deques which share the same buffer pool as\nthis deque.",parent:'122094'},{ty:"method",name:"clone",path:"std::sync::deque",desc:"",parent:'122094'},{ty:"mod",name:"mpmc_bounded_queue",path:"std::sync",desc:""},{ty:"struct",name:"Queue",path:"std::sync::mpmc_bounded_queue",desc:""},{ty:"method",name:"with_capacity",path:"std::sync::mpmc_bounded_queue",desc:"",parent:'123724'},{ty:"method",name:"push",path:"std::sync::mpmc_bounded_queue",desc:"",parent:'123724'},{ty:"method",name:"pop",path:"std::sync::mpmc_bounded_queue",desc:"",parent:'123724'},{ty:"method",name:"clone",path:"std::sync::mpmc_bounded_queue",desc:"",parent:'123724'},{ty:"mod",name:"mpsc_queue",path:"std::sync",desc:"A mostly lock-free multi-producer, single consumer queue."},{ty:"struct",name:"Queue",path:"std::sync::mpsc_queue",desc:"The multi-producer single-consumer structure. This is not cloneable, but it\nmay be safely shared so long as it is guaranteed that there is only one\npopper at a time (many pushers are allowed)."},{ty:"enum",name:"PopResult",path:"std::sync::mpsc_queue",desc:"A result of the `pop` function."},{ty:"variant",name:"Data",path:"std::sync::mpsc_queue",desc:"Some data has been popped",parent:'124169'},{ty:"variant",name:"Empty",path:"std::sync::mpsc_queue",desc:"The queue is empty",parent:'124169'},{ty:"variant",name:"Inconsistent",path:"std::sync::mpsc_queue",desc:"The queue is in an inconsistent state. Popping data should succeed, but\nsome pushers have yet to make enough progress in order allow a pop to\nsucceed. It is recommended that a pop() occur \"in the near future\" in\norder to see if the sender has made progress or not",parent:'124169'},{ty:"method",name:"new",path:"std::sync::mpsc_queue",desc:"Creates a new queue that is safe to share among multiple producers and\none consumer.",parent:'124191'},{ty:"method",name:"push",path:"std::sync::mpsc_queue",desc:"Pushes a new value onto this queue.",parent:'124191'},{ty:"method",name:"pop",path:"std::sync::mpsc_queue",desc:"Pops some data from this queue.",parent:'124191'},{ty:"method",name:"casual_pop",path:"std::sync::mpsc_queue",desc:"Attempts to pop data from this queue, but doesn't attempt too hard. This\nwill canonicalize inconsistent states to a `None` value.",parent:'124191'},{ty:"method",name:"drop",path:"std::sync::mpsc_queue",desc:"",parent:'124191'},{ty:"mod",name:"spsc_queue",path:"std::sync",desc:"A single-producer single-consumer concurrent queue"},{ty:"struct",name:"Queue",path:"std::sync::spsc_queue",desc:"The single-producer single-consumer queue. This structure is not cloneable,\nbut it can be safely shared in an UnsafeArc if it is guaranteed that there\nis only one popper and one pusher touching the queue at any one point in\ntime."},{ty:"method",name:"new",path:"std::sync::spsc_queue",desc:"Creates a new queue. The producer returned is connected to the consumer\nto push all data to the consumer.",parent:'124638'},{ty:"method",name:"push",path:"std::sync::spsc_queue",desc:"Pushes a new value onto this queue. Note that to use this function\nsafely, it must be externally guaranteed that there is only one pusher.",parent:'124638'},{ty:"method",name:"pop",path:"std::sync::spsc_queue",desc:"Attempts to pop a value from this queue. Remember that to use this type\nsafely you must ensure that there is only one popper at a time.",parent:'124638'},{ty:"method",name:"peek",path:"std::sync::spsc_queue",desc:"Attempts to peek at the head of the queue, returning `None` if the queue\nhas no data currently",parent:'124638'},{ty:"method",name:"drop",path:"std::sync::spsc_queue",desc:"",parent:'124638'},{ty:"mod",name:"libc",path:"std",desc:"Bindings for the C standard library and other platform libraries"},{ty:"mod",name:"types",path:"std::libc",desc:""},{ty:"mod",name:"common",path:"std::libc::types",desc:""},{ty:"mod",name:"c95",path:"std::libc::types::common",desc:""},{ty:"enum",name:"c_void",path:"std::libc::types::common::c95",desc:"Type used to construct void pointers for use with C."},{ty:"enum",name:"FILE",path:"std::libc::types::common::c95",desc:""},{ty:"enum",name:"fpos_t",path:"std::libc::types::common::c95",desc:""},{ty:"mod",name:"c99",path:"std::libc::types::common",desc:""},{ty:"typedef",name:"int8_t",path:"std::libc::types::common::c99",desc:""},{ty:"typedef",name:"int16_t",path:"std::libc::types::common::c99",desc:""},{ty:"typedef",name:"int32_t",path:"std::libc::types::common::c99",desc:""},{ty:"typedef",name:"int64_t",path:"std::libc::types::common::c99",desc:""},{ty:"typedef",name:"uint8_t",path:"std::libc::types::common::c99",desc:""},{ty:"typedef",name:"uint16_t",path:"std::libc::types::common::c99",desc:""},{ty:"typedef",name:"uint32_t",path:"std::libc::types::common::c99",desc:""},{ty:"typedef",name:"uint64_t",path:"std::libc::types::common::c99",desc:""},{ty:"mod",name:"posix88",path:"std::libc::types::common",desc:""},{ty:"enum",name:"DIR",path:"std::libc::types::common::posix88",desc:""},{ty:"enum",name:"dirent_t",path:"std::libc::types::common::posix88",desc:""},{ty:"mod",name:"os",path:"std::libc::types",desc:""},{ty:"mod",name:"common",path:"std::libc::types::os",desc:""},{ty:"mod",name:"posix01",path:"std::libc::types::os::common",desc:""},{ty:"struct",name:"stat",path:"std::libc::types::os::common::posix01",desc:""},{ty:"structfield",name:"st_dev",path:"std::libc::types::os::common::posix01",desc:"",parent:'125641'},{ty:"structfield",name:"st_ino",path:"std::libc::types::os::common::posix01",desc:"",parent:'125641'},{ty:"structfield",name:"st_mode",path:"std::libc::types::os::common::posix01",desc:"",parent:'125641'},{ty:"structfield",name:"st_nlink",path:"std::libc::types::os::common::posix01",desc:"",parent:'125641'},{ty:"structfield",name:"st_uid",path:"std::libc::types::os::common::posix01",desc:"",parent:'125641'},{ty:"structfield",name:"st_gid",path:"std::libc::types::os::common::posix01",desc:"",parent:'125641'},{ty:"structfield",name:"st_rdev",path:"std::libc::types::os::common::posix01",desc:"",parent:'125641'},{ty:"structfield",name:"st_size",path:"std::libc::types::os::common::posix01",desc:"",parent:'125641'},{ty:"structfield",name:"st_atime",path:"std::libc::types::os::common::posix01",desc:"",parent:'125641'},{ty:"structfield",name:"st_mtime",path:"std::libc::types::os::common::posix01",desc:"",parent:'125641'},{ty:"structfield",name:"st_ctime",path:"std::libc::types::os::common::posix01",desc:"",parent:'125641'},{ty:"struct",name:"utimbuf",path:"std::libc::types::os::common::posix01",desc:""},{ty:"structfield",name:"actime",path:"std::libc::types::os::common::posix01",desc:"",parent:'125675'},{ty:"structfield",name:"modtime",path:"std::libc::types::os::common::posix01",desc:"",parent:'125675'},{ty:"struct",name:"timeval",path:"std::libc::types::os::common::posix01",desc:""},{ty:"structfield",name:"tv_sec",path:"std::libc::types::os::common::posix01",desc:"",parent:'125682'},{ty:"structfield",name:"tv_usec",path:"std::libc::types::os::common::posix01",desc:"",parent:'125682'},{ty:"struct",name:"timespec",path:"std::libc::types::os::common::posix01",desc:""},{ty:"structfield",name:"tv_sec",path:"std::libc::types::os::common::posix01",desc:"",parent:'125689'},{ty:"structfield",name:"tv_nsec",path:"std::libc::types::os::common::posix01",desc:"",parent:'125689'},{ty:"enum",name:"timezone",path:"std::libc::types::os::common::posix01",desc:""},{ty:"mod",name:"bsd44",path:"std::libc::types::os::common",desc:""},{ty:"struct",name:"sockaddr",path:"std::libc::types::os::common::bsd44",desc:""},{ty:"structfield",name:"sa_family",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125718'},{ty:"structfield",name:"sa_data",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125718'},{ty:"struct",name:"sockaddr_storage",path:"std::libc::types::os::common::bsd44",desc:""},{ty:"structfield",name:"ss_family",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125727'},{ty:"structfield",name:"__ss_align",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125727'},{ty:"structfield",name:"__ss_pad2",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125727'},{ty:"struct",name:"sockaddr_in",path:"std::libc::types::os::common::bsd44",desc:""},{ty:"structfield",name:"sin_family",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125739'},{ty:"structfield",name:"sin_port",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125739'},{ty:"structfield",name:"sin_addr",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125739'},{ty:"structfield",name:"sin_zero",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125739'},{ty:"struct",name:"in_addr",path:"std::libc::types::os::common::bsd44",desc:""},{ty:"structfield",name:"s_addr",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125754'},{ty:"struct",name:"sockaddr_in6",path:"std::libc::types::os::common::bsd44",desc:""},{ty:"structfield",name:"sin6_family",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125758'},{ty:"structfield",name:"sin6_port",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125758'},{ty:"structfield",name:"sin6_flowinfo",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125758'},{ty:"structfield",name:"sin6_addr",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125758'},{ty:"structfield",name:"sin6_scope_id",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125758'},{ty:"struct",name:"in6_addr",path:"std::libc::types::os::common::bsd44",desc:""},{ty:"structfield",name:"s6_addr",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125774'},{ty:"struct",name:"ip_mreq",path:"std::libc::types::os::common::bsd44",desc:""},{ty:"structfield",name:"imr_multiaddr",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125780'},{ty:"structfield",name:"imr_interface",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125780'},{ty:"struct",name:"ip6_mreq",path:"std::libc::types::os::common::bsd44",desc:""},{ty:"structfield",name:"ipv6mr_multiaddr",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125787'},{ty:"structfield",name:"ipv6mr_interface",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125787'},{ty:"struct",name:"addrinfo",path:"std::libc::types::os::common::bsd44",desc:""},{ty:"structfield",name:"ai_flags",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125794'},{ty:"structfield",name:"ai_family",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125794'},{ty:"structfield",name:"ai_socktype",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125794'},{ty:"structfield",name:"ai_protocol",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125794'},{ty:"structfield",name:"ai_addrlen",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125794'},{ty:"structfield",name:"ai_canonname",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125794'},{ty:"structfield",name:"ai_addr",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125794'},{ty:"structfield",name:"ai_next",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125794'},{ty:"struct",name:"sockaddr_un",path:"std::libc::types::os::common::bsd44",desc:""},{ty:"structfield",name:"sun_family",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125822'},{ty:"structfield",name:"sun_path",path:"std::libc::types::os::common::bsd44",desc:"",parent:'125822'},{ty:"typedef",name:"SOCKET",path:"std::libc::types::os::common::bsd44",desc:""},{ty:"typedef",name:"socklen_t",path:"std::libc::types::os::common::bsd44",desc:""},{ty:"typedef",name:"sa_family_t",path:"std::libc::types::os::common::bsd44",desc:""},{ty:"typedef",name:"in_port_t",path:"std::libc::types::os::common::bsd44",desc:""},{ty:"typedef",name:"in_addr_t",path:"std::libc::types::os::common::bsd44",desc:""},{ty:"mod",name:"arch",path:"std::libc::types::os",desc:""},{ty:"mod",name:"c95",path:"std::libc::types::os::arch",desc:""},{ty:"typedef",name:"c_char",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"c_schar",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"c_uchar",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"c_short",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"c_ushort",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"c_int",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"c_uint",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"c_long",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"c_ulong",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"c_float",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"c_double",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"size_t",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"ptrdiff_t",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"clock_t",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"time_t",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"suseconds_t",path:"std::libc::types::os::arch::c95",desc:""},{ty:"typedef",name:"wchar_t",path:"std::libc::types::os::arch::c95",desc:""},{ty:"mod",name:"c99",path:"std::libc::types::os::arch",desc:""},{ty:"typedef",name:"c_longlong",path:"std::libc::types::os::arch::c99",desc:""},{ty:"typedef",name:"c_ulonglong",path:"std::libc::types::os::arch::c99",desc:""},{ty:"typedef",name:"intptr_t",path:"std::libc::types::os::arch::c99",desc:""},{ty:"typedef",name:"uintptr_t",path:"std::libc::types::os::arch::c99",desc:""},{ty:"mod",name:"posix88",path:"std::libc::types::os::arch",desc:""},{ty:"typedef",name:"off_t",path:"std::libc::types::os::arch::posix88",desc:""},{ty:"typedef",name:"dev_t",path:"std::libc::types::os::arch::posix88",desc:""},{ty:"typedef",name:"ino_t",path:"std::libc::types::os::arch::posix88",desc:""},{ty:"typedef",name:"pid_t",path:"std::libc::types::os::arch::posix88",desc:""},{ty:"typedef",name:"useconds_t",path:"std::libc::types::os::arch::posix88",desc:""},{ty:"typedef",name:"mode_t",path:"std::libc::types::os::arch::posix88",desc:""},{ty:"typedef",name:"ssize_t",path:"std::libc::types::os::arch::posix88",desc:""},{ty:"mod",name:"extra",path:"std::libc::types::os::arch",desc:""},{ty:"struct",name:"STARTUPINFO",path:"std::libc::types::os::arch::extra",desc:""},{ty:"structfield",name:"cb",path:"std::libc::types::os::arch::extra",desc:"",parent:'126058'},{ty:"structfield",name:"lpReserved",path:"std::libc::types::os::arch::extra",desc:"",parent:'126058'},{ty:"structfield",name:"lpDesktop",path:"std::libc::types::os::arch::extra",desc:"",parent:'126058'},{ty:"structfield",name:"lpTitle",path:"std::libc::types::os::arch::extra",desc:"",parent:'126058'},{ty:"structfield",name:"dwX",path:"std::libc::types::os::arch::extra",desc:"",parent:'126058'},{ty:"structfield",name:"dwY",path:"std::libc::types::os::arch::extra",desc:"",parent:'126058'},{ty:"structfield",name:"dwXSize",path:"std::libc::types::os::arch::extra",desc:"",parent:'126058'},{ty:"structfield",name:"dwYSize",path:"std::libc::types::os::arch::extra",desc:"",parent:'126058'},{ty:"structfield",name:"dwXCountChars",path:"std::libc::types::os::arch::extra",desc:"",parent:'126058'},{ty:"structfield",name:"dwYCountCharts",path:"std::libc::types::os::arch::extra",desc:"",parent:'126058'},{ty:"structfield",name:"dwFillAttribute",path:"std::libc::types::os::arch::extra",desc:"",parent:'126058'},{ty:"structfield",name:"dwFlags",path:"std::libc::types::os::arch::extra",desc:"",parent:'126058'},{ty:"structfield",name:"wShowWindow",path:"std::libc::types::os::arch::extra",desc:"",parent:'126058'},{ty:"structfield",name:"cbReserved2",path:"std::libc::types::os::arch::extra",desc:"",parent:'126058'},{ty:"structfield",name:"lpReserved2",path:"std::libc::types::os::arch::extra",desc:"",parent:'126058'},{ty:"structfield",name:"hStdInput",path:"std::libc::types::os::arch::extra",desc:"",parent:'126058'},{ty:"structfield",name:"hStdOutput",path:"std::libc::types::os::arch::extra",desc:"",parent:'126058'},{ty:"structfield",name:"hStdError",path:"std::libc::types::os::arch::extra",desc:"",parent:'126058'},{ty:"struct",name:"PROCESS_INFORMATION",path:"std::libc::types::os::arch::extra",desc:""},{ty:"structfield",name:"hProcess",path:"std::libc::types::os::arch::extra",desc:"",parent:'126117'},{ty:"structfield",name:"hThread",path:"std::libc::types::os::arch::extra",desc:"",parent:'126117'},{ty:"structfield",name:"dwProcessId",path:"std::libc::types::os::arch::extra",desc:"",parent:'126117'},{ty:"structfield",name:"dwThreadId",path:"std::libc::types::os::arch::extra",desc:"",parent:'126117'},{ty:"struct",name:"SYSTEM_INFO",path:"std::libc::types::os::arch::extra",desc:""},{ty:"structfield",name:"wProcessorArchitecture",path:"std::libc::types::os::arch::extra",desc:"",parent:'126134'},{ty:"structfield",name:"wReserved",path:"std::libc::types::os::arch::extra",desc:"",parent:'126134'},{ty:"structfield",name:"dwPageSize",path:"std::libc::types::os::arch::extra",desc:"",parent:'126134'},{ty:"structfield",name:"lpMinimumApplicationAddress",path:"std::libc::types::os::arch::extra",desc:"",parent:'126134'},{ty:"structfield",name:"lpMaximumApplicationAddress",path:"std::libc::types::os::arch::extra",desc:"",parent:'126134'},{ty:"structfield",name:"dwActiveProcessorMask",path:"std::libc::types::os::arch::extra",desc:"",parent:'126134'},{ty:"structfield",name:"dwNumberOfProcessors",path:"std::libc::types::os::arch::extra",desc:"",parent:'126134'},{ty:"structfield",name:"dwProcessorType",path:"std::libc::types::os::arch::extra",desc:"",parent:'126134'},{ty:"structfield",name:"dwAllocationGranularity",path:"std::libc::types::os::arch::extra",desc:"",parent:'126134'},{ty:"structfield",name:"wProcessorLevel",path:"std::libc::types::os::arch::extra",desc:"",parent:'126134'},{ty:"structfield",name:"wProcessorRevision",path:"std::libc::types::os::arch::extra",desc:"",parent:'126134'},{ty:"struct",name:"MEMORY_BASIC_INFORMATION",path:"std::libc::types::os::arch::extra",desc:""},{ty:"structfield",name:"BaseAddress",path:"std::libc::types::os::arch::extra",desc:"",parent:'126193'},{ty:"structfield",name:"AllocationBase",path:"std::libc::types::os::arch::extra",desc:"",parent:'126193'},{ty:"structfield",name:"AllocationProtect",path:"std::libc::types::os::arch::extra",desc:"",parent:'126193'},{ty:"structfield",name:"RegionSize",path:"std::libc::types::os::arch::extra",desc:"",parent:'126193'},{ty:"structfield",name:"State",path:"std::libc::types::os::arch::extra",desc:"",parent:'126193'},{ty:"structfield",name:"Protect",path:"std::libc::types::os::arch::extra",desc:"",parent:'126193'},{ty:"structfield",name:"Type",path:"std::libc::types::os::arch::extra",desc:"",parent:'126193'},{ty:"struct",name:"OVERLAPPED",path:"std::libc::types::os::arch::extra",desc:""},{ty:"structfield",name:"Internal",path:"std::libc::types::os::arch::extra",desc:"",parent:'126219'},{ty:"structfield",name:"InternalHigh",path:"std::libc::types::os::arch::extra",desc:"",parent:'126219'},{ty:"structfield",name:"Offset",path:"std::libc::types::os::arch::extra",desc:"",parent:'126219'},{ty:"structfield",name:"OffsetHigh",path:"std::libc::types::os::arch::extra",desc:"",parent:'126219'},{ty:"structfield",name:"hEvent",path:"std::libc::types::os::arch::extra",desc:"",parent:'126219'},{ty:"struct",name:"FILETIME",path:"std::libc::types::os::arch::extra",desc:""},{ty:"structfield",name:"dwLowDateTime",path:"std::libc::types::os::arch::extra",desc:"",parent:'126241'},{ty:"structfield",name:"dwHighDateTime",path:"std::libc::types::os::arch::extra",desc:"",parent:'126241'},{ty:"struct",name:"GUID",path:"std::libc::types::os::arch::extra",desc:""},{ty:"structfield",name:"Data1",path:"std::libc::types::os::arch::extra",desc:"",parent:'126252'},{ty:"structfield",name:"Data2",path:"std::libc::types::os::arch::extra",desc:"",parent:'126252'},{ty:"structfield",name:"Data3",path:"std::libc::types::os::arch::extra",desc:"",parent:'126252'},{ty:"structfield",name:"Data4",path:"std::libc::types::os::arch::extra",desc:"",parent:'126252'},{ty:"struct",name:"WSAPROTOCOLCHAIN",path:"std::libc::types::os::arch::extra",desc:""},{ty:"structfield",name:"ChainLen",path:"std::libc::types::os::arch::extra",desc:"",parent:'126267'},{ty:"structfield",name:"ChainEntries",path:"std::libc::types::os::arch::extra",desc:"",parent:'126267'},{ty:"struct",name:"WSAPROTOCOL_INFO",path:"std::libc::types::os::arch::extra",desc:""},{ty:"structfield",name:"dwServiceFlags1",path:"std::libc::types::os::arch::extra",desc:"",parent:'126280'},{ty:"structfield",name:"dwServiceFlags2",path:"std::libc::types::os::arch::extra",desc:"",parent:'126280'},{ty:"structfield",name:"dwServiceFlags3",path:"std::libc::types::os::arch::extra",desc:"",parent:'126280'},{ty:"structfield",name:"dwServiceFlags4",path:"std::libc::types::os::arch::extra",desc:"",parent:'126280'},{ty:"structfield",name:"dwProviderFlags",path:"std::libc::types::os::arch::extra",desc:"",parent:'126280'},{ty:"structfield",name:"ProviderId",path:"std::libc::types::os::arch::extra",desc:"",parent:'126280'},{ty:"structfield",name:"dwCatalogEntryId",path:"std::libc::types::os::arch::extra",desc:"",parent:'126280'},{ty:"structfield",name:"ProtocolChain",path:"std::libc::types::os::arch::extra",desc:"",parent:'126280'},{ty:"structfield",name:"iVersion",path:"std::libc::types::os::arch::extra",desc:"",parent:'126280'},{ty:"structfield",name:"iAddressFamily",path:"std::libc::types::os::arch::extra",desc:"",parent:'126280'},{ty:"structfield",name:"iMaxSockAddr",path:"std::libc::types::os::arch::extra",desc:"",parent:'126280'},{ty:"structfield",name:"iMinSockAddr",path:"std::libc::types::os::arch::extra",desc:"",parent:'126280'},{ty:"structfield",name:"iSocketType",path:"std::libc::types::os::arch::extra",desc:"",parent:'126280'},{ty:"structfield",name:"iProtocol",path:"std::libc::types::os::arch::extra",desc:"",parent:'126280'},{ty:"structfield",name:"iProtocolMaxOffset",path:"std::libc::types::os::arch::extra",desc:"",parent:'126280'},{ty:"structfield",name:"iNetworkByteOrder",path:"std::libc::types::os::arch::extra",desc:"",parent:'126280'},{ty:"structfield",name:"iSecurityScheme",path:"std::libc::types::os::arch::extra",desc:"",parent:'126280'},{ty:"structfield",name:"dwMessageSize",path:"std::libc::types::os::arch::extra",desc:"",parent:'126280'},{ty:"structfield",name:"dwProviderReserved",path:"std::libc::types::os::arch::extra",desc:"",parent:'126280'},{ty:"structfield",name:"szProtocol",path:"std::libc::types::os::arch::extra",desc:"",parent:'126280'},{ty:"typedef",name:"BOOL",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"BYTE",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"BOOLEAN",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"CCHAR",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"CHAR",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"DWORD",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"DWORDLONG",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"HANDLE",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"HMODULE",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LONG",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"PLONG",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LONG_PTR",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LARGE_INTEGER",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"PLARGE_INTEGER",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPCWSTR",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPCSTR",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPWSTR",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPSTR",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPWCH",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPCH",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPSECURITY_ATTRIBUTES",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPVOID",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPCVOID",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPBYTE",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPWORD",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPDWORD",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPHANDLE",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LRESULT",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"PBOOL",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"WCHAR",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"WORD",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"SIZE_T",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"time64_t",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"int64",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPSTARTUPINFO",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPPROCESS_INFORMATION",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPSYSTEM_INFO",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPMEMORY_BASIC_INFORMATION",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPOVERLAPPED",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPFILETIME",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPWSAPROTOCOLCHAIN",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"LPWSAPROTOCOL_INFO",path:"std::libc::types::os::arch::extra",desc:""},{ty:"typedef",name:"GROUP",path:"std::libc::types::os::arch::extra",desc:""},{ty:"method",name:"new",path:"std::libc::types::os::arch::extra",desc:"",parent:'126134'},{ty:"mod",name:"consts",path:"std::libc",desc:""},{ty:"mod",name:"os",path:"std::libc::consts",desc:""},{ty:"mod",name:"c95",path:"std::libc::consts::os",desc:""},{ty:"static",name:"EXIT_FAILURE",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"EXIT_SUCCESS",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"RAND_MAX",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"EOF",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"SEEK_SET",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"SEEK_CUR",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"SEEK_END",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"_IOFBF",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"_IONBF",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"_IOLBF",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"BUFSIZ",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"FOPEN_MAX",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"FILENAME_MAX",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"L_tmpnam",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"TMP_MAX",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEINTR",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEBADF",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEACCES",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEFAULT",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEINVAL",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEMFILE",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEWOULDBLOCK",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEINPROGRESS",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEALREADY",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAENOTSOCK",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEDESTADDRREQ",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEMSGSIZE",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEPROTOTYPE",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAENOPROTOOPT",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEPROTONOSUPPORT",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAESOCKTNOSUPPORT",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEOPNOTSUPP",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEPFNOSUPPORT",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEAFNOSUPPORT",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEADDRINUSE",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEADDRNOTAVAIL",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAENETDOWN",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAENETUNREACH",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAENETRESET",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAECONNABORTED",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAECONNRESET",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAENOBUFS",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEISCONN",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAENOTCONN",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAESHUTDOWN",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAETOOMANYREFS",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAETIMEDOUT",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAECONNREFUSED",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAELOOP",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAENAMETOOLONG",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEHOSTDOWN",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEHOSTUNREACH",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAENOTEMPTY",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEPROCLIM",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEUSERS",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEDQUOT",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAESTALE",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEREMOTE",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSASYSNOTREADY",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAVERNOTSUPPORTED",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSANOTINITIALISED",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEDISCON",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAENOMORE",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAECANCELLED",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEINVALIDPROCTABLE",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEINVALIDPROVIDER",path:"std::libc::consts::os::c95",desc:""},{ty:"static",name:"WSAEPROVIDERFAILEDINIT",path:"std::libc::consts::os::c95",desc:""},{ty:"mod",name:"posix88",path:"std::libc::consts::os",desc:""},{ty:"static",name:"O_RDONLY",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"O_WRONLY",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"O_RDWR",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"O_APPEND",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"O_CREAT",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"O_EXCL",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"O_TRUNC",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"S_IFIFO",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"S_IFCHR",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"S_IFBLK",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"S_IFDIR",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"S_IFREG",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"S_IFLNK",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"S_IFMT",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"S_IEXEC",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"S_IWRITE",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"S_IREAD",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"S_IRWXU",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"S_IXUSR",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"S_IWUSR",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"S_IRUSR",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"F_OK",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"R_OK",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"W_OK",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"X_OK",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"STDIN_FILENO",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"STDOUT_FILENO",path:"std::libc::consts::os::posix88",desc:""},{ty:"static",name:"STDERR_FILENO",path:"std::libc::consts::os::posix88",desc:""},{ty:"mod",name:"bsd44",path:"std::libc::consts::os",desc:""},{ty:"static",name:"AF_INET",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"AF_INET6",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"SOCK_STREAM",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"SOCK_DGRAM",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"IPPROTO_TCP",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"IPPROTO_IP",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"IPPROTO_IPV6",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"IP_MULTICAST_TTL",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"IP_MULTICAST_LOOP",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"IP_ADD_MEMBERSHIP",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"IP_DROP_MEMBERSHIP",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"IPV6_ADD_MEMBERSHIP",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"IPV6_DROP_MEMBERSHIP",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"IP_TTL",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"TCP_NODELAY",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"SOL_SOCKET",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"SO_KEEPALIVE",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"SO_BROADCAST",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"SO_REUSEADDR",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"SHUT_RD",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"SHUT_WR",path:"std::libc::consts::os::bsd44",desc:""},{ty:"static",name:"SHUT_RDWR",path:"std::libc::consts::os::bsd44",desc:""},{ty:"mod",name:"extra",path:"std::libc::consts::os",desc:""},{ty:"static",name:"TRUE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FALSE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"O_TEXT",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"O_BINARY",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"O_NOINHERIT",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_SUCCESS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_INVALID_FUNCTION",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_FILE_NOT_FOUND",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_ACCESS_DENIED",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_INVALID_HANDLE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_BROKEN_PIPE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_DISK_FULL",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_INSUFFICIENT_BUFFER",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_INVALID_NAME",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_ALREADY_EXISTS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_PIPE_BUSY",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_NO_DATA",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_INVALID_ADDRESS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_PIPE_CONNECTED",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_IO_PENDING",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"ERROR_FILE_INVALID",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"INVALID_HANDLE_VALUE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"DELETE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"READ_CONTROL",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"SYNCHRONIZE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"WRITE_DAC",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"WRITE_OWNER",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESS_CREATE_PROCESS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESS_CREATE_THREAD",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESS_DUP_HANDLE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESS_QUERY_INFORMATION",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESS_QUERY_LIMITED_INFORMATION",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESS_SET_INFORMATION",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESS_SET_QUOTA",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESS_SUSPEND_RESUME",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESS_TERMINATE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESS_VM_OPERATION",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESS_VM_READ",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESS_VM_WRITE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STARTF_FORCEONFEEDBACK",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STARTF_FORCEOFFFEEDBACK",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STARTF_PREVENTPINNING",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STARTF_RUNFULLSCREEN",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STARTF_TITLEISAPPID",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STARTF_TITLEISLINKNAME",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STARTF_USECOUNTCHARS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STARTF_USEFILLATTRIBUTE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STARTF_USEHOTKEY",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STARTF_USEPOSITION",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STARTF_USESHOWWINDOW",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STARTF_USESIZE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STARTF_USESTDHANDLES",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"WAIT_ABANDONED",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"WAIT_OBJECT_0",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"WAIT_TIMEOUT",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"WAIT_FAILED",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"DUPLICATE_CLOSE_SOURCE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"DUPLICATE_SAME_ACCESS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"INFINITE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STILL_ACTIVE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MEM_COMMIT",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MEM_RESERVE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MEM_DECOMMIT",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MEM_RELEASE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MEM_RESET",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MEM_RESET_UNDO",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MEM_LARGE_PAGES",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MEM_PHYSICAL",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MEM_TOP_DOWN",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MEM_WRITE_WATCH",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PAGE_EXECUTE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PAGE_EXECUTE_READ",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PAGE_EXECUTE_READWRITE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PAGE_EXECUTE_WRITECOPY",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PAGE_NOACCESS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PAGE_READONLY",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PAGE_READWRITE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PAGE_WRITECOPY",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PAGE_GUARD",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PAGE_NOCACHE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PAGE_WRITECOMBINE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"SEC_COMMIT",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"SEC_IMAGE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"SEC_IMAGE_NO_EXECUTE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"SEC_LARGE_PAGES",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"SEC_NOCACHE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"SEC_RESERVE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"SEC_WRITECOMBINE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_MAP_ALL_ACCESS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_MAP_READ",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_MAP_WRITE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_MAP_COPY",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_MAP_EXECUTE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESSOR_ARCHITECTURE_INTEL",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESSOR_ARCHITECTURE_ARM",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESSOR_ARCHITECTURE_IA64",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESSOR_ARCHITECTURE_AMD64",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PROCESSOR_ARCHITECTURE_UNKNOWN",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MOVEFILE_COPY_ALLOWED",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MOVEFILE_CREATE_HARDLINK",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MOVEFILE_DELAY_UNTIL_REBOOT",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MOVEFILE_FAIL_IF_NOT_TRACKABLE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MOVEFILE_REPLACE_EXISTING",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MOVEFILE_WRITE_THROUGH",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"SYMBOLIC_LINK_FLAG_DIRECTORY",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_SHARE_DELETE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_SHARE_READ",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_SHARE_WRITE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"CREATE_ALWAYS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"CREATE_NEW",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"OPEN_ALWAYS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"OPEN_EXISTING",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"TRUNCATE_EXISTING",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_APPEND_DATA",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_READ_DATA",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_WRITE_DATA",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_ARCHIVE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_COMPRESSED",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_DEVICE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_DIRECTORY",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_ENCRYPTED",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_HIDDEN",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_INTEGRITY_STREAM",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_NORMAL",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_NOT_CONTENT_INDEXED",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_NO_SCRUB_DATA",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_OFFLINE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_READONLY",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_REPARSE_POINT",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_SPARSE_FILE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_SYSTEM",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_TEMPORARY",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_ATTRIBUTE_VIRTUAL",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_FLAG_BACKUP_SEMANTICS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_FLAG_DELETE_ON_CLOSE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_FLAG_NO_BUFFERING",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_FLAG_OPEN_NO_RECALL",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_FLAG_OPEN_REPARSE_POINT",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_FLAG_OVERLAPPED",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_FLAG_POSIX_SEMANTICS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_FLAG_RANDOM_ACCESS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_FLAG_SESSION_AWARE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_FLAG_SEQUENTIAL_SCAN",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_FLAG_WRITE_THROUGH",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_FLAG_FIRST_PIPE_INSTANCE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_NAME_NORMALIZED",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_NAME_OPENED",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"VOLUME_NAME_DOS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"VOLUME_NAME_GUID",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"VOLUME_NAME_NONE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"VOLUME_NAME_NT",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"GENERIC_READ",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"GENERIC_WRITE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"GENERIC_EXECUTE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"GENERIC_ALL",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_WRITE_ATTRIBUTES",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_READ_ATTRIBUTES",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STANDARD_RIGHTS_READ",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"STANDARD_RIGHTS_WRITE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_WRITE_EA",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_READ_EA",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_GENERIC_READ",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_GENERIC_WRITE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_BEGIN",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_CURRENT",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"FILE_END",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"MAX_PROTOCOL_CHAIN",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"WSAPROTOCOL_LEN",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"INVALID_SOCKET",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"DETACHED_PROCESS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"CREATE_NEW_PROCESS_GROUP",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PIPE_ACCESS_DUPLEX",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PIPE_ACCESS_INBOUND",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PIPE_ACCESS_OUTBOUND",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PIPE_TYPE_BYTE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PIPE_TYPE_MESSAGE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PIPE_READMODE_BYTE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PIPE_READMODE_MESSAGE",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PIPE_WAIT",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PIPE_NOWAIT",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PIPE_ACCEPT_REMOTE_CLIENTS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PIPE_REJECT_REMOTE_CLIENTS",path:"std::libc::consts::os::extra",desc:""},{ty:"static",name:"PIPE_UNLIMITED_INSTANCES",path:"std::libc::consts::os::extra",desc:""},{ty:"mod",name:"funcs",path:"std::libc",desc:""},{ty:"mod",name:"c95",path:"std::libc::funcs",desc:""},{ty:"mod",name:"ctype",path:"std::libc::funcs::c95",desc:""},{ty:"ffi",name:"isalnum",path:"std::libc::funcs::c95::ctype",desc:""},{ty:"ffi",name:"isalpha",path:"std::libc::funcs::c95::ctype",desc:""},{ty:"ffi",name:"iscntrl",path:"std::libc::funcs::c95::ctype",desc:""},{ty:"ffi",name:"isdigit",path:"std::libc::funcs::c95::ctype",desc:""},{ty:"ffi",name:"isgraph",path:"std::libc::funcs::c95::ctype",desc:""},{ty:"ffi",name:"islower",path:"std::libc::funcs::c95::ctype",desc:""},{ty:"ffi",name:"isprint",path:"std::libc::funcs::c95::ctype",desc:""},{ty:"ffi",name:"ispunct",path:"std::libc::funcs::c95::ctype",desc:""},{ty:"ffi",name:"isspace",path:"std::libc::funcs::c95::ctype",desc:""},{ty:"ffi",name:"isupper",path:"std::libc::funcs::c95::ctype",desc:""},{ty:"ffi",name:"isxdigit",path:"std::libc::funcs::c95::ctype",desc:""},{ty:"ffi",name:"tolower",path:"std::libc::funcs::c95::ctype",desc:""},{ty:"ffi",name:"toupper",path:"std::libc::funcs::c95::ctype",desc:""},{ty:"mod",name:"stdio",path:"std::libc::funcs::c95",desc:""},{ty:"ffi",name:"fopen",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"freopen",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"fflush",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"fclose",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"remove",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"rename",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"tmpfile",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"setvbuf",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"setbuf",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"fgetc",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"fgets",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"fputc",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"fputs",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"puts",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"ungetc",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"fread",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"fwrite",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"fseek",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"ftell",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"rewind",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"fgetpos",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"fsetpos",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"feof",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"ferror",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"ffi",name:"perror",path:"std::libc::funcs::c95::stdio",desc:""},{ty:"mod",name:"stdlib",path:"std::libc::funcs::c95",desc:""},{ty:"ffi",name:"abs",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"labs",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"atof",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"atoi",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"strtod",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"strtol",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"strtoul",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"calloc",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"malloc",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"realloc",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"free",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"exit",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"_exit",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"system",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"getenv",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"rand",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"ffi",name:"srand",path:"std::libc::funcs::c95::stdlib",desc:""},{ty:"mod",name:"string",path:"std::libc::funcs::c95",desc:""},{ty:"ffi",name:"strcpy",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strncpy",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strcat",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strncat",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strcmp",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strncmp",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strcoll",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strchr",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strrchr",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strspn",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strcspn",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strpbrk",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strstr",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strlen",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strerror",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strtok",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"strxfrm",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"wcslen",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"memcmp",path:"std::libc::funcs::c95::string",desc:""},{ty:"ffi",name:"memchr",path:"std::libc::funcs::c95::string",desc:""},{ty:"mod",name:"posix88",path:"std::libc::funcs",desc:""},{ty:"mod",name:"stat_",path:"std::libc::funcs::posix88",desc:""},{ty:"ffi",name:"chmod",path:"std::libc::funcs::posix88::stat_",desc:""},{ty:"ffi",name:"wchmod",path:"std::libc::funcs::posix88::stat_",desc:""},{ty:"ffi",name:"mkdir",path:"std::libc::funcs::posix88::stat_",desc:""},{ty:"ffi",name:"wrmdir",path:"std::libc::funcs::posix88::stat_",desc:""},{ty:"ffi",name:"fstat",path:"std::libc::funcs::posix88::stat_",desc:""},{ty:"ffi",name:"stat",path:"std::libc::funcs::posix88::stat_",desc:""},{ty:"ffi",name:"wstat",path:"std::libc::funcs::posix88::stat_",desc:""},{ty:"ffi",name:"wutime",path:"std::libc::funcs::posix88::stat_",desc:""},{ty:"mod",name:"stdio",path:"std::libc::funcs::posix88",desc:""},{ty:"ffi",name:"popen",path:"std::libc::funcs::posix88::stdio",desc:""},{ty:"ffi",name:"pclose",path:"std::libc::funcs::posix88::stdio",desc:""},{ty:"ffi",name:"fdopen",path:"std::libc::funcs::posix88::stdio",desc:""},{ty:"ffi",name:"fileno",path:"std::libc::funcs::posix88::stdio",desc:""},{ty:"mod",name:"fcntl",path:"std::libc::funcs::posix88",desc:""},{ty:"ffi",name:"open",path:"std::libc::funcs::posix88::fcntl",desc:""},{ty:"ffi",name:"wopen",path:"std::libc::funcs::posix88::fcntl",desc:""},{ty:"ffi",name:"creat",path:"std::libc::funcs::posix88::fcntl",desc:""},{ty:"mod",name:"unistd",path:"std::libc::funcs::posix88",desc:""},{ty:"ffi",name:"access",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"chdir",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"close",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"dup",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"dup2",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"execv",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"execve",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"execvp",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"execvpe",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"getcwd",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"getpid",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"isatty",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"lseek",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"pipe",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"read",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"rmdir",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"unlink",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"ffi",name:"write",path:"std::libc::funcs::posix88::unistd",desc:""},{ty:"mod",name:"bsd43",path:"std::libc::funcs",desc:""},{ty:"ffi",name:"socket",path:"std::libc::funcs::bsd43",desc:""},{ty:"ffi",name:"connect",path:"std::libc::funcs::bsd43",desc:""},{ty:"ffi",name:"bind",path:"std::libc::funcs::bsd43",desc:""},{ty:"ffi",name:"listen",path:"std::libc::funcs::bsd43",desc:""},{ty:"ffi",name:"accept",path:"std::libc::funcs::bsd43",desc:""},{ty:"ffi",name:"getpeername",path:"std::libc::funcs::bsd43",desc:""},{ty:"ffi",name:"getsockname",path:"std::libc::funcs::bsd43",desc:""},{ty:"ffi",name:"setsockopt",path:"std::libc::funcs::bsd43",desc:""},{ty:"ffi",name:"closesocket",path:"std::libc::funcs::bsd43",desc:""},{ty:"ffi",name:"recv",path:"std::libc::funcs::bsd43",desc:""},{ty:"ffi",name:"send",path:"std::libc::funcs::bsd43",desc:""},{ty:"ffi",name:"recvfrom",path:"std::libc::funcs::bsd43",desc:""},{ty:"ffi",name:"sendto",path:"std::libc::funcs::bsd43",desc:""},{ty:"ffi",name:"shutdown",path:"std::libc::funcs::bsd43",desc:""},{ty:"mod",name:"extra",path:"std::libc::funcs",desc:""},{ty:"mod",name:"kernel32",path:"std::libc::funcs::extra",desc:""},{ty:"ffi",name:"GetEnvironmentVariableW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"SetEnvironmentVariableW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"GetEnvironmentStringsA",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"FreeEnvironmentStringsA",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"GetModuleFileNameW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"CreateDirectoryW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"CopyFileW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"DeleteFileW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"RemoveDirectoryW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"GetCurrentDirectoryW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"SetCurrentDirectoryW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"GetLastError",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"FindFirstFileW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"FindNextFileW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"FindClose",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"DuplicateHandle",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"CloseHandle",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"OpenProcess",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"GetCurrentProcess",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"CreateProcessA",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"WaitForSingleObject",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"TerminateProcess",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"GetExitCodeProcess",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"GetSystemInfo",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"VirtualAlloc",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"VirtualFree",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"VirtualLock",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"VirtualUnlock",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"VirtualProtect",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"VirtualQuery",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"CreateFileMappingW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"MapViewOfFile",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"UnmapViewOfFile",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"MoveFileExW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"CreateSymbolicLinkW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"CreateHardLinkW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"FlushFileBuffers",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"CreateFileW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"GetFinalPathNameByHandleW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"ReadFile",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"WriteFile",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"SetFilePointerEx",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"SetEndOfFile",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"GetSystemTimeAsFileTime",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"QueryPerformanceFrequency",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"QueryPerformanceCounter",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"GetCurrentProcessId",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"CreateNamedPipeW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"ConnectNamedPipe",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"WaitNamedPipeW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"SetNamedPipeHandleState",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"CreateEventW",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"GetOverlappedResult",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"ffi",name:"DisconnectNamedPipe",path:"std::libc::funcs::extra::kernel32",desc:""},{ty:"mod",name:"msvcrt",path:"std::libc::funcs::extra",desc:""},{ty:"ffi",name:"commit",path:"std::libc::funcs::extra::msvcrt",desc:""},{ty:"ffi",name:"get_osfhandle",path:"std::libc::funcs::extra::msvcrt",desc:""},{ty:"ffi",name:"open_osfhandle",path:"std::libc::funcs::extra::msvcrt",desc:""},{ty:"mod",name:"c_str",path:"std",desc:"C-string manipulation and management"},{ty:"struct",name:"CString",path:"std::c_str",desc:"The representation of a C String."},{ty:"struct",name:"CChars",path:"std::c_str",desc:"External iterator for a CString's bytes."},{ty:"fn",name:"from_c_multistring",path:"std::c_str",desc:"Parses a C \"multistring\", eg windows env values or\nthe req->ptr result in a uv_fs_readdir() call."},{ty:"trait",name:"ToCStr",path:"std::c_str",desc:"A generic trait for converting a value to a CString."},{ty:"tymethod",name:"to_c_str",path:"std::c_str",desc:"Copy the receiver into a CString.",parent:'130430'},{ty:"tymethod",name:"to_c_str_unchecked",path:"std::c_str",desc:"Unsafe variant of `to_c_str()` that doesn't check for nulls.",parent:'130430'},{ty:"method",name:"with_c_str",path:"std::c_str",desc:"Work with a temporary CString constructed from the receiver.\nThe provided `*libc::c_char` will be freed immediately upon return.",parent:'130430'},{ty:"method",name:"with_c_str_unchecked",path:"std::c_str",desc:"Unsafe variant of `with_c_str()` that doesn't check for nulls.",parent:'130430'},{ty:"method",name:"clone",path:"std::c_str",desc:"Clone this CString into a new, uniquely owned CString. For safety\nreasons, this is always a deep clone, rather than the usual shallow\nclone.",parent:'129990'},{ty:"method",name:"eq",path:"std::c_str",desc:"",parent:'129990'},{ty:"method",name:"new",path:"std::c_str",desc:"Create a C String from a pointer.",parent:'129990'},{ty:"method",name:"unwrap",path:"std::c_str",desc:"Unwraps the wrapped `*libc::c_char` from the `CString` wrapper.\nAny ownership of the buffer by the `CString` wrapper is forgotten.",parent:'129990'},{ty:"method",name:"with_ref",path:"std::c_str",desc:"Calls a closure with a reference to the underlying `*libc::c_char`.",parent:'129990'},{ty:"method",name:"with_mut_ref",path:"std::c_str",desc:"Calls a closure with a mutable reference to the underlying `*libc::c_char`.",parent:'129990'},{ty:"method",name:"is_null",path:"std::c_str",desc:"Returns true if the CString is a null.",parent:'129990'},{ty:"method",name:"is_not_null",path:"std::c_str",desc:"Returns true if the CString is not null.",parent:'129990'},{ty:"method",name:"owns_buffer",path:"std::c_str",desc:"Returns whether or not the `CString` owns the buffer.",parent:'129990'},{ty:"method",name:"as_bytes",path:"std::c_str",desc:"Converts the CString into a `&[u8]` without copying.\nIncludes the terminating NUL byte.",parent:'129990'},{ty:"method",name:"as_bytes_no_nul",path:"std::c_str",desc:"Converts the CString into a `&[u8]` without copying.\nDoes not include the terminating NUL byte.",parent:'129990'},{ty:"method",name:"as_str",path:"std::c_str",desc:"Converts the CString into a `&str` without copying.\nReturns None if the CString is not UTF-8.",parent:'129990'},{ty:"method",name:"iter",path:"std::c_str",desc:"Return a CString iterator.",parent:'129990'},{ty:"method",name:"drop",path:"std::c_str",desc:"",parent:'129990'},{ty:"method",name:"len",path:"std::c_str",desc:"Return the number of bytes in the CString (not including the NUL terminator).",parent:'129990'},{ty:"method",name:"next",path:"std::c_str",desc:"",parent:'130911'},{ty:"mod",name:"c_vec",path:"std",desc:"Library to interface with chunks of memory allocated in C."},{ty:"struct",name:"CVec",path:"std::c_vec",desc:"The type representing a foreign chunk of memory"},{ty:"method",name:"drop",path:"std::c_vec",desc:"",parent:'131091'},{ty:"method",name:"new",path:"std::c_vec",desc:"Create a `CVec` from a raw pointer to a buffer with a given length.",parent:'131091'},{ty:"method",name:"new_with_dtor",path:"std::c_vec",desc:"Create a `CVec` from a foreign buffer, with a given length,\nand a function to run upon destruction.",parent:'131091'},{ty:"method",name:"as_slice",path:"std::c_vec",desc:"View the stored data as a slice.",parent:'131091'},{ty:"method",name:"as_mut_slice",path:"std::c_vec",desc:"View the stored data as a mutable slice.",parent:'131091'},{ty:"method",name:"get",path:"std::c_vec",desc:"Retrieves an element at a given index, returning `None` if the requested\nindex is greater than the length of the vector.",parent:'131091'},{ty:"method",name:"get_mut",path:"std::c_vec",desc:"Retrieves a mutable element at a given index, returning `None` if the\nrequested index is greater than the length of the vector.",parent:'131091'},{ty:"method",name:"unwrap",path:"std::c_vec",desc:"Unwrap the pointer without running the destructor",parent:'131091'},{ty:"method",name:"len",path:"std::c_vec",desc:"",parent:'131091'},{ty:"mod",name:"os",path:"std",desc:"Higher-level interfaces to libc::* functions and operating system services."},{ty:"struct",name:"Pipe",path:"std::os",desc:""},{ty:"structfield",name:"input",path:"std::os",desc:"",parent:'132329'},{ty:"structfield",name:"out",path:"std::os",desc:"",parent:'132329'},{ty:"struct",name:"MemoryMap",path:"std::os",desc:"A memory mapped file or chunk of memory. This is a very system-specific\ninterface to the OS's memory mapping facilities (`mmap` on POSIX,\n`VirtualAlloc`/`CreateFileMapping` on win32). It makes no attempt at\nabstracting platform differences, besides in error values returned. Consider\nyourself warned."},{ty:"structfield",name:"data",path:"std::os",desc:"Pointer to the memory created or modified by this map.",parent:'133565'},{ty:"structfield",name:"len",path:"std::os",desc:"Number of bytes this map applies to",parent:'133565'},{ty:"structfield",name:"kind",path:"std::os",desc:"Type of mapping",parent:'133565'},{ty:"enum",name:"MemoryMapKind",path:"std::os",desc:"Type of memory map"},{ty:"variant",name:"MapFile",path:"std::os",desc:"Virtual memory map. Usually used to change the permissions of a given\nchunk of memory.  Corresponds to `VirtualAlloc` on Windows.",parent:'133576'},{ty:"variant",name:"MapVirtual",path:"std::os",desc:"Virtual memory map. Usually used to change the permissions of a given\nchunk of memory, or for allocation. Corresponds to `VirtualAlloc` on\nWindows.",parent:'133576'},{ty:"enum",name:"MapOption",path:"std::os",desc:"Options the memory map is created with"},{ty:"variant",name:"MapReadable",path:"std::os",desc:"The memory should be readable",parent:'133583'},{ty:"variant",name:"MapWritable",path:"std::os",desc:"The memory should be writable",parent:'133583'},{ty:"variant",name:"MapExecutable",path:"std::os",desc:"The memory should be executable",parent:'133583'},{ty:"variant",name:"MapAddr",path:"std::os",desc:"Create a map for a specific address range. Corresponds to `MAP_FIXED` on\nPOSIX.",parent:'133583'},{ty:"variant",name:"MapFd",path:"std::os",desc:"Create a memory mapping for a file with a given fd.",parent:'133583'},{ty:"variant",name:"MapOffset",path:"std::os",desc:"When using `MapFd`, the start of the map is `uint` bytes from the start\nof the file.",parent:'133583'},{ty:"variant",name:"MapNonStandardFlags",path:"std::os",desc:"On POSIX, this can be used to specify the default flags passed to\n`mmap`. By default it uses `MAP_PRIVATE` and, if not using `MapFd`,\n`MAP_ANON`. This will override both of those. This is platform-specific\n(the exact values used) and ignored on Windows.",parent:'133583'},{ty:"enum",name:"MapError",path:"std::os",desc:"Possible errors when creating a map."},{ty:"variant",name:"ErrFdNotAvail",path:"std::os",desc:"## The following are POSIX-specific",parent:'133604'},{ty:"variant",name:"ErrInvalidFd",path:"std::os",desc:"fd was not valid",parent:'133604'},{ty:"variant",name:"ErrUnaligned",path:"std::os",desc:"Either the address given by `MapAddr` or offset given by `MapOffset` was\nnot a multiple of `MemoryMap::granularity` (unaligned to page size).",parent:'133604'},{ty:"variant",name:"ErrNoMapSupport",path:"std::os",desc:"With `MapFd`, the fd does not support mapping.",parent:'133604'},{ty:"variant",name:"ErrNoMem",path:"std::os",desc:"If using `MapAddr`, the address + `min_len` was outside of the process's\naddress space. If using `MapFd`, the target of the fd didn't have enough\nresources to fulfill the request.",parent:'133604'},{ty:"variant",name:"ErrZeroLength",path:"std::os",desc:"A zero-length map was requested. This is invalid according to\n[POSIX](http://pubs.opengroup.org/onlinepubs/9699919799/functions/mmap.html).\nNot all platforms obey this, but this wrapper does.",parent:'133604'},{ty:"variant",name:"ErrUnknown",path:"std::os",desc:"Unrecognized error. The inner value is the unrecognized errno.",parent:'133604'},{ty:"variant",name:"ErrUnsupProt",path:"std::os",desc:"## The following are win32-specific",parent:'133604'},{ty:"variant",name:"ErrUnsupOffset",path:"std::os",desc:"When using `MapFd`, `MapOffset` was given (Windows does not support this\nat all)",parent:'133604'},{ty:"variant",name:"ErrAlreadyExists",path:"std::os",desc:"When using `MapFd`, there was already a mapping to the file.",parent:'133604'},{ty:"variant",name:"ErrVirtualAlloc",path:"std::os",desc:"Unrecognized error from `VirtualAlloc`. The inner value is the return\nvalue of GetLastError.",parent:'133604'},{ty:"variant",name:"ErrCreateFileMappingW",path:"std::os",desc:"Unrecognized error from `CreateFileMapping`. The inner value is the\nreturn value of `GetLastError`.",parent:'133604'},{ty:"variant",name:"ErrMapViewOfFile",path:"std::os",desc:"Unrecognized error from `MapViewOfFile`. The inner value is the return\nvalue of `GetLastError`.",parent:'133604'},{ty:"fn",name:"close",path:"std::os",desc:"Delegates to the libc close() function, returning the same return value."},{ty:"fn",name:"getcwd",path:"std::os",desc:""},{ty:"fn",name:"env",path:"std::os",desc:"Returns a vector of (variable, value) pairs for all the environment\nvariables of the current process."},{ty:"fn",name:"env_as_bytes",path:"std::os",desc:"Returns a vector of (variable, value) byte-vector pairs for all the\nenvironment variables of the current process."},{ty:"fn",name:"getenv",path:"std::os",desc:"Fetches the environment variable `n` from the current process, returning\nNone if the variable isn't set."},{ty:"fn",name:"getenv_as_bytes",path:"std::os",desc:"Fetches the environment variable `n` byte vector from the current process,\nreturning None if the variable isn't set."},{ty:"fn",name:"setenv",path:"std::os",desc:"Sets the environment variable `n` to the value `v` for the currently running\nprocess"},{ty:"fn",name:"unsetenv",path:"std::os",desc:"Remove a variable from the environment entirely"},{ty:"fn",name:"pipe",path:"std::os",desc:""},{ty:"fn",name:"dll_filename",path:"std::os",desc:"Returns the proper dll filename for the given basename of a file."},{ty:"fn",name:"self_exe_name",path:"std::os",desc:"Optionally returns the filesystem path of the current executable which is\nrunning. If any failure occurs, None is returned."},{ty:"fn",name:"self_exe_path",path:"std::os",desc:"Optionally returns the filesystem path to the current executable which is\nrunning. Like self_exe_name() but without the binary's name.\nIf any failure occurs, None is returned."},{ty:"fn",name:"homedir",path:"std::os",desc:"Returns the path to the user's home directory, if known."},{ty:"fn",name:"tmpdir",path:"std::os",desc:"Returns the path to a temporary directory."},{ty:"fn",name:"make_absolute",path:"std::os",desc:"Convert a relative path to an absolute path"},{ty:"fn",name:"change_dir",path:"std::os",desc:"Changes the current working directory to the specified path, returning\nwhether the change was completed successfully or not."},{ty:"fn",name:"errno",path:"std::os",desc:"Returns the platform-specific value of errno"},{ty:"fn",name:"last_os_error",path:"std::os",desc:"Get a string representing the platform-dependent last error"},{ty:"fn",name:"set_exit_status",path:"std::os",desc:"Sets the process exit code"},{ty:"fn",name:"get_exit_status",path:"std::os",desc:"Fetches the process's current exit code. This defaults to 0 and can change\nby calling `set_exit_status`."},{ty:"fn",name:"args",path:"std::os",desc:"Returns the arguments which this program was started with (normally passed\nvia the command line)."},{ty:"fn",name:"args_as_bytes",path:"std::os",desc:"Returns the arguments which this program was started with (normally passed\nvia the command line) as byte vectors."},{ty:"fn",name:"page_size",path:"std::os",desc:""},{ty:"mod",name:"win32",path:"std::os",desc:""},{ty:"fn",name:"fill_utf16_buf_and_decode",path:"std::os::win32",desc:""},{ty:"fn",name:"as_utf16_p",path:"std::os::win32",desc:""},{ty:"mod",name:"consts",path:"std::os",desc:""},{ty:"mod",name:"unix",path:"std::os::consts",desc:""},{ty:"static",name:"FAMILY",path:"std::os::consts::unix",desc:""},{ty:"mod",name:"windows",path:"std::os::consts",desc:""},{ty:"static",name:"FAMILY",path:"std::os::consts::windows",desc:""},{ty:"mod",name:"macos",path:"std::os::consts",desc:""},{ty:"static",name:"SYSNAME",path:"std::os::consts::macos",desc:""},{ty:"static",name:"DLL_PREFIX",path:"std::os::consts::macos",desc:""},{ty:"static",name:"DLL_SUFFIX",path:"std::os::consts::macos",desc:""},{ty:"static",name:"DLL_EXTENSION",path:"std::os::consts::macos",desc:""},{ty:"static",name:"EXE_SUFFIX",path:"std::os::consts::macos",desc:""},{ty:"static",name:"EXE_EXTENSION",path:"std::os::consts::macos",desc:""},{ty:"mod",name:"freebsd",path:"std::os::consts",desc:""},{ty:"static",name:"SYSNAME",path:"std::os::consts::freebsd",desc:""},{ty:"static",name:"DLL_PREFIX",path:"std::os::consts::freebsd",desc:""},{ty:"static",name:"DLL_SUFFIX",path:"std::os::consts::freebsd",desc:""},{ty:"static",name:"DLL_EXTENSION",path:"std::os::consts::freebsd",desc:""},{ty:"static",name:"EXE_SUFFIX",path:"std::os::consts::freebsd",desc:""},{ty:"static",name:"EXE_EXTENSION",path:"std::os::consts::freebsd",desc:""},{ty:"mod",name:"linux",path:"std::os::consts",desc:""},{ty:"static",name:"SYSNAME",path:"std::os::consts::linux",desc:""},{ty:"static",name:"DLL_PREFIX",path:"std::os::consts::linux",desc:""},{ty:"static",name:"DLL_SUFFIX",path:"std::os::consts::linux",desc:""},{ty:"static",name:"DLL_EXTENSION",path:"std::os::consts::linux",desc:""},{ty:"static",name:"EXE_SUFFIX",path:"std::os::consts::linux",desc:""},{ty:"static",name:"EXE_EXTENSION",path:"std::os::consts::linux",desc:""},{ty:"mod",name:"android",path:"std::os::consts",desc:""},{ty:"static",name:"SYSNAME",path:"std::os::consts::android",desc:""},{ty:"static",name:"DLL_PREFIX",path:"std::os::consts::android",desc:""},{ty:"static",name:"DLL_SUFFIX",path:"std::os::consts::android",desc:""},{ty:"static",name:"DLL_EXTENSION",path:"std::os::consts::android",desc:""},{ty:"static",name:"EXE_SUFFIX",path:"std::os::consts::android",desc:""},{ty:"static",name:"EXE_EXTENSION",path:"std::os::consts::android",desc:""},{ty:"mod",name:"win32",path:"std::os::consts",desc:""},{ty:"static",name:"SYSNAME",path:"std::os::consts::win32",desc:""},{ty:"static",name:"DLL_PREFIX",path:"std::os::consts::win32",desc:""},{ty:"static",name:"DLL_SUFFIX",path:"std::os::consts::win32",desc:""},{ty:"static",name:"DLL_EXTENSION",path:"std::os::consts::win32",desc:""},{ty:"static",name:"EXE_SUFFIX",path:"std::os::consts::win32",desc:""},{ty:"static",name:"EXE_EXTENSION",path:"std::os::consts::win32",desc:""},{ty:"mod",name:"x86",path:"std::os::consts",desc:""},{ty:"static",name:"ARCH",path:"std::os::consts::x86",desc:""},{ty:"mod",name:"x86_64",path:"std::os::consts",desc:""},{ty:"static",name:"ARCH",path:"std::os::consts::x86_64",desc:""},{ty:"mod",name:"arm",path:"std::os::consts",desc:""},{ty:"static",name:"ARCH",path:"std::os::consts::arm",desc:""},{ty:"mod",name:"mips",path:"std::os::consts",desc:""},{ty:"static",name:"ARCH",path:"std::os::consts::mips",desc:""},{ty:"static",name:"TMPBUF_SZ",path:"std::os",desc:""},{ty:"method",name:"fmt",path:"std::os",desc:"",parent:'133604'},{ty:"method",name:"new",path:"std::os",desc:"Create a new mapping with the given `options`, at least `min_len` bytes long.",parent:'133565'},{ty:"method",name:"granularity",path:"std::os",desc:"Granularity of MapAddr() and MapOffset() parameter values.\nThis may be greater than the value returned by page_size().",parent:'133565'},{ty:"method",name:"drop",path:"std::os",desc:"Unmap the mapping. Fails the task if any of `VirtualFree`,\n`UnmapViewOfFile`, or `CloseHandle` fail.",parent:'133565'},{ty:"mod",name:"io",path:"std",desc:"I/O, including files, networking, timers, and processes"},{ty:"struct",name:"TempDir",path:"std::io",desc:"A wrapper for a path to temporary directory implementing automatic\nscope-based deletion."},{ty:"struct",name:"MemReader",path:"std::io",desc:"Reads from an owned byte vector"},{ty:"struct",name:"BufReader",path:"std::io",desc:"Reads from a fixed-size byte slice"},{ty:"struct",name:"MemWriter",path:"std::io",desc:"Writes to an owned, growable byte vector"},{ty:"struct",name:"BufWriter",path:"std::io",desc:"Writes to a fixed-size byte slice"},{ty:"struct",name:"BufferedReader",path:"std::io",desc:"Wraps a Reader and buffers input from it"},{ty:"struct",name:"BufferedWriter",path:"std::io",desc:"Wraps a Writer and buffers output to it"},{ty:"struct",name:"BufferedStream",path:"std::io",desc:"Wraps a Stream and buffers input and output to and from it."},{ty:"struct",name:"LineBufferedWriter",path:"std::io",desc:"Wraps a Writer and buffers output to it, flushing whenever a newline (`0x0a`,\n`'\\n'`) is detected."},{ty:"struct",name:"ChanReader",path:"std::io",desc:"Allows reading from a rx."},{ty:"struct",name:"ChanWriter",path:"std::io",desc:"Allows writing to a tx."},{ty:"struct",name:"IoError",path:"std::io",desc:"The type passed to I/O condition handlers to indicate error"},{ty:"structfield",name:"kind",path:"std::io",desc:"An enumeration which can be matched against for determining the flavor\nof error.",parent:'148496'},{ty:"structfield",name:"desc",path:"std::io",desc:"A human-readable description about the error",parent:'148496'},{ty:"structfield",name:"detail",path:"std::io",desc:"Detailed information about this error, not always available",parent:'148496'},{ty:"struct",name:"RefReader",path:"std::io",desc:"A `RefReader` is a struct implementing `Reader` which contains a reference\nto another reader. This is often useful when composing streams."},{ty:"structfield",name:"inner",path:"std::io",desc:"The underlying reader which this is referencing",parent:'151174'},{ty:"struct",name:"RefWriter",path:"std::io",desc:"A `RefWriter` is a struct implementing `Writer` which contains a reference\nto another writer. This is often useful when composing streams."},{ty:"structfield",name:"inner",path:"std::io",desc:"The underlying writer which this is referencing",parent:'152146'},{ty:"struct",name:"Lines",path:"std::io",desc:"An iterator that reads a line on each iteration,\nuntil `.read_line()` encounters `EndOfFile`."},{ty:"struct",name:"Chars",path:"std::io",desc:"An iterator that reads a utf8-encoded character on each iteration,\nuntil `.read_char()` encounters `EndOfFile`."},{ty:"struct",name:"IncomingConnections",path:"std::io",desc:"An infinite iterator over incoming connection attempts.\nCalling `next` will block the task until a connection is attempted."},{ty:"struct",name:"FileStat",path:"std::io",desc:"A structure used to describe metadata information about a file. This\nstructure is created through the `stat` method on a `Path`."},{ty:"structfield",name:"path",path:"std::io",desc:"The path that this stat structure is describing",parent:'153314'},{ty:"structfield",name:"size",path:"std::io",desc:"The size of the file, in bytes",parent:'153314'},{ty:"structfield",name:"kind",path:"std::io",desc:"The kind of file this path points to (directory, file, pipe, etc.)",parent:'153314'},{ty:"structfield",name:"perm",path:"std::io",desc:"The file permissions currently on the file",parent:'153314'},{ty:"structfield",name:"created",path:"std::io",desc:"The time that the file was created at, in platform-dependent\nmilliseconds",parent:'153314'},{ty:"structfield",name:"modified",path:"std::io",desc:"The time that this file was last modified, in platform-dependent\nmilliseconds",parent:'153314'},{ty:"structfield",name:"accessed",path:"std::io",desc:"The time that this file was last accessed, in platform-dependent\nmilliseconds",parent:'153314'},{ty:"structfield",name:"unstable",path:"std::io",desc:"Information returned by stat() which is not guaranteed to be\nplatform-independent. This information may be useful on some platforms,\nbut it may have different meanings or no meaning at all on other\nplatforms.",parent:'153314'},{ty:"struct",name:"UnstableFileStat",path:"std::io",desc:"This structure represents all of the possible information which can be\nreturned from a `stat` syscall which is not contained in the `FileStat`\nstructure. This information is not necessarily platform independent, and may\nhave different meanings or no meaning at all on some platforms."},{ty:"structfield",name:"device",path:"std::io",desc:"",parent:'153420'},{ty:"structfield",name:"inode",path:"std::io",desc:"",parent:'153420'},{ty:"structfield",name:"rdev",path:"std::io",desc:"",parent:'153420'},{ty:"structfield",name:"nlink",path:"std::io",desc:"",parent:'153420'},{ty:"structfield",name:"uid",path:"std::io",desc:"",parent:'153420'},{ty:"structfield",name:"gid",path:"std::io",desc:"",parent:'153420'},{ty:"structfield",name:"blksize",path:"std::io",desc:"",parent:'153420'},{ty:"structfield",name:"blocks",path:"std::io",desc:"",parent:'153420'},{ty:"structfield",name:"flags",path:"std::io",desc:"",parent:'153420'},{ty:"structfield",name:"gen",path:"std::io",desc:"",parent:'153420'},{ty:"enum",name:"IoErrorKind",path:"std::io",desc:""},{ty:"variant",name:"OtherIoError",path:"std::io",desc:"",parent:'148774'},{ty:"variant",name:"EndOfFile",path:"std::io",desc:"",parent:'148774'},{ty:"variant",name:"FileNotFound",path:"std::io",desc:"",parent:'148774'},{ty:"variant",name:"PermissionDenied",path:"std::io",desc:"",parent:'148774'},{ty:"variant",name:"ConnectionFailed",path:"std::io",desc:"",parent:'148774'},{ty:"variant",name:"Closed",path:"std::io",desc:"",parent:'148774'},{ty:"variant",name:"ConnectionRefused",path:"std::io",desc:"",parent:'148774'},{ty:"variant",name:"ConnectionReset",path:"std::io",desc:"",parent:'148774'},{ty:"variant",name:"ConnectionAborted",path:"std::io",desc:"",parent:'148774'},{ty:"variant",name:"NotConnected",path:"std::io",desc:"",parent:'148774'},{ty:"variant",name:"BrokenPipe",path:"std::io",desc:"",parent:'148774'},{ty:"variant",name:"PathAlreadyExists",path:"std::io",desc:"",parent:'148774'},{ty:"variant",name:"PathDoesntExist",path:"std::io",desc:"",parent:'148774'},{ty:"variant",name:"MismatchedFileTypeForOperation",path:"std::io",desc:"",parent:'148774'},{ty:"variant",name:"ResourceUnavailable",path:"std::io",desc:"",parent:'148774'},{ty:"variant",name:"IoUnavailable",path:"std::io",desc:"",parent:'148774'},{ty:"variant",name:"InvalidInput",path:"std::io",desc:"",parent:'148774'},{ty:"enum",name:"SeekStyle",path:"std::io",desc:"When seeking, the resulting cursor is offset from a base by the offset given\nto the `seek` function. The base used is specified by this enumeration."},{ty:"variant",name:"SeekSet",path:"std::io",desc:"Seek from the beginning of the stream",parent:'152667'},{ty:"variant",name:"SeekEnd",path:"std::io",desc:"Seek from the end of the stream",parent:'152667'},{ty:"variant",name:"SeekCur",path:"std::io",desc:"Seek from the current position",parent:'152667'},{ty:"enum",name:"FileMode",path:"std::io",desc:"A mode specifies how a file should be opened or created. These modes are\npassed to `File::open_mode` and are used to control where the file is\npositioned when it is initially opened."},{ty:"variant",name:"Open",path:"std::io",desc:"Opens a file positioned at the beginning.",parent:'152804'},{ty:"variant",name:"Append",path:"std::io",desc:"Opens a file positioned at EOF.",parent:'152804'},{ty:"variant",name:"Truncate",path:"std::io",desc:"Opens a file, truncating it if it already exists.",parent:'152804'},{ty:"enum",name:"FileAccess",path:"std::io",desc:"Access permissions with which the file should be opened. `File`s\nopened with `Read` will return an error if written to."},{ty:"variant",name:"Read",path:"std::io",desc:"Read-only access, requests to write will result in an error",parent:'152808'},{ty:"variant",name:"Write",path:"std::io",desc:"Write-only access, requests to read will result in an error",parent:'152808'},{ty:"variant",name:"ReadWrite",path:"std::io",desc:"Read-write access, no requests are denied by default",parent:'152808'},{ty:"enum",name:"FileType",path:"std::io",desc:"Different kinds of files which can be identified by a call to stat"},{ty:"variant",name:"TypeFile",path:"std::io",desc:"This is a normal file, corresponding to `S_IFREG`",parent:'152812'},{ty:"variant",name:"TypeDirectory",path:"std::io",desc:"This file is a directory, corresponding to `S_IFDIR`",parent:'152812'},{ty:"variant",name:"TypeNamedPipe",path:"std::io",desc:"This file is a named pipe, corresponding to `S_IFIFO`",parent:'152812'},{ty:"variant",name:"TypeBlockSpecial",path:"std::io",desc:"This file is a block device, corresponding to `S_IFBLK`",parent:'152812'},{ty:"variant",name:"TypeSymlink",path:"std::io",desc:"This file is a symbolic link to another file, corresponding to `S_IFLNK`",parent:'152812'},{ty:"variant",name:"TypeUnknown",path:"std::io",desc:"The type of this file is not recognized as one of the other categories",parent:'152812'},{ty:"fn",name:"standard_error",path:"std::io",desc:"Creates a standard error for a commonly used flavor of error. The `detail`\nfield of the returned error will always be `None`."},{ty:"mod",name:"test",path:"std::io",desc:"Various utility functions useful for writing I/O tests"},{ty:"fn",name:"next_test_port",path:"std::io::test",desc:"Get a port number, starting at 9600, for use in tests"},{ty:"fn",name:"next_test_unix",path:"std::io::test",desc:"Get a temporary path which could be the location of a unix socket"},{ty:"fn",name:"next_test_ip4",path:"std::io::test",desc:"Get a unique IPv4 localhost:port pair starting at 9600"},{ty:"fn",name:"next_test_ip6",path:"std::io::test",desc:"Get a unique IPv6 localhost:port pair starting at 9600"},{ty:"fn",name:"raise_fd_limit",path:"std::io::test",desc:"Raises the file descriptor limit when running tests if necessary"},{ty:"mod",name:"extensions",path:"std::io",desc:"Utility mixins that apply to all Readers and Writers"},{ty:"struct",name:"Bytes",path:"std::io::extensions",desc:"An iterator that reads a single byte on each iteration,\nuntil `.read_byte()` returns `EndOfFile`."},{ty:"fn",name:"u64_to_le_bytes",path:"std::io::extensions",desc:""},{ty:"fn",name:"u64_to_be_bytes",path:"std::io::extensions",desc:""},{ty:"fn",name:"u64_from_be_bytes",path:"std::io::extensions",desc:""},{ty:"method",name:"new",path:"std::io::extensions",desc:"",parent:'138743'},{ty:"method",name:"next",path:"std::io::extensions",desc:"",parent:'138743'},{ty:"mod",name:"fs",path:"std::io",desc:"Synchronous File I/O"},{ty:"struct",name:"File",path:"std::io::fs",desc:"Unconstrained file access type that exposes read and write operations"},{ty:"struct",name:"Directories",path:"std::io::fs",desc:"An iterator which walks over a directory"},{ty:"fn",name:"unlink",path:"std::io::fs",desc:"Unlink a file from the underlying filesystem."},{ty:"fn",name:"stat",path:"std::io::fs",desc:"Given a path, query the file system to get information about a file,\ndirectory, etc. This function will traverse symlinks to query\ninformation about the destination file."},{ty:"fn",name:"lstat",path:"std::io::fs",desc:"Perform the same operation as the `stat` function, except that this\nfunction does not traverse through symlinks. This will return\ninformation about the symlink file instead of the file that it points\nto."},{ty:"fn",name:"rename",path:"std::io::fs",desc:"Rename a file or directory to a new name."},{ty:"fn",name:"copy",path:"std::io::fs",desc:"Copies the contents of one file to another. This function will also\ncopy the permission bits of the original file to the destination file."},{ty:"fn",name:"chmod",path:"std::io::fs",desc:"Changes the permission mode bits found on a file or a directory. This\nfunction takes a mask from the `io` module"},{ty:"fn",name:"chown",path:"std::io::fs",desc:"Change the user and group owners of a file at the specified path."},{ty:"fn",name:"link",path:"std::io::fs",desc:"Creates a new hard link on the filesystem. The `dst` path will be a\nlink pointing to the `src` path. Note that systems often require these\ntwo paths to both be located on the same filesystem."},{ty:"fn",name:"symlink",path:"std::io::fs",desc:"Creates a new symbolic link on the filesystem. The `dst` path will be a\nsymlink pointing to the `src` path."},{ty:"fn",name:"readlink",path:"std::io::fs",desc:"Reads a symlink, returning the file that the symlink points to."},{ty:"fn",name:"mkdir",path:"std::io::fs",desc:"Create a new, empty directory at the provided path"},{ty:"fn",name:"rmdir",path:"std::io::fs",desc:"Remove an existing, empty directory"},{ty:"fn",name:"readdir",path:"std::io::fs",desc:"Retrieve a vector containing all entries within a provided directory"},{ty:"fn",name:"walk_dir",path:"std::io::fs",desc:"Returns an iterator which will recursively walk the directory structure\nrooted at `path`. The path given will not be iterated over, and this will\nperform iteration in a top-down order."},{ty:"fn",name:"mkdir_recursive",path:"std::io::fs",desc:"Recursively create a directory and all of its parent components if they\nare missing."},{ty:"fn",name:"rmdir_recursive",path:"std::io::fs",desc:"Removes a directory at this path, after removing all its contents. Use\ncarefully!"},{ty:"fn",name:"change_file_times",path:"std::io::fs",desc:"Changes the timestamps for a file's last modification and access time.\nThe file at the path specified will have its last access time set to\n`atime` and its modification time set to `mtime`. The times specified should\nbe in milliseconds."},{ty:"method",name:"open_mode",path:"std::io::fs",desc:"Open a file at `path` in the mode specified by the `mode` and `access`\narguments",parent:'139488'},{ty:"method",name:"open",path:"std::io::fs",desc:"Attempts to open a file in read-only mode. This function is equivalent to\n`File::open_mode(path, Open, Read)`, and will raise all of the same\nerrors that `File::open_mode` does.",parent:'139488'},{ty:"method",name:"create",path:"std::io::fs",desc:"Attempts to create a file in write-only mode. This function is\nequivalent to `File::open_mode(path, Truncate, Write)`, and will\nraise all of the same errors that `File::open_mode` does.",parent:'139488'},{ty:"method",name:"path",path:"std::io::fs",desc:"Returns the original path which was used to open this file.",parent:'139488'},{ty:"method",name:"fsync",path:"std::io::fs",desc:"Synchronizes all modifications to this file to its permanent storage\ndevice. This will flush any internal buffers necessary to perform this\noperation.",parent:'139488'},{ty:"method",name:"datasync",path:"std::io::fs",desc:"This function is similar to `fsync`, except that it may not synchronize\nfile metadata to the filesystem. This is intended for use case which\nmust synchronize content, but don't need the metadata on disk. The goal\nof this method is to reduce disk operations.",parent:'139488'},{ty:"method",name:"truncate",path:"std::io::fs",desc:"Either truncates or extends the underlying file, updating the size of\nthis file to become `size`. This is equivalent to unix's `truncate`\nfunction.",parent:'139488'},{ty:"method",name:"eof",path:"std::io::fs",desc:"Tests whether this stream has reached EOF.",parent:'139488'},{ty:"method",name:"next",path:"std::io::fs",desc:"",parent:'140138'},{ty:"method",name:"read",path:"std::io::fs",desc:"",parent:'139488'},{ty:"method",name:"write",path:"std::io::fs",desc:"",parent:'139488'},{ty:"method",name:"tell",path:"std::io::fs",desc:"",parent:'139488'},{ty:"method",name:"seek",path:"std::io::fs",desc:"",parent:'139488'},{ty:"mod",name:"net",path:"std::io",desc:"Networking I/O"},{ty:"mod",name:"addrinfo",path:"std::io::net",desc:"Synchronous DNS Resolution"},{ty:"struct",name:"Hint",path:"std::io::net::addrinfo",desc:"This structure is used to provide hints when fetching addresses for a\nremote host to control how the lookup is performed."},{ty:"structfield",name:"family",path:"std::io::net::addrinfo",desc:"",parent:'140726'},{ty:"structfield",name:"socktype",path:"std::io::net::addrinfo",desc:"",parent:'140726'},{ty:"structfield",name:"protocol",path:"std::io::net::addrinfo",desc:"",parent:'140726'},{ty:"structfield",name:"flags",path:"std::io::net::addrinfo",desc:"",parent:'140726'},{ty:"struct",name:"Info",path:"std::io::net::addrinfo",desc:""},{ty:"structfield",name:"address",path:"std::io::net::addrinfo",desc:"",parent:'140743'},{ty:"structfield",name:"family",path:"std::io::net::addrinfo",desc:"",parent:'140743'},{ty:"structfield",name:"socktype",path:"std::io::net::addrinfo",desc:"",parent:'140743'},{ty:"structfield",name:"protocol",path:"std::io::net::addrinfo",desc:"",parent:'140743'},{ty:"structfield",name:"flags",path:"std::io::net::addrinfo",desc:"",parent:'140743'},{ty:"enum",name:"SocketType",path:"std::io::net::addrinfo",desc:"Hints to the types of sockets that are desired when looking up hosts"},{ty:"variant",name:"Stream",path:"std::io::net::addrinfo",desc:"",parent:'140711'},{ty:"variant",name:"Datagram",path:"std::io::net::addrinfo",desc:"",parent:'140711'},{ty:"variant",name:"Raw",path:"std::io::net::addrinfo",desc:"",parent:'140711'},{ty:"enum",name:"Flag",path:"std::io::net::addrinfo",desc:"Flags which can be or'd into the `flags` field of a `Hint`. These are used\nto manipulate how a query is performed."},{ty:"variant",name:"AddrConfig",path:"std::io::net::addrinfo",desc:"",parent:'140715'},{ty:"variant",name:"All",path:"std::io::net::addrinfo",desc:"",parent:'140715'},{ty:"variant",name:"CanonName",path:"std::io::net::addrinfo",desc:"",parent:'140715'},{ty:"variant",name:"NumericHost",path:"std::io::net::addrinfo",desc:"",parent:'140715'},{ty:"variant",name:"NumericServ",path:"std::io::net::addrinfo",desc:"",parent:'140715'},{ty:"variant",name:"Passive",path:"std::io::net::addrinfo",desc:"",parent:'140715'},{ty:"variant",name:"V4Mapped",path:"std::io::net::addrinfo",desc:"",parent:'140715'},{ty:"enum",name:"Protocol",path:"std::io::net::addrinfo",desc:"A transport protocol associated with either a hint or a return value of\n`lookup`"},{ty:"variant",name:"TCP",path:"std::io::net::addrinfo",desc:"",parent:'140723'},{ty:"variant",name:"UDP",path:"std::io::net::addrinfo",desc:"",parent:'140723'},{ty:"fn",name:"get_host_addresses",path:"std::io::net::addrinfo",desc:"Easy name resolution. Given a hostname, returns the list of IP addresses for\nthat hostname."},{ty:"mod",name:"tcp",path:"std::io::net",desc:"TCP network connections"},{ty:"struct",name:"TcpStream",path:"std::io::net::tcp",desc:"A structure which represents a TCP stream between a local socket and a\nremote socket."},{ty:"struct",name:"TcpListener",path:"std::io::net::tcp",desc:"A structure representing a socket server. This listener is used to create a\n`TcpAcceptor` which can be used to accept sockets on a local port."},{ty:"struct",name:"TcpAcceptor",path:"std::io::net::tcp",desc:"The accepting half of a TCP socket server. This structure is created through\na `TcpListener`'s `listen` method, and this object can be used to accept new\n`TcpStream` instances."},{ty:"method",name:"connect",path:"std::io::net::tcp",desc:"Creates a TCP connection to a remote socket address.",parent:'140859'},{ty:"method",name:"peer_name",path:"std::io::net::tcp",desc:"Returns the socket address of the remote peer of this TCP connection.",parent:'140859'},{ty:"method",name:"socket_name",path:"std::io::net::tcp",desc:"Returns the socket address of the local half of this TCP connection.",parent:'140859'},{ty:"method",name:"clone",path:"std::io::net::tcp",desc:"Creates a new handle to this TCP stream, allowing for simultaneous reads\nand writes of this connection.",parent:'140859'},{ty:"method",name:"read",path:"std::io::net::tcp",desc:"",parent:'140859'},{ty:"method",name:"write",path:"std::io::net::tcp",desc:"",parent:'140859'},{ty:"method",name:"bind",path:"std::io::net::tcp",desc:"Creates a new `TcpListener` which will be bound to the specified local\nsocket address. This listener is not ready for accepting connections,\n`listen` must be called on it before that's possible.",parent:'140987'},{ty:"method",name:"socket_name",path:"std::io::net::tcp",desc:"Returns the local socket address of this listener.",parent:'140987'},{ty:"method",name:"listen",path:"std::io::net::tcp",desc:"",parent:'140987'},{ty:"method",name:"accept",path:"std::io::net::tcp",desc:"",parent:'141068'},{ty:"mod",name:"udp",path:"std::io::net",desc:""},{ty:"struct",name:"UdpSocket",path:"std::io::net::udp",desc:""},{ty:"struct",name:"UdpStream",path:"std::io::net::udp",desc:""},{ty:"method",name:"bind",path:"std::io::net::udp",desc:"",parent:'141108'},{ty:"method",name:"recvfrom",path:"std::io::net::udp",desc:"",parent:'141108'},{ty:"method",name:"sendto",path:"std::io::net::udp",desc:"",parent:'141108'},{ty:"method",name:"connect",path:"std::io::net::udp",desc:"",parent:'141108'},{ty:"method",name:"socket_name",path:"std::io::net::udp",desc:"",parent:'141108'},{ty:"method",name:"clone",path:"std::io::net::udp",desc:"Creates a new handle to this UDP socket, allowing for simultaneous reads\nand writes of the socket.",parent:'141108'},{ty:"method",name:"as_socket",path:"std::io::net::udp",desc:"",parent:'141234'},{ty:"method",name:"disconnect",path:"std::io::net::udp",desc:"",parent:'141234'},{ty:"method",name:"read",path:"std::io::net::udp",desc:"",parent:'141234'},{ty:"method",name:"write",path:"std::io::net::udp",desc:"",parent:'141234'},{ty:"mod",name:"ip",path:"std::io::net",desc:""},{ty:"struct",name:"SocketAddr",path:"std::io::net::ip",desc:""},{ty:"structfield",name:"ip",path:"std::io::net::ip",desc:"",parent:'142859'},{ty:"structfield",name:"port",path:"std::io::net::ip",desc:"",parent:'142859'},{ty:"enum",name:"IpAddr",path:"std::io::net::ip",desc:""},{ty:"variant",name:"Ipv4Addr",path:"std::io::net::ip",desc:"",parent:'141390'},{ty:"variant",name:"Ipv6Addr",path:"std::io::net::ip",desc:"",parent:'141390'},{ty:"typedef",name:"Port",path:"std::io::net::ip",desc:""},{ty:"method",name:"hash",path:"std::io::net::ip",desc:"",parent:'141390'},{ty:"method",name:"clone",path:"std::io::net::ip",desc:"",parent:'141390'},{ty:"method",name:"equals",path:"std::io::net::ip",desc:"",parent:'141390'},{ty:"method",name:"eq",path:"std::io::net::ip",desc:"",parent:'141390'},{ty:"method",name:"ne",path:"std::io::net::ip",desc:"",parent:'141390'},{ty:"method",name:"fmt",path:"std::io::net::ip",desc:"",parent:'141390'},{ty:"method",name:"hash",path:"std::io::net::ip",desc:"",parent:'142859'},{ty:"method",name:"clone",path:"std::io::net::ip",desc:"",parent:'142859'},{ty:"method",name:"equals",path:"std::io::net::ip",desc:"",parent:'142859'},{ty:"method",name:"eq",path:"std::io::net::ip",desc:"",parent:'142859'},{ty:"method",name:"ne",path:"std::io::net::ip",desc:"",parent:'142859'},{ty:"method",name:"fmt",path:"std::io::net::ip",desc:"",parent:'142859'},{ty:"method",name:"from_str",path:"std::io::net::ip",desc:"",parent:'141390'},{ty:"method",name:"from_str",path:"std::io::net::ip",desc:"",parent:'142859'},{ty:"mod",name:"unix",path:"std::io::net",desc:"Named pipes"},{ty:"struct",name:"UnixStream",path:"std::io::net::unix",desc:"A stream which communicates over a named pipe."},{ty:"struct",name:"UnixListener",path:"std::io::net::unix",desc:""},{ty:"struct",name:"UnixAcceptor",path:"std::io::net::unix",desc:""},{ty:"method",name:"connect",path:"std::io::net::unix",desc:"Connect to a pipe named by `path`. This will attempt to open a\nconnection to the underlying socket.",parent:'144849'},{ty:"method",name:"clone",path:"std::io::net::unix",desc:"",parent:'144849'},{ty:"method",name:"read",path:"std::io::net::unix",desc:"",parent:'144849'},{ty:"method",name:"write",path:"std::io::net::unix",desc:"",parent:'144849'},{ty:"method",name:"bind",path:"std::io::net::unix",desc:"Creates a new listener, ready to receive incoming connections on the\nspecified socket. The server will be named by `path`.",parent:'144959'},{ty:"method",name:"listen",path:"std::io::net::unix",desc:"",parent:'144959'},{ty:"method",name:"accept",path:"std::io::net::unix",desc:"",parent:'145033'},{ty:"mod",name:"pipe",path:"std::io",desc:"Synchronous, in-memory pipes."},{ty:"struct",name:"PipeStream",path:"std::io::pipe",desc:""},{ty:"method",name:"open",path:"std::io::pipe",desc:"Consumes a file descriptor to return a pipe stream that will have\nsynchronous, but non-blocking reads/writes. This is useful if the file\ndescriptor is acquired via means other than the standard methods.",parent:'145065'},{ty:"method",name:"clone",path:"std::io::pipe",desc:"",parent:'145065'},{ty:"method",name:"read",path:"std::io::pipe",desc:"",parent:'145065'},{ty:"method",name:"write",path:"std::io::pipe",desc:"",parent:'145065'},{ty:"mod",name:"process",path:"std::io",desc:"Bindings for executing child processes"},{ty:"struct",name:"Process",path:"std::io::process",desc:"Representation of a running or exited child process."},{ty:"structfield",name:"stdin",path:"std::io::process",desc:"Handle to the child's stdin, if the `stdin` field of this process's\n`ProcessConfig` was `CreatePipe`. By default, this handle is `Some`.",parent:'145194'},{ty:"structfield",name:"stdout",path:"std::io::process",desc:"Handle to the child's stdout, if the `stdout` field of this process's\n`ProcessConfig` was `CreatePipe`. By default, this handle is `Some`.",parent:'145194'},{ty:"structfield",name:"stderr",path:"std::io::process",desc:"Handle to the child's stderr, if the `stderr` field of this process's\n`ProcessConfig` was `CreatePipe`. By default, this handle is `Some`.",parent:'145194'},{ty:"structfield",name:"extra_io",path:"std::io::process",desc:"Extra I/O handles as configured by the original `ProcessConfig` when\nthis process was created. This is by default empty.",parent:'145194'},{ty:"struct",name:"ProcessConfig",path:"std::io::process",desc:"This configuration describes how a new process should be spawned. A blank\nconfiguration can be created with `ProcessConfig::new()`. It is also\nrecommented to use a functional struct update pattern when creating process\nconfiguration:"},{ty:"structfield",name:"program",path:"std::io::process",desc:"Path to the program to run",parent:'145221'},{ty:"structfield",name:"args",path:"std::io::process",desc:"Arguments to pass to the program (doesn't include the program itself)",parent:'145221'},{ty:"structfield",name:"env",path:"std::io::process",desc:"Optional environment to specify for the program. If this is None, then\nit will inherit the current process's environment.",parent:'145221'},{ty:"structfield",name:"cwd",path:"std::io::process",desc:"Optional working directory for the new process. If this is None, then\nthe current directory of the running process is inherited.",parent:'145221'},{ty:"structfield",name:"stdin",path:"std::io::process",desc:"Configuration for the child process's stdin handle (file descriptor 0).\nThis field defaults to `CreatePipe(true, false)` so the input can be\nwritten to.",parent:'145221'},{ty:"structfield",name:"stdout",path:"std::io::process",desc:"Configuration for the child process's stdout handle (file descriptor 1).\nThis field defaults to `CreatePipe(false, true)` so the output can be\ncollected.",parent:'145221'},{ty:"structfield",name:"stderr",path:"std::io::process",desc:"Configuration for the child process's stdout handle (file descriptor 2).\nThis field defaults to `CreatePipe(false, true)` so the output can be\ncollected.",parent:'145221'},{ty:"structfield",name:"extra_io",path:"std::io::process",desc:"Any number of streams/file descriptors/pipes may be attached to this\nprocess. This list enumerates the file descriptors and such for the\nprocess to be spawned, and the file descriptors inherited will start at\n3 and go to the length of this array. The first three file descriptors\n(stdin/stdout/stderr) are configured with the `stdin`, `stdout`, and\n`stderr` fields.",parent:'145221'},{ty:"structfield",name:"uid",path:"std::io::process",desc:"Sets the child process's user id. This translates to a `setuid` call in\nthe child process. Setting this value on windows will cause the spawn to\nfail. Failure in the `setuid` call on unix will also cause the spawn to\nfail.",parent:'145221'},{ty:"structfield",name:"gid",path:"std::io::process",desc:"Similar to `uid`, but sets the group id of the child process. This has\nthe same semantics as the `uid` field.",parent:'145221'},{ty:"structfield",name:"detach",path:"std::io::process",desc:"If true, the child process is spawned in a detached state. On unix, this\nmeans that the child is the leader of a new process group.",parent:'145221'},{ty:"struct",name:"ProcessOutput",path:"std::io::process",desc:"The output of a finished process."},{ty:"structfield",name:"status",path:"std::io::process",desc:"The status (exit code) of the process.",parent:'145283'},{ty:"structfield",name:"output",path:"std::io::process",desc:"The data that the process wrote to stdout.",parent:'145283'},{ty:"structfield",name:"error",path:"std::io::process",desc:"The data that the process wrote to stderr.",parent:'145283'},{ty:"enum",name:"StdioContainer",path:"std::io::process",desc:"Describes what to do with a standard io stream for a child process."},{ty:"variant",name:"Ignored",path:"std::io::process",desc:"This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",parent:'145297'},{ty:"variant",name:"InheritFd",path:"std::io::process",desc:"The specified file descriptor is inherited for the stream which it is\nspecified for.",parent:'145297'},{ty:"variant",name:"CreatePipe",path:"std::io::process",desc:"Creates a pipe for the specified file descriptor which will be created\nwhen the process is spawned.",parent:'145297'},{ty:"enum",name:"ProcessExit",path:"std::io::process",desc:"Describes the result of a process after it has terminated.\nNote that Windows have no signals, so the result is usually ExitStatus."},{ty:"variant",name:"ExitStatus",path:"std::io::process",desc:"Normal termination with an exit status.",parent:'145310'},{ty:"variant",name:"ExitSignal",path:"std::io::process",desc:"Termination by signal, with the signal number.",parent:'145310'},{ty:"static",name:"PleaseExitSignal",path:"std::io::process",desc:"Signal a process to exit, without forcibly killing it. Corresponds to\nSIGTERM on unix platforms."},{ty:"static",name:"MustDieSignal",path:"std::io::process",desc:"Signal a process to exit immediately, forcibly killing it. Corresponds to\nSIGKILL on unix platforms."},{ty:"method",name:"eq",path:"std::io::process",desc:"",parent:'145310'},{ty:"method",name:"ne",path:"std::io::process",desc:"",parent:'145310'},{ty:"method",name:"fmt",path:"std::io::process",desc:"Format a ProcessExit enum, to nicely present the information.",parent:'145310'},{ty:"method",name:"success",path:"std::io::process",desc:"Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",parent:'145310'},{ty:"method",name:"matches_exit_status",path:"std::io::process",desc:"Checks whether this ProcessExit matches the given exit status.\nTermination by signal will never match an exit code.",parent:'145310'},{ty:"method",name:"new",path:"std::io::process",desc:"Creates a new configuration with blanks as all of the defaults. This is\nuseful when using functional struct updates:",parent:'145221'},{ty:"method",name:"new",path:"std::io::process",desc:"Creates a new process for the specified program/arguments, using\notherwise default configuration.",parent:'145194'},{ty:"method",name:"output",path:"std::io::process",desc:"Executes the specified program with arguments, waiting for it to finish\nand collecting all of its output.",parent:'145194'},{ty:"method",name:"status",path:"std::io::process",desc:"Executes a child process and collects its exit status. This will block\nwaiting for the child to exit.",parent:'145194'},{ty:"method",name:"configure",path:"std::io::process",desc:"Creates a new process with the specified configuration.",parent:'145194'},{ty:"method",name:"kill",path:"std::io::process",desc:"Sends `signal` to another process in the system identified by `id`.",parent:'145194'},{ty:"method",name:"id",path:"std::io::process",desc:"Returns the process id of this child process",parent:'145194'},{ty:"method",name:"signal",path:"std::io::process",desc:"Sends the specified signal to the child process, returning whether the\nsignal could be delivered or not.",parent:'145194'},{ty:"method",name:"signal_exit",path:"std::io::process",desc:"Sends a signal to this child requesting that it exits. This is\nequivalent to sending a SIGTERM on unix platforms.",parent:'145194'},{ty:"method",name:"signal_kill",path:"std::io::process",desc:"Sends a signal to this child forcing it to exit. This is equivalent to\nsending a SIGKILL on unix platforms.",parent:'145194'},{ty:"method",name:"wait",path:"std::io::process",desc:"Wait for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",parent:'145194'},{ty:"method",name:"wait_with_output",path:"std::io::process",desc:"Simultaneously wait for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning a `ProcessOutput`\ninstance.",parent:'145194'},{ty:"method",name:"drop",path:"std::io::process",desc:"",parent:'145194'},{ty:"mod",name:"signal",path:"std::io",desc:"Signal handling"},{ty:"struct",name:"Listener",path:"std::io::signal",desc:"Listener provides a receiver to listen for registered signals."},{ty:"structfield",name:"rx",path:"std::io::signal",desc:"Clients of Listener can `recv()` on this receiver. This is exposed to\nallow selection over it as well as manipulation of the receiver\ndirectly.",parent:'146750'},{ty:"enum",name:"Signum",path:"std::io::signal",desc:"Signals that can be sent and received"},{ty:"variant",name:"Break",path:"std::io::signal",desc:"Equivalent to SIGBREAK, delivered when the user presses Ctrl-Break.",parent:'146098'},{ty:"variant",name:"HangUp",path:"std::io::signal",desc:"Equivalent to SIGHUP, delivered when the user closes the terminal\nwindow. On delivery of HangUp, the program is given approximately\n10 seconds to perform any cleanup. After that, Windows will\nunconditionally terminate it.",parent:'146098'},{ty:"variant",name:"Interrupt",path:"std::io::signal",desc:"Equivalent to SIGINT, delivered when the user presses Ctrl-c.",parent:'146098'},{ty:"variant",name:"Quit",path:"std::io::signal",desc:"Equivalent to SIGQUIT, delivered when the user presses Ctrl-\\.",parent:'146098'},{ty:"variant",name:"StopTemporarily",path:"std::io::signal",desc:"Equivalent to SIGTSTP, delivered when the user presses Ctrl-z.",parent:'146098'},{ty:"variant",name:"User1",path:"std::io::signal",desc:"Equivalent to SIGUSR1.",parent:'146098'},{ty:"variant",name:"User2",path:"std::io::signal",desc:"Equivalent to SIGUSR2.",parent:'146098'},{ty:"variant",name:"WindowSizeChange",path:"std::io::signal",desc:"Equivalent to SIGWINCH, delivered when the console has been resized.\nWindowSizeChange may not be delivered in a timely manner; size change\nwill only be detected when the cursor is being moved.",parent:'146098'},{ty:"method",name:"fmt",path:"std::io::signal",desc:"",parent:'146098'},{ty:"method",name:"hash",path:"std::io::signal",desc:"",parent:'146098'},{ty:"method",name:"eq",path:"std::io::signal",desc:"",parent:'146098'},{ty:"method",name:"ne",path:"std::io::signal",desc:"",parent:'146098'},{ty:"method",name:"new",path:"std::io::signal",desc:"Creates a new listener for signals. Once created, signals are bound via\nthe `register` method (otherwise nothing will ever be received)",parent:'146750'},{ty:"method",name:"register",path:"std::io::signal",desc:"Listen for a signal, returning true when successfully registered for\nsignum. Signals can be received using `recv()`.",parent:'146750'},{ty:"method",name:"unregister",path:"std::io::signal",desc:"Unregisters a signal. If this listener currently had a handler\nregistered for the signal, then it will stop receiving any more\nnotification about the signal. If the signal has already been received,\nit may still be returned by `recv`.",parent:'146750'},{ty:"mod",name:"stdio",path:"std::io",desc:"Non-blocking access to stdin, stdout, and stderr."},{ty:"struct",name:"StdReader",path:"std::io::stdio",desc:"Representation of a reader of a standard input stream"},{ty:"struct",name:"StdWriter",path:"std::io::stdio",desc:"Representation of a writer to a standard output stream"},{ty:"fn",name:"stdin",path:"std::io::stdio",desc:"Creates a new non-blocking handle to the stdin of the current process."},{ty:"fn",name:"stdin_raw",path:"std::io::stdio",desc:"Creates a new non-blocking handle to the stdin of the current process."},{ty:"fn",name:"stdout",path:"std::io::stdio",desc:"Creates a line-buffered handle to the stdout of the current process."},{ty:"fn",name:"stdout_raw",path:"std::io::stdio",desc:"Creates an unbuffered handle to the stdout of the current process"},{ty:"fn",name:"stderr",path:"std::io::stdio",desc:"Creates a line-buffered handle to the stderr of the current process."},{ty:"fn",name:"stderr_raw",path:"std::io::stdio",desc:"Creates an unbuffered handle to the stderr of the current process"},{ty:"fn",name:"set_stdout",path:"std::io::stdio",desc:"Resets the task-local stdout handle to the specified writer"},{ty:"fn",name:"set_stderr",path:"std::io::stdio",desc:"Resets the task-local stderr handle to the specified writer"},{ty:"fn",name:"flush",path:"std::io::stdio",desc:"Flushes the local task's stdout handle."},{ty:"fn",name:"print",path:"std::io::stdio",desc:"Prints a string to the stdout of the current process. No newline is emitted\nafter the string is printed."},{ty:"fn",name:"println",path:"std::io::stdio",desc:"Prints a string as a line. to the stdout of the current process. A literal\n`\\n` character is printed to the console after the string."},{ty:"fn",name:"print_args",path:"std::io::stdio",desc:"Similar to `print`, but takes a `fmt::Arguments` structure to be compatible\nwith the `format_args!` macro."},{ty:"fn",name:"println_args",path:"std::io::stdio",desc:"Similar to `println`, but takes a `fmt::Arguments` structure to be\ncompatible with the `format_args!` macro."},{ty:"method",name:"read",path:"std::io::stdio",desc:"",parent:'147553'},{ty:"method",name:"winsize",path:"std::io::stdio",desc:"Gets the size of this output window, if possible. This is typically used\nwhen the writer is attached to something like a terminal, this is used\nto fetch the dimensions of the terminal.",parent:'147621'},{ty:"method",name:"set_raw",path:"std::io::stdio",desc:"Controls whether this output stream is a \"raw stream\" or simply a normal\nstream.",parent:'147621'},{ty:"method",name:"isatty",path:"std::io::stdio",desc:"Returns whether this stream is attached to a TTY instance or not.",parent:'147621'},{ty:"method",name:"write",path:"std::io::stdio",desc:"",parent:'147621'},{ty:"mod",name:"timer",path:"std::io",desc:"Synchronous Timers"},{ty:"struct",name:"Timer",path:"std::io::timer",desc:"A synchronous timer object"},{ty:"fn",name:"sleep",path:"std::io::timer",desc:"Sleep the current task for `msecs` milliseconds."},{ty:"method",name:"new",path:"std::io::timer",desc:"Creates a new timer which can be used to put the current task to sleep\nfor a number of milliseconds, or to possibly create channels which will\nget notified after an amount of time has passed.",parent:'147737'},{ty:"method",name:"sleep",path:"std::io::timer",desc:"Blocks the current task for `msecs` milliseconds.",parent:'147737'},{ty:"method",name:"oneshot",path:"std::io::timer",desc:"Creates a oneshot receiver which will have a notification sent when\n`msecs` milliseconds has elapsed. This does *not* block the current\ntask, but instead returns immediately.",parent:'147737'},{ty:"method",name:"periodic",path:"std::io::timer",desc:"Creates a receiver which will have a continuous stream of notifications\nbeing sent every `msecs` milliseconds. This does *not* block the\ncurrent task, but instead returns immediately. The first notification\nwill not be received immediately, but rather after `msec` milliseconds\nhave passed.",parent:'147737'},{ty:"mod",name:"util",path:"std::io",desc:"Utility implementations of Reader and Writer"},{ty:"struct",name:"LimitReader",path:"std::io::util",desc:"Wraps a `Reader`, limiting the number of bytes that can be read from it."},{ty:"struct",name:"NullWriter",path:"std::io::util",desc:"A `Writer` which ignores bytes written to it, like /dev/null."},{ty:"struct",name:"ZeroReader",path:"std::io::util",desc:"A `Reader` which returns an infinite stream of 0 bytes, like /dev/zero."},{ty:"struct",name:"NullReader",path:"std::io::util",desc:"A `Reader` which is always at EOF, like /dev/null."},{ty:"struct",name:"MultiWriter",path:"std::io::util",desc:"A `Writer` which multiplexes writes to a set of `Writers`."},{ty:"struct",name:"ChainedReader",path:"std::io::util",desc:"A `Reader` which chains input from multiple `Readers`, reading each to\ncompletion before moving onto the next."},{ty:"struct",name:"TeeReader",path:"std::io::util",desc:"A `Reader` which forwards input from another `Reader`, passing it along to\na `Writer` as well. Similar to the `tee(1)` command."},{ty:"fn",name:"copy",path:"std::io::util",desc:"Copies all data from a `Reader` to a `Writer`."},{ty:"method",name:"new",path:"std::io::util",desc:"Creates a new `LimitReader`",parent:'147846'},{ty:"method",name:"unwrap",path:"std::io::util",desc:"Consumes the `LimitReader`, returning the underlying `Reader`.",parent:'147846'},{ty:"method",name:"limit",path:"std::io::util",desc:"Returns the number of bytes that can be read before the `LimitReader`\nwill return EOF.",parent:'147846'},{ty:"method",name:"read",path:"std::io::util",desc:"",parent:'147846'},{ty:"method",name:"write",path:"std::io::util",desc:"",parent:'147964'},{ty:"method",name:"read",path:"std::io::util",desc:"",parent:'147987'},{ty:"method",name:"read",path:"std::io::util",desc:"",parent:'148016'},{ty:"method",name:"new",path:"std::io::util",desc:"Creates a new `MultiWriter`",parent:'148042'},{ty:"method",name:"write",path:"std::io::util",desc:"",parent:'148042'},{ty:"method",name:"flush",path:"std::io::util",desc:"",parent:'148042'},{ty:"method",name:"new",path:"std::io::util",desc:"Creates a new `ChainedReader`",parent:'148162'},{ty:"method",name:"read",path:"std::io::util",desc:"",parent:'148162'},{ty:"method",name:"new",path:"std::io::util",desc:"Creates a new `TeeReader`",parent:'148297'},{ty:"method",name:"unwrap",path:"std::io::util",desc:"Consumes the `TeeReader`, returning the underlying `Reader` and\n`Writer`.",parent:'148297'},{ty:"method",name:"read",path:"std::io::util",desc:"",parent:'148297'},{ty:"typedef",name:"IoResult",path:"std::io",desc:"A convenient typedef of the return value of any I/O action."},{ty:"typedef",name:"FilePermission",path:"std::io",desc:"A set of permissions for a file or directory is represented by a set of\nflags which are or'd together."},{ty:"static",name:"UserRead",path:"std::io",desc:""},{ty:"static",name:"UserWrite",path:"std::io",desc:""},{ty:"static",name:"UserExecute",path:"std::io",desc:""},{ty:"static",name:"GroupRead",path:"std::io",desc:""},{ty:"static",name:"GroupWrite",path:"std::io",desc:""},{ty:"static",name:"GroupExecute",path:"std::io",desc:""},{ty:"static",name:"OtherRead",path:"std::io",desc:""},{ty:"static",name:"OtherWrite",path:"std::io",desc:""},{ty:"static",name:"OtherExecute",path:"std::io",desc:""},{ty:"static",name:"UserRWX",path:"std::io",desc:""},{ty:"static",name:"GroupRWX",path:"std::io",desc:""},{ty:"static",name:"OtherRWX",path:"std::io",desc:""},{ty:"static",name:"UserFile",path:"std::io",desc:"A set of permissions for user owned files, this is equivalent to 0644 on\nunix-like systems."},{ty:"static",name:"UserDir",path:"std::io",desc:"A set of permissions for user owned directories, this is equivalent to 0755\non unix-like systems."},{ty:"static",name:"UserExec",path:"std::io",desc:"A set of permissions for user owned executables, this is equivalent to 0755\non unix-like systems."},{ty:"static",name:"AllPermissions",path:"std::io",desc:"A mask for all possible permission bits"},{ty:"trait",name:"Reader",path:"std::io",desc:"A trait for objects which are byte-oriented streams. Readers are defined by\none method, `read`. This function will block until data is available,\nfilling in the provided buffer with any data read."},{ty:"tymethod",name:"read",path:"std::io",desc:"Read bytes, up to the length of `buf` and place them in `buf`.\nReturns the number of bytes read. The number of bytes read my\nbe less than the number requested, even 0. Returns `Err` on EOF.",parent:'149964'},{ty:"method",name:"read_byte",path:"std::io",desc:"Reads a single byte. Returns `Err` on EOF.",parent:'149964'},{ty:"method",name:"push_bytes",path:"std::io",desc:"Reads `len` bytes and appends them to a vector.",parent:'149964'},{ty:"method",name:"read_bytes",path:"std::io",desc:"Reads `len` bytes and gives you back a new vector of length `len`",parent:'149964'},{ty:"method",name:"read_to_end",path:"std::io",desc:"Reads all remaining bytes from the stream.",parent:'149964'},{ty:"method",name:"read_to_str",path:"std::io",desc:"Reads all of the remaining bytes of this stream, interpreting them as a\nUTF-8 encoded stream. The corresponding string is returned.",parent:'149964'},{ty:"method",name:"bytes",path:"std::io",desc:"Create an iterator that reads a single byte on\neach iteration, until EOF.",parent:'149964'},{ty:"method",name:"read_le_uint_n",path:"std::io",desc:"Reads `n` little-endian unsigned integer bytes.",parent:'149964'},{ty:"method",name:"read_le_int_n",path:"std::io",desc:"Reads `n` little-endian signed integer bytes.",parent:'149964'},{ty:"method",name:"read_be_uint_n",path:"std::io",desc:"Reads `n` big-endian unsigned integer bytes.",parent:'149964'},{ty:"method",name:"read_be_int_n",path:"std::io",desc:"Reads `n` big-endian signed integer bytes.",parent:'149964'},{ty:"method",name:"read_le_uint",path:"std::io",desc:"Reads a little-endian unsigned integer.",parent:'149964'},{ty:"method",name:"read_le_int",path:"std::io",desc:"Reads a little-endian integer.",parent:'149964'},{ty:"method",name:"read_be_uint",path:"std::io",desc:"Reads a big-endian unsigned integer.",parent:'149964'},{ty:"method",name:"read_be_int",path:"std::io",desc:"Reads a big-endian integer.",parent:'149964'},{ty:"method",name:"read_be_u64",path:"std::io",desc:"Reads a big-endian `u64`.",parent:'149964'},{ty:"method",name:"read_be_u32",path:"std::io",desc:"Reads a big-endian `u32`.",parent:'149964'},{ty:"method",name:"read_be_u16",path:"std::io",desc:"Reads a big-endian `u16`.",parent:'149964'},{ty:"method",name:"read_be_i64",path:"std::io",desc:"Reads a big-endian `i64`.",parent:'149964'},{ty:"method",name:"read_be_i32",path:"std::io",desc:"Reads a big-endian `i32`.",parent:'149964'},{ty:"method",name:"read_be_i16",path:"std::io",desc:"Reads a big-endian `i16`.",parent:'149964'},{ty:"method",name:"read_be_f64",path:"std::io",desc:"Reads a big-endian `f64`.",parent:'149964'},{ty:"method",name:"read_be_f32",path:"std::io",desc:"Reads a big-endian `f32`.",parent:'149964'},{ty:"method",name:"read_le_u64",path:"std::io",desc:"Reads a little-endian `u64`.",parent:'149964'},{ty:"method",name:"read_le_u32",path:"std::io",desc:"Reads a little-endian `u32`.",parent:'149964'},{ty:"method",name:"read_le_u16",path:"std::io",desc:"Reads a little-endian `u16`.",parent:'149964'},{ty:"method",name:"read_le_i64",path:"std::io",desc:"Reads a little-endian `i64`.",parent:'149964'},{ty:"method",name:"read_le_i32",path:"std::io",desc:"Reads a little-endian `i32`.",parent:'149964'},{ty:"method",name:"read_le_i16",path:"std::io",desc:"Reads a little-endian `i16`.",parent:'149964'},{ty:"method",name:"read_le_f64",path:"std::io",desc:"Reads a little-endian `f64`.",parent:'149964'},{ty:"method",name:"read_le_f32",path:"std::io",desc:"Reads a little-endian `f32`.",parent:'149964'},{ty:"method",name:"read_u8",path:"std::io",desc:"Read a u8.",parent:'149964'},{ty:"method",name:"read_i8",path:"std::io",desc:"Read an i8.",parent:'149964'},{ty:"method",name:"by_ref",path:"std::io",desc:"Creates a wrapper around a mutable reference to the reader.",parent:'149964'},{ty:"trait",name:"Writer",path:"std::io",desc:"A trait for objects which are byte-oriented streams. Writers are defined by\none method, `write`. This function will block until the provided buffer of\nbytes has been entirely written, and it will return any failurs which occur."},{ty:"tymethod",name:"write",path:"std::io",desc:"Write the entirety of a given buffer",parent:'151242'},{ty:"method",name:"flush",path:"std::io",desc:"Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",parent:'151242'},{ty:"method",name:"write_str",path:"std::io",desc:"Write a rust string into this sink.",parent:'151242'},{ty:"method",name:"write_line",path:"std::io",desc:"Writes a string into this sink, and then writes a literal newline (`\\n`)\nbyte afterwards. Note that the writing of the newline is *not* atomic in\nthe sense that the call to `write` is invoked twice (once with the\nstring and once with a newline character).",parent:'151242'},{ty:"method",name:"write_char",path:"std::io",desc:"Write a single char, encoded as UTF-8.",parent:'151242'},{ty:"method",name:"write_int",path:"std::io",desc:"Write the result of passing n through `int::to_str_bytes`.",parent:'151242'},{ty:"method",name:"write_uint",path:"std::io",desc:"Write the result of passing n through `uint::to_str_bytes`.",parent:'151242'},{ty:"method",name:"write_le_uint",path:"std::io",desc:"Write a little-endian uint (number of bytes depends on system).",parent:'151242'},{ty:"method",name:"write_le_int",path:"std::io",desc:"Write a little-endian int (number of bytes depends on system).",parent:'151242'},{ty:"method",name:"write_be_uint",path:"std::io",desc:"Write a big-endian uint (number of bytes depends on system).",parent:'151242'},{ty:"method",name:"write_be_int",path:"std::io",desc:"Write a big-endian int (number of bytes depends on system).",parent:'151242'},{ty:"method",name:"write_be_u64",path:"std::io",desc:"Write a big-endian u64 (8 bytes).",parent:'151242'},{ty:"method",name:"write_be_u32",path:"std::io",desc:"Write a big-endian u32 (4 bytes).",parent:'151242'},{ty:"method",name:"write_be_u16",path:"std::io",desc:"Write a big-endian u16 (2 bytes).",parent:'151242'},{ty:"method",name:"write_be_i64",path:"std::io",desc:"Write a big-endian i64 (8 bytes).",parent:'151242'},{ty:"method",name:"write_be_i32",path:"std::io",desc:"Write a big-endian i32 (4 bytes).",parent:'151242'},{ty:"method",name:"write_be_i16",path:"std::io",desc:"Write a big-endian i16 (2 bytes).",parent:'151242'},{ty:"method",name:"write_be_f64",path:"std::io",desc:"Write a big-endian IEEE754 double-precision floating-point (8 bytes).",parent:'151242'},{ty:"method",name:"write_be_f32",path:"std::io",desc:"Write a big-endian IEEE754 single-precision floating-point (4 bytes).",parent:'151242'},{ty:"method",name:"write_le_u64",path:"std::io",desc:"Write a little-endian u64 (8 bytes).",parent:'151242'},{ty:"method",name:"write_le_u32",path:"std::io",desc:"Write a little-endian u32 (4 bytes).",parent:'151242'},{ty:"method",name:"write_le_u16",path:"std::io",desc:"Write a little-endian u16 (2 bytes).",parent:'151242'},{ty:"method",name:"write_le_i64",path:"std::io",desc:"Write a little-endian i64 (8 bytes).",parent:'151242'},{ty:"method",name:"write_le_i32",path:"std::io",desc:"Write a little-endian i32 (4 bytes).",parent:'151242'},{ty:"method",name:"write_le_i16",path:"std::io",desc:"Write a little-endian i16 (2 bytes).",parent:'151242'},{ty:"method",name:"write_le_f64",path:"std::io",desc:"Write a little-endian IEEE754 double-precision floating-point\n(8 bytes).",parent:'151242'},{ty:"method",name:"write_le_f32",path:"std::io",desc:"Write a little-endian IEEE754 single-precision floating-point\n(4 bytes).",parent:'151242'},{ty:"method",name:"write_u8",path:"std::io",desc:"Write a u8 (1 byte).",parent:'151242'},{ty:"method",name:"write_i8",path:"std::io",desc:"Write a i8 (1 byte).",parent:'151242'},{ty:"method",name:"by_ref",path:"std::io",desc:"Creates a wrapper around a mutable reference to the writer.",parent:'151242'},{ty:"trait",name:"Stream",path:"std::io",desc:"A Stream is a readable and a writable object. Data written is typically\nreceived by the object which reads receive data from."},{ty:"trait",name:"Buffer",path:"std::io",desc:"A Buffer is a type of reader which has some form of internal buffering to\nallow certain kinds of reading operations to be more optimized than others.\nThis type extends the `Reader` trait with a few methods that are not\npossible to reasonably implement with purely a read interface."},{ty:"tymethod",name:"fill",path:"std::io",desc:"Fills the internal buffer of this object, returning the buffer contents.\nNote that none of the contents will be \"read\" in the sense that later\ncalling `read` may return the same contents.",parent:'152315'},{ty:"tymethod",name:"consume",path:"std::io",desc:"Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to `fill` or `read`.",parent:'152315'},{ty:"method",name:"read_line",path:"std::io",desc:"Reads the next line of input, interpreted as a sequence of UTF-8\nencoded unicode codepoints. If a newline is encountered, then the\nnewline is contained in the returned string.",parent:'152315'},{ty:"method",name:"lines",path:"std::io",desc:"Create an iterator that reads a line on each iteration until EOF.",parent:'152315'},{ty:"method",name:"read_until",path:"std::io",desc:"Reads a sequence of bytes leading up to a specified delimiter. Once the\nspecified byte is encountered, reading ceases and the bytes up to and\nincluding the delimiter are returned.",parent:'152315'},{ty:"method",name:"read_char",path:"std::io",desc:"Reads the next utf8-encoded character from the underlying stream.",parent:'152315'},{ty:"method",name:"chars",path:"std::io",desc:"Create an iterator that reads a utf8-encoded character on each iteration\nuntil EOF.",parent:'152315'},{ty:"trait",name:"Seek",path:"std::io",desc:"An object implementing `Seek` internally has some form of cursor which can\nbe moved within a stream of bytes. The stream typically has a fixed size,\nallowing seeking relative to either end."},{ty:"tymethod",name:"tell",path:"std::io",desc:"Return position of file cursor in the stream",parent:'152671'},{ty:"tymethod",name:"seek",path:"std::io",desc:"Seek to an offset in a stream",parent:'152671'},{ty:"trait",name:"Listener",path:"std::io",desc:"A listener is a value that can consume itself to start listening for\nconnections."},{ty:"tymethod",name:"listen",path:"std::io",desc:"Spin up the listener and start queuing incoming connections",parent:'152695'},{ty:"trait",name:"Acceptor",path:"std::io",desc:"An acceptor is a value that presents incoming connections"},{ty:"tymethod",name:"accept",path:"std::io",desc:"Wait for and accept an incoming connection",parent:'152709'},{ty:"method",name:"incoming",path:"std::io",desc:"Create an iterator over incoming connection attempts.",parent:'152709'},{ty:"method",name:"clone",path:"std::io",desc:"",parent:'148496'},{ty:"method",name:"eq",path:"std::io",desc:"",parent:'148496'},{ty:"method",name:"ne",path:"std::io",desc:"",parent:'148496'},{ty:"method",name:"fmt",path:"std::io",desc:"",parent:'148496'},{ty:"method",name:"fmt",path:"std::io",desc:"",parent:'148774'},{ty:"method",name:"clone",path:"std::io",desc:"",parent:'148774'},{ty:"method",name:"eq",path:"std::io",desc:"",parent:'148774'},{ty:"method",name:"ne",path:"std::io",desc:"",parent:'148774'},{ty:"method",name:"read",path:"std::io",desc:"",parent:'151174'},{ty:"method",name:"write",path:"std::io",desc:"",parent:'152146'},{ty:"method",name:"flush",path:"std::io",desc:"",parent:'152146'},{ty:"method",name:"next",path:"std::io",desc:"",parent:'152203'},{ty:"method",name:"next",path:"std::io",desc:"",parent:'152260'},{ty:"method",name:"next",path:"std::io",desc:"",parent:'152733'},{ty:"method",name:"hash",path:"std::io",desc:"",parent:'152812'},{ty:"method",name:"fmt",path:"std::io",desc:"",parent:'152812'},{ty:"method",name:"eq",path:"std::io",desc:"",parent:'152812'},{ty:"method",name:"ne",path:"std::io",desc:"",parent:'152812'},{ty:"method",name:"hash",path:"std::io",desc:"",parent:'153314'},{ty:"method",name:"hash",path:"std::io",desc:"",parent:'153420'},{ty:"mod",name:"path",path:"std",desc:"Cross-platform path support"},{ty:"struct",name:"Display",path:"std::path",desc:"Helper struct for printing paths with format!()"},{ty:"mod",name:"posix",path:"std::path",desc:"POSIX file path handling"},{ty:"struct",name:"Path",path:"std::path::posix",desc:"Represents a POSIX file path"},{ty:"fn",name:"is_sep_byte",path:"std::path::posix",desc:"Returns whether the given byte is a path separator"},{ty:"fn",name:"is_sep",path:"std::path::posix",desc:"Returns whether the given char is a path separator"},{ty:"typedef",name:"Components",path:"std::path::posix",desc:"Iterator that yields successive components of a Path as &[u8]"},{ty:"typedef",name:"RevComponents",path:"std::path::posix",desc:"Iterator that yields components of a Path in reverse as &[u8]"},{ty:"typedef",name:"StrComponents",path:"std::path::posix",desc:"Iterator that yields successive components of a Path as Option<&str>"},{ty:"typedef",name:"RevStrComponents",path:"std::path::posix",desc:"Iterator that yields components of a Path in reverse as Option<&str>"},{ty:"static",name:"SEP",path:"std::path::posix",desc:"The standard path separator character"},{ty:"static",name:"SEP_BYTE",path:"std::path::posix",desc:"The standard path separator byte"},{ty:"method",name:"clone",path:"std::path::posix",desc:"",parent:'153763'},{ty:"method",name:"eq",path:"std::path::posix",desc:"",parent:'153763'},{ty:"method",name:"from_str",path:"std::path::posix",desc:"",parent:'153763'},{ty:"method",name:"to_c_str",path:"std::path::posix",desc:"",parent:'153763'},{ty:"method",name:"to_c_str_unchecked",path:"std::path::posix",desc:"",parent:'153763'},{ty:"method",name:"hash",path:"std::path::posix",desc:"",parent:'153763'},{ty:"method",name:"container_as_bytes",path:"std::path::posix",desc:"",parent:'153763'},{ty:"method",name:"container_into_owned_bytes",path:"std::path::posix",desc:"",parent:'153763'},{ty:"method",name:"new_unchecked",path:"std::path::posix",desc:"",parent:'153763'},{ty:"method",name:"set_filename_unchecked",path:"std::path::posix",desc:"",parent:'153763'},{ty:"method",name:"push_unchecked",path:"std::path::posix",desc:"",parent:'153763'},{ty:"method",name:"as_vec",path:"std::path::posix",desc:"",parent:'153763'},{ty:"method",name:"into_vec",path:"std::path::posix",desc:"",parent:'153763'},{ty:"method",name:"dirname",path:"std::path::posix",desc:"",parent:'153763'},{ty:"method",name:"filename",path:"std::path::posix",desc:"",parent:'153763'},{ty:"method",name:"pop",path:"std::path::posix",desc:"",parent:'153763'},{ty:"method",name:"root_path",path:"std::path::posix",desc:"",parent:'153763'},{ty:"method",name:"is_absolute",path:"std::path::posix",desc:"",parent:'153763'},{ty:"method",name:"is_ancestor_of",path:"std::path::posix",desc:"",parent:'153763'},{ty:"method",name:"path_relative_from",path:"std::path::posix",desc:"",parent:'153763'},{ty:"method",name:"ends_with_path",path:"std::path::posix",desc:"",parent:'153763'},{ty:"method",name:"new",path:"std::path::posix",desc:"Returns a new Path from a byte vector or string",parent:'153763'},{ty:"method",name:"new_opt",path:"std::path::posix",desc:"Returns a new Path from a byte vector or string, if possible",parent:'153763'},{ty:"method",name:"components",path:"std::path::posix",desc:"Returns an iterator that yields each component of the path in turn.\nDoes not distinguish between absolute and relative paths, e.g.\n/a/b/c and a/b/c yield the same set of components.\nA path of \"/\" yields no components. A path of \".\" yields one component.",parent:'153763'},{ty:"method",name:"rev_components",path:"std::path::posix",desc:"Returns an iterator that yields each component of the path in reverse.\nSee components() for details.",parent:'153763'},{ty:"method",name:"str_components",path:"std::path::posix",desc:"Returns an iterator that yields each component of the path as Option<&str>.\nSee components() for details.",parent:'153763'},{ty:"method",name:"rev_str_components",path:"std::path::posix",desc:"Returns an iterator that yields each component of the path in reverse as Option<&str>.\nSee components() for details.",parent:'153763'},{ty:"mod",name:"windows",path:"std::path",desc:"Windows file path handling"},{ty:"struct",name:"Path",path:"std::path::windows",desc:"Represents a Windows path"},{ty:"enum",name:"PathPrefix",path:"std::path::windows",desc:"Prefix types for Path"},{ty:"variant",name:"VerbatimPrefix",path:"std::path::windows",desc:"Prefix `\\\\?\\`, uint is the length of the following component",parent:'159068'},{ty:"variant",name:"VerbatimUNCPrefix",path:"std::path::windows",desc:"Prefix `\\\\?\\UNC\\`, uints are the lengths of the UNC components",parent:'159068'},{ty:"variant",name:"VerbatimDiskPrefix",path:"std::path::windows",desc:"Prefix `\\\\?\\C:\\` (for any alphabetic character)",parent:'159068'},{ty:"variant",name:"DeviceNSPrefix",path:"std::path::windows",desc:"Prefix `\\\\.\\`, uint is the length of the following component",parent:'159068'},{ty:"variant",name:"UNCPrefix",path:"std::path::windows",desc:"UNC prefix `\\\\server\\share`, uints are the lengths of the server/share",parent:'159068'},{ty:"variant",name:"DiskPrefix",path:"std::path::windows",desc:"Prefix `C:` for any alphabetic character",parent:'159068'},{ty:"fn",name:"is_vol_relative",path:"std::path::windows",desc:"Returns whether the path is considered \"volume-relative\", which means a path\nthat looks like \"\\foo\". Paths of this form are relative to the current volume,\nbut absolute within that volume."},{ty:"fn",name:"is_cwd_relative",path:"std::path::windows",desc:"Returns whether the path is considered \"cwd-relative\", which means a path\nwith a volume prefix that is not absolute. This look like \"C:foo.txt\". Paths\nof this form are relative to the cwd on the given volume."},{ty:"fn",name:"prefix",path:"std::path::windows",desc:"Returns the PathPrefix for this Path"},{ty:"fn",name:"is_verbatim",path:"std::path::windows",desc:"Returns whether the Path's prefix is a verbatim prefix, i.e. `\\\\?\\`"},{ty:"fn",name:"make_non_verbatim",path:"std::path::windows",desc:"Returns the non-verbatim equivalent of the input path, if possible.\nIf the input path is a device namespace path, None is returned.\nIf the input path is not verbatim, it is returned as-is.\nIf the input path is verbatim, but the same path can be expressed as\nnon-verbatim, the non-verbatim version is returned.\nOtherwise, None is returned."},{ty:"fn",name:"is_sep",path:"std::path::windows",desc:"Returns whether the given char is a path separator.\nAllows both the primary separator '\\' and the alternative separator '/'."},{ty:"fn",name:"is_sep_verbatim",path:"std::path::windows",desc:"Returns whether the given char is a path separator.\nOnly allows the primary separator '\\'; use is_sep to allow '/'."},{ty:"fn",name:"is_sep_byte",path:"std::path::windows",desc:"Returns whether the given byte is a path separator.\nAllows both the primary separator '\\' and the alternative separator '/'."},{ty:"fn",name:"is_sep_byte_verbatim",path:"std::path::windows",desc:"Returns whether the given byte is a path separator.\nOnly allows the primary separator '\\'; use is_sep_byte to allow '/'."},{ty:"typedef",name:"StrComponents",path:"std::path::windows",desc:"Iterator that yields successive components of a Path as &str"},{ty:"typedef",name:"RevStrComponents",path:"std::path::windows",desc:"Iterator that yields components of a Path in reverse as &str"},{ty:"typedef",name:"Components",path:"std::path::windows",desc:"Iterator that yields successive components of a Path as &[u8]"},{ty:"typedef",name:"RevComponents",path:"std::path::windows",desc:"Iterator that yields components of a Path in reverse as &[u8]"},{ty:"static",name:"SEP",path:"std::path::windows",desc:"The standard path separator character"},{ty:"static",name:"SEP_BYTE",path:"std::path::windows",desc:"The standard path separator byte"},{ty:"static",name:"SEP2",path:"std::path::windows",desc:"The alternative path separator character"},{ty:"static",name:"SEP2_BYTE",path:"std::path::windows",desc:"The alternative path separator character"},{ty:"method",name:"clone",path:"std::path::windows",desc:"",parent:'155599'},{ty:"method",name:"eq",path:"std::path::windows",desc:"",parent:'155599'},{ty:"method",name:"from_str",path:"std::path::windows",desc:"",parent:'155599'},{ty:"method",name:"to_c_str",path:"std::path::windows",desc:"",parent:'155599'},{ty:"method",name:"to_c_str_unchecked",path:"std::path::windows",desc:"",parent:'155599'},{ty:"method",name:"hash",path:"std::path::windows",desc:"",parent:'155599'},{ty:"method",name:"container_as_bytes",path:"std::path::windows",desc:"",parent:'155599'},{ty:"method",name:"container_into_owned_bytes",path:"std::path::windows",desc:"",parent:'155599'},{ty:"method",name:"container_as_str",path:"std::path::windows",desc:"",parent:'155599'},{ty:"method",name:"is_str",path:"std::path::windows",desc:"",parent:'155599'},{ty:"method",name:"new_unchecked",path:"std::path::windows",desc:"See `GenericPathUnsafe::from_vec_unchecked`.",parent:'155599'},{ty:"method",name:"set_filename_unchecked",path:"std::path::windows",desc:"See `GenericPathUnsafe::set_filename_unchecekd`.",parent:'155599'},{ty:"method",name:"push_unchecked",path:"std::path::windows",desc:"See `GenericPathUnsafe::push_unchecked`.",parent:'155599'},{ty:"method",name:"new_opt",path:"std::path::windows",desc:"",parent:'155599'},{ty:"method",name:"as_str",path:"std::path::windows",desc:"See `GenericPath::as_str` for info.\nAlways returns a `Some` value.",parent:'155599'},{ty:"method",name:"as_vec",path:"std::path::windows",desc:"",parent:'155599'},{ty:"method",name:"into_vec",path:"std::path::windows",desc:"",parent:'155599'},{ty:"method",name:"dirname",path:"std::path::windows",desc:"",parent:'155599'},{ty:"method",name:"dirname_str",path:"std::path::windows",desc:"See `GenericPath::dirname_str` for info.\nAlways returns a `Some` value.",parent:'155599'},{ty:"method",name:"filename",path:"std::path::windows",desc:"",parent:'155599'},{ty:"method",name:"filename_str",path:"std::path::windows",desc:"See `GenericPath::filename_str` for info.\nAlways returns a `Some` value if `filename` returns a `Some` value.",parent:'155599'},{ty:"method",name:"filestem_str",path:"std::path::windows",desc:"See `GenericPath::filestem_str` for info.\nAlways returns a `Some` value if `filestem` returns a `Some` value.",parent:'155599'},{ty:"method",name:"extension_str",path:"std::path::windows",desc:"",parent:'155599'},{ty:"method",name:"dir_path",path:"std::path::windows",desc:"",parent:'155599'},{ty:"method",name:"pop",path:"std::path::windows",desc:"",parent:'155599'},{ty:"method",name:"root_path",path:"std::path::windows",desc:"",parent:'155599'},{ty:"method",name:"is_absolute",path:"std::path::windows",desc:"See `GenericPath::is_absolute` for info.",parent:'155599'},{ty:"method",name:"is_relative",path:"std::path::windows",desc:"",parent:'155599'},{ty:"method",name:"is_ancestor_of",path:"std::path::windows",desc:"",parent:'155599'},{ty:"method",name:"path_relative_from",path:"std::path::windows",desc:"",parent:'155599'},{ty:"method",name:"ends_with_path",path:"std::path::windows",desc:"",parent:'155599'},{ty:"method",name:"new",path:"std::path::windows",desc:"Returns a new Path from a byte vector or string",parent:'155599'},{ty:"method",name:"new_opt",path:"std::path::windows",desc:"Returns a new Path from a byte vector or string, if possible",parent:'155599'},{ty:"method",name:"str_components",path:"std::path::windows",desc:"Returns an iterator that yields each component of the path in turn as a Option<&str>.\nEvery component is guaranteed to be Some.\nDoes not yield the path prefix (including server/share components in UNC paths).\nDoes not distinguish between volume-relative and relative paths, e.g.\n\\a\\b\\c and a\\b\\c.\nDoes not distinguish between absolute and cwd-relative paths, e.g.\nC:\\foo and C:foo.",parent:'155599'},{ty:"method",name:"rev_str_components",path:"std::path::windows",desc:"Returns an iterator that yields each component of the path in reverse as an Option<&str>\nSee str_components() for details.",parent:'155599'},{ty:"method",name:"components",path:"std::path::windows",desc:"Returns an iterator that yields each component of the path in turn as a &[u8].\nSee str_components() for details.",parent:'155599'},{ty:"method",name:"rev_components",path:"std::path::windows",desc:"Returns an iterator that yields each component of the path in reverse as a &[u8].\nSee str_components() for details.",parent:'155599'},{ty:"method",name:"clone",path:"std::path::windows",desc:"",parent:'159068'},{ty:"method",name:"eq",path:"std::path::windows",desc:"",parent:'159068'},{ty:"method",name:"ne",path:"std::path::windows",desc:"",parent:'159068'},{ty:"trait",name:"GenericPath",path:"std::path",desc:"A trait that represents the generic operations available on paths"},{ty:"method",name:"new",path:"std::path",desc:"Creates a new Path from a byte vector or string.\nThe resulting Path will always be normalized.",parent:'160091'},{ty:"method",name:"new_opt",path:"std::path",desc:"Creates a new Path from a byte vector or string, if possible.\nThe resulting Path will always be normalized.",parent:'160091'},{ty:"method",name:"as_str",path:"std::path",desc:"Returns the path as a string, if possible.\nIf the path is not representable in utf-8, this returns None.",parent:'160091'},{ty:"tymethod",name:"as_vec",path:"std::path",desc:"Returns the path as a byte vector",parent:'160091'},{ty:"tymethod",name:"into_vec",path:"std::path",desc:"Converts the Path into an owned byte vector",parent:'160091'},{ty:"method",name:"display",path:"std::path",desc:"Returns an object that implements `Show` for printing paths",parent:'160091'},{ty:"method",name:"filename_display",path:"std::path",desc:"Returns an object that implements `Show` for printing filenames",parent:'160091'},{ty:"tymethod",name:"dirname",path:"std::path",desc:"Returns the directory component of `self`, as a byte vector (with no trailing separator).\nIf `self` has no directory component, returns ['.'].",parent:'160091'},{ty:"method",name:"dirname_str",path:"std::path",desc:"Returns the directory component of `self`, as a string, if possible.\nSee `dirname` for details.",parent:'160091'},{ty:"tymethod",name:"filename",path:"std::path",desc:"Returns the file component of `self`, as a byte vector.\nIf `self` represents the root of the file hierarchy, returns None.\nIf `self` is \".\" or \"..\", returns None.",parent:'160091'},{ty:"method",name:"filename_str",path:"std::path",desc:"Returns the file component of `self`, as a string, if possible.\nSee `filename` for details.",parent:'160091'},{ty:"method",name:"filestem",path:"std::path",desc:"Returns the stem of the filename of `self`, as a byte vector.\nThe stem is the portion of the filename just before the last '.'.\nIf there is no '.', the entire filename is returned.",parent:'160091'},{ty:"method",name:"filestem_str",path:"std::path",desc:"Returns the stem of the filename of `self`, as a string, if possible.\nSee `filestem` for details.",parent:'160091'},{ty:"method",name:"extension",path:"std::path",desc:"Returns the extension of the filename of `self`, as an optional byte vector.\nThe extension is the portion of the filename just after the last '.'.\nIf there is no extension, None is returned.\nIf the filename ends in '.', the empty vector is returned.",parent:'160091'},{ty:"method",name:"extension_str",path:"std::path",desc:"Returns the extension of the filename of `self`, as a string, if possible.\nSee `extension` for details.",parent:'160091'},{ty:"method",name:"set_filename",path:"std::path",desc:"Replaces the filename portion of the path with the given byte vector or string.\nIf the replacement name is [], this is equivalent to popping the path.",parent:'160091'},{ty:"method",name:"set_extension",path:"std::path",desc:"Replaces the extension with the given byte vector or string.\nIf there is no extension in `self`, this adds one.\nIf the argument is [] or \"\", this removes the extension.\nIf `self` has no filename, this is a no-op.",parent:'160091'},{ty:"method",name:"with_filename",path:"std::path",desc:"Returns a new Path constructed by replacing the filename with the given\nbyte vector or string.\nSee `set_filename` for details.",parent:'160091'},{ty:"method",name:"with_extension",path:"std::path",desc:"Returns a new Path constructed by setting the extension to the given\nbyte vector or string.\nSee `set_extension` for details.",parent:'160091'},{ty:"method",name:"dir_path",path:"std::path",desc:"Returns the directory component of `self`, as a Path.\nIf `self` represents the root of the filesystem hierarchy, returns `self`.",parent:'160091'},{ty:"tymethod",name:"root_path",path:"std::path",desc:"Returns a Path that represents the filesystem root that `self` is rooted in.",parent:'160091'},{ty:"method",name:"push",path:"std::path",desc:"Pushes a path (as a byte vector or string) onto `self`.\nIf the argument represents an absolute path, it replaces `self`.",parent:'160091'},{ty:"method",name:"push_many",path:"std::path",desc:"Pushes multiple paths (as byte vectors or strings) onto `self`.\nSee `push` for details.",parent:'160091'},{ty:"tymethod",name:"pop",path:"std::path",desc:"Removes the last path component from the receiver.\nReturns `true` if the receiver was modified, or `false` if it already\nrepresented the root of the file hierarchy.",parent:'160091'},{ty:"method",name:"join",path:"std::path",desc:"Returns a new Path constructed by joining `self` with the given path\n(as a byte vector or string).\nIf the given path is absolute, the new Path will represent just that.",parent:'160091'},{ty:"method",name:"join_many",path:"std::path",desc:"Returns a new Path constructed by joining `self` with the given paths\n(as byte vectors or strings).\nSee `join` for details.",parent:'160091'},{ty:"tymethod",name:"is_absolute",path:"std::path",desc:"Returns whether `self` represents an absolute path.\nAn absolute path is defined as one that, when joined to another path, will\nyield back the same absolute path.",parent:'160091'},{ty:"method",name:"is_relative",path:"std::path",desc:"Returns whether `self` represents a relative path.\nTypically this is the inverse of `is_absolute`.\nBut for Windows paths, it also means the path is not volume-relative or\nrelative to the current working directory.",parent:'160091'},{ty:"tymethod",name:"is_ancestor_of",path:"std::path",desc:"Returns whether `self` is equal to, or is an ancestor of, the given path.\nIf both paths are relative, they are compared as though they are relative\nto the same parent path.",parent:'160091'},{ty:"tymethod",name:"path_relative_from",path:"std::path",desc:"Returns the Path that, were it joined to `base`, would yield `self`.\nIf no such path exists, None is returned.\nIf `self` is absolute and `base` is relative, or on Windows if both\npaths refer to separate drives, an absolute path is returned.",parent:'160091'},{ty:"tymethod",name:"ends_with_path",path:"std::path",desc:"Returns whether the relative path `child` is a suffix of `self`.",parent:'160091'},{ty:"trait",name:"BytesContainer",path:"std::path",desc:"A trait that represents something bytes-like (e.g. a &[u8] or a &str)"},{ty:"tymethod",name:"container_as_bytes",path:"std::path",desc:"Returns a &[u8] representing the receiver",parent:'161164'},{ty:"method",name:"container_into_owned_bytes",path:"std::path",desc:"Consumes the receiver and converts it into ~[u8]",parent:'161164'},{ty:"method",name:"container_as_str",path:"std::path",desc:"Returns the receiver interpreted as a utf-8 string, if possible",parent:'161164'},{ty:"method",name:"is_str",path:"std::path",desc:"Returns whether .container_as_str() is guaranteed to not fail",parent:'161164'},{ty:"trait",name:"GenericPathUnsafe",path:"std::path",desc:"A trait that represents the unsafe operations on GenericPaths"},{ty:"tymethod",name:"new_unchecked",path:"std::path",desc:"Creates a new Path without checking for null bytes.\nThe resulting Path will always be normalized.",parent:'161216'},{ty:"tymethod",name:"set_filename_unchecked",path:"std::path",desc:"Replaces the filename portion of the path without checking for null\nbytes.\nSee `set_filename` for details.",parent:'161216'},{ty:"tymethod",name:"push_unchecked",path:"std::path",desc:"Pushes a path onto `self` without checking for null bytes.\nSee `push` for details.",parent:'161216'},{ty:"method",name:"fmt",path:"std::path",desc:"",parent:'161248'},{ty:"method",name:"as_maybe_owned",path:"std::path",desc:"Returns the path as a possibly-owned string.",parent:'161248'},{ty:"method",name:"container_as_bytes",path:"std::c_str",desc:"",parent:'129990'},{ty:"method",name:"container_as_bytes",path:"std::str",desc:"",parent:'64156'},{ty:"method",name:"container_into_owned_bytes",path:"std::str",desc:"",parent:'64156'},{ty:"method",name:"container_as_str",path:"std::str",desc:"",parent:'64156'},{ty:"method",name:"is_str",path:"std::str",desc:"",parent:'64156'},{ty:"mod",name:"cast",path:"std",desc:"Unsafe casting functions"},{ty:"fn",name:"transmute_copy",path:"std::cast",desc:"Casts the value at `src` to U. The two types must have the same length."},{ty:"fn",name:"forget",path:"std::cast",desc:"Move a thing into the void"},{ty:"fn",name:"bump_box_refcount",path:"std::cast",desc:"Force-increment the reference count on a shared box. If used\ncarelessly, this can leak the box."},{ty:"fn",name:"transmute",path:"std::cast",desc:"Transform a value of one type into a value of another type.\nBoth types must have the same size and alignment."},{ty:"fn",name:"transmute_mut",path:"std::cast",desc:"Coerce an immutable reference to be mutable."},{ty:"fn",name:"transmute_region",path:"std::cast",desc:"Coerce a reference to have an arbitrary associated region."},{ty:"fn",name:"transmute_mut_unsafe",path:"std::cast",desc:"Coerce an immutable reference to be mutable."},{ty:"fn",name:"transmute_immut_unsafe",path:"std::cast",desc:"Coerce an immutable reference to be mutable."},{ty:"fn",name:"transmute_mut_region",path:"std::cast",desc:"Coerce a mutable reference to have an arbitrary associated region."},{ty:"fn",name:"copy_lifetime",path:"std::cast",desc:"Transforms lifetime of the second pointer to match the first."},{ty:"fn",name:"copy_mut_lifetime",path:"std::cast",desc:"Transforms lifetime of the second pointer to match the first."},{ty:"fn",name:"copy_lifetime_vec",path:"std::cast",desc:"Transforms lifetime of the second pointer to match the first."},{ty:"mod",name:"fmt",path:"std",desc:"Utilities for formatting and printing strings"},{ty:"struct",name:"Radix",path:"std::fmt",desc:"A radix with in the range of `2..36`."},{ty:"struct",name:"RadixFmt",path:"std::fmt",desc:"A helper type for formatting radixes."},{ty:"struct",name:"Formatter",path:"std::fmt",desc:"A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits."},{ty:"structfield",name:"flags",path:"std::fmt",desc:"Flags for formatting (packed version of rt::Flag)",parent:'169057'},{ty:"structfield",name:"fill",path:"std::fmt",desc:"Character used as 'fill' whenever there is alignment",parent:'169057'},{ty:"structfield",name:"align",path:"std::fmt",desc:"Boolean indication of whether the output should be left-aligned",parent:'169057'},{ty:"structfield",name:"width",path:"std::fmt",desc:"Optionally specified integer width that the output should be",parent:'169057'},{ty:"structfield",name:"precision",path:"std::fmt",desc:"Optionally specified precision for numeric types",parent:'169057'},{ty:"structfield",name:"buf",path:"std::fmt",desc:"Output buffer.",parent:'169057'},{ty:"struct",name:"Argument",path:"std::fmt",desc:"This struct represents the generic \"argument\" which is taken by the Xprintf\nfamily of functions. It contains a function to format the given value. At\ncompile time it is ensured that the function and the value have the correct\ntypes, and then this struct is used to canonicalize arguments to one type."},{ty:"struct",name:"Arguments",path:"std::fmt",desc:"This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification."},{ty:"fn",name:"radix",path:"std::fmt",desc:"Constructs a radix formatter in the range of `2..36`."},{ty:"fn",name:"write",path:"std::fmt",desc:"The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided."},{ty:"fn",name:"writeln",path:"std::fmt",desc:"The `writeln` function takes the same arguments as `write`, except that it\nwill also write a newline (`\\n`) character at the end of the format string."},{ty:"fn",name:"write_unsafe",path:"std::fmt",desc:"The `write_unsafe` function takes an output stream, a precompiled format\nstring, and a list of arguments. The arguments will be formatted according\nto the specified format string into the output stream provided."},{ty:"fn",name:"format",path:"std::fmt",desc:"The format function takes a precompiled format string and a list of\narguments, to return the resulting formatted string."},{ty:"fn",name:"format_unsafe",path:"std::fmt",desc:"The unsafe version of the formatting function."},{ty:"mod",name:"parse",path:"std::fmt",desc:"Parsing of format strings"},{ty:"struct",name:"Argument",path:"std::fmt::parse",desc:"Representation of an argument specification."},{ty:"structfield",name:"position",path:"std::fmt::parse",desc:"Where to find this argument",parent:'165404'},{ty:"structfield",name:"format",path:"std::fmt::parse",desc:"How to format the argument",parent:'165404'},{ty:"structfield",name:"method",path:"std::fmt::parse",desc:"If not `None`, what method to invoke on the argument",parent:'165404'},{ty:"struct",name:"FormatSpec",path:"std::fmt::parse",desc:"Specification for the formatting of an argument in the format string."},{ty:"structfield",name:"fill",path:"std::fmt::parse",desc:"Optionally specified character to fill alignment with",parent:'165537'},{ty:"structfield",name:"align",path:"std::fmt::parse",desc:"Optionally specified alignment",parent:'165537'},{ty:"structfield",name:"flags",path:"std::fmt::parse",desc:"Packed version of various flags provided",parent:'165537'},{ty:"structfield",name:"precision",path:"std::fmt::parse",desc:"The integer precision to use",parent:'165537'},{ty:"structfield",name:"width",path:"std::fmt::parse",desc:"The string width requested for the resulting format",parent:'165537'},{ty:"structfield",name:"ty",path:"std::fmt::parse",desc:"The descriptor string representing the name of the format desired for\nthis argument, this can be empty or any number of characters, although\nit is required to be one word.",parent:'165537'},{ty:"struct",name:"PluralArm",path:"std::fmt::parse",desc:"Structure representing one \"arm\" of the `plural` function."},{ty:"structfield",name:"selector",path:"std::fmt::parse",desc:"A selector can either be specified by a keyword or with an integer\nliteral.",parent:'166661'},{ty:"structfield",name:"result",path:"std::fmt::parse",desc:"Array of pieces which are the format of this arm",parent:'166661'},{ty:"struct",name:"SelectArm",path:"std::fmt::parse",desc:"Structure representing one \"arm\" of the `select` function."},{ty:"structfield",name:"selector",path:"std::fmt::parse",desc:"String selector which guards this arm",parent:'166943'},{ty:"structfield",name:"result",path:"std::fmt::parse",desc:"Array of pieces which are the format of this arm",parent:'166943'},{ty:"struct",name:"Parser",path:"std::fmt::parse",desc:"The parser structure for interpreting the input format string. This is\nmodelled as an iterator over `Piece` structures to form a stream of tokens\nbeing output."},{ty:"structfield",name:"errors",path:"std::fmt::parse",desc:"Error messages accumulated during parsing",parent:'167050'},{ty:"enum",name:"Piece",path:"std::fmt::parse",desc:"A piece is a portion of the format string which represents the next part to\nemit. These are emitted as a stream by the `Parser` class."},{ty:"variant",name:"String",path:"std::fmt::parse",desc:"A literal string which should directly be emitted",parent:'165260'},{ty:"variant",name:"CurrentArgument",path:"std::fmt::parse",desc:"A back-reference to whatever the current argument is. This is used\ninside of a method call to refer back to the original argument.",parent:'165260'},{ty:"variant",name:"Argument",path:"std::fmt::parse",desc:"This describes that formatting should process the next argument (as\nspecified inside) for emission.",parent:'165260'},{ty:"enum",name:"Position",path:"std::fmt::parse",desc:"Enum describing where an argument for a format can be located."},{ty:"variant",name:"ArgumentNext",path:"std::fmt::parse",desc:"",parent:'165745'},{ty:"variant",name:"ArgumentIs",path:"std::fmt::parse",desc:"",parent:'165745'},{ty:"variant",name:"ArgumentNamed",path:"std::fmt::parse",desc:"",parent:'165745'},{ty:"enum",name:"Alignment",path:"std::fmt::parse",desc:"Enum of alignments which are supported."},{ty:"variant",name:"AlignLeft",path:"std::fmt::parse",desc:"",parent:'165888'},{ty:"variant",name:"AlignRight",path:"std::fmt::parse",desc:"",parent:'165888'},{ty:"variant",name:"AlignUnknown",path:"std::fmt::parse",desc:"",parent:'165888'},{ty:"enum",name:"Flag",path:"std::fmt::parse",desc:"Various flags which can be applied to format strings, the meaning of these\nflags is defined by the formatters themselves."},{ty:"variant",name:"FlagSignPlus",path:"std::fmt::parse",desc:"",parent:'165974'},{ty:"variant",name:"FlagSignMinus",path:"std::fmt::parse",desc:"",parent:'165974'},{ty:"variant",name:"FlagAlternate",path:"std::fmt::parse",desc:"",parent:'165974'},{ty:"variant",name:"FlagSignAwareZeroPad",path:"std::fmt::parse",desc:"",parent:'165974'},{ty:"enum",name:"Count",path:"std::fmt::parse",desc:"A count is used for the precision and width parameters of an integer, and\ncan reference either an argument or a literal integer."},{ty:"variant",name:"CountIs",path:"std::fmt::parse",desc:"",parent:'166077'},{ty:"variant",name:"CountIsName",path:"std::fmt::parse",desc:"",parent:'166077'},{ty:"variant",name:"CountIsParam",path:"std::fmt::parse",desc:"",parent:'166077'},{ty:"variant",name:"CountIsNextParam",path:"std::fmt::parse",desc:"",parent:'166077'},{ty:"variant",name:"CountImplied",path:"std::fmt::parse",desc:"",parent:'166077'},{ty:"enum",name:"Method",path:"std::fmt::parse",desc:"Enum describing all of the possible methods which the formatting language\ncurrently supports."},{ty:"variant",name:"Plural",path:"std::fmt::parse",desc:"A plural method selects on an integer over a list of either integer or\nkeyword-defined clauses. The meaning of the keywords is defined by the\ncurrent locale.",parent:'166279'},{ty:"variant",name:"Select",path:"std::fmt::parse",desc:"A select method selects over a string. Each arm is a different string\nwhich can be selected for.",parent:'166279'},{ty:"enum",name:"PluralSelector",path:"std::fmt::parse",desc:"A selector for what pluralization a plural method should take"},{ty:"variant",name:"Keyword",path:"std::fmt::parse",desc:"One of the plural keywords should be used",parent:'166492'},{ty:"variant",name:"Literal",path:"std::fmt::parse",desc:"A literal pluralization should be used",parent:'166492'},{ty:"enum",name:"PluralKeyword",path:"std::fmt::parse",desc:"Enum of the 5 CLDR plural keywords. There is one more, \"other\", but that is\nspecially placed in the `Plural` variant of `Method`"},{ty:"variant",name:"Zero",path:"std::fmt::parse",desc:"",parent:'166766'},{ty:"variant",name:"One",path:"std::fmt::parse",desc:"",parent:'166766'},{ty:"variant",name:"Two",path:"std::fmt::parse",desc:"",parent:'166766'},{ty:"variant",name:"Few",path:"std::fmt::parse",desc:"",parent:'166766'},{ty:"variant",name:"Many",path:"std::fmt::parse",desc:"",parent:'166766'},{ty:"method",name:"eq",path:"std::fmt::parse",desc:"",parent:'165260'},{ty:"method",name:"ne",path:"std::fmt::parse",desc:"",parent:'165260'},{ty:"method",name:"eq",path:"std::fmt::parse",desc:"",parent:'165404'},{ty:"method",name:"ne",path:"std::fmt::parse",desc:"",parent:'165404'},{ty:"method",name:"eq",path:"std::fmt::parse",desc:"",parent:'165537'},{ty:"method",name:"ne",path:"std::fmt::parse",desc:"",parent:'165537'},{ty:"method",name:"eq",path:"std::fmt::parse",desc:"",parent:'165745'},{ty:"method",name:"ne",path:"std::fmt::parse",desc:"",parent:'165745'},{ty:"method",name:"eq",path:"std::fmt::parse",desc:"",parent:'165888'},{ty:"method",name:"ne",path:"std::fmt::parse",desc:"",parent:'165888'},{ty:"method",name:"eq",path:"std::fmt::parse",desc:"",parent:'165974'},{ty:"method",name:"ne",path:"std::fmt::parse",desc:"",parent:'165974'},{ty:"method",name:"eq",path:"std::fmt::parse",desc:"",parent:'166077'},{ty:"method",name:"ne",path:"std::fmt::parse",desc:"",parent:'166077'},{ty:"method",name:"eq",path:"std::fmt::parse",desc:"",parent:'166279'},{ty:"method",name:"ne",path:"std::fmt::parse",desc:"",parent:'166279'},{ty:"method",name:"hash",path:"std::fmt::parse",desc:"",parent:'166492'},{ty:"method",name:"eq",path:"std::fmt::parse",desc:"",parent:'166492'},{ty:"method",name:"ne",path:"std::fmt::parse",desc:"",parent:'166492'},{ty:"method",name:"eq",path:"std::fmt::parse",desc:"",parent:'166661'},{ty:"method",name:"ne",path:"std::fmt::parse",desc:"",parent:'166661'},{ty:"method",name:"hash",path:"std::fmt::parse",desc:"",parent:'166766'},{ty:"method",name:"eq",path:"std::fmt::parse",desc:"",parent:'166766'},{ty:"method",name:"ne",path:"std::fmt::parse",desc:"",parent:'166766'},{ty:"method",name:"eq",path:"std::fmt::parse",desc:"",parent:'166943'},{ty:"method",name:"ne",path:"std::fmt::parse",desc:"",parent:'166943'},{ty:"method",name:"next",path:"std::fmt::parse",desc:"",parent:'167050'},{ty:"method",name:"new",path:"std::fmt::parse",desc:"Creates a new parser for the given format string",parent:'167050'},{ty:"typedef",name:"Result",path:"std::fmt",desc:""},{ty:"trait",name:"Show",path:"std::fmt",desc:"When a format is not otherwise specified, types are formatted by ascribing\nto this trait. There is not an explicit way of selecting this trait to be\nused for formatting, it is only if no other format is specified."},{ty:"tymethod",name:"fmt",path:"std::fmt",desc:"",parent:'169166'},{ty:"trait",name:"Bool",path:"std::fmt",desc:"Format trait for the `b` character"},{ty:"tymethod",name:"fmt",path:"std::fmt",desc:"",parent:'169178'},{ty:"trait",name:"Char",path:"std::fmt",desc:"Format trait for the `c` character"},{ty:"tymethod",name:"fmt",path:"std::fmt",desc:"",parent:'169190'},{ty:"trait",name:"Signed",path:"std::fmt",desc:"Format trait for the `i` and `d` characters"},{ty:"tymethod",name:"fmt",path:"std::fmt",desc:"",parent:'169202'},{ty:"trait",name:"Unsigned",path:"std::fmt",desc:"Format trait for the `u` character"},{ty:"tymethod",name:"fmt",path:"std::fmt",desc:"",parent:'169214'},{ty:"trait",name:"Octal",path:"std::fmt",desc:"Format trait for the `o` character"},{ty:"tymethod",name:"fmt",path:"std::fmt",desc:"",parent:'169226'},{ty:"trait",name:"Binary",path:"std::fmt",desc:"Format trait for the `t` character"},{ty:"tymethod",name:"fmt",path:"std::fmt",desc:"",parent:'169238'},{ty:"trait",name:"LowerHex",path:"std::fmt",desc:"Format trait for the `x` character"},{ty:"tymethod",name:"fmt",path:"std::fmt",desc:"",parent:'169250'},{ty:"trait",name:"UpperHex",path:"std::fmt",desc:"Format trait for the `X` character"},{ty:"tymethod",name:"fmt",path:"std::fmt",desc:"",parent:'169262'},{ty:"trait",name:"String",path:"std::fmt",desc:"Format trait for the `s` character"},{ty:"tymethod",name:"fmt",path:"std::fmt",desc:"",parent:'169274'},{ty:"trait",name:"Poly",path:"std::fmt",desc:"Format trait for the `?` character"},{ty:"tymethod",name:"fmt",path:"std::fmt",desc:"",parent:'169286'},{ty:"trait",name:"Pointer",path:"std::fmt",desc:"Format trait for the `p` character"},{ty:"tymethod",name:"fmt",path:"std::fmt",desc:"",parent:'169298'},{ty:"trait",name:"Float",path:"std::fmt",desc:"Format trait for the `f` character"},{ty:"tymethod",name:"fmt",path:"std::fmt",desc:"",parent:'169310'},{ty:"trait",name:"LowerExp",path:"std::fmt",desc:"Format trait for the `e` character"},{ty:"tymethod",name:"fmt",path:"std::fmt",desc:"",parent:'169322'},{ty:"trait",name:"UpperExp",path:"std::fmt",desc:"Format trait for the `E` character"},{ty:"tymethod",name:"fmt",path:"std::fmt",desc:"",parent:'169334'},{ty:"method",name:"pad_integral",path:"std::fmt",desc:"Performs the correct padding for an integer which has already been\nemitted into a byte-array. The byte-array should *not* contain the sign\nfor the integer, that will be added by this method.",parent:'169057'},{ty:"method",name:"pad",path:"std::fmt",desc:"This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",parent:'169057'},{ty:"mod",name:"mem",path:"std",desc:"Basic functions for dealing with memory"},{ty:"fn",name:"size_of",path:"std::mem",desc:"Returns the size of a type in bytes."},{ty:"fn",name:"size_of_val",path:"std::mem",desc:"Returns the size of the type that `_val` points to in bytes."},{ty:"fn",name:"nonzero_size_of",path:"std::mem",desc:"Returns the size of a type in bytes, or 1 if the actual size is zero."},{ty:"fn",name:"nonzero_size_of_val",path:"std::mem",desc:"Returns the size in bytes of the type of the value that `_val` points to."},{ty:"fn",name:"min_align_of",path:"std::mem",desc:"Returns the ABI-required minimum alignment of a type"},{ty:"fn",name:"min_align_of_val",path:"std::mem",desc:"Returns the ABI-required minimum alignment of the type of the value that\n`_val` points to"},{ty:"fn",name:"pref_align_of",path:"std::mem",desc:"Returns the preferred alignment of a type"},{ty:"fn",name:"pref_align_of_val",path:"std::mem",desc:"Returns the preferred alignment of the type of the value that\n`_val` points to"},{ty:"fn",name:"init",path:"std::mem",desc:"Create a value initialized to zero."},{ty:"fn",name:"uninit",path:"std::mem",desc:"Create an uninitialized value."},{ty:"fn",name:"move_val_init",path:"std::mem",desc:"Move a value to an uninitialized memory location."},{ty:"fn",name:"to_le16",path:"std::mem",desc:"Convert an i16 to little endian from the target's endianness."},{ty:"fn",name:"to_le32",path:"std::mem",desc:"Convert an i32 to little endian from the target's endianness."},{ty:"fn",name:"to_le64",path:"std::mem",desc:"Convert an i64 to little endian from the target's endianness."},{ty:"fn",name:"to_be16",path:"std::mem",desc:"Convert an i16 to big endian from the target's endianness."},{ty:"fn",name:"to_be32",path:"std::mem",desc:"Convert an i32 to big endian from the target's endianness."},{ty:"fn",name:"to_be64",path:"std::mem",desc:"Convert an i64 to big endian from the target's endianness."},{ty:"fn",name:"from_le16",path:"std::mem",desc:"Convert an i16 from little endian to the target's endianness."},{ty:"fn",name:"from_le32",path:"std::mem",desc:"Convert an i32 from little endian to the target's endianness."},{ty:"fn",name:"from_le64",path:"std::mem",desc:"Convert an i64 from little endian to the target's endianness."},{ty:"fn",name:"from_be16",path:"std::mem",desc:"Convert an i16 from big endian to the target's endianness."},{ty:"fn",name:"from_be32",path:"std::mem",desc:"Convert an i32 from big endian to the target's endianness."},{ty:"fn",name:"from_be64",path:"std::mem",desc:"Convert an i64 from big endian to the target's endianness."},{ty:"fn",name:"swap",path:"std::mem",desc:"Swap the values at two mutable locations of the same type, without\ndeinitialising or copying either one."},{ty:"fn",name:"replace",path:"std::mem",desc:"Replace the value at a mutable location with a new one, returning the old\nvalue, without deinitialising or copying either one."},{ty:"fn",name:"drop",path:"std::mem",desc:"Disposes of a value."},{ty:"mod",name:"repr",path:"std",desc:"More runtime type reflection"},{ty:"struct",name:"ReprVisitor",path:"std::repr",desc:""},{ty:"fn",name:"ReprVisitor",path:"std::repr",desc:""},{ty:"fn",name:"write_repr",path:"std::repr",desc:""},{ty:"fn",name:"repr_to_str",path:"std::repr",desc:""},{ty:"trait",name:"Repr",path:"std::repr",desc:"Representations"},{ty:"tymethod",name:"write_repr",path:"std::repr",desc:"",parent:'172466'},{ty:"method",name:"move_ptr",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"push_ptr",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"pop_ptr",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"get",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_inner",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_ptr_inner",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"write",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"write_escaped_slice",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"write_mut_qualifier",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"write_vec_range",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"write_unboxed_vec_repr",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_bot",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_nil",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_bool",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_int",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_i8",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_i16",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_i32",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_i64",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_uint",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_u8",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_u16",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_u32",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_u64",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_f32",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_f64",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_char",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_estr_box",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_estr_uniq",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_estr_slice",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_estr_fixed",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_box",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_uniq",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_ptr",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_rptr",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_vec",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_unboxed_vec",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_evec_box",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_evec_uniq",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_evec_slice",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_evec_fixed",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_enter_rec",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_rec_field",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_leave_rec",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_enter_class",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_class_field",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_leave_class",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_enter_tup",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_tup_field",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_leave_tup",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_enter_enum",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_enter_enum_variant",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_enum_variant_field",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_leave_enum_variant",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_leave_enum",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_enter_fn",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_fn_input",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_fn_output",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_leave_fn",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_trait",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_param",path:"std::repr",desc:"",parent:'173679'},{ty:"method",name:"visit_self",path:"std::repr",desc:"",parent:'173679'},{ty:"mod",name:"reflect",path:"std",desc:"Runtime type reflection"},{ty:"struct",name:"MovePtrAdaptor",path:"std::reflect",desc:"Adaptor to wrap around visitors implementing MovePtr."},{ty:"fn",name:"align",path:"std::reflect",desc:"Helper function for alignment calculation."},{ty:"fn",name:"MovePtrAdaptor",path:"std::reflect",desc:""},{ty:"trait",name:"MovePtr",path:"std::reflect",desc:"Trait for visitor that wishes to reflect on data. To use this, create a\nstruct that encapsulates the set of pointers you wish to walk through a\ndata structure, and implement both `MovePtr` for it as well as `TyVisitor`;\nthen build a MovePtrAdaptor wrapped around your struct."},{ty:"tymethod",name:"move_ptr",path:"std::reflect",desc:"",parent:'177254'},{ty:"tymethod",name:"push_ptr",path:"std::reflect",desc:"",parent:'177254'},{ty:"tymethod",name:"pop_ptr",path:"std::reflect",desc:"",parent:'177254'},{ty:"method",name:"bump",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"align",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"align_to",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"bump_past",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"unwrap",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_bot",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_nil",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_bool",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_int",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_i8",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_i16",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_i32",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_i64",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_uint",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_u8",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_u16",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_u32",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_u64",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_f32",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_f64",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_char",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_estr_box",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_estr_uniq",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_estr_slice",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_estr_fixed",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_box",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_uniq",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_ptr",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_rptr",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_unboxed_vec",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_vec",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_evec_box",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_evec_uniq",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_evec_slice",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_evec_fixed",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_enter_rec",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_rec_field",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_leave_rec",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_enter_class",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_class_field",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_leave_class",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_enter_tup",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_tup_field",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_leave_tup",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_enter_fn",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_fn_input",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_fn_output",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_leave_fn",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_enter_enum",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_enter_enum_variant",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_enum_variant_field",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_leave_enum_variant",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_leave_enum",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_trait",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_param",path:"std::reflect",desc:"",parent:'177306'},{ty:"method",name:"visit_self",path:"std::reflect",desc:"",parent:'177306'},{ty:"mod",name:"intrinsics",path:"std",desc:"rustc compiler intrinsics."},{ty:"struct",name:"TyDesc",path:"std::intrinsics",desc:""},{ty:"structfield",name:"size",path:"std::intrinsics",desc:"",parent:'181340'},{ty:"structfield",name:"align",path:"std::intrinsics",desc:"",parent:'181340'},{ty:"structfield",name:"drop_glue",path:"std::intrinsics",desc:"",parent:'181340'},{ty:"structfield",name:"visit_glue",path:"std::intrinsics",desc:"",parent:'181340'},{ty:"structfield",name:"name",path:"std::intrinsics",desc:"",parent:'181340'},{ty:"struct",name:"TypeId",path:"std::intrinsics",desc:"`TypeId` represents a globally unique identifier for a type"},{ty:"enum",name:"Opaque",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_cxchg",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_cxchg_acq",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_cxchg_rel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_cxchg_acqrel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_cxchg_relaxed",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_load",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_load_acq",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_load_relaxed",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_store",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_store_rel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_store_relaxed",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xchg",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xchg_acq",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xchg_rel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xchg_acqrel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xchg_relaxed",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xadd",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xadd_acq",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xadd_rel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xadd_acqrel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xadd_relaxed",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xsub",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xsub_acq",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xsub_rel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xsub_acqrel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xsub_relaxed",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_and",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_and_acq",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_and_rel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_and_acqrel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_and_relaxed",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_nand",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_nand_acq",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_nand_rel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_nand_acqrel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_nand_relaxed",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_or",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_or_acq",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_or_rel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_or_acqrel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_or_relaxed",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xor",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xor_acq",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xor_rel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xor_acqrel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_xor_relaxed",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_max",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_max_acq",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_max_rel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_max_acqrel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_max_relaxed",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_min",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_min_acq",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_min_rel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_min_acqrel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_min_relaxed",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_umin",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_umin_acq",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_umin_rel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_umin_acqrel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_umin_relaxed",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_umax",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_umax_acq",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_umax_rel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_umax_acqrel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_umax_relaxed",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_fence",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_fence_acq",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_fence_rel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"atomic_fence_acqrel",path:"std::intrinsics",desc:""},{ty:"ffi",name:"abort",path:"std::intrinsics",desc:"Abort the execution of the process."},{ty:"ffi",name:"breakpoint",path:"std::intrinsics",desc:"Execute a breakpoint trap, for inspection by a debugger."},{ty:"ffi",name:"volatile_load",path:"std::intrinsics",desc:""},{ty:"ffi",name:"volatile_store",path:"std::intrinsics",desc:""},{ty:"ffi",name:"size_of",path:"std::intrinsics",desc:"The size of a type in bytes."},{ty:"ffi",name:"move_val_init",path:"std::intrinsics",desc:"Move a value to an uninitialized memory location."},{ty:"ffi",name:"min_align_of",path:"std::intrinsics",desc:""},{ty:"ffi",name:"pref_align_of",path:"std::intrinsics",desc:""},{ty:"ffi",name:"get_tydesc",path:"std::intrinsics",desc:"Get a static pointer to a type descriptor."},{ty:"ffi",name:"type_id",path:"std::intrinsics",desc:"Gets an identifier which is globally unique to the specified type. This\nfunction will return the same value for a type regardless of whichever\ncrate it is invoked in."},{ty:"ffi",name:"init",path:"std::intrinsics",desc:"Create a value initialized to zero."},{ty:"ffi",name:"uninit",path:"std::intrinsics",desc:"Create an uninitialized value."},{ty:"ffi",name:"forget",path:"std::intrinsics",desc:"Move a value out of scope without running drop glue."},{ty:"ffi",name:"transmute",path:"std::intrinsics",desc:""},{ty:"ffi",name:"needs_drop",path:"std::intrinsics",desc:"Returns `true` if a type requires drop glue."},{ty:"ffi",name:"owns_managed",path:"std::intrinsics",desc:"Returns `true` if a type is managed (will be allocated on the local heap)"},{ty:"ffi",name:"visit_tydesc",path:"std::intrinsics",desc:""},{ty:"ffi",name:"offset",path:"std::intrinsics",desc:"Calculates the offset from a pointer. The offset *must* be in-bounds of\nthe object, or one-byte-past-the-end. An arithmetic overflow is also\nundefined behaviour."},{ty:"ffi",name:"copy_nonoverlapping_memory",path:"std::intrinsics",desc:"Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`"},{ty:"ffi",name:"copy_memory",path:"std::intrinsics",desc:"Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`"},{ty:"ffi",name:"set_memory",path:"std::intrinsics",desc:"Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\nsize of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`"},{ty:"ffi",name:"sqrtf32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"sqrtf64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"powif32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"powif64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"sinf32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"sinf64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"cosf32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"cosf64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"powf32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"powf64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"expf32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"expf64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"exp2f32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"exp2f64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"logf32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"logf64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"log10f32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"log10f64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"log2f32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"log2f64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"fmaf32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"fmaf64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"fabsf32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"fabsf64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"copysignf32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"copysignf64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"floorf32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"floorf64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"ceilf32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"ceilf64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"truncf32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"truncf64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"rintf32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"rintf64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"nearbyintf32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"nearbyintf64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"roundf32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"roundf64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"ctpop8",path:"std::intrinsics",desc:""},{ty:"ffi",name:"ctpop16",path:"std::intrinsics",desc:""},{ty:"ffi",name:"ctpop32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"ctpop64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"ctlz8",path:"std::intrinsics",desc:""},{ty:"ffi",name:"ctlz16",path:"std::intrinsics",desc:""},{ty:"ffi",name:"ctlz32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"ctlz64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"cttz8",path:"std::intrinsics",desc:""},{ty:"ffi",name:"cttz16",path:"std::intrinsics",desc:""},{ty:"ffi",name:"cttz32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"cttz64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"bswap16",path:"std::intrinsics",desc:""},{ty:"ffi",name:"bswap32",path:"std::intrinsics",desc:""},{ty:"ffi",name:"bswap64",path:"std::intrinsics",desc:""},{ty:"ffi",name:"i8_add_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"i16_add_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"i32_add_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"i64_add_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"u8_add_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"u16_add_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"u32_add_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"u64_add_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"i8_sub_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"i16_sub_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"i32_sub_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"i64_sub_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"u8_sub_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"u16_sub_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"u32_sub_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"u64_sub_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"i8_mul_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"i16_mul_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"i32_mul_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"i64_mul_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"u8_mul_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"u16_mul_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"u32_mul_with_overflow",path:"std::intrinsics",desc:""},{ty:"ffi",name:"u64_mul_with_overflow",path:"std::intrinsics",desc:""},{ty:"typedef",name:"GlueFn",path:"std::intrinsics",desc:""},{ty:"typedef",name:"Disr",path:"std::intrinsics",desc:""},{ty:"trait",name:"TyVisitor",path:"std::intrinsics",desc:""},{ty:"tymethod",name:"visit_bot",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_nil",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_bool",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_int",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_i8",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_i16",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_i32",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_i64",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_uint",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_u8",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_u16",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_u32",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_u64",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_f32",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_f64",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_char",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_estr_box",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_estr_uniq",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_estr_slice",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_estr_fixed",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_box",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_uniq",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_ptr",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_rptr",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_vec",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_unboxed_vec",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_evec_box",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_evec_uniq",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_evec_slice",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_evec_fixed",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_enter_rec",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_rec_field",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_leave_rec",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_enter_class",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_class_field",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_leave_class",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_enter_tup",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_tup_field",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_leave_tup",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_enter_enum",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_enter_enum_variant",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_enum_variant_field",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_leave_enum_variant",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_leave_enum",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_enter_fn",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_fn_input",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_fn_output",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_leave_fn",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_trait",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_param",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"tymethod",name:"visit_self",path:"std::intrinsics",desc:"",parent:'181362'},{ty:"method",name:"fmt",path:"std::intrinsics",desc:"",parent:'183865'},{ty:"method",name:"hash",path:"std::intrinsics",desc:"",parent:'183865'},{ty:"method",name:"eq",path:"std::intrinsics",desc:"",parent:'183865'},{ty:"method",name:"ne",path:"std::intrinsics",desc:"",parent:'183865'},{ty:"method",name:"of",path:"std::intrinsics",desc:"Returns the `TypeId` of the type this generic function has been instantiated with",parent:'183865'},{ty:"mod",name:"raw",path:"std",desc:"Contains struct definitions for the layout of compiler built-in types."},{ty:"struct",name:"Box",path:"std::raw",desc:"The representation of a Rust managed box"},{ty:"structfield",name:"ref_count",path:"std::raw",desc:"",parent:'184081'},{ty:"structfield",name:"drop_glue",path:"std::raw",desc:"",parent:'184081'},{ty:"structfield",name:"prev",path:"std::raw",desc:"",parent:'184081'},{ty:"structfield",name:"next",path:"std::raw",desc:"",parent:'184081'},{ty:"structfield",name:"data",path:"std::raw",desc:"",parent:'184081'},{ty:"struct",name:"Vec",path:"std::raw",desc:"The representation of a Rust vector"},{ty:"structfield",name:"fill",path:"std::raw",desc:"",parent:'184109'},{ty:"structfield",name:"alloc",path:"std::raw",desc:"",parent:'184109'},{ty:"structfield",name:"data",path:"std::raw",desc:"",parent:'184109'},{ty:"struct",name:"Slice",path:"std::raw",desc:"The representation of a Rust slice"},{ty:"structfield",name:"data",path:"std::raw",desc:"",parent:'184125'},{ty:"structfield",name:"len",path:"std::raw",desc:"",parent:'184125'},{ty:"struct",name:"Closure",path:"std::raw",desc:"The representation of a Rust closure"},{ty:"structfield",name:"code",path:"std::raw",desc:"",parent:'184134'},{ty:"structfield",name:"env",path:"std::raw",desc:"",parent:'184134'},{ty:"struct",name:"Procedure",path:"std::raw",desc:"The representation of a Rust procedure (`proc()`)"},{ty:"structfield",name:"code",path:"std::raw",desc:"",parent:'184141'},{ty:"structfield",name:"env",path:"std::raw",desc:"",parent:'184141'},{ty:"struct",name:"TraitObject",path:"std::raw",desc:"The representation of a Rust trait object."},{ty:"structfield",name:"vtable",path:"std::raw",desc:"",parent:'184148'},{ty:"structfield",name:"data",path:"std::raw",desc:"",parent:'184148'},{ty:"typedef",name:"String",path:"std::raw",desc:"The representation of a Rust string"},{ty:"trait",name:"Repr",path:"std::raw",desc:"This trait is meant to map equivalences between raw structs and their\ncorresponding rust values."},{ty:"method",name:"repr",path:"std::raw",desc:"This function \"unwraps\" a rust value (without consuming it) into its raw\nstruct representation. This can be used to read/write different values\nfor the struct. This is a safe method because by default it does not\nenable write-access to the fields of the return value in safe code.",parent:'184155'},{ty:"mod",name:"rt",path:"std",desc:"Runtime services, including the task scheduler and I/O dispatcher"},{ty:"fn",name:"default_sched_threads",path:"std::rt",desc:"Get's the number of scheduler threads requested by the environment\neither `RUST_THREADS` or `num_cpus`."},{ty:"fn",name:"init",path:"std::rt",desc:"One-time runtime initialization."},{ty:"fn",name:"at_exit",path:"std::rt",desc:"Enqueues a procedure to run when the runtime is cleaned up"},{ty:"fn",name:"cleanup",path:"std::rt",desc:"One-time runtime cleanup."},{ty:"mod",name:"global_heap",path:"std::rt",desc:"The global (exchange) heap.\nThe global (exchange) heap."},{ty:"fn",name:"get_box_size",path:"std::rt::global_heap",desc:""},{ty:"fn",name:"malloc_raw",path:"std::rt::global_heap",desc:"A wrapper around libc::malloc, aborting on out-of-memory"},{ty:"fn",name:"realloc_raw",path:"std::rt::global_heap",desc:"A wrapper around libc::realloc, aborting on out-of-memory"},{ty:"fn",name:"exchange_malloc",path:"std::rt::global_heap",desc:"The allocator for unique pointers without contained managed pointers."},{ty:"fn",name:"closure_exchange_malloc_",path:"std::rt::global_heap",desc:""},{ty:"fn",name:"closure_exchange_malloc",path:"std::rt::global_heap",desc:""},{ty:"fn",name:"exchange_free_",path:"std::rt::global_heap",desc:""},{ty:"fn",name:"exchange_free",path:"std::rt::global_heap",desc:""},{ty:"mod",name:"task",path:"std::rt",desc:"Implementations of language-critical runtime features like @.\nImplementations of language-critical runtime features like @.\nLanguage-level runtime services that should reasonably expected\nto be available 'everywhere'. Local heaps, GC, unwinding,\nlocal storage, and logging. Even a 'freestanding' Rust would likely want\nto implement this."},{ty:"struct",name:"Task",path:"std::rt::task",desc:"The Task struct represents all state associated with a rust\ntask. There are at this point two primary \"subtypes\" of task,\nhowever instead of using a subtype we just have a \"task_type\" field\nin the struct. This contains a pointer to another struct that holds\nthe type-specific state."},{ty:"structfield",name:"heap",path:"std::rt::task",desc:"",parent:'235375'},{ty:"structfield",name:"gc",path:"std::rt::task",desc:"",parent:'235375'},{ty:"structfield",name:"storage",path:"std::rt::task",desc:"",parent:'235375'},{ty:"structfield",name:"unwinder",path:"std::rt::task",desc:"",parent:'235375'},{ty:"structfield",name:"death",path:"std::rt::task",desc:"",parent:'235375'},{ty:"structfield",name:"destroyed",path:"std::rt::task",desc:"",parent:'235375'},{ty:"structfield",name:"name",path:"std::rt::task",desc:"",parent:'235375'},{ty:"structfield",name:"stdout",path:"std::rt::task",desc:"",parent:'235375'},{ty:"structfield",name:"stderr",path:"std::rt::task",desc:"",parent:'235375'},{ty:"struct",name:"GarbageCollector",path:"std::rt::task",desc:""},{ty:"struct",name:"LocalStorage",path:"std::rt::task",desc:""},{ty:"struct",name:"Death",path:"std::rt::task",desc:"Per-task state related to task death, killing, failure, etc."},{ty:"structfield",name:"on_exit",path:"std::rt::task",desc:"",parent:'235453'},{ty:"struct",name:"BlockedTasks",path:"std::rt::task",desc:""},{ty:"enum",name:"BlockedTask",path:"std::rt::task",desc:"A handle to a blocked task. Usually this means having the ~Task pointer by\nownership, but if the task is killable, a killer can steal it at any time."},{ty:"variant",name:"Owned",path:"std::rt::task",desc:"",parent:'235426'},{ty:"variant",name:"Shared",path:"std::rt::task",desc:"",parent:'235426'},{ty:"enum",name:"DeathAction",path:"std::rt::task",desc:""},{ty:"variant",name:"Execute",path:"std::rt::task",desc:"Action to be done with the exit code. If set, also makes the task wait\nuntil all its watched children exit before collecting the status.",parent:'235438'},{ty:"variant",name:"SendMessage",path:"std::rt::task",desc:"A channel to send the result of the task on when the task exits",parent:'235438'},{ty:"method",name:"new",path:"std::rt::task",desc:"",parent:'235375'},{ty:"method",name:"run",path:"std::rt::task",desc:"Executes the given closure as if it's running inside this task. The task\nis consumed upon entry, and the destroyed task is returned from this\nfunction in order for the caller to free. This function is guaranteed to\nnot unwind because the closure specified is run inside of a `rust_try`\nblock. (this is the only try/catch block in the world).",parent:'235375'},{ty:"method",name:"put_runtime",path:"std::rt::task",desc:"Inserts a runtime object into this task, transferring ownership to the\ntask. It is illegal to replace a previous runtime object in this task\nwith this argument.",parent:'235375'},{ty:"method",name:"maybe_take_runtime",path:"std::rt::task",desc:"Attempts to extract the runtime as a specific type. If the runtime does\nnot have the provided type, then the runtime is not removed. If the\nruntime does have the specified type, then it is removed and returned\n(transfer of ownership).",parent:'235375'},{ty:"method",name:"spawn_sibling",path:"std::rt::task",desc:"Spawns a sibling to this task. The newly spawned task is configured with\nthe `opts` structure and will run `f` as the body of its code.",parent:'235375'},{ty:"method",name:"deschedule",path:"std::rt::task",desc:"Deschedules the current task, invoking `f` `amt` times. It is not\nrecommended to use this function directly, but rather communication\nprimitives in `std::comm` should be used.",parent:'235375'},{ty:"method",name:"reawaken",path:"std::rt::task",desc:"Wakes up a previously blocked task, optionally specifying whether the\ncurrent task can accept a change in scheduling. This function can only\nbe called on tasks that were previously blocked in `deschedule`.",parent:'235375'},{ty:"method",name:"yield_now",path:"std::rt::task",desc:"Yields control of this task to another task. This function will\neventually return, but possibly not immediately. This is used as an\nopportunity to allow other tasks a chance to run.",parent:'235375'},{ty:"method",name:"maybe_yield",path:"std::rt::task",desc:"Similar to `yield_now`, except that this function may immediately return\nwithout yielding (depending on what the runtime decides to do).",parent:'235375'},{ty:"method",name:"local_io",path:"std::rt::task",desc:"Acquires a handle to the I/O factory that this task contains, normally\nstored in the task's runtime. This factory may not always be available,\nwhich is why the return type is `Option`",parent:'235375'},{ty:"method",name:"stack_bounds",path:"std::rt::task",desc:"Returns the stack bounds for this task in (lo, hi) format. The stack\nbounds may not be known for all tasks, so the return value may be\n`None`.",parent:'235375'},{ty:"method",name:"can_block",path:"std::rt::task",desc:"Returns whether it is legal for this task to block the OS thread that it\nis running on.",parent:'235375'},{ty:"method",name:"drop",path:"std::rt::task",desc:"",parent:'235375'},{ty:"method",name:"next",path:"std::rt::task",desc:"",parent:'235459'},{ty:"method",name:"wake",path:"std::rt::task",desc:"Returns Some if the task was successfully woken; None if already killed.",parent:'235426'},{ty:"method",name:"trash",path:"std::rt::task",desc:"",parent:'235426'},{ty:"method",name:"block",path:"std::rt::task",desc:"Create a blocked task, unless the task was already killed.",parent:'235426'},{ty:"method",name:"make_selectable",path:"std::rt::task",desc:"Converts one blocked task handle to a list of many handles to the same.",parent:'235426'},{ty:"method",name:"cast_to_uint",path:"std::rt::task",desc:"Convert to an unsafe uint value. Useful for storing in a pipe's state\nflag.",parent:'235426'},{ty:"method",name:"cast_from_uint",path:"std::rt::task",desc:"Convert from an unsafe uint value. Useful for retrieving a pipe's state\nflag.",parent:'235426'},{ty:"method",name:"new",path:"std::rt::task",desc:"",parent:'235453'},{ty:"method",name:"collect_failure",path:"std::rt::task",desc:"Collect failure exit codes from children and propagate them to a parent.",parent:'235453'},{ty:"method",name:"drop",path:"std::rt::task",desc:"",parent:'235453'},{ty:"mod",name:"rtio",path:"std::rt",desc:"The EventLoop and internal synchronous I/O interface.\nThe EventLoop and internal synchronous I/O interface."},{ty:"struct",name:"FileOpenConfig",path:"std::rt::rtio",desc:"Data needed to make a successful open(2) call\nUsing unix flag conventions for now, which happens to also be what's supported\nlibuv (it does translation to windows under the hood)."},{ty:"structfield",name:"path",path:"std::rt::rtio",desc:"Path to file to be opened",parent:'236684'},{ty:"structfield",name:"flags",path:"std::rt::rtio",desc:"Flags for file access mode (as per open(2))",parent:'236684'},{ty:"struct",name:"LocalIo",path:"std::rt::rtio",desc:""},{ty:"enum",name:"CloseBehavior",path:"std::rt::rtio",desc:"Description of what to do when a file handle is closed"},{ty:"variant",name:"DontClose",path:"std::rt::rtio",desc:"Do not close this handle when the object is destroyed",parent:'236694'},{ty:"variant",name:"CloseSynchronously",path:"std::rt::rtio",desc:"Synchronously close the handle, meaning that the task will block when\nthe handle is destroyed until it has been fully closed.",parent:'236694'},{ty:"variant",name:"CloseAsynchronously",path:"std::rt::rtio",desc:"Asynchronously closes a handle, meaning that the task will *not* block\nwhen the handle is destroyed, but the handle will still get deallocated\nand cleaned up (but this will happen asynchronously on the local event\nloop).",parent:'236694'},{ty:"trait",name:"Callback",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"call",path:"std::rt::rtio",desc:"",parent:'236615'},{ty:"trait",name:"EventLoop",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"run",path:"std::rt::rtio",desc:"",parent:'236621'},{ty:"tymethod",name:"callback",path:"std::rt::rtio",desc:"",parent:'236621'},{ty:"tymethod",name:"pausable_idle_callback",path:"std::rt::rtio",desc:"",parent:'236621'},{ty:"tymethod",name:"remote_callback",path:"std::rt::rtio",desc:"",parent:'236621'},{ty:"tymethod",name:"io",path:"std::rt::rtio",desc:"The asynchronous I/O services. Not all event loops may provide one.",parent:'236621'},{ty:"tymethod",name:"has_active_io",path:"std::rt::rtio",desc:"",parent:'236621'},{ty:"trait",name:"RemoteCallback",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"fire",path:"std::rt::rtio",desc:"Trigger the remote callback. Note that the number of times the\ncallback is run is not guaranteed. All that is guaranteed is\nthat, after calling 'fire', the callback will be called at\nleast once, but multiple callbacks may be coalesced and\ncallbacks may be called more often requested. Destruction also\ntriggers the callback.",parent:'236678'},{ty:"trait",name:"IoFactory",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"tcp_connect",path:"std::rt::rtio",desc:"",parent:'236830'},{ty:"tymethod",name:"tcp_bind",path:"std::rt::rtio",desc:"",parent:'236830'},{ty:"tymethod",name:"udp_bind",path:"std::rt::rtio",desc:"",parent:'236830'},{ty:"tymethod",name:"unix_bind",path:"std::rt::rtio",desc:"",parent:'236830'},{ty:"tymethod",name:"unix_connect",path:"std::rt::rtio",desc:"",parent:'236830'},{ty:"tymethod",name:"get_host_addresses",path:"std::rt::rtio",desc:"",parent:'236830'},{ty:"tymethod",name:"fs_from_raw_fd",path:"std::rt::rtio",desc:"",parent:'236830'},{ty:"tymethod",name:"fs_open",path:"std::rt::rtio",desc:"",parent:'236830'},{ty:"tymethod",name:"fs_unlink",path:"std::rt::rtio",desc:"",parent:'236830'},{ty:"tymethod",name:"fs_stat",path:"std::rt::rtio",desc:"",parent:'236830'},{ty:"tymethod",name:"fs_mkdir",path:"std::rt::rtio",desc:"",parent:'236830'},{ty:"tymethod",name:"fs_chmod",path:"std::rt::rtio",desc:"",parent:'236830'},{ty:"tymethod",name:"fs_rmdir",path:"std::rt::rtio",desc:"",parent:'236830'},{ty:"tymethod",name:"fs_rename",path:"std::rt::rtio",desc:"",parent:'236830'},{ty:"tymethod",name:"fs_readdir",path:"std::rt::rtio",desc:"",parent:'236830'},{ty:"tymethod",name:"fs_lstat",path:"std::rt::rtio",desc:"",parent:'236830'},{ty:"tymethod",name:"fs_chown",path:"std::rt::rtio",desc:"",parent:'236830'},{ty:"tymethod",name:"fs_readlink",path:"std::rt::rtio",desc:"",parent:'236830'},{ty:"tymethod",name:"fs_symlink",path:"std::rt::rtio",desc:"",parent:'236830'},{ty:"tymethod",name:"fs_link",path:"std::rt::rtio",desc:"",parent:'236830'},{ty:"tymethod",name:"fs_utime",path:"std::rt::rtio",desc:"",parent:'236830'},{ty:"tymethod",name:"timer_init",path:"std::rt::rtio",desc:"",parent:'236830'},{ty:"tymethod",name:"spawn",path:"std::rt::rtio",desc:"",parent:'236830'},{ty:"tymethod",name:"kill",path:"std::rt::rtio",desc:"",parent:'236830'},{ty:"tymethod",name:"pipe_open",path:"std::rt::rtio",desc:"",parent:'236830'},{ty:"tymethod",name:"tty_open",path:"std::rt::rtio",desc:"",parent:'236830'},{ty:"tymethod",name:"signal",path:"std::rt::rtio",desc:"",parent:'236830'},{ty:"trait",name:"RtioTcpListener",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"listen",path:"std::rt::rtio",desc:"",parent:'237316'},{ty:"trait",name:"RtioTcpAcceptor",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"accept",path:"std::rt::rtio",desc:"",parent:'237329'},{ty:"tymethod",name:"accept_simultaneously",path:"std::rt::rtio",desc:"",parent:'237329'},{ty:"tymethod",name:"dont_accept_simultaneously",path:"std::rt::rtio",desc:"",parent:'237329'},{ty:"trait",name:"RtioTcpStream",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"read",path:"std::rt::rtio",desc:"",parent:'237360'},{ty:"tymethod",name:"write",path:"std::rt::rtio",desc:"",parent:'237360'},{ty:"tymethod",name:"peer_name",path:"std::rt::rtio",desc:"",parent:'237360'},{ty:"tymethod",name:"control_congestion",path:"std::rt::rtio",desc:"",parent:'237360'},{ty:"tymethod",name:"nodelay",path:"std::rt::rtio",desc:"",parent:'237360'},{ty:"tymethod",name:"keepalive",path:"std::rt::rtio",desc:"",parent:'237360'},{ty:"tymethod",name:"letdie",path:"std::rt::rtio",desc:"",parent:'237360'},{ty:"tymethod",name:"clone",path:"std::rt::rtio",desc:"",parent:'237360'},{ty:"tymethod",name:"close_write",path:"std::rt::rtio",desc:"",parent:'237360'},{ty:"trait",name:"RtioSocket",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"socket_name",path:"std::rt::rtio",desc:"",parent:'237459'},{ty:"trait",name:"RtioUdpSocket",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"recvfrom",path:"std::rt::rtio",desc:"",parent:'237470'},{ty:"tymethod",name:"sendto",path:"std::rt::rtio",desc:"",parent:'237470'},{ty:"tymethod",name:"join_multicast",path:"std::rt::rtio",desc:"",parent:'237470'},{ty:"tymethod",name:"leave_multicast",path:"std::rt::rtio",desc:"",parent:'237470'},{ty:"tymethod",name:"loop_multicast_locally",path:"std::rt::rtio",desc:"",parent:'237470'},{ty:"tymethod",name:"dont_loop_multicast_locally",path:"std::rt::rtio",desc:"",parent:'237470'},{ty:"tymethod",name:"multicast_time_to_live",path:"std::rt::rtio",desc:"",parent:'237470'},{ty:"tymethod",name:"time_to_live",path:"std::rt::rtio",desc:"",parent:'237470'},{ty:"tymethod",name:"hear_broadcasts",path:"std::rt::rtio",desc:"",parent:'237470'},{ty:"tymethod",name:"ignore_broadcasts",path:"std::rt::rtio",desc:"",parent:'237470'},{ty:"tymethod",name:"clone",path:"std::rt::rtio",desc:"",parent:'237470'},{ty:"trait",name:"RtioTimer",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"sleep",path:"std::rt::rtio",desc:"",parent:'237605'},{ty:"tymethod",name:"oneshot",path:"std::rt::rtio",desc:"",parent:'237605'},{ty:"tymethod",name:"period",path:"std::rt::rtio",desc:"",parent:'237605'},{ty:"trait",name:"RtioFileStream",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"read",path:"std::rt::rtio",desc:"",parent:'237637'},{ty:"tymethod",name:"write",path:"std::rt::rtio",desc:"",parent:'237637'},{ty:"tymethod",name:"pread",path:"std::rt::rtio",desc:"",parent:'237637'},{ty:"tymethod",name:"pwrite",path:"std::rt::rtio",desc:"",parent:'237637'},{ty:"tymethod",name:"seek",path:"std::rt::rtio",desc:"",parent:'237637'},{ty:"tymethod",name:"tell",path:"std::rt::rtio",desc:"",parent:'237637'},{ty:"tymethod",name:"fsync",path:"std::rt::rtio",desc:"",parent:'237637'},{ty:"tymethod",name:"datasync",path:"std::rt::rtio",desc:"",parent:'237637'},{ty:"tymethod",name:"truncate",path:"std::rt::rtio",desc:"",parent:'237637'},{ty:"trait",name:"RtioProcess",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"id",path:"std::rt::rtio",desc:"",parent:'237767'},{ty:"tymethod",name:"kill",path:"std::rt::rtio",desc:"",parent:'237767'},{ty:"tymethod",name:"wait",path:"std::rt::rtio",desc:"",parent:'237767'},{ty:"trait",name:"RtioPipe",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"read",path:"std::rt::rtio",desc:"",parent:'237793'},{ty:"tymethod",name:"write",path:"std::rt::rtio",desc:"",parent:'237793'},{ty:"tymethod",name:"clone",path:"std::rt::rtio",desc:"",parent:'237793'},{ty:"trait",name:"RtioUnixListener",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"listen",path:"std::rt::rtio",desc:"",parent:'237832'},{ty:"trait",name:"RtioUnixAcceptor",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"accept",path:"std::rt::rtio",desc:"",parent:'237844'},{ty:"trait",name:"RtioTTY",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"read",path:"std::rt::rtio",desc:"",parent:'237856'},{ty:"tymethod",name:"write",path:"std::rt::rtio",desc:"",parent:'237856'},{ty:"tymethod",name:"set_raw",path:"std::rt::rtio",desc:"",parent:'237856'},{ty:"tymethod",name:"get_winsize",path:"std::rt::rtio",desc:"",parent:'237856'},{ty:"tymethod",name:"isatty",path:"std::rt::rtio",desc:"",parent:'237856'},{ty:"trait",name:"PausableIdleCallback",path:"std::rt::rtio",desc:""},{ty:"tymethod",name:"pause",path:"std::rt::rtio",desc:"",parent:'237920'},{ty:"tymethod",name:"resume",path:"std::rt::rtio",desc:"",parent:'237920'},{ty:"trait",name:"RtioSignal",path:"std::rt::rtio",desc:""},{ty:"method",name:"drop",path:"std::rt::rtio",desc:"",parent:'236698'},{ty:"method",name:"borrow",path:"std::rt::rtio",desc:"Returns the local I/O: either the local scheduler's I/O services or\nthe native I/O services.",parent:'236698'},{ty:"method",name:"maybe_raise",path:"std::rt::rtio",desc:"",parent:'236698'},{ty:"method",name:"new",path:"std::rt::rtio",desc:"",parent:'236698'},{ty:"method",name:"get",path:"std::rt::rtio",desc:"Returns the underlying I/O factory as a trait reference.",parent:'236698'},{ty:"mod",name:"local",path:"std::rt",desc:"The Local trait for types that are accessible via thread-local\nor task-local storage.\nThe Local trait for types that are accessible via thread-local\nor task-local storage."},{ty:"trait",name:"Local",path:"std::rt::local",desc:"Encapsulates some task-local data."},{ty:"tymethod",name:"put",path:"std::rt::local",desc:"",parent:'237936'},{ty:"tymethod",name:"take",path:"std::rt::local",desc:"",parent:'237936'},{ty:"tymethod",name:"try_take",path:"std::rt::local",desc:"",parent:'237936'},{ty:"tymethod",name:"exists",path:"std::rt::local",desc:"",parent:'237936'},{ty:"tymethod",name:"borrow",path:"std::rt::local",desc:"",parent:'237936'},{ty:"tymethod",name:"unsafe_take",path:"std::rt::local",desc:"",parent:'237936'},{ty:"tymethod",name:"unsafe_borrow",path:"std::rt::local",desc:"",parent:'237936'},{ty:"tymethod",name:"try_unsafe_borrow",path:"std::rt::local",desc:"",parent:'237936'},{ty:"method",name:"put",path:"std::rt::task",desc:"",parent:'235375'},{ty:"method",name:"take",path:"std::rt::task",desc:"",parent:'235375'},{ty:"method",name:"try_take",path:"std::rt::task",desc:"",parent:'235375'},{ty:"method",name:"exists",path:"std::rt::task",desc:"",parent:'235375'},{ty:"method",name:"borrow",path:"std::rt::task",desc:"",parent:'235375'},{ty:"method",name:"unsafe_take",path:"std::rt::task",desc:"",parent:'235375'},{ty:"method",name:"unsafe_borrow",path:"std::rt::task",desc:"",parent:'235375'},{ty:"method",name:"try_unsafe_borrow",path:"std::rt::task",desc:"",parent:'235375'},{ty:"mod",name:"thread",path:"std::rt",desc:"Bindings to system threading libraries.\nBindings to system threading libraries.\nNative os-thread management"},{ty:"struct",name:"Thread",path:"std::rt::thread",desc:"This struct represents a native thread's state. This is used to join on an\nexisting thread created in the join-able state."},{ty:"method",name:"start",path:"std::rt::thread",desc:"Starts execution of a new OS thread.",parent:'238100'},{ty:"method",name:"start_stack",path:"std::rt::thread",desc:"Performs the same functionality as `start`, but specifies an explicit\nstack size for the new thread.",parent:'238100'},{ty:"method",name:"spawn",path:"std::rt::thread",desc:"This will spawn a new thread, but it will not wait for the thread to\nfinish, nor is it possible to wait for the thread to finish.",parent:'238100'},{ty:"method",name:"spawn_stack",path:"std::rt::thread",desc:"Performs the same functionality as `spawn`, but explicitly specifies a\nstack size for the new thread.",parent:'238100'},{ty:"method",name:"yield_now",path:"std::rt::thread",desc:"Relinquishes the CPU slot that this OS-thread is currently using,\nallowing another thread to run for awhile.",parent:'238100'},{ty:"method",name:"join",path:"std::rt::thread",desc:"Wait for this thread to finish, returning the result of the thread's\ncalculation.",parent:'238100'},{ty:"method",name:"drop",path:"std::rt::thread",desc:"",parent:'238100'},{ty:"mod",name:"env",path:"std::rt",desc:"The runtime configuration, read from environment variables.\nThe runtime configuration, read from environment variables.\nRuntime environment settings"},{ty:"fn",name:"init",path:"std::rt::env",desc:""},{ty:"fn",name:"min_stack",path:"std::rt::env",desc:""},{ty:"fn",name:"max_cached_stacks",path:"std::rt::env",desc:""},{ty:"fn",name:"debug_borrow",path:"std::rt::env",desc:""},{ty:"mod",name:"local_heap",path:"std::rt",desc:"The local, managed heap\nThe local, managed heap\nThe local, garbage collected heap"},{ty:"struct",name:"MemoryRegion",path:"std::rt::local_heap",desc:""},{ty:"struct",name:"LocalHeap",path:"std::rt::local_heap",desc:""},{ty:"fn",name:"local_malloc_",path:"std::rt::local_heap",desc:""},{ty:"fn",name:"local_malloc",path:"std::rt::local_heap",desc:""},{ty:"fn",name:"local_free_",path:"std::rt::local_heap",desc:""},{ty:"fn",name:"local_free",path:"std::rt::local_heap",desc:""},{ty:"fn",name:"live_allocs",path:"std::rt::local_heap",desc:""},{ty:"typedef",name:"Box",path:"std::rt::local_heap",desc:""},{ty:"method",name:"new",path:"std::rt::local_heap",desc:"",parent:'238860'},{ty:"method",name:"alloc",path:"std::rt::local_heap",desc:"",parent:'238860'},{ty:"method",name:"realloc",path:"std::rt::local_heap",desc:"",parent:'238860'},{ty:"method",name:"free",path:"std::rt::local_heap",desc:"",parent:'238860'},{ty:"method",name:"drop",path:"std::rt::local_heap",desc:"",parent:'238860'},{ty:"method",name:"drop",path:"std::rt::local_heap",desc:"",parent:'238850'},{ty:"mod",name:"crate_map",path:"std::rt",desc:"Crate map\nCrate map"},{ty:"struct",name:"CrateMap",path:"std::rt::crate_map",desc:""},{ty:"structfield",name:"version",path:"std::rt::crate_map",desc:"",parent:'240218'},{ty:"structfield",name:"event_loop_factory",path:"std::rt::crate_map",desc:"",parent:'240218'},{ty:"fn",name:"rust_set_crate_map",path:"std::rt::crate_map",desc:""},{ty:"fn",name:"get_crate_map",path:"std::rt::crate_map",desc:""},{ty:"mod",name:"unwind",path:"std::rt",desc:"Stack unwinding\nStack unwinding"},{ty:"struct",name:"Unwinder",path:"std::rt::unwind",desc:""},{ty:"fn",name:"fail_",path:"std::rt::unwind",desc:""},{ty:"fn",name:"fail_bounds_check",path:"std::rt::unwind",desc:""},{ty:"fn",name:"begin_unwind_raw",path:"std::rt::unwind",desc:"This is the entry point of unwinding for things like lang items and such.\nThe arguments are normally generated by the compiler, and need to\nhave static lifetimes."},{ty:"fn",name:"begin_unwind_fmt",path:"std::rt::unwind",desc:"The entry point for unwinding with a formatted message."},{ty:"fn",name:"begin_unwind",path:"std::rt::unwind",desc:"This is the entry point of unwinding for fail!() and assert!()."},{ty:"method",name:"new",path:"std::rt::unwind",desc:"",parent:'241507'},{ty:"method",name:"unwinding",path:"std::rt::unwind",desc:"",parent:'241507'},{ty:"method",name:"try",path:"std::rt::unwind",desc:"",parent:'241507'},{ty:"method",name:"begin_unwind",path:"std::rt::unwind",desc:"",parent:'241507'},{ty:"method",name:"result",path:"std::rt::unwind",desc:"",parent:'241507'},{ty:"mod",name:"backtrace",path:"std::rt",desc:"Simple backtrace functionality (to print on failure)\nSimple backtrace functionality (to print on failure)"},{ty:"fn",name:"write",path:"std::rt::backtrace",desc:""},{ty:"fn",name:"log_enabled",path:"std::rt::backtrace",desc:""},{ty:"mod",name:"args",path:"std::rt",desc:"Global storage for command line arguments"},{ty:"fn",name:"init",path:"std::rt::args",desc:"One-time global initialization."},{ty:"fn",name:"cleanup",path:"std::rt::args",desc:"One-time global cleanup."},{ty:"fn",name:"take",path:"std::rt::args",desc:"Take the global arguments from global storage."},{ty:"fn",name:"put",path:"std::rt::args",desc:"Give the global arguments to global storage."},{ty:"fn",name:"clone",path:"std::rt::args",desc:"Make a clone of the global arguments."},{ty:"mod",name:"stack",path:"std::rt",desc:"Rust stack-limit management"},{ty:"fn",name:"record_stack_bounds",path:"std::rt::stack",desc:""},{ty:"fn",name:"record_sp_limit",path:"std::rt::stack",desc:"Records the current limit of the stack as specified by `end`."},{ty:"fn",name:"get_sp_limit",path:"std::rt::stack",desc:"The counterpart of the function above, this function will fetch the current\nstack limit stored in TLS."},{ty:"static",name:"RED_ZONE",path:"std::rt::stack",desc:""},{ty:"static",name:"DEFAULT_ERROR_CODE",path:"std::rt",desc:"The default error code of the rust runtime if the main task fails instead\nof exiting cleanly."},{ty:"trait",name:"Runtime",path:"std::rt",desc:"The interface to the current runtime."},{ty:"tymethod",name:"yield_now",path:"std::rt",desc:"",parent:'246676'},{ty:"tymethod",name:"maybe_yield",path:"std::rt",desc:"",parent:'246676'},{ty:"tymethod",name:"deschedule",path:"std::rt",desc:"",parent:'246676'},{ty:"tymethod",name:"reawaken",path:"std::rt",desc:"",parent:'246676'},{ty:"tymethod",name:"spawn_sibling",path:"std::rt",desc:"",parent:'246676'},{ty:"tymethod",name:"local_io",path:"std::rt",desc:"",parent:'246676'},{ty:"tymethod",name:"stack_bounds",path:"std::rt",desc:"The (low, high) edges of the current stack.",parent:'246676'},{ty:"tymethod",name:"can_block",path:"std::rt",desc:"",parent:'246676'},{ty:"tymethod",name:"wrap",path:"std::rt",desc:"",parent:'246676'},{ty:"method",name:"hash",path:"std::option",desc:"",parent:'105285'},{ty:"method",name:"stat",path:"std::path::windows",desc:"Get information on the file, directory, etc at this path.",parent:'155599'},{ty:"method",name:"exists",path:"std::path::windows",desc:"Boolean value indicator whether the underlying file exists on the local\nfilesystem. This will return true if the path points to either a\ndirectory or a file.",parent:'155599'},{ty:"method",name:"is_file",path:"std::path::windows",desc:"Whether the underlying implementation (be it a file path, or something\nelse) points at a \"regular file\" on the FS. Will return false for paths\nto non-existent locations or directories or other non-regular files\n(named pipes, etc).",parent:'155599'},{ty:"method",name:"is_dir",path:"std::path::windows",desc:"Whether the underlying implementation (be it a file path,\nor something else) is pointing at a directory in the underlying FS.\nWill return false for paths to non-existent locations or if the item is\nnot a directory (eg files, named pipes, links, etc)",parent:'155599'}];allPaths['std'] = {'125682':{type:'struct',name:'timeval'},'62582':{type:'enum',name:'UTF16Item'},'60605':{type:'typedef',name:'Bytes'},'121769':{type:'fn',name:'atomic_compare_and_swap'},'148782':{type:'enum',name:'IoErrorKind'},'77231':{type:'trait',name:'FromStr'},'182229':{type:'ffi',name:'atomic_xchg'},'126628':{type:'mod',name:'posix88'},'151242':{type:'trait',name:'Writer'},'82060':{type:'fn',name:'powf'},'6392':{type:'fn',name:'to_str_bytes'},'125594':{type:'enum',name:'fpos_t'},'130430':{type:'trait',name:'ToCStr'},'119702':{type:'struct',name:'UnsafeArc'},'131534':{type:'fn',name:'close'},'140719':{type:'enum',name:'Flag'},'128018':{type:'ffi',name:'abs'},'236698':{type:'struct',name:'LocalIo'},'128801':{type:'ffi',name:'isatty'},'153718':{type:'typedef',name:'RevComponents'},'117059':{type:'enum',name:'TryRecvResult'},'128684':{type:'ffi',name:'chdir'},'128150':{type:'ffi',name:'system'},'182346':{type:'ffi',name:'atomic_xadd_relaxed'},'56881':{type:'struct',name:'MoveItems'},'82078':{type:'fn',name:'sqrt'},'141068':{type:'struct',name:'TcpAcceptor'},'124191':{type:'struct',name:'Queue'},'89950':{type:'fn',name:'from_u32'},'236577':{type:'mod',name:'rtio'},'129801':{type:'ffi',name:'QueryPerformanceCounter'},'9560':{type:'fn',name:'asin'},'72543':{type:'fn',name:'swap'},'129606':{type:'ffi',name:'UnmapViewOfFile'},'166492':{type:'enum',name:'PluralSelector'},'96896':{type:'struct',name:'SkipWhile'},'9604':{type:'fn',name:'cbrt'},'81210':{type:'enum',name:'FPCategory'},'125910':{type:'typedef',name:'useconds_t'},'60598':{type:'typedef',name:'RevCharOffsets'},'14442':{type:'fn',name:'is_XID_continue'},'64764':{type:'fn',name:'from_utf8'},'234430':{type:'mod',name:'cmath'},'106769':{type:'enum',name:'Result'},'128495':{type:'ffi',name:'mkdir'},'129858':{type:'ffi',name:'WaitNamedPipeW'},'128199':{type:'ffi',name:'strncpy'},'80985':{type:'trait',name:'Bounded'},'129926':{type:'ffi',name:'DisconnectNamedPipe'},'147027':{type:'fn',name:'stdout'},'182723':{type:'ffi',name:'atomic_max_acqrel'},'64563':{type:'mod',name:'raw'},'125831':{type:'mod',name:'arch'},'181332':{type:'typedef',name:'GlueFn'},'152146':{type:'struct',name:'RefWriter'},'99632':{type:'mod',name:'order'},'134927':{type:'mod',name:'win32'},'9469':{type:'fn',name:'floor'},'75290':{type:'struct',name:'InvariantType'},'145176':{type:'mod',name:'process'},'184141':{type:'struct',name:'Procedure'},'238100':{type:'struct',name:'Thread'},'104736':{type:'trait',name:'Map'},'237931':{type:'trait',name:'RtioSignal'},'63574':{type:'fn',name:'from_utf8_lossy'},'128444':{type:'ffi',name:'memchr'},'12024':{type:'fn',name:'next_after'},'165976':{type:'enum',name:'Flag'},'183851':{type:'ffi',name:'u64_mul_with_overflow'},'80696':{type:'trait',name:'Num'},'128305':{type:'ffi',name:'strrchr'},'182149':{type:'ffi',name:'atomic_cxchg_relaxed'},'141234':{type:'struct',name:'UdpStream'},'7168':{type:'fn',name:'parse_bytes'},'181358':{type:'enum',name:'Opaque'},'93428':{type:'trait',name:'ExactSize'},'128461':{type:'mod',name:'posix88'},'9716':{type:'fn',name:'ldexp'},'82261':{type:'fn',name:'ln'},'169654':{type:'fn',name:'writeln'},'167050':{type:'struct',name:'Parser'},'242235':{type:'fn',name:'begin_unwind_raw'},'80728':{type:'fn',name:'div_rem'},'183781':{type:'ffi',name:'i32_mul_with_overflow'},'126241':{type:'struct',name:'FILETIME'},'235431':{type:'enum',name:'BlockedTask'},'131561':{type:'fn',name:'getcwd'},'74076':{type:'fn',name:'ptr_eq'},'121913':{type:'fn',name:'atomic_or'},'235437':{type:'enum',name:'BlockedTask'},'127956':{type:'ffi',name:'fgetpos'},'240241':{type:'fn',name:'rust_set_crate_map'},'129222':{type:'ffi',name:'GetModuleFileNameW'},'126276':{type:'typedef',name:'LPWSAPROTOCOLCHAIN'},'77330':{type:'enum',name:'ExponentFormat'},'177254':{type:'trait',name:'MovePtr'},'139976':{type:'fn',name:'symlink'},'94779':{type:'struct',name:'Cycle'},'120337':{type:'mod',name:'atomics'},'133604':{type:'enum',name:'MapError'},'140987':{type:'struct',name:'TcpListener'},'11814':{type:'fn',name:'copysign'},'184109':{type:'struct',name:'Vec'},'82132':{type:'fn',name:'sin'},'125866':{type:'typedef',name:'size_t'},'146104':{type:'enum',name:'Signum'},'127753':{type:'ffi',name:'remove'},'109640':{type:'fn',name:'deschedule'},'65704':{type:'trait',name:'Str'},'177306':{type:'struct',name:'MovePtrAdaptor'},'235375':{type:'struct',name:'Task'},'182307':{type:'ffi',name:'atomic_xadd_acq'},'92044':{type:'trait',name:'FromStrRadix'},'14083':{type:'mod',name:'bool'},'133263':{type:'fn',name:'set_exit_status'},'108173':{type:'struct',name:'Cell'},'125712':{type:'typedef',name:'in_port_t'},'235111':{type:'fn',name:'malloc_raw'},'161804':{type:'fn',name:'copy_lifetime_vec'},'172208':{type:'fn',name:'move_val_init'},'81582':{type:'trait',name:'Float'},'60708':{type:'struct',name:'CharSplitsN'},'152815':{type:'enum',name:'FileType'},'183515':{type:'ffi',name:'bswap32'},'134890':{type:'mod',name:'android'},'165267':{type:'enum',name:'Piece'},'128905':{type:'ffi',name:'socket'},'127630':{type:'ffi',name:'isgraph'},'183452':{type:'ffi',name:'ctlz8'},'15075':{type:'fn',name:'decompose_compatible'},'140720':{type:'enum',name:'Flag'},'99857':{type:'fn',name:'lt'},'118648':{type:'trait',name:'LocalData'},'125832':{type:'mod',name:'c95'},'74556':{type:'struct',name:'Rc'},'82222':{type:'fn',name:'sin_cos'},'182684':{type:'ffi',name:'atomic_max'},'183438':{type:'ffi',name:'ctpop32'},'89890':{type:'fn',name:'from_i64'},'9847':{type:'mod',name:'consts'},'130968':{type:'fn',name:'from_c_multistring'},'75962':{type:'trait',name:'BitXor'},'152709':{type:'trait',name:'Acceptor'},'128318':{type:'ffi',name:'strspn'},'126058':{type:'struct',name:'STARTUPINFO'},'183466':{type:'ffi',name:'ctlz32'},'166768':{type:'enum',name:'PluralKeyword'},'126113':{type:'typedef',name:'LPSTARTUPINFO'},'63134':{type:'fn',name:'utf16_items'},'148411':{type:'fn',name:'copy'},'126352':{type:'mod',name:'consts'},'183711':{type:'ffi',name:'u16_sub_with_overflow'},'129809':{type:'ffi',name:'GetCurrentProcessId'},'155580':{type:'typedef',name:'RevComponents'},'98503':{type:'fn',name:'count'},'152670':{type:'enum',name:'SeekStyle'},'126117':{type:'struct',name:'PROCESS_INFORMATION'},'59644':{type:'fn',name:'from_utf8'},'148789':{type:'enum',name:'IoErrorKind'},'235453':{type:'struct',name:'Death'},'57014':{type:'typedef',name:'RevMoveItems'},'127969':{type:'ffi',name:'fsetpos'},'161726':{type:'fn',name:'transmute_immut_unsafe'},'131626':{type:'fn',name:'fill_utf16_buf_and_decode'},'235417':{type:'struct',name:'GarbageCollector'},'81138':{type:'fn',name:'checked_next_power_of_two'},'125675':{type:'struct',name:'utimbuf'},'64781':{type:'fn',name:'from_utf8_owned'},'121724':{type:'fn',name:'atomic_sub'},'7542':{type:'mod',name:'u32'},'11398':{type:'fn',name:'to_str_digits'},'183480':{type:'ffi',name:'cttz8'},'169322':{type:'trait',name:'LowerExp'},'125851':{type:'typedef',name:'c_uint'},'99304':{type:'struct',name:'RangeStepInclusive'},'89965':{type:'fn',name:'from_u64'},'70168':{type:'mod',name:'ascii'},'172108':{type:'fn',name:'nonzero_size_of'},'14475':{type:'fn',name:'is_whitespace'},'183175':{type:'ffi',name:'cosf64'},'182450':{type:'ffi',name:'atomic_and_rel'},'76030':{type:'trait',name:'DerefMut'},'72328':{type:'fn',name:'buf_len'},'128110':{type:'ffi',name:'malloc'},'161854':{type:'mod',name:'num'},'72456':{type:'fn',name:'copy_memory'},'80761':{type:'trait',name:'Zero'},'99914':{type:'fn',name:'le'},'129907':{type:'ffi',name:'GetOverlappedResult'},'94747':{type:'trait',name:'CloneableIterator'},'165750':{type:'enum',name:'Position'},'109597':{type:'fn',name:'with_task_name'},'183683':{type:'ffi',name:'i64_sub_with_overflow'},'129277':{type:'ffi',name:'GetCurrentDirectoryW'},'106568':{type:'struct',name:'Item'},'182489':{type:'ffi',name:'atomic_nand'},'12210':{type:'mod',name:'consts'},'11832':{type:'fn',name:'floor'},'4666':{type:'fn',name:'to_str_bytes'},'133614':{type:'enum',name:'MapError'},'140696':{type:'mod',name:'net'},'59332':{type:'fn',name:'append_one'},'133608':{type:'enum',name:'MapError'},'165890':{type:'enum',name:'Alignment'},'4000':{type:'mod',name:'i64'},'133621':{type:'enum',name:'MapError'},'183042':{type:'ffi',name:'visit_tydesc'},'240378':{type:'mod',name:'local_ptr'},'117054':{type:'enum',name:'TryRecvResult'},'183193':{type:'ffi',name:'powf64'},'145194':{type:'struct',name:'Process'},'92309':{type:'trait',name:'Iterator'},'140711':{type:'enum',name:'SocketType'},'59809':{type:'fn',name:'from_chars'},'104989':{type:'enum',name:'Void'},'72600':{type:'fn',name:'replace'},'1156':{type:'mod',name:'i8'},'9376':{type:'fn',name:'ln'},'128040':{type:'ffi',name:'atoi'},'129628':{type:'ffi',name:'CreateSymbolicLinkW'},'82144':{type:'fn',name:'cos'},'125857':{type:'typedef',name:'c_ulong'},'82156':{type:'fn',name:'tan'},'14753':{type:'fn',name:'from_digit'},'166297':{type:'enum',name:'Method'},'153744':{type:'typedef',name:'RevStrComponents'},'145302':{type:'enum',name:'StdioContainer'},'128144':{type:'ffi',name:'_exit'},'76045':{type:'mod',name:'cmp'},'836':{type:'fn',name:'to_str_bytes'},'126193':{type:'struct',name:'MEMORY_BASIC_INFORMATION'},'82090':{type:'fn',name:'rsqrt'},'56353':{type:'struct',name:'MutSplits'},'128372':{type:'ffi',name:'strlen'},'126353':{type:'mod',name:'os'},'129248':{type:'ffi',name:'CopyFileW'},'172429':{type:'fn',name:'drop'},'148775':{type:'enum',name:'IoErrorKind'},'183267':{type:'ffi',name:'log2f64'},'77333':{type:'enum',name:'SignificantDigits'},'14552':{type:'fn',name:'is_digit_radix'},'72740':{type:'fn',name:'array_each'},'125621':{type:'enum',name:'DIR'},'37589':{type:'trait',name:'Tuple11'},'131883':{type:'fn',name:'env_as_bytes'},'182840':{type:'ffi',name:'atomic_umin_rel'},'138423':{type:'mod',name:'tempfile'},'134816':{type:'mod',name:'freebsd'},'54954':{type:'trait',name:'MutableTotalOrdVector'},'97123':{type:'struct',name:'Skip'},'104709':{type:'mod',name:'container'},'54883':{type:'trait',name:'MutableCloneableVector'},'131091':{type:'struct',name:'CVec'},'128523':{type:'ffi',name:'stat'},'14499':{type:'fn',name:'is_alphanumeric'},'153811':{type:'fn',name:'is_sep_byte'},'100170':{type:'trait',name:'Clone'},'59696':{type:'fn',name:'from_byte'},'169298':{type:'trait',name:'Pointer'},'145318':{type:'enum',name:'ProcessExit'},'11669':{type:'fn',name:'sin'},'71513':{type:'trait',name:'IntoBytes'},'109007':{type:'struct',name:'RefMut'},'139488':{type:'struct',name:'File'},'133615':{type:'enum',name:'MapError'},'148777':{type:'enum',name:'IoErrorKind'},'89845':{type:'fn',name:'from_i8'},'172234':{type:'fn',name:'to_le32'},'161664':{type:'fn',name:'transmute'},'236830':{type:'trait',name:'IoFactory'},'15418':{type:'trait',name:'Char'},'238081':{type:'mod',name:'thread'},'106773':{type:'enum',name:'Result'},'127704':{type:'ffi',name:'fopen'},'136717':{type:'mod',name:'mem'},'163453':{type:'fn',name:'radix'},'75131':{type:'mod',name:'marker'},'172201':{type:'fn',name:'uninit'},'52873':{type:'trait',name:'OwnedEqVector'},'119647':{type:'fn',name:'modify'},'238829':{type:'mod',name:'local_heap'},'153639':{type:'mod',name:'path'},'77110':{type:'trait',name:'Ord'},'73129':{type:'mod',name:'externfnpointers'},'169':{type:'mod',name:'int'},'182918':{type:'ffi',name:'atomic_umax_acqrel'},'183529':{type:'ffi',name:'i8_add_with_overflow'},'246627':{type:'fn',name:'record_sp_limit'},'165745':{type:'enum',name:'Position'},'166500':{type:'enum',name:'PluralSelector'},'127904':{type:'ffi',name:'fwrite'},'147621':{type:'struct',name:'StdWriter'},'140294':{type:'fn',name:'rmdir_recursive'},'77342':{type:'enum',name:'SignFormat'},'235452':{type:'enum',name:'DeathAction'},'109556':{type:'fn',name:'spawn'},'147001':{type:'fn',name:'stdin'},'182952':{type:'ffi',name:'abort'},'60421':{type:'struct',name:'CharOffsets'},'129658':{type:'ffi',name:'FlushFileBuffers'},'182554':{type:'ffi',name:'atomic_or'},'120389':{type:'enum',name:'Ordering'},'125993':{type:'typedef',name:'LPWSTR'},'82315':{type:'fn',name:'sinh'},'182528':{type:'ffi',name:'atomic_nand_acqrel'},'128331':{type:'ffi',name:'strcspn'},'148786':{type:'enum',name:'IoErrorKind'},'128936':{type:'ffi',name:'bind'},'183382':{type:'ffi',name:'rintf32'},'60621':{type:'typedef',name:'RevBytes'},'11897':{type:'fn',name:'round'},'129321':{type:'ffi',name:'FindClose'},'182606':{type:'ffi',name:'atomic_or_relaxed'},'238846':{type:'typedef',name:'Box'},'234965':{type:'mod',name:'global_heap'},'41846':{type:'trait',name:'Tuple12'},'82204':{type:'fn',name:'atan2'},'14431':{type:'fn',name:'is_XID_start'},'235438':{type:'enum',name:'DeathAction'},'95273':{type:'struct',name:'Zip'},'77229':{type:'mod',name:'from_str'},'92194':{type:'trait',name:'CheckedSub'},'81059':{type:'trait',name:'Int'},'127665':{type:'ffi',name:'isupper'},'182580':{type:'ffi',name:'atomic_or_rel'},'8104':{type:'fn',name:'to_str_bytes'},'148496':{type:'struct',name:'IoError'},'11765':{type:'fn',name:'log2'},'128798':{type:'ffi',name:'getpid'},'235211':{type:'fn',name:'exchange_malloc'},'139884':{type:'fn',name:'chmod'},'75848':{type:'trait',name:'Add'},'129933':{type:'mod',name:'msvcrt'},'182736':{type:'ffi',name:'atomic_max_relaxed'},'138177':{type:'mod',name:'result'},'182954':{type:'ffi',name:'breakpoint'},'64167':{type:'enum',name:'MaybeOwned'},'126016':{type:'typedef',name:'LPCVOID'},'128158':{type:'ffi',name:'getenv'},'12061':{type:'fn',name:'hypot'},'16':{type:'mod',name:'rtdeps'},'132153':{type:'fn',name:'getenv'},'125950':{type:'typedef',name:'CCHAR'},'243135':{type:'mod',name:'libunwind'},'169190':{type:'trait',name:'Char'},'127761':{type:'ffi',name:'rename'},'77329':{type:'enum',name:'ExponentFormat'},'50982':{type:'trait',name:'ImmutableTotalOrdVector'},'122032':{type:'mod',name:'deque'},'74056':{type:'fn',name:'refcount'},'182115':{type:'ffi',name:'atomic_cxchg_rel'},'153711':{type:'typedef',name:'Components'},'65251':{type:'fn',name:'shift_byte'},'125875':{type:'typedef',name:'time_t'},'103321':{type:'trait',name:'Hasher'},'129449':{type:'ffi',name:'GetExitCodeProcess'},'77092':{type:'fn',name:'lexical_ordering'},'129946':{type:'ffi',name:'get_osfhandle'},'129869':{type:'ffi',name:'SetNamedPipeHandleState'},'129295':{type:'ffi',name:'GetLastError'},'165974':{type:'enum',name:'Flag'},'132847':{type:'fn',name:'homedir'},'128427':{type:'ffi',name:'memcmp'},'12123':{type:'fn',name:'tan'},'6312':{type:'fn',name:'parse_bytes'},'147173':{type:'fn',name:'set_stderr'},'9773':{type:'fn',name:'tanh'},'182437':{type:'ffi',name:'atomic_and_acq'},'9508':{type:'fn',name:'rint'},'9451':{type:'fn',name:'copysign'},'135728':{type:'struct',name:'BufferedWriter'},'172194':{type:'fn',name:'init'},'96273':{type:'struct',name:'FilterMap'},'183697':{type:'ffi',name:'u8_sub_with_overflow'},'5509':{type:'fn',name:'to_str_bytes'},'165260':{type:'enum',name:'Piece'},'77258':{type:'mod',name:'num'},'9402':{type:'fn',name:'log2'},'2691':{type:'fn',name:'parse_bytes'},'72648':{type:'fn',name:'read_and_zero'},'109192':{type:'mod',name:'task'},'6686':{type:'mod',name:'u16'},'9350':{type:'fn',name:'exp'},'15354':{type:'fn',name:'len_utf8_bytes'},'128895':{type:'mod',name:'bsd43'},'245172':{type:'fn',name:'default_sched_threads'},'142859':{type:'struct',name:'SocketAddr'},'65163':{type:'fn',name:'push_byte'},'183154':{type:'ffi',name:'sinf32'},'47764':{type:'struct',name:'ElementSwaps'},'169274':{type:'trait',name:'String'},'182762':{type:'ffi',name:'atomic_min_acq'},'165272':{type:'enum',name:'Piece'},'183571':{type:'ffi',name:'i64_add_with_overflow'},'1823':{type:'fn',name:'to_str_bytes'},'75441':{type:'struct',name:'ContravariantLifetime'},'126055':{type:'typedef',name:'int64'},'7248':{type:'fn',name:'to_str_bytes'},'127602':{type:'ffi',name:'isalnum'},'122003':{type:'fn',name:'fence'},'75132':{type:'struct',name:'CovariantType'},'75585':{type:'struct',name:'NoFreeze'},'129201':{type:'ffi',name:'SetEnvironmentVariableW'},'127774':{type:'ffi',name:'tmpfile'},'125706':{type:'typedef',name:'socklen_t'},'138724':{type:'mod',name:'extensions'},'125959':{type:'typedef',name:'DWORDLONG'},'183168':{type:'ffi',name:'cosf32'},'120346':{type:'struct',name:'AtomicBool'},'183459':{type:'ffi',name:'ctlz16'},'59567':{type:'mod',name:'str'},'129156':{type:'mod',name:'extra'},'135379':{type:'mod',name:'buffered'},'106765':{type:'enum',name:'Result'},'147841':{type:'mod',name:'util'},'60628':{type:'struct',name:'CharSplits'},'139945':{type:'fn',name:'link'},'125878':{type:'typedef',name:'suseconds_t'},'71148':{type:'trait',name:'OwnedAsciiCast'},'11884':{type:'fn',name:'nearbyint'},'125839':{type:'typedef',name:'c_uchar'},'183431':{type:'ffi',name:'ctpop16'},'169286':{type:'trait',name:'Poly'},'11429':{type:'fn',name:'to_str_exp_exact'},'140698':{type:'mod',name:'addrinfo'},'136472':{type:'struct',name:'ChanReader'},'128603':{type:'ffi',name:'fileno'},'132676':{type:'fn',name:'dll_filename'},'181340':{type:'struct',name:'TyDesc'},'98858':{type:'struct',name:'RangeInclusive'},'64583':{type:'fn',name:'from_buf_len'},'72673':{type:'fn',name:'array_each_with_len'},'134772':{type:'mod',name:'windows'},'117013':{type:'struct',name:'Receiver'},'133565':{type:'struct',name:'MemoryMap'},'73849':{type:'mod',name:'owned'},'165889':{type:'enum',name:'Alignment'},'126005':{type:'typedef',name:'LPCH'},'125715':{type:'typedef',name:'in_addr_t'},'133488':{type:'fn',name:'args_as_bytes'},'183494':{type:'ffi',name:'cttz32'},'140716':{type:'enum',name:'Flag'},'15122':{type:'fn',name:'escape_unicode'},'75926':{type:'trait',name:'Not'},'140138':{type:'struct',name:'Directories'},'131611':{type:'mod',name:'win32'},'140724':{type:'enum',name:'Protocol'},'118849':{type:'fn',name:'pop'},'80916':{type:'fn',name:'pow'},'182372':{type:'ffi',name:'atomic_xsub_acq'},'108122':{type:'fn',name:'fold_'},'244451':{type:'fn',name:'write'},'11778':{type:'fn',name:'mul_add'},'131080':{type:'mod',name:'c_vec'},'97534':{type:'struct',name:'Scan'},'133603':{type:'enum',name:'MapOption'},'240210':{type:'mod',name:'crate_map'},'131838':{type:'fn',name:'env'},'153314':{type:'struct',name:'FileStat'},'129359':{type:'ffi',name:'CloseHandle'},'148780':{type:'enum',name:'IoErrorKind'},'125997':{type:'typedef',name:'LPSTR'},'126043':{type:'typedef',name:'WCHAR'},'152733':{type:'struct',name:'IncomingConnections'},'140470':{type:'fn',name:'change_file_times'},'129366':{type:'ffi',name:'OpenProcess'},'46955':{type:'fn',name:'mut_ref_slice'},'141373':{type:'mod',name:'ip'},'245663':{type:'fn',name:'init'},'183318':{type:'ffi',name:'copysignf32'},'99971':{type:'fn',name:'gt'},'89830':{type:'fn',name:'from_int'},'159084':{type:'enum',name:'PathPrefix'},'238756':{type:'fn',name:'init'},'126219':{type:'struct',name:'OVERLAPPED'},'182502':{type:'ffi',name:'atomic_nand_acq'},'127949':{type:'ffi',name:'rewind'},'128871':{type:'ffi',name:'write'},'108047':{type:'fn',name:'fold'},'182217':{type:'ffi',name:'atomic_store_relaxed'},'182993':{type:'ffi',name:'min_align_of'},'234978':{type:'fn',name:'get_box_size'},'129215':{type:'ffi',name:'FreeEnvironmentStringsA'},'125901':{type:'typedef',name:'dev_t'},'125628':{type:'mod',name:'posix01'},'144959':{type:'struct',name:'UnixListener'},'165975':{type:'enum',name:'Flag'},'120382':{type:'struct',name:'AtomicOption'},'182268':{type:'ffi',name:'atomic_xchg_acqrel'},'245697':{type:'fn',name:'put'},'129186':{type:'ffi',name:'GetEnvironmentVariableW'},'11949':{type:'fn',name:'atan2'},'75129':{type:'trait',name:'Sized'},'245711':{type:'fn',name:'clone'},'240013':{type:'fn',name:'local_malloc'},'75842':{type:'trait',name:'Drop'},'120353':{type:'struct',name:'AtomicInt'},'92232':{type:'trait',name:'CheckedDiv'},'125622':{type:'enum',name:'dirent_t'},'13702':{type:'fn',name:'to_str_radix_special'},'148042':{type:'struct',name:'MultiWriter'},'129613':{type:'ffi',name:'MoveFileExW'},'146106':{type:'enum',name:'Signum'},'127863':{type:'ffi',name:'puts'},'81052':{type:'trait',name:'Primitive'},'129715':{type:'ffi',name:'ReadFile'},'81071':{type:'fn',name:'next_power_of_two'},'161588':{type:'mod',name:'cast'},'133591':{type:'enum',name:'MapOption'},'109572':{type:'fn',name:'try'},'64169':{type:'typedef',name:'SendStr'},'183795':{type:'ffi',name:'i64_mul_with_overflow'},'9275':{type:'fn',name:'sqrt'},'128503':{type:'ffi',name:'wrmdir'},'82339':{type:'fn',name:'tanh'},'183225':{type:'ffi',name:'exp2f64'},'126052':{type:'typedef',name:'time64_t'},'128731':{type:'ffi',name:'execve'},'182710':{type:'ffi',name:'atomic_max_rel'},'133042':{type:'fn',name:'errno'},'13758':{type:'fn',name:'to_str_digits'},'237844':{type:'trait',name:'RtioUnixAcceptor'},'235459':{type:'struct',name:'BlockedTasks'},'104711':{type:'trait',name:'Container'},'183239':{type:'ffi',name:'logf64'},'120388':{type:'enum',name:'Ordering'},'145033':{type:'struct',name:'UnixAcceptor'},'105290':{type:'enum',name:'Option'},'125758':{type:'struct',name:'sockaddr_in6'},'125981':{type:'typedef',name:'PLARGE_INTEGER'},'128963':{type:'ffi',name:'accept'},'122105':{type:'enum',name:'Stolen'},'147742':{type:'fn',name:'sleep'},'74054':{type:'mod',name:'managed'},'125898':{type:'typedef',name:'off_t'},'128279':{type:'ffi',name:'strcoll'},'166077':{type:'enum',name:'Count'},'129288':{type:'ffi',name:'SetCurrentDirectoryW'},'135049':{type:'mod',name:'test'},'59307':{type:'fn',name:'append'},'127644':{type:'ffi',name:'isprint'},'161870':{type:'trait',name:'GenericRadix'},'152807':{type:'enum',name:'FileMode'},'128808':{type:'ffi',name:'lseek'},'246784':{type:'fn',name:'init'},'237832':{type:'trait',name:'RtioUnixListener'},'126354':{type:'mod',name:'c95'},'144849':{type:'struct',name:'UnixStream'},'125617':{type:'typedef',name:'uint64_t'},'158783':{type:'fn',name:'is_vol_relative'},'126009':{type:'typedef',name:'LPSECURITY_ATTRIBUTES'},'11739':{type:'fn',name:'ln'},'169767':{type:'fn',name:'format'},'246592':{type:'fn',name:'record_stack_bounds'},'161639':{type:'fn',name:'forget'},'125589':{type:'mod',name:'c95'},'127941':{type:'ffi',name:'ftell'},'155599':{type:'struct',name:'Path'},'1':{type:'mod',name:'macros'},'74897':{type:'struct',name:'Weak'},'129014':{type:'ffi',name:'setsockopt'},'124169':{type:'enum',name:'PopResult'},'93405':{type:'trait',name:'RandomAccessIterator'},'133576':{type:'enum',name:'MemoryMapKind'},'237932':{type:'mod',name:'local'},'55055':{type:'fn',name:'mut_buf_as_slice'},'75976':{type:'trait',name:'Shl'},'11342':{type:'fn',name:'to_str_radix_special'},'165756':{type:'enum',name:'Position'},'183809':{type:'ffi',name:'u8_mul_with_overflow'},'8879':{type:'fn',name:'parse_bytes'},'121606':{type:'fn',name:'atomic_load'},'55175':{type:'fn',name:'pop_ptr'},'126834':{type:'mod',name:'extra'},'182956':{type:'ffi',name:'volatile_load'},'129583':{type:'ffi',name:'MapViewOfFile'},'65203':{type:'fn',name:'pop_byte'},'94981':{type:'struct',name:'Chain'},'9747':{type:'fn',name:'sinh'},'139912':{type:'fn',name:'chown'},'75948':{type:'trait',name:'BitOr'},'172437':{type:'mod',name:'repr'},'148787':{type:'enum',name:'IoErrorKind'},'74306':{type:'mod',name:'reference'},'128118':{type:'ffi',name:'realloc'},'82363':{type:'fn',name:'acosh'},'153725':{type:'typedef',name:'StrComponents'},'129761':{type:'ffi',name:'SetFilePointerEx'},'47421':{type:'fn',name:'append_one'},'125596':{type:'typedef',name:'int8_t'},'109272':{type:'fn',name:'task'},'145314':{type:'enum',name:'ProcessExit'},'169697':{type:'fn',name:'write_unsafe'},'183260':{type:'ffi',name:'log2f32'},'125894':{type:'typedef',name:'uintptr_t'},'125836':{type:'typedef',name:'c_schar'},'238815':{type:'fn',name:'max_cached_stacks'},'126345':{type:'typedef',name:'LPWSAPROTOCOL_INFO'},'64948':{type:'fn',name:'slice_bytes'},'119031':{type:'fn',name:'get'},'146108':{type:'enum',name:'Signum'},'46507':{type:'mod',name:'vec'},'183125':{type:'ffi',name:'sqrtf64'},'172408':{type:'fn',name:'replace'},'169057':{type:'struct',name:'Formatter'},'78339':{type:'fn',name:'float_to_str_bytes_common'},'183014':{type:'ffi',name:'uninit'},'89920':{type:'fn',name:'from_u8'},'55828':{type:'struct',name:'MutItems'},'128131':{type:'ffi',name:'free'},'82387':{type:'trait',name:'ToPrimitive'},'128080':{type:'ffi',name:'strtoul'},'152812':{type:'enum',name:'FileType'},'152315':{type:'trait',name:'Buffer'},'9760':{type:'fn',name:'tan'},'46886':{type:'fn',name:'build'},'126024':{type:'typedef',name:'LPWORD'},'146900':{type:'mod',name:'stdio'},'100990':{type:'mod',name:'sip'},'151174':{type:'struct',name:'RefReader'},'99486':{type:'struct',name:'Repeat'},'128402':{type:'ffi',name:'strxfrm'},'172291':{type:'fn',name:'from_le16'},'159011':{type:'fn',name:'is_sep'},'127658':{type:'ffi',name:'isspace'},'243282':{type:'fn',name:'log_enabled'},'125956':{type:'typedef',name:'DWORD'},'126130':{type:'typedef',name:'LPPROCESS_INFORMATION'},'134964':{type:'mod',name:'x86'},'182801':{type:'ffi',name:'atomic_min_relaxed'},'51173':{type:'trait',name:'OwnedVector'},'140726':{type:'struct',name:'Hint'},'146112':{type:'enum',name:'Signum'},'133599':{type:'enum',name:'MapOption'},'128997':{type:'ffi',name:'getsockname'},'159026':{type:'fn',name:'is_sep_verbatim'},'182593':{type:'ffi',name:'atomic_or_acqrel'},'172083':{type:'fn',name:'size_of'},'4586':{type:'fn',name:'parse_bytes'},'120367':{type:'struct',name:'AtomicU64'},'152816':{type:'enum',name:'FileType'},'120360':{type:'struct',name:'AtomicUint'},'77346':{type:'trait',name:'NumStrConv'},'182132':{type:'ffi',name:'atomic_cxchg_acqrel'},'20195':{type:'trait',name:'Tuple5'},'93671':{type:'struct',name:'Rev'},'100095':{type:'trait',name:'IntoStr'},'81209':{type:'enum',name:'FPCategory'},'235313':{type:'fn',name:'exchange_free_'},'46553':{type:'fn',name:'from_fn'},'59616':{type:'fn',name:'from_utf8_owned'},'60698':{type:'typedef',name:'RevCharSplits'},'11616':{type:'mod',name:'f64'},'47504':{type:'trait',name:'VectorVector'},'183403':{type:'ffi',name:'nearbyintf64'},'183211':{type:'ffi',name:'expf64'},'126028':{type:'typedef',name:'LPDWORD'},'138743':{type:'struct',name:'Bytes'},'237316':{type:'trait',name:'RtioTcpListener'},'135079':{type:'fn',name:'next_test_unix'},'166310':{type:'enum',name:'Method'},'94264':{type:'enum',name:'MinMaxResult'},'132963':{type:'fn',name:'make_absolute'},'80992':{type:'trait',name:'Bitwise'},'245685':{type:'fn',name:'take'},'155561':{type:'typedef',name:'Components'},'243960':{type:'mod',name:'imp'},'182175':{type:'ffi',name:'atomic_load_acq'},'169178':{type:'trait',name:'Bool'},'141428':{type:'enum',name:'IpAddr'},'129237':{type:'ffi',name:'CreateDirectoryW'},'141387':{type:'typedef',name:'Port'},'11752':{type:'fn',name:'log10'},'9415':{type:'fn',name:'mul_add'},'132773':{type:'fn',name:'self_exe_name'},'145298':{type:'enum',name:'StdioContainer'},'128765':{type:'ffi',name:'execvpe'},'126349':{type:'typedef',name:'GROUP'},'125774':{type:'struct',name:'in6_addr'},'125881':{type:'typedef',name:'wchar_t'},'62578':{type:'enum',name:'UTF16Item'},'47448':{type:'fn',name:'flat_map'},'138822':{type:'fn',name:'u64_to_le_bytes'},'235324':{type:'fn',name:'exchange_free'},'183054':{type:'ffi',name:'offset'},'64795':{type:'fn',name:'from_byte'},'161677':{type:'fn',name:'transmute_mut'},'128920':{type:'ffi',name:'connect'},'139447':{type:'mod',name:'fs'},'159092':{type:'enum',name:'PathPrefix'},'182081':{type:'ffi',name:'atomic_cxchg'},'60782':{type:'typedef',name:'AnyLines'},'129643':{type:'ffi',name:'CreateHardLinkW'},'145058':{type:'mod',name:'pipe'},'169150':{type:'struct',name:'Arguments'},'128751':{type:'ffi',name:'execvp'},'161781':{type:'fn',name:'copy_mut_lifetime'},'126168':{type:'typedef',name:'LPSYSTEM_INFO'},'61321':{type:'struct',name:'StrSplits'},'147730':{type:'mod',name:'timer'},'158835':{type:'fn',name:'is_verbatim'},'133581':{type:'enum',name:'MemoryMapKind'},'128217':{type:'ffi',name:'strcat'},'134853':{type:'mod',name:'linux'},'60085':{type:'trait',name:'CharEq'},'182658':{type:'ffi',name:'atomic_xor_acqrel'},'18598':{type:'trait',name:'Tuple4'},'181331':{type:'mod',name:'intrinsics'},'9661':{type:'fn',name:'next_after'},'64162':{type:'enum',name:'MaybeOwned'},'125709':{type:'typedef',name:'sa_family_t'},'152818':{type:'enum',name:'FileType'},'158803':{type:'fn',name:'is_cwd_relative'},'133586':{type:'enum',name:'MapOption'},'128611':{type:'mod',name:'fcntl'},'182476':{type:'ffi',name:'atomic_and_relaxed'},'59849':{type:'trait',name:'StrVector'},'104939':{type:'trait',name:'Default'},'182981':{type:'ffi',name:'move_val_init'},'72524':{type:'fn',name:'zero_memory'},'165404':{type:'struct',name:'Argument'},'63150':{type:'fn',name:'truncate_utf16_at_nul'},'129665':{type:'ffi',name:'CreateFileW'},'237936':{type:'trait',name:'Local'},'62405':{type:'fn',name:'is_utf8'},'182905':{type:'ffi',name:'atomic_umax_rel'},'182775':{type:'ffi',name:'atomic_min_rel'},'2104':{type:'mod',name:'i16'},'169053':{type:'typedef',name:'Result'},'183354':{type:'ffi',name:'ceilf32'},'237920':{type:'trait',name:'PausableIdleCallback'},'183445':{type:'ffi',name:'ctpop64'},'153676':{type:'mod',name:'posix'},'125884':{type:'mod',name:'c99'},'74529':{type:'mod',name:'rc'},'147011':{type:'fn',name:'stdin_raw'},'132231':{type:'fn',name:'setenv'},'125822':{type:'struct',name:'sockaddr_un'},'183823':{type:'ffi',name:'u16_mul_with_overflow'},'183347':{type:'ffi',name:'floorf64'},'125608':{type:'typedef',name:'uint8_t'},'133606':{type:'enum',name:'MapError'},'12097':{type:'fn',name:'ln_1p'},'11871':{type:'fn',name:'rint'},'129045':{type:'ffi',name:'recv'},'98463':{type:'struct',name:'Counter'},'125845':{type:'typedef',name:'c_ushort'},'81213':{type:'enum',name:'FPCategory'},'128839':{type:'ffi',name:'read'},'47185':{type:'struct',name:'RevSplits'},'105013':{type:'trait',name:'AnyRefExt'},'128032':{type:'ffi',name:'atof'},'165888':{type:'enum',name:'Alignment'},'27182':{type:'trait',name:'Tuple8'},'236678':{type:'trait',name:'RemoteCallback'},'240218':{type:'struct',name:'CrateMap'},'11317':{type:'fn',name:'to_str_hex'},'165978':{type:'enum',name:'Flag'},'22154':{type:'trait',name:'Tuple6'},'11651':{type:'fn',name:'powi'},'72623':{type:'fn',name:'read'},'128582':{type:'ffi',name:'pclose'},'117028':{type:'struct',name:'Messages'},'152813':{type:'enum',name:'FileType'},'183034':{type:'ffi',name:'needs_drop'},'152809':{type:'enum',name:'FileAccess'},'126280':{type:'struct',name:'WSAPROTOCOL_INFO'},'9389':{type:'fn',name:'log10'},'182205':{type:'ffi',name:'atomic_store_rel'},'237470':{type:'trait',name:'RtioUdpSocket'},'183143':{type:'ffi',name:'powif64'},'122094':{type:'struct',name:'Stealer'},'4947':{type:'mod',name:'uint'},'75513':{type:'struct',name:'InvariantLifetime'},'72479':{type:'fn',name:'copy_nonoverlapping_memory'},'140842':{type:'mod',name:'tcp'},'3639':{type:'fn',name:'parse_bytes'},'125907':{type:'typedef',name:'pid_t'},'127819':{type:'ffi',name:'fgets'},'135224':{type:'fn',name:'next_test_ip6'},'105163':{type:'trait',name:'AnyOwnExt'},'125627':{type:'mod',name:'common'},'16051':{type:'trait',name:'Tuple1'},'246813':{type:'fn',name:'at_exit'},'135058':{type:'fn',name:'next_test_port'},'59789':{type:'fn',name:'from_char'},'75934':{type:'trait',name:'BitAnd'},'184148':{type:'struct',name:'TraitObject'},'236621':{type:'trait',name:'EventLoop'},'123661':{type:'mod',name:'mpmc_bounded_queue'},'120374':{type:'struct',name:'AtomicPtr'},'182948':{type:'ffi',name:'atomic_fence_rel'},'183557':{type:'ffi',name:'i32_add_with_overflow'},'147063':{type:'fn',name:'stderr_raw'},'182866':{type:'ffi',name:'atomic_umin_relaxed'},'47391':{type:'fn',name:'append'},'129065':{type:'ffi',name:'send'},'72385':{type:'fn',name:'position'},'89875':{type:'fn',name:'from_i32'},'13652':{type:'fn',name:'to_str'},'9734':{type:'fn',name:'ln_1p'},'64716':{type:'fn',name:'from_c_str'},'129212':{type:'ffi',name:'GetEnvironmentStringsA'},'95916':{type:'struct',name:'Map'},'11695':{type:'fn',name:'pow'},'159037':{type:'fn',name:'is_sep_byte'},'89905':{type:'fn',name:'from_uint'},'77331':{type:'enum',name:'ExponentFormat'},'121823':{type:'fn',name:'atomic_and'},'11845':{type:'fn',name:'ceil'},'11858':{type:'fn',name:'trunc'},'11713':{type:'fn',name:'exp'},'0':{type:'mod',name:'std'},'91803':{type:'trait',name:'NumCast'},'242089':{type:'fn',name:'fail_'},'126020':{type:'typedef',name:'LPBYTE'},'124638':{type:'struct',name:'Queue'},'122085':{type:'struct',name:'Worker'},'125641':{type:'struct',name:'stat'},'125985':{type:'typedef',name:'LPCWSTR'},'104729':{type:'trait',name:'Mutable'},'169226':{type:'trait',name:'Octal'},'172075':{type:'mod',name:'mem'},'125787':{type:'struct',name:'ip6_mreq'},'47689':{type:'fn',name:'unzip'},'237459':{type:'trait',name:'RtioSocket'},'77343':{type:'enum',name:'SignFormat'},'107963':{type:'fn',name:'collect'},'183487':{type:'ffi',name:'cttz16'},'120390':{type:'enum',name:'Ordering'},'82014':{type:'fn',name:'exp_m1'},'24481':{type:'trait',name:'Tuple7'},'55290':{type:'fn',name:'push_bytes'},'57147':{type:'mod',name:'vec_ng'},'105269':{type:'mod',name:'option'},'140717':{type:'enum',name:'Flag'},'72445':{type:'fn',name:'mut_null'},'132991':{type:'fn',name:'change_dir'},'183132':{type:'ffi',name:'powif32'},'12079':{type:'fn',name:'ldexp'},'139049':{type:'fn',name:'u64_to_be_bytes'},'183585':{type:'ffi',name:'u8_add_with_overflow'},'129270':{type:'ffi',name:'RemoveDirectoryW'},'128617':{type:'ffi',name:'open'},'140713':{type:'enum',name:'SocketType'},'125754':{type:'struct',name:'in_addr'},'132901':{type:'fn',name:'tmpdir'},'183246':{type:'ffi',name:'log10f32'},'236696':{type:'enum',name:'CloseBehavior'},'11682':{type:'fn',name:'cos'},'128785':{type:'ffi',name:'getcwd'},'242386':{type:'fn',name:'begin_unwind'},'11541':{type:'fn',name:'from_str_hex'},'241507':{type:'struct',name:'Unwinder'},'134779':{type:'mod',name:'macos'},'172169':{type:'fn',name:'pref_align_of'},'125595':{type:'mod',name:'c99'},'61993':{type:'fn',name:'replace'},'109216':{type:'typedef',name:'TaskResult'},'127998':{type:'ffi',name:'perror'},'127990':{type:'ffi',name:'ferror'},'182619':{type:'ffi',name:'atomic_xor'},'129427':{type:'ffi',name:'WaitForSingleObject'},'182294':{type:'ffi',name:'atomic_xadd'},'183232':{type:'ffi',name:'logf32'},'128358':{type:'ffi',name:'strstr'},'129381':{type:'ffi',name:'GetCurrentProcess'},'239986':{type:'fn',name:'local_malloc_'},'80801':{type:'trait',name:'Signed'},'183767':{type:'ffi',name:'i16_mul_with_overflow'},'128952':{type:'ffi',name:'listen'},'133605':{type:'enum',name:'MapError'},'137050':{type:'struct',name:'MemReader'},'9630':{type:'fn',name:'exp_m1'},'60591':{type:'typedef',name:'RevChars'},'125860':{type:'typedef',name:'c_float'},'82303':{type:'fn',name:'log10'},'125953':{type:'typedef',name:'CHAR'},'75918':{type:'trait',name:'Neg'},'9288':{type:'fn',name:'powi'},'235227':{type:'fn',name:'closure_exchange_malloc_'},'75369':{type:'struct',name:'CovariantLifetime'},'133609':{type:'enum',name:'MapError'},'98579':{type:'struct',name:'Range'},'182931':{type:'ffi',name:'atomic_umax_relaxed'},'72434':{type:'fn',name:'null'},'125888':{type:'typedef',name:'c_ulonglong'},'148783':{type:'enum',name:'IoErrorKind'},'182098':{type:'ffi',name:'atomic_cxchg_acq'},'133059':{type:'fn',name:'last_os_error'},'125971':{type:'typedef',name:'PLONG'},'55813':{type:'struct',name:'Items'},'82102':{type:'fn',name:'cbrt'},'129511':{type:'ffi',name:'VirtualUnlock'},'14104':{type:'fn',name:'to_bit'},'160091':{type:'trait',name:'GenericPath'},'125944':{type:'typedef',name:'BYTE'},'55224':{type:'mod',name:'bytes'},'109673':{type:'mod',name:'comm'},'124173':{type:'enum',name:'PopResult'},'133629':{type:'enum',name:'MapError'},'126001':{type:'typedef',name:'LPWCH'},'152667':{type:'enum',name:'SeekStyle'},'92213':{type:'trait',name:'CheckedMul'},'63186':{type:'fn',name:'from_utf16'},'61272':{type:'struct',name:'MatchIndices'},'75039':{type:'struct',name:'Gc'},'76343':{type:'enum',name:'Ordering'},'104973':{type:'mod',name:'any'},'9521':{type:'fn',name:'nearbyint'},'240599':{type:'mod',name:'native'},'55013':{type:'mod',name:'raw'},'152669':{type:'enum',name:'SeekStyle'},'127745':{type:'ffi',name:'fclose'},'89995':{type:'fn',name:'from_f64'},'148779':{type:'enum',name:'IoErrorKind'},'54993':{type:'fn',name:'from_buf'},'240192':{type:'fn',name:'live_allocs'},'82291':{type:'fn',name:'log2'},'56098':{type:'typedef',name:'RevItems'},'756':{type:'fn',name:'parse_bytes'},'149964':{type:'trait',name:'Reader'},'125897':{type:'mod',name:'posix88'},'109720':{type:'struct',name:'Select'},'182541':{type:'ffi',name:'atomic_nand_relaxed'},'140007':{type:'fn',name:'readlink'},'108392':{type:'struct',name:'RefCell'},'82327':{type:'fn',name:'cosh'},'100972':{type:'mod',name:'hash'},'92251':{type:'mod',name:'iter'},'9319':{type:'fn',name:'cos'},'92276':{type:'trait',name:'FromIterator'},'153827':{type:'fn',name:'is_sep'},'13901':{type:'fn',name:'from_str_hex'},'183018':{type:'ffi',name:'forget'},'135368':{type:'fn',name:'raise_fd_limit'},'183068':{type:'ffi',name:'copy_nonoverlapping_memory'},'55270':{type:'fn',name:'copy_memory'},'15252':{type:'fn',name:'escape_default'},'159072':{type:'enum',name:'PathPrefix'},'183522':{type:'ffi',name:'bswap64'},'235426':{type:'enum',name:'BlockedTask'},'9438':{type:'fn',name:'abs'},'139754':{type:'fn',name:'copy'},'140031':{type:'fn',name:'mkdir'},'147964':{type:'struct',name:'NullWriter'},'72502':{type:'fn',name:'set_memory'},'172331':{type:'fn',name:'from_be32'},'183613':{type:'ffi',name:'u32_add_with_overflow'},'161592':{type:'fn',name:'transmute_copy'},'53641':{type:'trait',name:'MutableVector'},'120387':{type:'enum',name:'Ordering'},'99805':{type:'fn',name:'ne'},'75904':{type:'trait',name:'Rem'},'89980':{type:'fn',name:'from_f32'},'125842':{type:'typedef',name:'c_short'},'109655':{type:'fn',name:'failing'},'63563':{type:'struct',name:'CharRange'},'183865':{type:'struct',name:'TypeId'},'9332':{type:'fn',name:'pow'},'159055':{type:'fn',name:'is_sep_byte_verbatim'},'126134':{type:'struct',name:'SYSTEM_INFO'},'152808':{type:'enum',name:'FileAccess'},'246676':{type:'trait',name:'Runtime'},'119689':{type:'mod',name:'arc'},'104938':{type:'mod',name:'default'},'9363':{type:'fn',name:'exp2'},'129964':{type:'mod',name:'c_str'},'166770':{type:'enum',name:'PluralKeyword'},'127883':{type:'ffi',name:'fread'},'133585':{type:'enum',name:'MapOption'},'182997':{type:'ffi',name:'pref_align_of'},'75649':{type:'struct',name:'NoSend'},'122104':{type:'enum',name:'Stolen'},'11464':{type:'fn',name:'to_str_exp_digits'},'172225':{type:'fn',name:'to_le16'},'139648':{type:'fn',name:'unlink'},'238808':{type:'fn',name:'min_stack'},'99643':{type:'fn',name:'equals'},'132336':{type:'fn',name:'pipe'},'129847':{type:'ffi',name:'ConnectNamedPipe'},'141403':{type:'enum',name:'IpAddr'},'245787':{type:'mod',name:'at_exit_imp'},'18':{type:'mod',name:'prelude'},'80615':{type:'fn',name:'from_str_common'},'108157':{type:'mod',name:'cell'},'183085':{type:'ffi',name:'copy_memory'},'128633':{type:'ffi',name:'wopen'},'129787':{type:'ffi',name:'GetSystemTimeAsFileTime'},'77183':{type:'fn',name:'min'},'75128':{type:'trait',name:'Freeze'},'137534':{type:'struct',name:'BufWriter'},'141390':{type:'enum',name:'IpAddr'},'183274':{type:'ffi',name:'fmaf32'},'72312':{type:'mod',name:'ptr'},'148790':{type:'enum',name:'IoErrorKind'},'75777':{type:'struct',name:'Managed'},'128672':{type:'ffi',name:'access'},'238822':{type:'fn',name:'debug_borrow'},'166087':{type:'enum',name:'Count'},'128706':{type:'ffi',name:'dup2'},'182977':{type:'ffi',name:'size_of'},'75126':{type:'mod',name:'kinds'},'159080':{type:'enum',name:'PathPrefix'},'119421':{type:'fn',name:'set'},'152811':{type:'enum',name:'FileAccess'},'5429':{type:'fn',name:'parse_bytes'},'125739':{type:'struct',name:'sockaddr_in'},'9253':{type:'mod',name:'f32'},'235446':{type:'enum',name:'DeathAction'},'172144':{type:'fn',name:'min_align_of'},'46648':{type:'fn',name:'from_elem'},'133276':{type:'fn',name:'get_exit_status'},'245680':{type:'fn',name:'cleanup'},'183311':{type:'ffi',name:'fabsf64'},'133582':{type:'enum',name:'MemoryMapKind'},'69294':{type:'trait',name:'OwnedStr'},'237856':{type:'trait',name:'RtioTTY'},'146098':{type:'enum',name:'Signum'},'91786':{type:'fn',name:'cast'},'125965':{type:'typedef',name:'HMODULE'},'76074':{type:'trait',name:'TotalEq'},'77289':{type:'mod',name:'strconv'},'125978':{type:'typedef',name:'LARGE_INTEGER'},'122103':{type:'enum',name:'Stolen'},'183368':{type:'ffi',name:'truncf32'},'82038':{type:'fn',name:'mul_add'},'100087':{type:'trait',name:'ToStr'},'147553':{type:'struct',name:'StdReader'},'246649':{type:'fn',name:'get_sp_limit'},'77341':{type:'enum',name:'SignificantDigits'},'183118':{type:'ffi',name:'sqrtf32'},'126237':{type:'typedef',name:'LPOVERLAPPED'},'128025':{type:'ffi',name:'labs'},'129953':{type:'ffi',name:'open_osfhandle'},'243264':{type:'mod',name:'backtrace'},'126046':{type:'typedef',name:'WORD'},'14330':{type:'mod',name:'char'},'148785':{type:'enum',name:'IoErrorKind'},'177281':{type:'fn',name:'align'},'125794':{type:'struct',name:'addrinfo'},'128419':{type:'ffi',name:'wcslen'},'183340':{type:'ffi',name:'floorf32'},'13727':{type:'fn',name:'to_str_exact'},'93338':{type:'trait',name:'DoubleEndedIterator'},'152260':{type:'struct',name:'Chars'},'129466':{type:'ffi',name:'VirtualAlloc'},'158822':{type:'fn',name:'prefix'},'82351':{type:'fn',name:'asinh'},'104990':{type:'trait',name:'Any'},'183010':{type:'ffi',name:'init'},'11923':{type:'fn',name:'asin'},'128098':{type:'ffi',name:'calloc'},'71542':{type:'trait',name:'OwnedStrAsciiExt'},'183329':{type:'ffi',name:'copysignf64'},'182749':{type:'ffi',name:'atomic_min'},'125689':{type:'struct',name:'timespec'},'132206':{type:'fn',name:'getenv_as_bytes'},'147141':{type:'fn',name:'set_stdout'},'127651':{type:'ffi',name:'ispunct'},'173706':{type:'fn',name:'ReprVisitor'},'121868':{type:'fn',name:'atomic_nand'},'172318':{type:'fn',name:'from_be16'},'56639':{type:'struct',name:'MutChunks'},'169310':{type:'trait',name:'Float'},'94259':{type:'enum',name:'MinMaxResult'},'145297':{type:'enum',name:'StdioContainer'},'148297':{type:'struct',name:'TeeReader'},'60255':{type:'struct',name:'Chars'},'129888':{type:'ffi',name:'CreateEventW'},'100085':{type:'mod',name:'to_str'},'128138':{type:'ffi',name:'exit'},'146102':{type:'enum',name:'Signum'},'134992':{type:'mod',name:'io'},'148488':{type:'typedef',name:'IoResult'},'92290':{type:'trait',name:'Extendable'},'140763':{type:'fn',name:'get_host_addresses'},'125614':{type:'typedef',name:'uint32_t'},'126049':{type:'typedef',name:'SIZE_T'},'166081':{type:'enum',name:'Count'},'147533':{type:'fn',name:'println_args'},'159068':{type:'enum',name:'PathPrefix'},'55127':{type:'fn',name:'shift_ptr'},'104911':{type:'trait',name:'MutableSet'},'128167':{type:'ffi',name:'rand'},'155481':{type:'mod',name:'windows'},'106681':{type:'fn',name:'collect'},'89935':{type:'fn',name:'from_u16'},'121958':{type:'fn',name:'atomic_xor'},'89651':{type:'trait',name:'FromPrimitive'},'127925':{type:'ffi',name:'fseek'},'140723':{type:'enum',name:'Protocol'},'237793':{type:'trait',name:'RtioPipe'},'183473':{type:'ffi',name:'ctlz64'},'128471':{type:'ffi',name:'chmod'},'137706':{type:'struct',name:'BufReader'},'92175':{type:'trait',name:'CheckedAdd'},'133610':{type:'enum',name:'MapError'},'236684':{type:'struct',name:'FileOpenConfig'},'183627':{type:'ffi',name:'u64_add_with_overflow'},'129144':{type:'ffi',name:'shutdown'},'14464':{type:'fn',name:'is_uppercase'},'75035':{type:'mod',name:'gc'},'65836':{type:'trait',name:'StrSlice'},'101003':{type:'struct',name:'SipState'},'15028':{type:'fn',name:'decompose_canonical'},'129085':{type:'ffi',name:'recvfrom'},'105104':{type:'trait',name:'AnyMutRefExt'},'127595':{type:'mod',name:'funcs'},'133625':{type:'enum',name:'MapError'},'129696':{type:'ffi',name:'GetFinalPathNameByHandleW'},'129038':{type:'ffi',name:'closesocket'},'13789':{type:'fn',name:'to_str_exp_exact'},'172357':{type:'fn',name:'swap'},'161740':{type:'fn',name:'transmute_mut_region'},'238850':{type:'struct',name:'MemoryRegion'},'148016':{type:'struct',name:'NullReader'},'165746':{type:'enum',name:'Position'},'152814':{type:'enum',name:'FileType'},'98627':{type:'fn',name:'range'},'124609':{type:'mod',name:'spsc_queue'},'125989':{type:'typedef',name:'LPCSTR'},'145221':{type:'struct',name:'ProcessConfig'},'126248':{type:'typedef',name:'LPFILETIME'},'182944':{type:'ffi',name:'atomic_fence'},'183253':{type:'ffi',name:'log10f64'},'75862':{type:'trait',name:'Sub'},'236695':{type:'enum',name:'CloseBehavior'},'183038':{type:'ffi',name:'owns_managed'},'62135':{type:'fn',name:'eq'},'246454':{type:'mod',name:'stack'},'158848':{type:'fn',name:'make_non_verbatim'},'145309':{type:'enum',name:'StdioContainer'},'127623':{type:'ffi',name:'isdigit'},'129990':{type:'struct',name:'CString'},'128483':{type:'ffi',name:'wchmod'},'182950':{type:'ffi',name:'atomic_fence_acqrel'},'147987':{type:'struct',name:'ZeroReader'},'124154':{type:'mod',name:'mpsc_queue'},'125941':{type:'typedef',name:'BOOL'},'183669':{type:'ffi',name:'i32_sub_with_overflow'},'148788':{type:'enum',name:'IoErrorKind'},'8024':{type:'fn',name:'parse_bytes'},'127616':{type:'ffi',name:'iscntrl'},'182879':{type:'ffi',name:'atomic_umax'},'147053':{type:'fn',name:'stderr'},'11936':{type:'fn',name:'atan'},'128511':{type:'ffi',name:'fstat'},'139281':{type:'fn',name:'u64_from_be_bytes'},'82192':{type:'fn',name:'atan'},'128388':{type:'ffi',name:'strtok'},'48592':{type:'mod',name:'traits'},'100028':{type:'fn',name:'ge'},'128649':{type:'ffi',name:'creat'},'14420':{type:'fn',name:'is_alphabetic'},'183218':{type:'ffi',name:'exp2f32'},'133595':{type:'enum',name:'MapOption'},'165537':{type:'struct',name:'FormatSpec'},'128176':{type:'mod',name:'string'},'152810':{type:'enum',name:'FileAccess'},'122109':{type:'enum',name:'Stolen'},'125605':{type:'typedef',name:'int64_t'},'126252':{type:'struct',name:'GUID'},'65129':{type:'fn',name:'slice_unchecked'},'62546':{type:'struct',name:'UTF16Items'},'80776':{type:'fn',name:'zero'},'62586':{type:'enum',name:'UTF16Item'},'77345':{type:'enum',name:'SignFormat'},'184125':{type:'struct',name:'Slice'},'125891':{type:'typedef',name:'intptr_t'},'161828':{type:'mod',name:'fmt'},'2771':{type:'fn',name:'to_str_bytes'},'177246':{type:'mod',name:'reflect'},'147476':{type:'fn',name:'println'},'121679':{type:'fn',name:'atomic_add'},'125947':{type:'typedef',name:'BOOLEAN'},'140712':{type:'enum',name:'SocketType'},'5830':{type:'mod',name:'u8'},'127871':{type:'ffi',name:'ungetc'},'77328':{type:'enum',name:'ExponentFormat'},'11292':{type:'fn',name:'to_str'},'13824':{type:'fn',name:'to_str_exp_digits'},'125620':{type:'mod',name:'posix88'},'129812':{type:'ffi',name:'CreateNamedPipeW'},'64210':{type:'trait',name:'IntoMaybeOwned'},'183599':{type:'ffi',name:'u16_add_with_overflow'},'183396':{type:'ffi',name:'nearbyintf32'},'76046':{type:'trait',name:'Eq'},'1743':{type:'fn',name:'parse_bytes'},'105286':{type:'enum',name:'Option'},'76613':{type:'trait',name:'TotalOrd'},'152806':{type:'enum',name:'FileMode'},'183289':{type:'ffi',name:'fmaf64'},'125588':{type:'mod',name:'common'},'138443':{type:'struct',name:'TempDir'},'182632':{type:'ffi',name:'atomic_xor_acq'},'183417':{type:'ffi',name:'roundf64'},'128536':{type:'ffi',name:'wstat'},'169238':{type:'trait',name:'Binary'},'147513':{type:'fn',name:'print_args'},'13976':{type:'mod',name:'unit'},'182697':{type:'ffi',name:'atomic_max_acq'},'234949':{type:'mod',name:'rt'},'12006':{type:'fn',name:'abs_sub'},'183006':{type:'ffi',name:'type_id'},'135403':{type:'struct',name:'BufferedReader'},'46933':{type:'fn',name:'ref_slice'},'96117':{type:'struct',name:'Filter'},'240279':{type:'fn',name:'get_crate_map'},'169785':{type:'fn',name:'format_unsafe'},'148774':{type:'enum',name:'IoErrorKind'},'125854':{type:'typedef',name:'c_long'},'63265':{type:'fn',name:'with_capacity'},'124174':{type:'enum',name:'PopResult'},'146100':{type:'enum',name:'Signum'},'134985':{type:'mod',name:'mips'},'148162':{type:'struct',name:'ChainedReader'},'182853':{type:'ffi',name:'atomic_umin_acqrel'},'129793':{type:'ffi',name:'QueryPerformanceFrequency'},'60763':{type:'typedef',name:'Words'},'182827':{type:'ffi',name:'atomic_umin_acq'},'75211':{type:'struct',name:'ContravariantType'},'93816':{type:'struct',name:'ByRef'},'183641':{type:'ffi',name:'i8_sub_with_overflow'},'118646':{type:'enum',name:'KeyValue'},'92059':{type:'fn',name:'from_str_radix'},'128717':{type:'ffi',name:'execv'},'132329':{type:'struct',name:'Pipe'},'12110':{type:'fn',name:'sinh'},'237637':{type:'trait',name:'RtioFileStream'},'117055':{type:'enum',name:'TryRecvResult'},'11967':{type:'fn',name:'cbrt'},'140715':{type:'enum',name:'Flag'},'182359':{type:'ffi',name:'atomic_xsub'},'166092':{type:'enum',name:'Count'},'133584':{type:'enum',name:'MapOption'},'82237':{type:'fn',name:'exp'},'182814':{type:'ffi',name:'atomic_umin'},'161216':{type:'trait',name:'GenericPathUnsafe'},'139723':{type:'fn',name:'rename'},'11367':{type:'fn',name:'to_str_exact'},'99135':{type:'struct',name:'RangeStep'},'70847':{type:'trait',name:'AsciiCast'},'126744':{type:'mod',name:'bsd44'},'135996':{type:'struct',name:'LineBufferedWriter'},'127982':{type:'ffi',name:'feof'},'61701':{type:'struct',name:'Normalizations'},'236697':{type:'enum',name:'CloseBehavior'},'9482':{type:'fn',name:'ceil'},'55022':{type:'fn',name:'buf_as_slice'},'105285':{type:'enum',name:'Option'},'132826':{type:'fn',name:'self_exe_path'},'125968':{type:'typedef',name:'LONG'},'172309':{type:'fn',name:'from_le64'},'183025':{type:'ffi',name:'transmute'},'241482':{type:'mod',name:'unwind'},'129522':{type:'ffi',name:'VirtualProtect'},'128699':{type:'ffi',name:'dup'},'161164':{type:'trait',name:'BytesContainer'},'133616':{type:'enum',name:'MapError'},'169166':{type:'trait',name:'Show'},'129500':{type:'ffi',name:'VirtualLock'},'93947':{type:'trait',name:'MultiplicativeIterator'},'129298':{type:'ffi',name:'FindFirstFileW'},'182645':{type:'ffi',name:'atomic_xor_rel'},'125602':{type:'typedef',name:'int32_t'},'166943':{type:'struct',name:'SelectArm'},'9306':{type:'fn',name:'sin'},'128568':{type:'ffi',name:'popen'},'76346':{type:'enum',name:'Ordering'},'109223':{type:'struct',name:'TaskOpts'},'128062':{type:'ffi',name:'strtol'},'17357':{type:'trait',name:'Tuple3'},'241151':{type:'mod',name:'thread_local_storage'},'183161':{type:'ffi',name:'sinf64'},'128231':{type:'ffi',name:'strncat'},'16043':{type:'mod',name:'tuple'},'129328':{type:'ffi',name:'DuplicateHandle'},'71557':{type:'trait',name:'StrAsciiExt'},'46986':{type:'struct',name:'Splits'},'127597':{type:'mod',name:'ctype'},'147737':{type:'struct',name:'Timer'},'128262':{type:'ffi',name:'strncmp'},'183508':{type:'ffi',name:'bswap16'},'80784':{type:'trait',name:'One'},'145283':{type:'struct',name:'ProcessOutput'},'172466':{type:'trait',name:'Repr'},'12136':{type:'fn',name:'tanh'},'147443':{type:'fn',name:'flush'},'125885':{type:'typedef',name:'c_longlong'},'183204':{type:'ffi',name:'expf32'},'76350':{type:'enum',name:'Ordering'},'128462':{type:'mod',name:'stat_'},'125593':{type:'enum',name:'FILE'},'75876':{type:'trait',name:'Mul'},'62466':{type:'fn',name:'is_utf16'},'127693':{type:'mod',name:'stdio'},'172300':{type:'fn',name:'from_le32'},'182333':{type:'ffi',name:'atomic_xadd_acqrel'},'117419':{type:'fn',name:'channel'},'82168':{type:'fn',name:'asin'},'128185':{type:'ffi',name:'strcpy'},'97349':{type:'struct',name:'Take'},'46737':{type:'fn',name:'with_capacity'},'82375':{type:'fn',name:'atanh'},'125599':{type:'typedef',name:'int16_t'},'77332':{type:'enum',name:'SignificantDigits'},'92080':{type:'trait',name:'Saturating'},'125913':{type:'typedef',name:'mode_t'},'148791':{type:'enum',name:'IoErrorKind'},'134971':{type:'mod',name:'x86_64'},'97960':{type:'struct',name:'Fuse'},'94271':{type:'enum',name:'MinMaxResult'},'65181':{type:'fn',name:'push_bytes'},'136229':{type:'struct',name:'BufferedStream'},'50760':{type:'trait',name:'ImmutableEqVector'},'148778':{type:'enum',name:'IoErrorKind'},'62117':{type:'fn',name:'eq_slice'},'139671':{type:'fn',name:'stat'},'129438':{type:'ffi',name:'TerminateProcess'},'182398':{type:'ffi',name:'atomic_xsub_acqrel'},'237605':{type:'trait',name:'RtioTimer'},'127672':{type:'ffi',name:'isxdigit'},'121572':{type:'fn',name:'atomic_store'},'81212':{type:'enum',name:'FPCategory'},'70188':{type:'struct',name:'Ascii'},'166091':{type:'enum',name:'Count'},'182515':{type:'ffi',name:'atomic_nand_rel'},'63547':{type:'fn',name:'utf8_char_width'},'152774':{type:'fn',name:'standard_error'},'238734':{type:'mod',name:'env'},'134978':{type:'mod',name:'arm'},'127596':{type:'mod',name:'c95'},'125922':{type:'mod',name:'extra'},'245119':{type:'mod',name:'util'},'75127':{type:'trait',name:'Send'},'129263':{type:'ffi',name:'DeleteFileW'},'104773':{type:'trait',name:'MutableMap'},'140722':{type:'enum',name:'Flag'},'182385':{type:'ffi',name:'atomic_xsub_rel'},'125872':{type:'typedef',name:'clock_t'},'126215':{type:'typedef',name:'LPMEMORY_BASIC_INFORMATION'},'82249':{type:'fn',name:'exp2'},'182946':{type:'ffi',name:'atomic_fence_acq'},'13677':{type:'fn',name:'to_str_hex'},'128048':{type:'ffi',name:'strtod'},'9534':{type:'fn',name:'round'},'129115':{type:'ffi',name:'sendto'},'148776':{type:'enum',name:'IoErrorKind'},'3719':{type:'fn',name:'to_str_bytes'},'125703':{type:'typedef',name:'SOCKET'},'125611':{type:'typedef',name:'uint16_t'},'82114':{type:'fn',name:'hypot'},'183753':{type:'ffi',name:'i8_mul_with_overflow'},'77344':{type:'enum',name:'SignFormat'},'183837':{type:'ffi',name:'u32_mul_with_overflow'},'55092':{type:'fn',name:'from_buf_raw'},'165266':{type:'enum',name:'Piece'},'109698':{type:'mod',name:'select'},'161651':{type:'fn',name:'bump_box_refcount'},'128170':{type:'ffi',name:'srand'},'183182':{type:'ffi',name:'powf32'},'182255':{type:'ffi',name:'atomic_xchg_rel'},'80885':{type:'trait',name:'Round'},'120391':{type:'enum',name:'Ordering'},'182788':{type:'ffi',name:'atomic_min_acqrel'},'133617':{type:'enum',name:'MapError'},'133607':{type:'enum',name:'MapError'},'14533':{type:'fn',name:'is_digit'},'140714':{type:'enum',name:'SocketType'},'129556':{type:'ffi',name:'CreateFileMappingW'},'181359':{type:'typedef',name:'Disr'},'126032':{type:'typedef',name:'LPHANDLE'},'9586':{type:'fn',name:'atan2'},'128380':{type:'ffi',name:'strerror'},'78081':{type:'fn',name:'int_to_str_bytes_common'},'51035':{type:'trait',name:'ImmutableCloneableVector'},'118645':{type:'enum',name:'KeyValue'},'128344':{type:'ffi',name:'strpbrk'},'49175':{type:'trait',name:'Vector'},'140859':{type:'struct',name:'TcpStream'},'11993':{type:'fn',name:'exp_m1'},'183001':{type:'ffi',name:'get_tydesc'},'98170':{type:'struct',name:'Inspect'},'172155':{type:'fn',name:'min_align_of_val'},'125863':{type:'typedef',name:'c_double'},'94260':{type:'enum',name:'MinMaxResult'},'182166':{type:'ffi',name:'atomic_load'},'152193':{type:'trait',name:'Stream'},'75130':{type:'trait',name:'Pod'},'169202':{type:'trait',name:'Signed'},'103245':{type:'fn',name:'hash'},'99191':{type:'fn',name:'range_step'},'130911':{type:'struct',name:'CChars'},'98358':{type:'struct',name:'Unfold'},'163111':{type:'struct',name:'Radix'},'48064':{type:'struct',name:'Windows'},'172243':{type:'fn',name:'to_le64'},'166767':{type:'enum',name:'PluralKeyword'},'77170':{type:'trait',name:'Equiv'},'77206':{type:'fn',name:'max'},'11910':{type:'fn',name:'acos'},'140082':{type:'fn',name:'readdir'},'134761':{type:'mod',name:'consts'},'140718':{type:'enum',name:'Flag'},'146750':{type:'struct',name:'Listener'},'8398':{type:'mod',name:'u64'},'81211':{type:'enum',name:'FPCategory'},'11980':{type:'fn',name:'cosh'},'77337':{type:'enum',name:'SignificantDigits'},'177311':{type:'fn',name:'MovePtrAdaptor'},'146076':{type:'mod',name:'signal'},'242112':{type:'fn',name:'fail_bounds_check'},'106755':{type:'mod',name:'result'},'172180':{type:'fn',name:'pref_align_of_val'},'169631':{type:'fn',name:'write'},'132281':{type:'fn',name:'unsetenv'},'75990':{type:'trait',name:'Shr'},'147037':{type:'fn',name:'stdout_raw'},'128249':{type:'ffi',name:'strcmp'},'96433':{type:'struct',name:'Enumerate'},'235254':{type:'fn',name:'closure_exchange_malloc'},'127778':{type:'ffi',name:'setvbuf'},'14522':{type:'fn',name:'is_control'},'103271':{type:'fn',name:'hash_with_keys'},'169097':{type:'struct',name:'Argument'},'235152':{type:'fn',name:'realloc_raw'},'128855':{type:'ffi',name:'rmdir'},'125718':{type:'struct',name:'sockaddr'},'172094':{type:'fn',name:'size_of_val'},'119060':{type:'fn',name:'get_mut'},'104864':{type:'trait',name:'Set'},'165256':{type:'mod',name:'parse'},'125697':{type:'mod',name:'bsd44'},'134765':{type:'mod',name:'unix'},'161248':{type:'struct',name:'Display'},'8959':{type:'fn',name:'to_str_bytes'},'159091':{type:'enum',name:'PathPrefix'},'166496':{type:'enum',name:'PluralSelector'},'128590':{type:'ffi',name:'fdopen'},'139697':{type:'fn',name:'lstat'},'140725':{type:'enum',name:'Protocol'},'128292':{type:'ffi',name:'strchr'},'183410':{type:'ffi',name:'roundf32'},'240116':{type:'fn',name:'local_free'},'125587':{type:'mod',name:'types'},'99752':{type:'fn',name:'eq'},'125869':{type:'typedef',name:'ptrdiff_t'},'152817':{type:'enum',name:'FileType'},'9643':{type:'fn',name:'abs_sub'},'82026':{type:'fn',name:'ln_1p'},'126039':{type:'typedef',name:'PBOOL'},'161694':{type:'fn',name:'transmute_region'},'182411':{type:'ffi',name:'atomic_xsub_relaxed'},'152671':{type:'trait',name:'Seek'},'99368':{type:'fn',name:'range_step_inclusive'},'9495':{type:'fn',name:'trunc'},'14382':{type:'fn',name:'from_u32'},'65300':{type:'fn',name:'as_owned_vec'},'182965':{type:'ffi',name:'volatile_store'},'166093':{type:'enum',name:'Count'},'183739':{type:'ffi',name:'u64_sub_with_overflow'},'235340':{type:'mod',name:'task'},'140721':{type:'enum',name:'Flag'},'103307':{type:'trait',name:'Hash'},'237767':{type:'trait',name:'RtioProcess'},'127811':{type:'ffi',name:'fgetc'},'127837':{type:'ffi',name:'fputc'},'240105':{type:'fn',name:'local_free_'},'172344':{type:'fn',name:'from_be64'},'76018':{type:'trait',name:'Deref'},'133479':{type:'fn',name:'args'},'125780':{type:'struct',name:'ip_mreq'},'52675':{type:'trait',name:'OwnedCloneableVector'},'129780':{type:'ffi',name:'SetEndOfFile'},'56343':{type:'typedef',name:'RevMutItems'},'144831':{type:'mod',name:'unix'},'12042':{type:'fn',name:'frexp'},'59438':{type:'struct',name:'MoveItems'},'182463':{type:'ffi',name:'atomic_and_acqrel'},'98900':{type:'fn',name:'range_inclusive'},'77242':{type:'fn',name:'from_str'},'129310':{type:'ffi',name:'FindNextFileW'},'125904':{type:'typedef',name:'ino_t'},'169262':{type:'trait',name:'UpperHex'},'242360':{type:'fn',name:'begin_unwind_fmt'},'80883':{type:'trait',name:'Unsigned'},'80871':{type:'fn',name:'signum'},'126267':{type:'struct',name:'WSAPROTOCOLCHAIN'},'128863':{type:'ffi',name:'unlink'},'57199':{type:'struct',name:'Vec'},'65319':{type:'mod',name:'traits'},'125626':{type:'mod',name:'os'},'183543':{type:'ffi',name:'i16_add_with_overflow'},'126012':{type:'typedef',name:'LPVOID'},'246824':{type:'fn',name:'cleanup'},'166279':{type:'enum',name:'Method'},'14742':{type:'fn',name:'to_lowercase'},'120392':{type:'enum',name:'Ordering'},'140059':{type:'fn',name:'rmdir'},'148781':{type:'enum',name:'IoErrorKind'},'234964':{type:'mod',name:'macros'},'49281':{type:'trait',name:'CloneableVector'},'166766':{type:'enum',name:'PluralKeyword'},'30263':{type:'trait',name:'Tuple9'},'96735':{type:'struct',name:'Peekable'},'122411':{type:'struct',name:'BufferPool'},'152203':{type:'struct',name:'Lines'},'82273':{type:'fn',name:'log'},'94001':{type:'trait',name:'OrdIterator'},'14453':{type:'fn',name:'is_lowercase'},'9617':{type:'fn',name:'cosh'},'71331':{type:'trait',name:'AsciiStr'},'148784':{type:'enum',name:'IoErrorKind'},'128662':{type:'mod',name:'unistd'},'14731':{type:'fn',name:'to_uppercase'},'80841':{type:'fn',name:'abs'},'124175':{type:'enum',name:'PopResult'},'166771':{type:'enum',name:'PluralKeyword'},'183102':{type:'ffi',name:'set_memory'},'136448':{type:'mod',name:'comm_adapters'},'129541':{type:'ffi',name:'VirtualQuery'},'238860':{type:'struct',name:'LocalHeap'},'16466':{type:'trait',name:'Tuple2'},'241127':{type:'fn',name:'maybe_tls_key'},'153420':{type:'struct',name:'UnstableFileStat'},'121634':{type:'fn',name:'atomic_swap'},'64809':{type:'fn',name:'c_str_to_static_slice'},'125975':{type:'typedef',name:'LONG_PTR'},'128562':{type:'mod',name:'stdio'},'128980':{type:'ffi',name:'getpeername'},'182242':{type:'ffi',name:'atomic_xchg_acq'},'11638':{type:'fn',name:'sqrt'},'182193':{type:'ffi',name:'atomic_store'},'237329':{type:'trait',name:'RtioTcpAcceptor'},'64156':{type:'enum',name:'MaybeOwned'},'183424':{type:'ffi',name:'ctpop8'},'117053':{type:'enum',name:'TryRecvResult'},'140194':{type:'fn',name:'mkdir_recursive'},'33730':{type:'trait',name:'Tuple10'},'75890':{type:'trait',name:'Div'},'155539':{type:'typedef',name:'RevStrComponents'},'145065':{type:'struct',name:'PipeStream'},'133583':{type:'enum',name:'MapOption'},'125727':{type:'struct',name:'sockaddr_storage'},'145310':{type:'enum',name:'ProcessExit'},'127799':{type:'ffi',name:'setbuf'},'93893':{type:'trait',name:'AdditiveIterator'},'169214':{type:'trait',name:'Unsigned'},'163443':{type:'struct',name:'RadixFmt'},'165977':{type:'enum',name:'Flag'},'184079':{type:'mod',name:'raw'},'136640':{type:'struct',name:'ChanWriter'},'82180':{type:'fn',name:'acos'},'75713':{type:'struct',name:'NoPod'},'166661':{type:'struct',name:'PluralArm'},'127609':{type:'ffi',name:'isalpha'},'135211':{type:'fn',name:'next_test_ip4'},'169334':{type:'trait',name:'UpperExp'},'235419':{type:'struct',name:'LocalStorage'},'152668':{type:'enum',name:'SeekStyle'},'237360':{type:'trait',name:'RtioTcpStream'},'140743':{type:'struct',name:'Info'},'152804':{type:'enum',name:'FileMode'},'9679':{type:'fn',name:'frexp'},'183304':{type:'ffi',name:'fabsf32'},'182671':{type:'ffi',name:'atomic_xor_relaxed'},'79517':{type:'fn',name:'from_str_bytes_common'},'128005':{type:'mod',name:'stdlib'},'129460':{type:'ffi',name:'GetSystemInfo'},'9573':{type:'fn',name:'atan'},'173679':{type:'struct',name:'ReprVisitor'},'147456':{type:'fn',name:'print'},'172252':{type:'fn',name:'to_be16'},'118621':{type:'mod',name:'local_data'},'63241':{type:'fn',name:'from_utf16_lossy'},'183375':{type:'ffi',name:'truncf64'},'125848':{type:'typedef',name:'c_int'},'125962':{type:'typedef',name:'HANDLE'},'127637':{type:'ffi',name:'islower'},'131776':{type:'fn',name:'as_utf16_p'},'81208':{type:'enum',name:'FPCategory'},'128823':{type:'ffi',name:'pipe'},'184120':{type:'typedef',name:'String'},'103137':{type:'struct',name:'SipHasher'},'165891':{type:'enum',name:'Alignment'},'183725':{type:'ffi',name:'u32_sub_with_overflow'},'133541':{type:'fn',name:'page_size'},'183389':{type:'ffi',name:'rintf64'},'152805':{type:'enum',name:'FileMode'},'109253':{type:'struct',name:'TaskBuilder'},'9547':{type:'fn',name:'acos'},'3052':{type:'mod',name:'i32'},'184081':{type:'struct',name:'Box'},'245661':{type:'mod',name:'args'},'49395':{type:'trait',name:'ImmutableVector'},'127718':{type:'ffi',name:'freopen'},'89860':{type:'fn',name:'from_i16'},'182281':{type:'ffi',name:'atomic_xchg_relaxed'},'181362':{type:'trait',name:'TyVisitor'},'108839':{type:'struct',name:'Ref'},'161712':{type:'fn',name:'transmute_mut_unsafe'},'99696':{type:'fn',name:'cmp'},'125590':{type:'enum',name:'c_void'},'76004':{type:'trait',name:'Index'},'127679':{type:'ffi',name:'tolower'},'182892':{type:'ffi',name:'atomic_umax_acq'},'80853':{type:'fn',name:'abs_sub'},'129157':{type:'mod',name:'kernel32'},'125833':{type:'typedef',name:'c_char'},'177211':{type:'fn',name:'repr_to_str'},'136800':{type:'struct',name:'MemWriter'},'182184':{type:'ffi',name:'atomic_load_relaxed'},'146114':{type:'enum',name:'Signum'},'119688':{type:'mod',name:'sync'},'72783':{type:'trait',name:'RawPtr'},'129939':{type:'ffi',name:'commit'},'172278':{type:'fn',name:'to_be64'},'172130':{type:'fn',name:'nonzero_size_of_val'},'166769':{type:'enum',name:'PluralKeyword'},'183501':{type:'ffi',name:'cttz64'},'146110':{type:'enum',name:'Signum'},'97017':{type:'struct',name:'TakeWhile'},'140111':{type:'fn',name:'walk_dir'},'109744':{type:'struct',name:'Handle'},'118637':{type:'typedef',name:'Key'},'80793':{type:'fn',name:'one'},'184155':{type:'trait',name:'Repr'},'153546':{type:'typedef',name:'FilePermission'},'100169':{type:'mod',name:'clone'},'169250':{type:'trait',name:'LowerHex'},'182567':{type:'ffi',name:'atomic_or_acq'},'76348':{type:'enum',name:'Ordering'},'93362':{type:'trait',name:'MutableDoubleEndedIterator'},'117038':{type:'struct',name:'Sender'},'9698':{type:'fn',name:'hypot'},'97636':{type:'struct',name:'FlatMap'},'147846':{type:'struct',name:'LimitReader'},'129485':{type:'ffi',name:'VirtualFree'},'127686':{type:'ffi',name:'toupper'},'127849':{type:'ffi',name:'fputs'},'155519':{type:'typedef',name:'StrComponents'},'152695':{type:'trait',name:'Listener'},'55232':{type:'trait',name:'MutableByteVector'},'129384':{type:'ffi',name:'CreateProcessA'},'182424':{type:'ffi',name:'atomic_and'},'236694':{type:'enum',name:'CloseBehavior'},'183361':{type:'ffi',name:'ceilf64'},'182320':{type:'ffi',name:'atomic_xadd_rel'},'126036':{type:'typedef',name:'LRESULT'},'125916':{type:'typedef',name:'ssize_t'},'92032':{type:'trait',name:'ToStrRadix'},'11726':{type:'fn',name:'exp2'},'159079':{type:'enum',name:'PathPrefix'},'236615':{type:'trait',name:'Callback'},'79385':{type:'fn',name:'float_to_str_common'},'141093':{type:'mod',name:'udp'},'141108':{type:'struct',name:'UdpSocket'},'161758':{type:'fn',name:'copy_lifetime'},'14574':{type:'fn',name:'to_digit'},'128692':{type:'ffi',name:'close'},'125327':{type:'mod',name:'libc'},'11801':{type:'fn',name:'abs'},'153763':{type:'struct',name:'Path'},'172265':{type:'fn',name:'to_be32'},'48217':{type:'struct',name:'Chunks'},'48003':{type:'struct',name:'Permutations'},'129738':{type:'ffi',name:'WriteFile'},'128549':{type:'ffi',name:'wutime'},'131493':{type:'mod',name:'os'},'123724':{type:'struct',name:'Queue'},'75841':{type:'mod',name:'ops'},'127737':{type:'ffi',name:'fflush'},'177134':{type:'fn',name:'write_repr'},'184134':{type:'struct',name:'Closure'},'183655':{type:'ffi',name:'i16_sub_with_overflow'},'125696':{type:'enum',name:'timezone'}};

initSearch(searchIndex);
