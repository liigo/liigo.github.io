var searchIndex = {};
searchIndex['rustc_back'] = {"items":[[0,"","rustc_back","Some stuff used by rustc that doesn't have many dependencies"],[0,"abi","",""],[5,"box_field_refcnt","rustc_back::abi",""],[5,"box_field_drop_glue","",""],[5,"box_field_body","",""],[5,"tydesc_field_visit_glue","",""],[5,"fn_field_code","",""],[5,"fn_field_box","",""],[5,"trt_field_box","",""],[5,"trt_field_vtable","",""],[5,"slice_elt_base","",""],[5,"slice_elt_len","",""],[0,"archive","rustc_back","A helper class for dealing with static archives"],[1,"ArchiveConfig","rustc_back::archive",""],[11,"handler","","",0],[11,"dst","","",0],[11,"lib_search_paths","","",0],[11,"os","","",0],[11,"maybe_ar_prog","","",0],[1,"Archive","",""],[1,"ArchiveBuilder","","Helper for adding many files to an archive with a single invocation of\n`ar`."],[3,"find_library","",""],[5,"METADATA_FILENAME","",""],[10,"open","","Opens an existing static archive",1],[10,"remove_file","","Removes a file from this archive",1],[10,"files","","Lists all files in an archive",1],[10,"extend","","Creates an `ArchiveBuilder` for adding files to this archive.",1],[10,"create","","Create a new static archive, ready for adding files.",2],[10,"add_native_library","","Adds all of the contents of a native library to this archive. This will\nsearch in the relevant locations for a library named `name`.",2],[10,"add_rlib","","Adds all of the contents of the rlib at the specified path to this\narchive.",2],[10,"add_file","","Adds an arbitrary file to this archive",2],[10,"update_symbols","","Indicate that the next call to `build` should updates all symbols in\nthe archive (run 'ar s' over it).",2],[10,"build","","Combine the provided files, rlibs, and native libraries into a single\n`Archive`.",2],[0,"arm","rustc_back",""],[3,"get_target_strs","rustc_back::arm",""],[0,"fs","rustc_back",""],[3,"realpath","rustc_back::fs","Returns an absolute path in the filesystem that `path` points to. The\nreturned path does not contain any symlinks in its hierarchy."],[0,"mips","rustc_back",""],[3,"get_target_strs","rustc_back::mips",""],[0,"mipsel","rustc_back",""],[3,"get_target_strs","rustc_back::mipsel",""],[0,"rpath","rustc_back",""],[1,"RPathConfig","rustc_back::rpath",""],[11,"os","","",3],[11,"used_crates","","",3],[11,"out_filename","","",3],[11,"get_install_prefix_lib_path","","",3],[11,"realpath","","",3],[3,"get_rpath_flags","",""],[0,"sha2","rustc_back","This module implements only the Sha256 function since that is all that is needed for internal\nuse. This implementation is not intended for external use or for any use where security is\nimportant."],[1,"Sha256","rustc_back::sha2","The SHA-256 hash algorithm"],[6,"ToBits","",""],[9,"to_bits","","Convert the value in bytes to the number of bits, a tuple where the 1st item is the\nhigh-order value and the 2nd item is the low order value.",4],[6,"FixedBuffer","","A FixedBuffer, likes its name implies, is a fixed size buffer. When the buffer becomes full, it\nmust be processed. The input() method takes care of processing and then clearing the buffer\nautomatically. However, other methods do not and require the caller to process the buffer. Any\nmethod that modifies the buffer directory or provides the caller with bytes that can be modified\nresults in those bytes being marked as used by the buffer."],[9,"input","","Input a vector of bytes. If the buffer becomes full, process it with the provided\nfunction and then clear the buffer.",5],[9,"reset","","Reset the buffer.",5],[9,"zero_until","","Zero the buffer up until the specified index. The buffer position currently must not be\ngreater than that index.",5],[9,"next","","Get a slice of the buffer of the specified size. There must be at least that many bytes\nremaining in the buffer.",5],[9,"full_buffer","","Get the current buffer. The buffer must already be full. This clears the buffer as well.",5],[9,"position","","Get the current position of the buffer.",5],[9,"remaining","","Get the number of bytes remaining in the buffer until it is full.",5],[9,"size","","Get the size of the buffer",5],[6,"StandardPadding","","The StandardPadding trait adds a method useful for Sha256 to a FixedBuffer struct."],[9,"standard_padding","","Add padding to the buffer. The buffer must not be full when this method is called and is\nguaranteed to have exactly rem remaining bytes when it returns. If there are not at least\nrem bytes available, the buffer will be zero padded, processed, cleared, and then filled\nwith zeros again until only rem bytes are remaining.",6],[6,"Digest","","The Digest trait specifies an interface common to digest functions, such as SHA-1 and the SHA-2\nfamily of digest functions."],[9,"input","","Provide message data.",7],[9,"result","","Retrieve the digest result. This method may be called multiple times.",7],[9,"reset","","Reset the digest. This method must be called after result() and before supplying more\ndata.",7],[9,"output_bits","","Get the output size in bits.",7],[10,"input_str","","Convenience function that feeds a string into a digest.",7],[10,"result_bytes","","Convenience function that retrieves the result of a digest as a\nnewly allocated vec of bytes.",7],[10,"result_str","","Convenience function that retrieves the result of a digest as a\nString in hexadecimal format.",7],[10,"new","","Construct a new instance of a SHA-256 digest.",8],[10,"input","","",8],[10,"result","","",8],[10,"reset","","",8],[10,"output_bits","","",8],[0,"svh","rustc_back","Calculation and management of a Strict Version Hash for crates"],[1,"Svh","rustc_back::svh",""],[10,"get_content","syntax::ast","",9],[10,"get_content","","",10],[10,"eq","rustc_back::svh","",11],[10,"ne","","",11],[10,"clone","","",11],[10,"new","","",11],[10,"as_str","","",11],[10,"calculate","","",11],[10,"fmt","","",11],[0,"target_strs","rustc_back",""],[1,"t","rustc_back::target_strs",""],[11,"module_asm","","",12],[11,"data_layout","","",12],[11,"target_triple","","",12],[11,"cc_args","","",12],[0,"x86","rustc_back",""],[3,"get_target_strs","rustc_back::x86",""],[0,"x86_64","rustc_back",""],[3,"get_target_strs","rustc_back::x86_64",""]],"paths":[[1,"ArchiveConfig"],[1,"Archive"],[1,"ArchiveBuilder"],[1,"RPathConfig"],[6,"ToBits"],[6,"FixedBuffer"],[6,"StandardPadding"],[6,"Digest"],[1,"Sha256"],[1,"Ident"],[1,"Name"],[1,"Svh"],[1,"t"]]};
searchIndex['rustc_llvm'] = {"items":[[0,"","rustc_llvm",""],[1,"Attribute","",""],[1,"AttrBuilder","",""],[1,"TargetData","",""],[11,"lltd","","",0],[1,"ObjectFile","",""],[11,"llof","","",1],[1,"SectionIter","",""],[11,"llsi","","",2],[2,"CallConv","",""],[12,"CCallConv","","",3],[12,"FastCallConv","","",3],[12,"ColdCallConv","","",3],[12,"X86StdcallCallConv","","",3],[12,"X86FastcallCallConv","","",3],[12,"X86_64_Win64","","",3],[2,"Visibility","",""],[12,"LLVMDefaultVisibility","","",4],[12,"HiddenVisibility","","",4],[12,"ProtectedVisibility","","",4],[2,"Linkage","",""],[12,"ExternalLinkage","","",5],[12,"AvailableExternallyLinkage","","",5],[12,"LinkOnceAnyLinkage","","",5],[12,"LinkOnceODRLinkage","","",5],[12,"WeakAnyLinkage","","",5],[12,"WeakODRLinkage","","",5],[12,"AppendingLinkage","","",5],[12,"InternalLinkage","","",5],[12,"PrivateLinkage","","",5],[12,"ExternalWeakLinkage","","",5],[12,"CommonLinkage","","",5],[2,"DiagnosticSeverity","",""],[12,"Error","","",6],[12,"Warning","","",6],[12,"Remark","","",6],[12,"Note","","",6],[2,"OtherAttribute","",""],[12,"SanitizeAddressAttribute","","",7],[12,"MinSizeAttribute","","",7],[12,"NoDuplicateAttribute","","",7],[12,"StackProtectStrongAttribute","","",7],[12,"SanitizeThreadAttribute","","",7],[12,"SanitizeMemoryAttribute","","",7],[12,"NoBuiltinAttribute","","",7],[12,"ReturnedAttribute","","",7],[12,"ColdAttribute","","",7],[12,"BuiltinAttribute","","",7],[12,"OptimizeNoneAttribute","","",7],[12,"InAllocaAttribute","","",7],[12,"NonNullAttribute","","",7],[2,"SpecialAttribute","",""],[12,"DereferenceableAttribute","","",8],[2,"AttributeSet","",""],[12,"ReturnIndex","","",9],[12,"FunctionIndex","","",9],[2,"IntPredicate","",""],[12,"IntEQ","","",10],[12,"IntNE","","",10],[12,"IntUGT","","",10],[12,"IntUGE","","",10],[12,"IntULT","","",10],[12,"IntULE","","",10],[12,"IntSGT","","",10],[12,"IntSGE","","",10],[12,"IntSLT","","",10],[12,"IntSLE","","",10],[2,"RealPredicate","",""],[12,"RealPredicateFalse","","",11],[12,"RealOEQ","","",11],[12,"RealOGT","","",11],[12,"RealOGE","","",11],[12,"RealOLT","","",11],[12,"RealOLE","","",11],[12,"RealONE","","",11],[12,"RealORD","","",11],[12,"RealUNO","","",11],[12,"RealUEQ","","",11],[12,"RealUGT","","",11],[12,"RealUGE","","",11],[12,"RealULT","","",11],[12,"RealULE","","",11],[12,"RealUNE","","",11],[12,"RealPredicateTrue","","",11],[2,"TypeKind","",""],[12,"Void","","",12],[12,"Half","","",12],[12,"Float","","",12],[12,"Double","","",12],[12,"X86_FP80","","",12],[12,"FP128","","",12],[12,"PPC_FP128","","",12],[12,"Label","","",12],[12,"Integer","","",12],[12,"Function","","",12],[12,"Struct","","",12],[12,"Array","","",12],[12,"Pointer","","",12],[12,"Vector","","",12],[12,"Metadata","","",12],[12,"X86_MMX","","",12],[2,"AtomicBinOp","",""],[12,"AtomicXchg","","",13],[12,"AtomicAdd","","",13],[12,"AtomicSub","","",13],[12,"AtomicAnd","","",13],[12,"AtomicNand","","",13],[12,"AtomicOr","","",13],[12,"AtomicXor","","",13],[12,"AtomicMax","","",13],[12,"AtomicMin","","",13],[12,"AtomicUMax","","",13],[12,"AtomicUMin","","",13],[2,"AtomicOrdering","",""],[12,"NotAtomic","","",14],[12,"Unordered","","",14],[12,"Monotonic","","",14],[12,"Acquire","","",14],[12,"Release","","",14],[12,"AcquireRelease","","",14],[12,"SequentiallyConsistent","","",14],[2,"FileType","",""],[12,"AssemblyFileType","","",15],[12,"ObjectFileType","","",15],[2,"MetadataType","",""],[12,"MD_dbg","","",16],[12,"MD_tbaa","","",16],[12,"MD_prof","","",16],[12,"MD_fpmath","","",16],[12,"MD_range","","",16],[12,"MD_tbaa_struct","","",16],[2,"AsmDialect","",""],[12,"AD_ATT","","",17],[12,"AD_Intel","","",17],[2,"CodeGenOptLevel","",""],[12,"CodeGenLevelNone","","",18],[12,"CodeGenLevelLess","","",18],[12,"CodeGenLevelDefault","","",18],[12,"CodeGenLevelAggressive","","",18],[2,"RelocMode","",""],[12,"RelocDefault","","",19],[12,"RelocStatic","","",19],[12,"RelocPIC","","",19],[12,"RelocDynamicNoPic","","",19],[2,"CodeGenModel","",""],[12,"CodeModelDefault","","",20],[12,"CodeModelJITDefault","","",20],[12,"CodeModelSmall","","",20],[12,"CodeModelKernel","","",20],[12,"CodeModelMedium","","",20],[12,"CodeModelLarge","","",20],[2,"DiagnosticKind","",""],[12,"DK_InlineAsm","","",21],[12,"DK_StackSize","","",21],[12,"DK_DebugMetadataVersion","","",21],[12,"DK_SampleProfile","","",21],[12,"DK_OptimizationRemark","","",21],[12,"DK_OptimizationRemarkMissed","","",21],[12,"DK_OptimizationRemarkAnalysis","","",21],[12,"DK_OptimizationFailure","","",21],[2,"Module_opaque","",""],[2,"Context_opaque","",""],[2,"Type_opaque","",""],[2,"Value_opaque","",""],[2,"BasicBlock_opaque","",""],[2,"Builder_opaque","",""],[2,"ExecutionEngine_opaque","",""],[2,"MemoryBuffer_opaque","",""],[2,"PassManager_opaque","",""],[2,"PassManagerBuilder_opaque","",""],[2,"Use_opaque","",""],[2,"TargetData_opaque","",""],[2,"ObjectFile_opaque","",""],[2,"SectionIterator_opaque","",""],[2,"Pass_opaque","",""],[2,"TargetMachine_opaque","",""],[2,"Archive_opaque","",""],[2,"Twine_opaque","",""],[2,"DiagnosticInfo_opaque","",""],[2,"DebugLoc_opaque","",""],[2,"RustString_opaque","",""],[3,"SetInstructionCallConv","",""],[3,"SetFunctionCallConv","",""],[3,"SetLinkage","",""],[3,"SetUnnamedAddr","",""],[3,"set_thread_local","",""],[3,"ConstICmp","",""],[3,"ConstFCmp","",""],[3,"SetFunctionAttribute","",""],[3,"mk_target_data","",""],[3,"mk_section_iter","",""],[3,"get_param","","Safe wrapper around `LLVMGetParam`, because segfaults are no fun."],[3,"rust_llvm_string_write_impl","","Appending to a Rust string -- used by raw_rust_string_ostream."],[3,"build_string","",""],[3,"twine_to_string","",""],[3,"debug_loc_to_string","",""],[3,"static_link_hack_this_sucks","",""],[13,"LLVMContextCreate","",""],[13,"LLVMContextDispose","",""],[13,"LLVMGetMDKindIDInContext","",""],[13,"LLVMModuleCreateWithNameInContext","",""],[13,"LLVMGetModuleContext","",""],[13,"LLVMDisposeModule","",""],[13,"LLVMGetDataLayout","","Data layout. See Module::getDataLayout."],[13,"LLVMSetDataLayout","",""],[13,"LLVMGetTarget","","Target triple. See Module::getTargetTriple."],[13,"LLVMSetTarget","",""],[13,"LLVMDumpModule","","See Module::dump."],[13,"LLVMSetModuleInlineAsm","","See Module::setModuleInlineAsm."],[13,"LLVMGetTypeKind","","See llvm::LLVMTypeKind::getTypeID."],[13,"LLVMGetTypeContext","","See llvm::LLVMType::getContext."],[13,"LLVMInt1TypeInContext","",""],[13,"LLVMInt8TypeInContext","",""],[13,"LLVMInt16TypeInContext","",""],[13,"LLVMInt32TypeInContext","",""],[13,"LLVMInt64TypeInContext","",""],[13,"LLVMIntTypeInContext","",""],[13,"LLVMGetIntTypeWidth","",""],[13,"LLVMFloatTypeInContext","",""],[13,"LLVMDoubleTypeInContext","",""],[13,"LLVMX86FP80TypeInContext","",""],[13,"LLVMFP128TypeInContext","",""],[13,"LLVMPPCFP128TypeInContext","",""],[13,"LLVMFunctionType","",""],[13,"LLVMIsFunctionVarArg","",""],[13,"LLVMGetReturnType","",""],[13,"LLVMCountParamTypes","",""],[13,"LLVMGetParamTypes","",""],[13,"LLVMStructTypeInContext","",""],[13,"LLVMCountStructElementTypes","",""],[13,"LLVMGetStructElementTypes","",""],[13,"LLVMIsPackedStruct","",""],[13,"LLVMRustArrayType","",""],[13,"LLVMPointerType","",""],[13,"LLVMVectorType","",""],[13,"LLVMGetElementType","",""],[13,"LLVMGetArrayLength","",""],[13,"LLVMGetPointerAddressSpace","",""],[13,"LLVMGetPointerToGlobal","",""],[13,"LLVMGetVectorSize","",""],[13,"LLVMVoidTypeInContext","",""],[13,"LLVMLabelTypeInContext","",""],[13,"LLVMMetadataTypeInContext","",""],[13,"LLVMTypeOf","",""],[13,"LLVMGetValueName","",""],[13,"LLVMSetValueName","",""],[13,"LLVMDumpValue","",""],[13,"LLVMReplaceAllUsesWith","",""],[13,"LLVMHasMetadata","",""],[13,"LLVMGetMetadata","",""],[13,"LLVMSetMetadata","",""],[13,"LLVMGetFirstUse","",""],[13,"LLVMGetNextUse","",""],[13,"LLVMGetUser","",""],[13,"LLVMGetUsedValue","",""],[13,"LLVMGetNumOperands","",""],[13,"LLVMGetOperand","",""],[13,"LLVMSetOperand","",""],[13,"LLVMConstNull","",""],[13,"LLVMConstAllOnes","",""],[13,"LLVMConstICmp","",""],[13,"LLVMConstFCmp","",""],[13,"LLVMGetUndef","",""],[13,"LLVMIsConstant","",""],[13,"LLVMIsNull","",""],[13,"LLVMIsUndef","",""],[13,"LLVMConstPointerNull","",""],[13,"LLVMMDStringInContext","",""],[13,"LLVMMDNodeInContext","",""],[13,"LLVMAddNamedMetadataOperand","",""],[13,"LLVMConstInt","",""],[13,"LLVMConstIntOfString","",""],[13,"LLVMConstIntOfStringAndSize","",""],[13,"LLVMConstReal","",""],[13,"LLVMConstRealOfString","",""],[13,"LLVMConstRealOfStringAndSize","",""],[13,"LLVMConstIntGetZExtValue","",""],[13,"LLVMConstIntGetSExtValue","",""],[13,"LLVMConstStringInContext","",""],[13,"LLVMConstStructInContext","",""],[13,"LLVMConstArray","",""],[13,"LLVMConstVector","",""],[13,"LLVMAlignOf","",""],[13,"LLVMSizeOf","",""],[13,"LLVMConstNeg","",""],[13,"LLVMConstNSWNeg","",""],[13,"LLVMConstNUWNeg","",""],[13,"LLVMConstFNeg","",""],[13,"LLVMConstNot","",""],[13,"LLVMConstAdd","",""],[13,"LLVMConstNSWAdd","",""],[13,"LLVMConstNUWAdd","",""],[13,"LLVMConstFAdd","",""],[13,"LLVMConstSub","",""],[13,"LLVMConstNSWSub","",""],[13,"LLVMConstNUWSub","",""],[13,"LLVMConstFSub","",""],[13,"LLVMConstMul","",""],[13,"LLVMConstNSWMul","",""],[13,"LLVMConstNUWMul","",""],[13,"LLVMConstFMul","",""],[13,"LLVMConstUDiv","",""],[13,"LLVMConstSDiv","",""],[13,"LLVMConstExactSDiv","",""],[13,"LLVMConstFDiv","",""],[13,"LLVMConstURem","",""],[13,"LLVMConstSRem","",""],[13,"LLVMConstFRem","",""],[13,"LLVMConstAnd","",""],[13,"LLVMConstOr","",""],[13,"LLVMConstXor","",""],[13,"LLVMConstShl","",""],[13,"LLVMConstLShr","",""],[13,"LLVMConstAShr","",""],[13,"LLVMConstGEP","",""],[13,"LLVMConstInBoundsGEP","",""],[13,"LLVMConstTrunc","",""],[13,"LLVMConstSExt","",""],[13,"LLVMConstZExt","",""],[13,"LLVMConstFPTrunc","",""],[13,"LLVMConstFPExt","",""],[13,"LLVMConstUIToFP","",""],[13,"LLVMConstSIToFP","",""],[13,"LLVMConstFPToUI","",""],[13,"LLVMConstFPToSI","",""],[13,"LLVMConstPtrToInt","",""],[13,"LLVMConstIntToPtr","",""],[13,"LLVMConstBitCast","",""],[13,"LLVMConstZExtOrBitCast","",""],[13,"LLVMConstSExtOrBitCast","",""],[13,"LLVMConstTruncOrBitCast","",""],[13,"LLVMConstPointerCast","",""],[13,"LLVMConstIntCast","",""],[13,"LLVMConstFPCast","",""],[13,"LLVMConstSelect","",""],[13,"LLVMConstExtractElement","",""],[13,"LLVMConstInsertElement","",""],[13,"LLVMConstShuffleVector","",""],[13,"LLVMConstExtractValue","",""],[13,"LLVMConstInsertValue","",""],[13,"LLVMConstInlineAsm","",""],[13,"LLVMBlockAddress","",""],[13,"LLVMGetGlobalParent","",""],[13,"LLVMIsDeclaration","",""],[13,"LLVMGetLinkage","",""],[13,"LLVMSetLinkage","",""],[13,"LLVMGetSection","",""],[13,"LLVMSetSection","",""],[13,"LLVMGetVisibility","",""],[13,"LLVMSetVisibility","",""],[13,"LLVMGetAlignment","",""],[13,"LLVMSetAlignment","",""],[13,"LLVMAddGlobal","",""],[13,"LLVMAddGlobalInAddressSpace","",""],[13,"LLVMGetNamedGlobal","",""],[13,"LLVMGetFirstGlobal","",""],[13,"LLVMGetLastGlobal","",""],[13,"LLVMGetNextGlobal","",""],[13,"LLVMGetPreviousGlobal","",""],[13,"LLVMDeleteGlobal","",""],[13,"LLVMGetInitializer","",""],[13,"LLVMSetInitializer","",""],[13,"LLVMIsThreadLocal","",""],[13,"LLVMSetThreadLocal","",""],[13,"LLVMIsGlobalConstant","",""],[13,"LLVMSetGlobalConstant","",""],[13,"LLVMAddAlias","",""],[13,"LLVMAddFunction","",""],[13,"LLVMGetNamedFunction","",""],[13,"LLVMGetFirstFunction","",""],[13,"LLVMGetLastFunction","",""],[13,"LLVMGetNextFunction","",""],[13,"LLVMGetPreviousFunction","",""],[13,"LLVMDeleteFunction","",""],[13,"LLVMGetOrInsertFunction","",""],[13,"LLVMGetIntrinsicID","",""],[13,"LLVMGetFunctionCallConv","",""],[13,"LLVMSetFunctionCallConv","",""],[13,"LLVMGetGC","",""],[13,"LLVMSetGC","",""],[13,"LLVMAddDereferenceableAttr","",""],[13,"LLVMAddFunctionAttribute","",""],[13,"LLVMAddFunctionAttrString","",""],[13,"LLVMRemoveFunctionAttrString","",""],[13,"LLVMGetFunctionAttr","",""],[13,"LLVMCountParams","",""],[13,"LLVMGetParams","",""],[13,"LLVMGetParam","",""],[13,"LLVMGetParamParent","",""],[13,"LLVMGetFirstParam","",""],[13,"LLVMGetLastParam","",""],[13,"LLVMGetNextParam","",""],[13,"LLVMGetPreviousParam","",""],[13,"LLVMAddAttribute","",""],[13,"LLVMRemoveAttribute","",""],[13,"LLVMGetAttribute","",""],[13,"LLVMSetParamAlignment","",""],[13,"LLVMBasicBlockAsValue","",""],[13,"LLVMValueIsBasicBlock","",""],[13,"LLVMValueAsBasicBlock","",""],[13,"LLVMGetBasicBlockParent","",""],[13,"LLVMCountBasicBlocks","",""],[13,"LLVMGetBasicBlocks","",""],[13,"LLVMGetFirstBasicBlock","",""],[13,"LLVMGetLastBasicBlock","",""],[13,"LLVMGetNextBasicBlock","",""],[13,"LLVMGetPreviousBasicBlock","",""],[13,"LLVMGetEntryBasicBlock","",""],[13,"LLVMAppendBasicBlockInContext","",""],[13,"LLVMInsertBasicBlockInContext","",""],[13,"LLVMDeleteBasicBlock","",""],[13,"LLVMMoveBasicBlockAfter","",""],[13,"LLVMMoveBasicBlockBefore","",""],[13,"LLVMGetInstructionParent","",""],[13,"LLVMGetFirstInstruction","",""],[13,"LLVMGetLastInstruction","",""],[13,"LLVMGetNextInstruction","",""],[13,"LLVMGetPreviousInstruction","",""],[13,"LLVMInstructionEraseFromParent","",""],[13,"LLVMSetInstructionCallConv","",""],[13,"LLVMGetInstructionCallConv","",""],[13,"LLVMAddInstrAttribute","",""],[13,"LLVMRemoveInstrAttribute","",""],[13,"LLVMSetInstrParamAlignment","",""],[13,"LLVMAddCallSiteAttribute","",""],[13,"LLVMAddDereferenceableCallSiteAttr","",""],[13,"LLVMIsTailCall","",""],[13,"LLVMSetTailCall","",""],[13,"LLVMGetVolatile","",""],[13,"LLVMSetVolatile","",""],[13,"LLVMAddIncoming","",""],[13,"LLVMCountIncoming","",""],[13,"LLVMGetIncomingValue","",""],[13,"LLVMGetIncomingBlock","",""],[13,"LLVMCreateBuilderInContext","",""],[13,"LLVMPositionBuilder","",""],[13,"LLVMPositionBuilderBefore","",""],[13,"LLVMPositionBuilderAtEnd","",""],[13,"LLVMGetInsertBlock","",""],[13,"LLVMClearInsertionPosition","",""],[13,"LLVMInsertIntoBuilder","",""],[13,"LLVMInsertIntoBuilderWithName","",""],[13,"LLVMDisposeBuilder","",""],[13,"LLVMDisposeExecutionEngine","",""],[13,"LLVMSetCurrentDebugLocation","",""],[13,"LLVMGetCurrentDebugLocation","",""],[13,"LLVMSetInstDebugLocation","",""],[13,"LLVMBuildRetVoid","",""],[13,"LLVMBuildRet","",""],[13,"LLVMBuildAggregateRet","",""],[13,"LLVMBuildBr","",""],[13,"LLVMBuildCondBr","",""],[13,"LLVMBuildSwitch","",""],[13,"LLVMBuildIndirectBr","",""],[13,"LLVMBuildInvoke","",""],[13,"LLVMBuildLandingPad","",""],[13,"LLVMBuildResume","",""],[13,"LLVMBuildUnreachable","",""],[13,"LLVMAddCase","",""],[13,"LLVMAddDestination","",""],[13,"LLVMAddClause","",""],[13,"LLVMSetCleanup","",""],[13,"LLVMBuildAdd","",""],[13,"LLVMBuildNSWAdd","",""],[13,"LLVMBuildNUWAdd","",""],[13,"LLVMBuildFAdd","",""],[13,"LLVMBuildSub","",""],[13,"LLVMBuildNSWSub","",""],[13,"LLVMBuildNUWSub","",""],[13,"LLVMBuildFSub","",""],[13,"LLVMBuildMul","",""],[13,"LLVMBuildNSWMul","",""],[13,"LLVMBuildNUWMul","",""],[13,"LLVMBuildFMul","",""],[13,"LLVMBuildUDiv","",""],[13,"LLVMBuildSDiv","",""],[13,"LLVMBuildExactSDiv","",""],[13,"LLVMBuildFDiv","",""],[13,"LLVMBuildURem","",""],[13,"LLVMBuildSRem","",""],[13,"LLVMBuildFRem","",""],[13,"LLVMBuildShl","",""],[13,"LLVMBuildLShr","",""],[13,"LLVMBuildAShr","",""],[13,"LLVMBuildAnd","",""],[13,"LLVMBuildOr","",""],[13,"LLVMBuildXor","",""],[13,"LLVMBuildBinOp","",""],[13,"LLVMBuildNeg","",""],[13,"LLVMBuildNSWNeg","",""],[13,"LLVMBuildNUWNeg","",""],[13,"LLVMBuildFNeg","",""],[13,"LLVMBuildNot","",""],[13,"LLVMBuildMalloc","",""],[13,"LLVMBuildArrayMalloc","",""],[13,"LLVMBuildAlloca","",""],[13,"LLVMBuildArrayAlloca","",""],[13,"LLVMBuildFree","",""],[13,"LLVMBuildLoad","",""],[13,"LLVMBuildStore","",""],[13,"LLVMBuildGEP","",""],[13,"LLVMBuildInBoundsGEP","",""],[13,"LLVMBuildStructGEP","",""],[13,"LLVMBuildGlobalString","",""],[13,"LLVMBuildGlobalStringPtr","",""],[13,"LLVMBuildTrunc","",""],[13,"LLVMBuildZExt","",""],[13,"LLVMBuildSExt","",""],[13,"LLVMBuildFPToUI","",""],[13,"LLVMBuildFPToSI","",""],[13,"LLVMBuildUIToFP","",""],[13,"LLVMBuildSIToFP","",""],[13,"LLVMBuildFPTrunc","",""],[13,"LLVMBuildFPExt","",""],[13,"LLVMBuildPtrToInt","",""],[13,"LLVMBuildIntToPtr","",""],[13,"LLVMBuildBitCast","",""],[13,"LLVMBuildZExtOrBitCast","",""],[13,"LLVMBuildSExtOrBitCast","",""],[13,"LLVMBuildTruncOrBitCast","",""],[13,"LLVMBuildCast","",""],[13,"LLVMBuildPointerCast","",""],[13,"LLVMBuildIntCast","",""],[13,"LLVMBuildFPCast","",""],[13,"LLVMBuildICmp","",""],[13,"LLVMBuildFCmp","",""],[13,"LLVMBuildPhi","",""],[13,"LLVMBuildCall","",""],[13,"LLVMBuildSelect","",""],[13,"LLVMBuildVAArg","",""],[13,"LLVMBuildExtractElement","",""],[13,"LLVMBuildInsertElement","",""],[13,"LLVMBuildShuffleVector","",""],[13,"LLVMBuildExtractValue","",""],[13,"LLVMBuildInsertValue","",""],[13,"LLVMBuildIsNull","",""],[13,"LLVMBuildIsNotNull","",""],[13,"LLVMBuildPtrDiff","",""],[13,"LLVMBuildAtomicLoad","",""],[13,"LLVMBuildAtomicStore","",""],[13,"LLVMBuildAtomicCmpXchg","",""],[13,"LLVMBuildAtomicRMW","",""],[13,"LLVMBuildAtomicFence","",""],[13,"LLVMIsATerminatorInst","",""],[13,"LLVMIsAStoreInst","",""],[13,"LLVMWriteBitcodeToFile","","Writes a module to the specified path. Returns 0 on success."],[13,"LLVMCreateTargetData","","Creates target data from a target layout string."],[13,"LLVMAddTargetData","","Adds the target data to the given pass manager. The pass manager\nreferences the target data only weakly."],[13,"LLVMStoreSizeOfType","","Number of bytes clobbered when doing a Store to *T."],[13,"LLVMSizeOfTypeInBits","","Number of bytes clobbered when doing a Store to *T."],[13,"LLVMABISizeOfType","","Distance between successive elements in an array of T.\nIncludes ABI padding. "],[13,"LLVMPreferredAlignmentOfType","","Returns the preferred alignment of a type."],[13,"LLVMABIAlignmentOfType","","Returns the minimum alignment of a type."],[13,"LLVMOffsetOfElement","","Computes the byte offset of the indexed struct element for a\ntarget."],[13,"LLVMCallFrameAlignmentOfType","","Returns the minimum alignment of a type when part of a call frame."],[13,"LLVMDisposeTargetData","","Disposes target data."],[13,"LLVMCreatePassManager","","Creates a pass manager."],[13,"LLVMCreateFunctionPassManagerForModule","","Creates a function-by-function pass manager"],[13,"LLVMDisposePassManager","","Disposes a pass manager."],[13,"LLVMRunPassManager","","Runs a pass manager on a module."],[13,"LLVMRunFunctionPassManager","","Runs the function passes on the provided function."],[13,"LLVMInitializeFunctionPassManager","","Initializes all the function passes scheduled in the manager"],[13,"LLVMFinalizeFunctionPassManager","","Finalizes all the function passes scheduled in the manager"],[13,"LLVMInitializePasses","",""],[13,"LLVMAddVerifierPass","","Adds a verification pass."],[13,"LLVMAddGlobalOptimizerPass","",""],[13,"LLVMAddIPSCCPPass","",""],[13,"LLVMAddDeadArgEliminationPass","",""],[13,"LLVMAddInstructionCombiningPass","",""],[13,"LLVMAddCFGSimplificationPass","",""],[13,"LLVMAddFunctionInliningPass","",""],[13,"LLVMAddFunctionAttrsPass","",""],[13,"LLVMAddScalarReplAggregatesPass","",""],[13,"LLVMAddScalarReplAggregatesPassSSA","",""],[13,"LLVMAddJumpThreadingPass","",""],[13,"LLVMAddConstantPropagationPass","",""],[13,"LLVMAddReassociatePass","",""],[13,"LLVMAddLoopRotatePass","",""],[13,"LLVMAddLICMPass","",""],[13,"LLVMAddLoopUnswitchPass","",""],[13,"LLVMAddLoopDeletionPass","",""],[13,"LLVMAddLoopUnrollPass","",""],[13,"LLVMAddGVNPass","",""],[13,"LLVMAddMemCpyOptPass","",""],[13,"LLVMAddSCCPPass","",""],[13,"LLVMAddDeadStoreEliminationPass","",""],[13,"LLVMAddStripDeadPrototypesPass","",""],[13,"LLVMAddConstantMergePass","",""],[13,"LLVMAddArgumentPromotionPass","",""],[13,"LLVMAddTailCallEliminationPass","",""],[13,"LLVMAddIndVarSimplifyPass","",""],[13,"LLVMAddAggressiveDCEPass","",""],[13,"LLVMAddGlobalDCEPass","",""],[13,"LLVMAddCorrelatedValuePropagationPass","",""],[13,"LLVMAddPruneEHPass","",""],[13,"LLVMAddSimplifyLibCallsPass","",""],[13,"LLVMAddLoopIdiomPass","",""],[13,"LLVMAddEarlyCSEPass","",""],[13,"LLVMAddTypeBasedAliasAnalysisPass","",""],[13,"LLVMAddBasicAliasAnalysisPass","",""],[13,"LLVMPassManagerBuilderCreate","",""],[13,"LLVMPassManagerBuilderDispose","",""],[13,"LLVMPassManagerBuilderSetOptLevel","",""],[13,"LLVMPassManagerBuilderSetSizeLevel","",""],[13,"LLVMPassManagerBuilderSetDisableUnitAtATime","",""],[13,"LLVMPassManagerBuilderSetDisableUnrollLoops","",""],[13,"LLVMPassManagerBuilderSetDisableSimplifyLibCalls","",""],[13,"LLVMPassManagerBuilderUseInlinerWithThreshold","",""],[13,"LLVMPassManagerBuilderPopulateModulePassManager","",""],[13,"LLVMPassManagerBuilderPopulateFunctionPassManager","",""],[13,"LLVMPassManagerBuilderPopulateLTOPassManager","",""],[13,"LLVMDisposeMemoryBuffer","","Destroys a memory buffer."],[13,"LLVMCreateObjectFile","","Opens an object file."],[13,"LLVMDisposeObjectFile","","Closes an object file."],[13,"LLVMGetSections","","Enumerates the sections in an object file."],[13,"LLVMDisposeSectionIterator","","Destroys a section iterator."],[13,"LLVMIsSectionIteratorAtEnd","","Returns true if the section iterator is at the end of the section\nlist: "],[13,"LLVMMoveToNextSection","","Moves the section iterator to point to the next section."],[13,"LLVMGetSectionSize","","Returns the current section size."],[13,"LLVMGetSectionContents","","Returns the current section contents as a string buffer."],[13,"LLVMRustCreateMemoryBufferWithContentsOfFile","","Reads the given file and returns it as a memory buffer. Use\nLLVMDisposeMemoryBuffer() to get rid of it. "],[13,"LLVMCreateMemoryBufferWithMemoryRange","","Borrows the contents of the memory buffer (doesn't copy it)"],[13,"LLVMCreateMemoryBufferWithMemoryRangeCopy","",""],[13,"LLVMIsMultithreaded","",""],[13,"LLVMStartMultithreaded","",""],[13,"LLVMRustGetLastError","","Returns a string describing the last error caused by an LLVMRust*\ncall. "],[13,"LLVMRustPrintPassTimings","","Print the pass timings since static dtors aren't picking them up."],[13,"LLVMStructCreateNamed","",""],[13,"LLVMStructSetBody","",""],[13,"LLVMConstNamedStruct","",""],[13,"LLVMSetDebug","","Enables LLVM debug output."],[13,"LLVMInlineAsm","","Prepares inline assembly."],[14,"LLVMRustDebugMetadataVersion","",""],[13,"LLVMRustAddModuleFlag","",""],[13,"LLVMDIBuilderCreate","",""],[13,"LLVMDIBuilderDispose","",""],[13,"LLVMDIBuilderFinalize","",""],[13,"LLVMDIBuilderCreateCompileUnit","",""],[13,"LLVMDIBuilderCreateFile","",""],[13,"LLVMDIBuilderCreateSubroutineType","",""],[13,"LLVMDIBuilderCreateFunction","",""],[13,"LLVMDIBuilderCreateBasicType","",""],[13,"LLVMDIBuilderCreatePointerType","",""],[13,"LLVMDIBuilderCreateStructType","",""],[13,"LLVMDIBuilderCreateMemberType","",""],[13,"LLVMDIBuilderCreateLexicalBlock","",""],[13,"LLVMDIBuilderCreateStaticVariable","",""],[13,"LLVMDIBuilderCreateLocalVariable","",""],[13,"LLVMDIBuilderCreateArrayType","",""],[13,"LLVMDIBuilderCreateVectorType","",""],[13,"LLVMDIBuilderGetOrCreateSubrange","",""],[13,"LLVMDIBuilderGetOrCreateArray","",""],[13,"LLVMDIBuilderInsertDeclareAtEnd","",""],[13,"LLVMDIBuilderInsertDeclareBefore","",""],[13,"LLVMDIBuilderCreateEnumerator","",""],[13,"LLVMDIBuilderCreateEnumerationType","",""],[13,"LLVMDIBuilderCreateUnionType","",""],[13,"LLVMSetUnnamedAddr","",""],[13,"LLVMDIBuilderCreateTemplateTypeParameter","",""],[13,"LLVMDIBuilderCreateOpDeref","",""],[13,"LLVMDIBuilderCreateOpPlus","",""],[13,"LLVMDIBuilderCreateComplexVariable","",""],[13,"LLVMDIBuilderCreateNameSpace","",""],[13,"LLVMDICompositeTypeSetTypeArray","",""],[13,"LLVMWriteTypeToString","",""],[13,"LLVMWriteValueToString","",""],[13,"LLVMIsAArgument","",""],[13,"LLVMIsAAllocaInst","",""],[13,"LLVMInitializeX86TargetInfo","",""],[13,"LLVMInitializeX86Target","",""],[13,"LLVMInitializeX86TargetMC","",""],[13,"LLVMInitializeX86AsmPrinter","",""],[13,"LLVMInitializeX86AsmParser","",""],[13,"LLVMInitializeARMTargetInfo","",""],[13,"LLVMInitializeARMTarget","",""],[13,"LLVMInitializeARMTargetMC","",""],[13,"LLVMInitializeARMAsmPrinter","",""],[13,"LLVMInitializeARMAsmParser","",""],[13,"LLVMInitializeMipsTargetInfo","",""],[13,"LLVMInitializeMipsTarget","",""],[13,"LLVMInitializeMipsTargetMC","",""],[13,"LLVMInitializeMipsAsmPrinter","",""],[13,"LLVMInitializeMipsAsmParser","",""],[13,"LLVMRustAddPass","",""],[13,"LLVMRustCreateTargetMachine","",""],[13,"LLVMRustDisposeTargetMachine","",""],[13,"LLVMRustAddAnalysisPasses","",""],[13,"LLVMRustAddBuilderLibraryInfo","",""],[13,"LLVMRustAddLibraryInfo","",""],[13,"LLVMRustRunFunctionPassManager","",""],[13,"LLVMRustWriteOutputFile","",""],[13,"LLVMRustPrintModule","",""],[13,"LLVMRustSetLLVMOptions","",""],[13,"LLVMRustPrintPasses","",""],[13,"LLVMRustSetNormalizedTarget","",""],[13,"LLVMRustAddAlwaysInlinePass","",""],[13,"LLVMRustLinkInExternalBitcode","",""],[13,"LLVMRustRunRestrictionPass","",""],[13,"LLVMRustMarkAllFunctionsNounwind","",""],[13,"LLVMRustOpenArchive","",""],[13,"LLVMRustArchiveReadSection","",""],[13,"LLVMRustDestroyArchive","",""],[13,"LLVMRustSetDLLExportStorageClass","",""],[13,"LLVMVersionMajor","",""],[13,"LLVMVersionMinor","",""],[13,"LLVMRustGetSectionName","",""],[13,"LLVMWriteTwineToString","",""],[13,"LLVMContextSetDiagnosticHandler","",""],[13,"LLVMUnpackOptimizationDiagnostic","",""],[13,"LLVMWriteDiagnosticInfoToString","",""],[13,"LLVMGetDiagInfoSeverity","",""],[13,"LLVMGetDiagInfoKind","",""],[13,"LLVMWriteDebugLocToString","",""],[0,"archive_ro","","A wrapper around LLVM's archive (.a) code"],[1,"ArchiveRO","rustc_llvm::archive_ro",""],[10,"open","","Opens a static archive for read-only purposes. This is more optimized\nthan the `open` method because it uses LLVM's internal `Archive` class\nrather than shelling out to `ar` for everything.",22],[10,"read","","Reads a file in the archive",22],[10,"drop","","",22],[0,"diagnostic","rustc_llvm","LLVM diagnostic reports."],[1,"OptimizationDiagnostic","rustc_llvm::diagnostic",""],[11,"kind","","",23],[11,"pass_name","","",23],[11,"function","","",23],[11,"debug_loc","","",23],[11,"message","","",23],[2,"OptimizationDiagnosticKind","",""],[12,"OptimizationRemark","","",24],[12,"OptimizationMissed","","",24],[12,"OptimizationAnalysis","","",24],[12,"OptimizationFailure","","",24],[2,"Diagnostic","",""],[12,"Optimization","","",25],[12,"UnknownDiagnostic","","LLVM has other types that we do not wrap here.",25],[10,"describe","","",24],[10,"unpack","","",25],[0,"debuginfo","rustc_llvm",""],[2,"DIBuilder_opaque","rustc_llvm::debuginfo",""],[2,"DIDescriptorFlags","",""],[12,"FlagPrivate","","",26],[12,"FlagProtected","","",26],[12,"FlagFwdDecl","","",26],[12,"FlagAppleBlock","","",26],[12,"FlagBlockByrefStruct","","",26],[12,"FlagVirtual","","",26],[12,"FlagArtificial","","",26],[12,"FlagExplicit","","",26],[12,"FlagPrototyped","","",26],[12,"FlagObjcClassComplete","","",26],[12,"FlagObjectPointer","","",26],[12,"FlagVector","","",26],[12,"FlagStaticMember","","",26],[12,"FlagIndirectVariable","","",26],[12,"FlagLValueReference","","",26],[12,"FlagRValueReference","","",26],[4,"DIBuilderRef","",""],[4,"DIDescriptor","",""],[4,"DIScope","",""],[4,"DILocation","",""],[4,"DIFile","",""],[4,"DILexicalBlock","",""],[4,"DISubprogram","",""],[4,"DIType","",""],[4,"DIBasicType","",""],[4,"DIDerivedType","",""],[4,"DICompositeType","",""],[4,"DIVariable","",""],[4,"DIGlobalVariable","",""],[4,"DIArray","",""],[4,"DISubrange","",""],[4,"Opcode","rustc_llvm",""],[4,"Bool","",""],[4,"ModuleRef","",""],[4,"ContextRef","",""],[4,"TypeRef","",""],[4,"ValueRef","",""],[4,"BasicBlockRef","",""],[4,"BuilderRef","",""],[4,"ExecutionEngineRef","",""],[4,"MemoryBufferRef","",""],[4,"PassManagerRef","",""],[4,"PassManagerBuilderRef","",""],[4,"UseRef","",""],[4,"TargetDataRef","",""],[4,"ObjectFileRef","",""],[4,"SectionIteratorRef","",""],[4,"PassRef","",""],[4,"TargetMachineRef","",""],[4,"ArchiveRef","",""],[4,"TwineRef","",""],[4,"DiagnosticInfoRef","",""],[4,"DebugLocRef","",""],[4,"DiagnosticHandler","",""],[4,"RustStringRef","",""],[5,"True","",""],[5,"False","",""],[5,"ZExtAttribute","",""],[5,"SExtAttribute","",""],[5,"NoReturnAttribute","",""],[5,"InRegAttribute","",""],[5,"StructRetAttribute","",""],[5,"NoUnwindAttribute","",""],[5,"NoAliasAttribute","",""],[5,"ByValAttribute","",""],[5,"NestAttribute","",""],[5,"ReadNoneAttribute","",""],[5,"ReadOnlyAttribute","",""],[5,"NoInlineAttribute","",""],[5,"AlwaysInlineAttribute","",""],[5,"OptimizeForSizeAttribute","",""],[5,"StackProtectAttribute","",""],[5,"StackProtectReqAttribute","",""],[5,"AlignmentAttribute","",""],[5,"NoCaptureAttribute","",""],[5,"NoRedZoneAttribute","",""],[5,"NoImplicitFloatAttribute","",""],[5,"NakedAttribute","",""],[5,"InlineHintAttribute","",""],[5,"StackAttribute","",""],[5,"ReturnsTwiceAttribute","",""],[5,"UWTableAttribute","",""],[5,"NonLazyBindAttribute","",""],[6,"AttrHelper","",""],[9,"apply_llfn","","",27],[9,"apply_callsite","","",27],[10,"eq","","",3],[10,"ne","","",3],[10,"fmt","","",6],[10,"hash","","",28],[10,"cmp","","",28],[10,"partial_cmp","","",28],[10,"lt","","",28],[10,"le","","",28],[10,"gt","","",28],[10,"ge","","",28],[10,"clone","","",28],[10,"eq","","",28],[10,"ne","","",28],[10,"empty","","Returns an empty set of flags.",28],[10,"all","","Returns the set containing all flags.",28],[10,"bits","","Returns the raw value of the flags currently stored.",28],[10,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",28],[10,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",28],[10,"is_empty","","Returns `true` if no flags are currently stored.",28],[10,"is_all","","Returns `true` if all flags are currently set.",28],[10,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",28],[10,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",28],[10,"insert","","Inserts the specified flags in-place.",28],[10,"remove","","Removes the specified flags in-place.",28],[10,"bitor","","Returns the union of the two sets of flags.",28],[10,"bitand","","Returns the intersection between the two sets of flags.",28],[10,"sub","","Returns the set difference of the two sets of flags.",28],[10,"not","","Returns the complement of this set of flags.",28],[10,"apply_llfn","","",28],[10,"apply_callsite","","",28],[10,"apply_llfn","","",7],[10,"apply_callsite","","",7],[10,"apply_llfn","","",8],[10,"apply_callsite","","",8],[10,"new","","",29],[10,"arg","","",29],[10,"ret","","",29],[10,"apply_llfn","","",29],[10,"apply_callsite","","",29],[10,"eq","","",12],[10,"ne","","",12],[10,"clone","","",18],[10,"eq","","",18],[10,"ne","","",18],[10,"drop","","",0],[10,"new","","",1],[10,"drop","","",1],[10,"drop","","",2]],"paths":[[1,"TargetData"],[1,"ObjectFile"],[1,"SectionIter"],[2,"CallConv"],[2,"Visibility"],[2,"Linkage"],[2,"DiagnosticSeverity"],[2,"OtherAttribute"],[2,"SpecialAttribute"],[2,"AttributeSet"],[2,"IntPredicate"],[2,"RealPredicate"],[2,"TypeKind"],[2,"AtomicBinOp"],[2,"AtomicOrdering"],[2,"FileType"],[2,"MetadataType"],[2,"AsmDialect"],[2,"CodeGenOptLevel"],[2,"RelocMode"],[2,"CodeGenModel"],[2,"DiagnosticKind"],[1,"ArchiveRO"],[1,"OptimizationDiagnostic"],[2,"OptimizationDiagnosticKind"],[2,"Diagnostic"],[2,"DIDescriptorFlags"],[6,"AttrHelper"],[1,"Attribute"],[1,"AttrBuilder"]]};

searchIndex['fmt_macros'] = {"items":[[0,"","fmt_macros","Macro support for format strings"],[1,"Argument","","Representation of an argument specification."],[11,"position","","Where to find this argument",0],[11,"format","","How to format the argument",0],[1,"FormatSpec","","Specification for the formatting of an argument in the format string."],[11,"fill","","Optionally specified character to fill alignment with",1],[11,"align","","Optionally specified alignment",1],[11,"flags","","Packed version of various flags provided",1],[11,"precision","","The integer precision to use",1],[11,"width","","The string width requested for the resulting format",1],[11,"ty","","The descriptor string representing the name of the format desired for\nthis argument, this can be empty or any number of characters, although\nit is required to be one word.",1],[1,"Parser","","The parser structure for interpreting the input format string. This is\nmodelled as an iterator over `Piece` structures to form a stream of tokens\nbeing output."],[11,"errors","","Error messages accumulated during parsing",2],[2,"Piece","","A piece is a portion of the format string which represents the next part\nto emit. These are emitted as a stream by the `Parser` class."],[12,"String","","A literal string which should directly be emitted",3],[12,"NextArgument","","This describes that formatting should process the next argument (as\nspecified inside) for emission.",3],[2,"Position","","Enum describing where an argument for a format can be located."],[12,"ArgumentNext","","The argument will be in the next position. This is the default.",4],[12,"ArgumentIs","","The argument is located at a specific index.",4],[12,"ArgumentNamed","","The argument has a name.",4],[2,"Alignment","","Enum of alignments which are supported."],[12,"AlignLeft","","The value will be aligned to the left.",5],[12,"AlignRight","","The value will be aligned to the right.",5],[12,"AlignCenter","","The value will be aligned in the center.",5],[12,"AlignUnknown","","The value will take on a default alignment.",5],[2,"Flag","","Various flags which can be applied to format strings. The meaning of these\nflags is defined by the formatters themselves."],[12,"FlagSignPlus","","A `+` will be used to denote positive numbers.",6],[12,"FlagSignMinus","","A `-` will be used to denote negative numbers. This is the default.",6],[12,"FlagAlternate","","An alternate form will be used for the value. In the case of numbers,\nthis means that the number will be prefixed with the supplied string.",6],[12,"FlagSignAwareZeroPad","","For numbers, this means that the number will be padded with zeroes,\nand the sign (`+` or `-`) will precede them.",6],[2,"Count","","A count is used for the precision and width parameters of an integer, and\ncan reference either an argument or a literal integer."],[12,"CountIs","","The count is specified explicitly.",7],[12,"CountIsName","","The count is specified by the argument with the given name.",7],[12,"CountIsParam","","The count is specified by the argument at the given index.",7],[12,"CountIsNextParam","","The count is specified by the next parameter.",7],[12,"CountImplied","","The count is implied and cannot be explicitly specified.",7],[10,"eq","","",3],[10,"ne","","",3],[10,"eq","","",0],[10,"ne","","",0],[10,"eq","","",1],[10,"ne","","",1],[10,"eq","","",4],[10,"ne","","",4],[10,"eq","","",5],[10,"ne","","",5],[10,"eq","","",6],[10,"ne","","",6],[10,"eq","","",7],[10,"ne","","",7],[10,"next","","",2],[10,"new","","Creates a new parser for the given format string",2]],"paths":[[1,"Argument"],[1,"FormatSpec"],[1,"Parser"],[2,"Piece"],[2,"Position"],[2,"Alignment"],[2,"Flag"],[2,"Count"]]};

searchIndex['regex_macros'] = {"items":[[0,"","regex_macros","This crate provides the `regex!` macro. Its use is documented in the\n`regex` crate."]],"paths":[]};

searchIndex['hexfloat'] = {"items":[[0,"","hexfloat","Syntax extension to create floating point literals from hexadecimal strings"],[3,"plugin_registrar","",""],[3,"expand_syntax_ext","",""]],"paths":[]};

searchIndex['fourcc'] = {"items":[[0,"","fourcc","Syntax extension to generate FourCCs."],[3,"plugin_registrar","",""],[3,"expand_syntax_ext","",""]],"paths":[]};

searchIndex['rustdoc'] = {"items":[[0,"","rustdoc",""],[3,"main","",""],[3,"opts","",""],[3,"usage","",""],[3,"main_args","",""],[0,"clean","","This module contains the \"cleaned\" pieces of the AST, and the functions\nthat clean them."],[1,"Crate","rustdoc::clean",""],[11,"name","","",0],[11,"module","","",0],[11,"externs","","",0],[11,"primitives","","",0],[1,"ExternalCrate","",""],[11,"name","","",1],[11,"attrs","","",1],[11,"primitives","","",1],[1,"Item","","Anything with a source location and set of attributes and, optionally, a\nname. That is, anything that can be documented. This doesn't correspond\ndirectly to the AST's concept of an item; it's a strict superset."],[11,"source","","Stringified span",2],[11,"name","","Not everything has a name. E.g., impls",2],[11,"attrs","","",2],[11,"inner","","",2],[11,"visibility","","",2],[11,"def_id","","",2],[11,"stability","","",2],[1,"Module","",""],[11,"items","","",3],[11,"is_crate","","",3],[1,"TyParam","",""],[11,"name","","",4],[11,"did","","",4],[11,"bounds","","",4],[11,"default","","",4],[1,"Lifetime","",""],[1,"Generics","",""],[11,"lifetimes","","",5],[11,"type_params","","",5],[1,"Method","",""],[11,"generics","","",6],[11,"self_","","",6],[11,"fn_style","","",6],[11,"decl","","",6],[1,"TyMethod","",""],[11,"fn_style","","",7],[11,"decl","","",7],[11,"generics","","",7],[11,"self_","","",7],[1,"Function","",""],[11,"decl","","",8],[11,"generics","","",8],[11,"fn_style","","",8],[1,"ClosureDecl","",""],[11,"lifetimes","","",9],[11,"decl","","",9],[11,"onceness","","",9],[11,"fn_style","","",9],[11,"bounds","","",9],[1,"FnDecl","",""],[11,"inputs","","",10],[11,"output","","",10],[11,"cf","","",10],[11,"attrs","","",10],[1,"Arguments","",""],[11,"values","","",11],[1,"Argument","",""],[11,"type_","","",12],[11,"name","","",12],[11,"id","","",12],[1,"Trait","",""],[11,"items","","",13],[11,"generics","","",13],[11,"bounds","","",13],[1,"Struct","",""],[11,"struct_type","","",14],[11,"generics","","",14],[11,"fields","","",14],[11,"fields_stripped","","",14],[1,"VariantStruct","","This is a more limited form of the standard Struct, different in that\nit lacks the things most items have (name, id, parameterization). Found\nonly as a variant in an enum."],[11,"struct_type","","",15],[11,"fields","","",15],[11,"fields_stripped","","",15],[1,"Enum","",""],[11,"variants","","",16],[11,"generics","","",16],[11,"variants_stripped","","",16],[1,"Variant","",""],[11,"kind","","",17],[1,"Span","",""],[11,"filename","","",18],[11,"loline","","",18],[11,"locol","","",18],[11,"hiline","","",18],[11,"hicol","","",18],[1,"Path","",""],[11,"global","","",19],[11,"segments","","",19],[1,"PathSegment","",""],[11,"name","","",20],[11,"lifetimes","","",20],[11,"types","","",20],[1,"Typedef","",""],[11,"type_","","",21],[11,"generics","","",21],[1,"BareFunctionDecl","",""],[11,"fn_style","","",22],[11,"generics","","",22],[11,"decl","","",22],[11,"abi","","",22],[1,"Static","",""],[11,"type_","","",23],[11,"mutability","","",23],[11,"expr","","It's useful to have the value of a static documented, but I have no\ndesire to represent expressions (that'd basically be all of the AST,\nwhich is huge!). So, have a string.",23],[1,"Impl","",""],[11,"generics","","",24],[11,"trait_","","",24],[11,"for_","","",24],[11,"items","","",24],[11,"derived","","",24],[1,"ViewItem","",""],[11,"inner","","",25],[1,"ImportSource","",""],[11,"path","","",26],[11,"did","","",26],[1,"ViewListIdent","",""],[11,"name","","",27],[11,"source","","",27],[1,"Macro","",""],[11,"source","","",28],[1,"Stability","",""],[11,"level","","",29],[11,"text","","",29],[2,"ItemEnum","",""],[12,"StructItem","","",30],[12,"EnumItem","","",30],[12,"FunctionItem","","",30],[12,"ModuleItem","","",30],[12,"TypedefItem","","",30],[12,"StaticItem","","",30],[12,"TraitItem","","",30],[12,"ImplItem","","",30],[12,"ViewItemItem","","`use` and `extern crate`",30],[12,"TyMethodItem","","A method signature only. Used for required methods in traits (ie,\nnon-default-methods).",30],[12,"MethodItem","","A method with a body.",30],[12,"StructFieldItem","","",30],[12,"VariantItem","","",30],[12,"ForeignFunctionItem","","`fn`s from an extern block",30],[12,"ForeignStaticItem","","`static`s from an extern block",30],[12,"MacroItem","","",30],[12,"PrimitiveItem","","",30],[12,"AssociatedTypeItem","","",30],[2,"Attribute","",""],[12,"Word","","",31],[12,"List","","",31],[12,"NameValue","","",31],[2,"TyParamBound","",""],[12,"RegionBound","","",32],[12,"TraitBound","","",32],[2,"SelfTy","",""],[12,"SelfStatic","","",33],[12,"SelfValue","","",33],[12,"SelfBorrowed","","",33],[12,"SelfExplicit","","",33],[2,"RetStyle","",""],[12,"NoReturn","","",34],[12,"Return","","",34],[2,"TraitMethod","",""],[12,"RequiredMethod","","",35],[12,"ProvidedMethod","","",35],[12,"TypeTraitItem","","",35],[2,"ImplMethod","",""],[12,"MethodImplItem","","",36],[12,"TypeImplItem","","",36],[2,"Type","","A representation of a Type suitable for hyperlinking purposes. Ideally one can get the original\ntype out of the AST/ty::ctxt given one of these, if more information is needed. Most importantly\nit does not preserve mutability or boxes."],[12,"ResolvedPath","","structs/enums/traits (anything that'd be an ast::TyPath)",37],[11,"path","rustdoc::clean::Type","",37],[11,"typarams","","",37],[11,"did","","",37],[12,"TyParamBinder","rustdoc::clean","",37],[12,"Generic","","For parameterized types, so the consumer of the JSON don't go looking\nfor types which don't exist anywhere.",37],[12,"Self","","For references to self",37],[12,"Primitive","","Primitives are just the fixed-size numeric types (plus int/uint/float), and char.",37],[12,"Closure","","",37],[12,"Proc","","",37],[12,"BareFunction","","extern \"ABI\" fn",37],[12,"Tuple","","",37],[12,"Vector","","",37],[12,"FixedVector","","",37],[12,"Bottom","","aka TyBot",37],[12,"Unique","","",37],[12,"Managed","","",37],[12,"RawPointer","","",37],[12,"BorrowedRef","","",37],[11,"lifetime","rustdoc::clean::Type","",37],[11,"mutability","","",37],[11,"type_","","",37],[2,"PrimitiveType","rustdoc::clean",""],[12,"Int","","",38],[12,"I8","","",38],[12,"I16","","",38],[12,"I32","","",38],[12,"I64","","",38],[12,"Uint","","",38],[12,"U8","","",38],[12,"U16","","",38],[12,"U32","","",38],[12,"U64","","",38],[12,"F32","","",38],[12,"F64","","",38],[12,"Char","","",38],[12,"Bool","","",38],[12,"Unit","","",38],[12,"Str","","",38],[12,"Slice","","",38],[12,"PrimitiveTuple","","",38],[2,"TypeKind","",""],[12,"TypeEnum","","",39],[12,"TypeFunction","","",39],[12,"TypeModule","","",39],[12,"TypeStatic","","",39],[12,"TypeStruct","","",39],[12,"TypeTrait","","",39],[12,"TypeVariant","","",39],[12,"TypeTypedef","","",39],[2,"StructField","",""],[12,"HiddenStructField","","",40],[12,"TypedStructField","","",40],[2,"VariantKind","",""],[12,"CLikeVariant","","",41],[12,"TupleVariant","","",41],[12,"StructVariant","","",41],[2,"Mutability","",""],[12,"Mutable","","",42],[12,"Immutable","","",42],[2,"ViewItemInner","",""],[12,"ExternCrate","","",43],[12,"Import","","",43],[2,"ViewPath","",""],[12,"SimpleImport","","",44],[12,"GlobImport","","",44],[12,"ImportList","","",44],[4,"Visibility","",""],[5,"SCHEMA_VERSION","","A stable identifier to the particular version of JSON output.\nIncrement this when the `Crate` and related structures change."],[6,"Clean","",""],[9,"clean","","",45],[6,"ToSource","",""],[9,"to_src","","",46],[10,"clean","collections::vec","",47],[10,"clean","rustc::middle::subst","",48],[10,"clean","syntax::ptr","",49],[10,"clean","alloc::rc","",50],[10,"clean","core::option","",51],[10,"clean","syntax::owned_slice","",52],[10,"decode","rustdoc::clean","",0],[10,"encode","","",0],[10,"clone","","",0],[10,"decode","","",1],[10,"encode","","",1],[10,"clone","","",1],[10,"clean","rustc::metadata::cstore","",53],[10,"decode","rustdoc::clean","",2],[10,"encode","","",2],[10,"clone","","",2],[10,"doc_list","","Finds the `doc` attribute as a List and returns the list of attributes\nnested inside.",2],[10,"doc_value","","Finds the `doc` attribute as a NameValue and returns the corresponding\nvalue found.",2],[10,"is_hidden_from_doc","","",2],[10,"is_mod","","",2],[10,"is_trait","","",2],[10,"is_struct","","",2],[10,"is_enum","","",2],[10,"is_fn","","",2],[10,"decode","","",30],[10,"encode","","",30],[10,"clone","","",30],[10,"decode","","",3],[10,"encode","","",3],[10,"clone","","",3],[10,"eq","","",31],[10,"ne","","",31],[10,"decode","","",31],[10,"encode","","",31],[10,"clone","","",31],[10,"clean","","",54],[10,"clean","","",55],[10,"name","","",31],[10,"value_str","","",31],[10,"meta_item_list","","",31],[10,"eq","","",4],[10,"ne","","",4],[10,"decode","","",4],[10,"encode","","",4],[10,"clone","","",4],[10,"clean","syntax::ast","",56],[10,"clean","rustc::middle::ty","",57],[10,"eq","rustdoc::clean","",32],[10,"ne","","",32],[10,"decode","","",32],[10,"encode","","",32],[10,"clone","","",32],[10,"clean","syntax::ast","",58],[10,"clean","rustc::middle::ty","",59],[10,"clean","","",60],[10,"clean","","",61],[10,"clean","","",62],[10,"clean","rustc::middle::subst","",63],[10,"eq","rustdoc::clean","",64],[10,"ne","","",64],[10,"decode","","",64],[10,"encode","","",64],[10,"clone","","",64],[10,"get_ref","","",64],[10,"clean","syntax::ast","",65],[10,"clean","","",66],[10,"clean","rustc::middle::ty","",67],[10,"clean","","",68],[10,"eq","rustdoc::clean","",5],[10,"ne","","",5],[10,"decode","","",5],[10,"encode","","",5],[10,"clone","","",5],[10,"clean","syntax::ast","",69],[10,"decode","rustdoc::clean","",6],[10,"encode","","",6],[10,"clone","","",6],[10,"clean","syntax::ast","",70],[10,"decode","rustdoc::clean","",7],[10,"encode","","",7],[10,"clone","","",7],[10,"clean","syntax::ast","",71],[10,"eq","rustdoc::clean","",33],[10,"ne","","",33],[10,"decode","","",33],[10,"encode","","",33],[10,"clone","","",33],[10,"clean","syntax::ast","",72],[10,"decode","rustdoc::clean","",8],[10,"encode","","",8],[10,"clone","","",8],[10,"eq","","",9],[10,"ne","","",9],[10,"decode","","",9],[10,"encode","","",9],[10,"clone","","",9],[10,"clean","syntax::ast","",73],[10,"eq","rustdoc::clean","",10],[10,"ne","","",10],[10,"decode","","",10],[10,"encode","","",10],[10,"clone","","",10],[10,"eq","","",11],[10,"ne","","",11],[10,"decode","","",11],[10,"encode","","",11],[10,"clone","","",11],[10,"clean","syntax::ast","",74],[10,"eq","rustdoc::clean","",12],[10,"ne","","",12],[10,"decode","","",12],[10,"encode","","",12],[10,"clone","","",12],[10,"clean","syntax::ast","",75],[10,"eq","rustdoc::clean","",34],[10,"ne","","",34],[10,"decode","","",34],[10,"encode","","",34],[10,"clone","","",34],[10,"clean","syntax::ast","",76],[10,"decode","rustdoc::clean","",13],[10,"encode","","",13],[10,"clone","","",13],[10,"clean","syntax::ast","",77],[10,"decode","rustdoc::clean","",35],[10,"encode","","",35],[10,"clone","","",35],[10,"is_req","","",35],[10,"is_def","","",35],[10,"item","","",35],[10,"clean","syntax::ast","",78],[10,"decode","rustdoc::clean","",36],[10,"encode","","",36],[10,"clone","","",36],[10,"clean","syntax::ast","",79],[10,"clean","rustc::middle::ty","",80],[10,"clean","","",81],[10,"eq","rustdoc::clean","",37],[10,"ne","","",37],[10,"decode","","",37],[10,"encode","","",37],[10,"clone","","",37],[10,"hash","","",38],[10,"eq","","",38],[10,"ne","","",38],[10,"decode","","",38],[10,"encode","","",38],[10,"clone","","",38],[10,"decode","","",39],[10,"encode","","",39],[10,"clone","","",39],[10,"to_string","","",38],[10,"to_url_str","","",38],[10,"to_node_id","","Creates a rustdoc-specific node id for primitive types.",38],[10,"clean","syntax::ast","",82],[10,"clean","rustc::middle::ty","",83],[10,"decode","rustdoc::clean","",40],[10,"encode","","",40],[10,"clone","","",40],[10,"clean","","",84],[10,"clean","rustc::middle::ty","",85],[10,"clean","syntax::ast","",86],[10,"decode","rustdoc::clean","",14],[10,"encode","","",14],[10,"clone","","",14],[10,"decode","","",15],[10,"encode","","",15],[10,"clone","","",15],[10,"clean","syntax::ast","",87],[10,"decode","rustdoc::clean","",16],[10,"encode","","",16],[10,"clone","","",16],[10,"decode","","",17],[10,"encode","","",17],[10,"clone","","",17],[10,"clean","rustc::middle::ty","",88],[10,"decode","rustdoc::clean","",41],[10,"encode","","",41],[10,"clone","","",41],[10,"clean","syntax::ast","",89],[10,"decode","rustdoc::clean","",18],[10,"encode","","",18],[10,"clone","","",18],[10,"clean","syntax::codemap","",90],[10,"eq","rustdoc::clean","",19],[10,"ne","","",19],[10,"decode","","",19],[10,"encode","","",19],[10,"clone","","",19],[10,"clean","syntax::ast","",91],[10,"eq","rustdoc::clean","",20],[10,"ne","","",20],[10,"decode","","",20],[10,"encode","","",20],[10,"clone","","",20],[10,"clean","syntax::ast","",92],[10,"clean","","",93],[10,"clean","","",94],[10,"decode","rustdoc::clean","",21],[10,"encode","","",21],[10,"clone","","",21],[10,"eq","","",22],[10,"ne","","",22],[10,"decode","","",22],[10,"encode","","",22],[10,"clone","","",22],[10,"clean","syntax::ast","",95],[10,"decode","rustdoc::clean","",23],[10,"encode","","",23],[10,"clone","","",23],[10,"eq","","",42],[10,"ne","","",42],[10,"decode","","",42],[10,"encode","","",42],[10,"clone","","",42],[10,"fmt","","",42],[10,"clean","syntax::ast","",96],[10,"decode","rustdoc::clean","",24],[10,"encode","","",24],[10,"clone","","",24],[10,"decode","","",25],[10,"encode","","",25],[10,"clone","","",25],[10,"clean","syntax::ast","",97],[10,"decode","rustdoc::clean","",43],[10,"encode","","",43],[10,"clone","","",43],[10,"clean","syntax::ast","",98],[10,"decode","rustdoc::clean","",44],[10,"encode","","",44],[10,"clone","","",44],[10,"decode","","",26],[10,"encode","","",26],[10,"clone","","",26],[10,"clean","","",99],[10,"decode","","",27],[10,"encode","","",27],[10,"clone","","",27],[10,"clean","","",100],[10,"clean","syntax::ast","",101],[10,"clean","","",102],[10,"to_src","syntax::codemap","",90],[10,"decode","rustdoc::clean","",28],[10,"encode","","",28],[10,"clone","","",28],[10,"decode","","",29],[10,"encode","","",29],[10,"clone","","",29],[10,"clean","syntax::attr","",103],[10,"clean","syntax::ast","",104],[10,"clean","rustc::middle::ty","",105],[10,"clean","syntax::ast","",106],[0,"core","rustdoc",""],[1,"DocContext","rustdoc::core",""],[11,"krate","","",107],[11,"maybe_typed","","",107],[11,"src","","",107],[11,"external_paths","","",107],[11,"external_traits","","",107],[11,"external_typarams","","",107],[11,"inlined","","",107],[11,"populated_crate_impls","","",107],[1,"CrateAnalysis","",""],[11,"exported_items","","",108],[11,"public_items","","",108],[11,"external_paths","","",108],[11,"external_traits","","",108],[11,"external_typarams","","",108],[11,"inlined","","",108],[2,"MaybeTyped","","Are we generating documentation (`Typed`) or tests (`NotTyped`)?"],[12,"Typed","","",109],[12,"NotTyped","","",109],[3,"run_core","",""],[4,"ExternalPaths","",""],[4,"Externs","",""],[10,"sess","","",107],[10,"tcx_opt","","",107],[10,"tcx","","",107],[0,"doctree","rustdoc","This module is used to store stuff from Rust's AST in a more convenient\nmanner (and with prettier names) before cleaning."],[1,"Module","rustdoc::doctree",""],[11,"name","","",110],[11,"attrs","","",110],[11,"where_outer","","",110],[11,"where_inner","","",110],[11,"structs","","",110],[11,"enums","","",110],[11,"fns","","",110],[11,"mods","","",110],[11,"id","","",110],[11,"typedefs","","",110],[11,"statics","","",110],[11,"traits","","",110],[11,"vis","","",110],[11,"stab","","",110],[11,"impls","","",110],[11,"foreigns","","",110],[11,"view_items","","",110],[11,"macros","","",110],[11,"is_crate","","",110],[1,"Struct","",""],[11,"vis","","",111],[11,"stab","","",111],[11,"id","","",111],[11,"struct_type","","",111],[11,"name","","",111],[11,"generics","","",111],[11,"attrs","","",111],[11,"fields","","",111],[11,"whence","","",111],[1,"Enum","",""],[11,"vis","","",112],[11,"stab","","",112],[11,"variants","","",112],[11,"generics","","",112],[11,"attrs","","",112],[11,"id","","",112],[11,"whence","","",112],[11,"name","","",112],[1,"Variant","",""],[11,"name","","",113],[11,"attrs","","",113],[11,"kind","","",113],[11,"id","","",113],[11,"vis","","",113],[11,"stab","","",113],[11,"whence","","",113],[1,"Function","",""],[11,"decl","","",114],[11,"attrs","","",114],[11,"id","","",114],[11,"name","","",114],[11,"vis","","",114],[11,"stab","","",114],[11,"fn_style","","",114],[11,"whence","","",114],[11,"generics","","",114],[1,"Typedef","",""],[11,"ty","","",115],[11,"gen","","",115],[11,"name","","",115],[11,"id","","",115],[11,"attrs","","",115],[11,"whence","","",115],[11,"vis","","",115],[11,"stab","","",115],[1,"Static","",""],[11,"type_","","",116],[11,"mutability","","",116],[11,"expr","","",116],[11,"name","","",116],[11,"attrs","","",116],[11,"vis","","",116],[11,"stab","","",116],[11,"id","","",116],[11,"whence","","",116],[1,"Trait","",""],[11,"name","","",117],[11,"items","","",117],[11,"generics","","",117],[11,"bounds","","",117],[11,"attrs","","",117],[11,"id","","",117],[11,"whence","","",117],[11,"vis","","",117],[11,"stab","","",117],[1,"Impl","",""],[11,"generics","","",118],[11,"trait_","","",118],[11,"for_","","",118],[11,"items","","",118],[11,"attrs","","",118],[11,"whence","","",118],[11,"vis","","",118],[11,"stab","","",118],[11,"id","","",118],[1,"Macro","",""],[11,"name","","",119],[11,"id","","",119],[11,"attrs","","",119],[11,"whence","","",119],[11,"stab","","",119],[2,"StructType","",""],[12,"Plain","","A normal struct",120],[12,"Tuple","","A tuple struct",120],[12,"Newtype","","A newtype struct (tuple struct with one element)",120],[12,"Unit","","A unit struct",120],[2,"TypeBound","",""],[12,"RegionBound","","",121],[12,"TraitBound","","",121],[3,"struct_type_from_def","",""],[10,"new","","",110],[10,"decode","","",120],[10,"encode","","",120],[10,"clone","","",120],[10,"fmt","","",120],[0,"externalfiles","rustdoc",""],[1,"ExternalHtml","rustdoc::externalfiles",""],[11,"in_header","","",122],[11,"before_content","","",122],[11,"after_content","","",122],[3,"load_string","",""],[3,"load_external_files","",""],[10,"clone","","",122],[10,"load","","",122],[0,"fold","rustdoc",""],[6,"DocFolder","rustdoc::fold",""],[10,"fold_item","","",123],[10,"fold_item_recur","","don't override!",123],[10,"fold_mod","","",123],[10,"fold_crate","","",123],[0,"html","rustdoc",""],[0,"highlight","rustdoc::html","Basic html highlighting functionality"],[3,"highlight","rustdoc::html::highlight","Highlights some source code, returning the HTML output."],[0,"escape","rustdoc::html","HTML Escaping"],[1,"Escape","rustdoc::html::escape","Wrapper struct which will emit the HTML-escaped version of the contained\nstring when passed to a format string."],[10,"fmt","","",124],[0,"item_type","rustdoc::html","Item types."],[2,"ItemType","rustdoc::html::item_type","Item type. Corresponds to `clean::ItemEnum` variants."],[12,"Module","","",125],[12,"Struct","","",125],[12,"Enum","","",125],[12,"Function","","",125],[12,"Typedef","","",125],[12,"Static","","",125],[12,"Trait","","",125],[12,"Impl","","",125],[12,"ViewItem","","",125],[12,"TyMethod","","",125],[12,"Method","","",125],[12,"StructField","","",125],[12,"Variant","","",125],[12,"ForeignFunction","","",125],[12,"ForeignStatic","","",125],[12,"Macro","","",125],[12,"Primitive","","",125],[12,"AssociatedType","","",125],[3,"shortty","",""],[10,"clone","","",125],[10,"eq","","",125],[10,"ne","","",125],[10,"to_static_str","","",125],[10,"fmt","","",125],[10,"fmt","","",125],[0,"format","rustdoc::html","HTML formatting module"],[1,"VisSpace","rustdoc::html::format","Helper to render an optional visibility with a space after it (if the\nvisibility is preset)"],[1,"FnStyleSpace","","Similarly to VisSpace, this structure is used to render a function style with a\nspace after it."],[1,"Method","","Wrapper struct for properly emitting a method declaration."],[1,"MutableSpace","","Similar to VisSpace, but used for mutability"],[1,"RawMutableSpace","","Similar to VisSpace, but used for mutability"],[1,"Stability","","Wrapper struct for properly emitting the stability level."],[1,"ConciseStability","","Wrapper struct for emitting the stability level concisely."],[10,"get","","",126],[10,"get","","",127],[10,"fmt","rustdoc::clean","",5],[10,"fmt","","",64],[10,"fmt","","",32],[10,"fmt","","",19],[10,"fmt","","",37],[10,"fmt","","",11],[10,"fmt","","",10],[10,"fmt","rustdoc::html::format","",128],[10,"fmt","","",126],[10,"fmt","","",127],[10,"fmt","rustdoc::clean","",44],[10,"fmt","","",26],[10,"fmt","","",27],[10,"fmt","rustdoc::html::format","",129],[10,"fmt","","",130],[10,"fmt","","",131],[10,"fmt","","",132],[0,"layout","rustdoc::html",""],[1,"Layout","rustdoc::html::layout",""],[11,"logo","","",133],[11,"favicon","","",133],[11,"external_html","","",133],[11,"krate","","",133],[11,"playground_url","","",133],[1,"Page","",""],[11,"title","","",134],[11,"ty","","",134],[11,"root_path","","",134],[11,"description","","",134],[11,"keywords","","",134],[3,"render","",""],[3,"redirect","",""],[10,"clone","","",133],[0,"markdown","rustdoc::html","Markdown formatting for rustdoc"],[1,"Markdown","rustdoc::html::markdown","A unit struct which has the `fmt::Show` trait implemented. When\nformatted, this struct will emit the HTML corresponding to the rendered\nversion of the contained markdown string."],[1,"MarkdownWithToc","","A unit struct like `Markdown`, that renders the markdown with a\ntable of contents."],[3,"render","",""],[3,"find_testable_code","",""],[3,"reset_headers","","By default this markdown renderer generates anchors for each header in the\nrendered document. The anchor name is the contents of the header separated\nby hyphens, and a task-local map is used to disambiguate among duplicate\nheaders (numbers are appended)."],[5,"playground_krate","",""],[10,"fmt","","",135],[10,"fmt","","",136],[0,"render","rustdoc::html","Rustdoc's HTML Rendering module"],[1,"Context","rustdoc::html::render","Major driving force in all rustdoc rendering. This contains information\nabout where in the tree-like hierarchy rendering is occurring and controls\nhow the current page is being rendered."],[11,"current","","Current hierarchy of components leading down to what's currently being\nrendered",137],[11,"root_path","","String representation of how to get back to the root path of the 'doc/'\nfolder in terms of a relative URL.",137],[11,"dst","","The current destination folder of where HTML artifacts should be placed.\nThis changes as the context descends into the module hierarchy.",137],[11,"layout","","This describes the layout of each page, and is not modified after\ncreation of the context (contains info like the favicon and added html).",137],[11,"sidebar","","This map is a list of what should be displayed on the sidebar of the\ncurrent page. The key is the section header (traits, modules,\nfunctions), and the value is the list of containers belonging to this\nheader. This map will change depending on the surrounding context of the\npage.",137],[11,"include_sources","","This flag indicates whether [src] links should be generated or not. If\nthe source files are present in the html rendering, then this will be\n`true`.",137],[11,"render_redirect_pages","","A flag, which when turned off, will render pages which redirect to the\nreal location of an item. This is used to allow external links to\npublicly reused items to redirect to the right location.",137],[1,"Implementor","","Metadata about an implementor of a trait."],[1,"Impl","","Metadata about implementations for a type."],[1,"Cache","","This cache is used to store information about the `clean::Crate` being\nrendered in order to provide more useful documentation. This contains\ninformation like all implementors of a trait, all traits a type implements,\ndocumentation for all known traits, etc."],[11,"typarams","","Mapping of typaram ids to the name of the type parameter. This is used\nwhen pretty-printing a type (so pretty printing doesn't have to\npainfully maintain a context like this)",138],[11,"impls","","Maps a type id to all known implementations for that type. This is only\nrecognized for intra-crate `ResolvedPath` types, and is used to print\nout extra documentation on the page of an enum/struct.",138],[11,"paths","","Maintains a mapping of local crate node ids to the fully qualified name\nand \"short type description\" of that node. This is used when generating\nURLs when a type is being linked to. External paths are not located in\nthis map because the `External` type itself has all the information\nnecessary.",138],[11,"external_paths","","Similar to `paths`, but only holds external paths. This is only used for\ngenerating explicit hyperlinks to other crates.",138],[11,"traits","","This map contains information about all known traits of this crate.\nImplementations of a crate should inherit the documentation of the\nparent trait if no extra documentation is specified, and default methods\nshould show up in documentation about trait implementations.",138],[11,"implementors","","When rendering traits, it's often useful to be able to list all\nimplementors of the trait, and this mapping is exactly, that: a mapping\nof trait ids to the list of known implementors of the trait",138],[11,"extern_locations","","Cache of where external crate documentation can be found.",138],[11,"primitive_locations","","Cache of where documentation for primitives can be found.",138],[11,"inlined","","Set of definitions which have been inlined from external crates.",138],[2,"ExternalLocation","","Indicates where an external crate can be found."],[12,"Remote","","Remote URL root of the external crate",139],[12,"Local","","This external crate can be found in the local doc/ folder",139],[12,"Unknown","","The external crate could not be found.",139],[3,"run","","Generates the documentation for `crate` into the directory `dst`"],[5,"cache_key","",""],[5,"current_location_key","",""],[10,"clone","","",137],[10,"clone","","",140],[10,"fold_item","","",138],[0,"toc","rustdoc::html","Table-of-contents creation."],[1,"Toc","rustdoc::html::toc","A (recursive) table of contents"],[1,"TocEntry","",""],[1,"TocBuilder","","Progressive construction of a table of contents."],[10,"eq","","",141],[10,"ne","","",141],[10,"eq","","",142],[10,"ne","","",142],[10,"eq","","",143],[10,"ne","","",143],[10,"new","","",143],[10,"into_toc","","Convert into a true `Toc` struct.",143],[10,"push","","Push a level `level` heading into the appropriate place in the\nhierarchy, returning a string containing the section number in\n`<num>.<num>.<num>` format.",143],[10,"fmt","","",141],[0,"markdown","rustdoc",""],[3,"render","rustdoc::markdown","Render `input` (e.g. \"foo.md\") into an HTML file in `output`\n(e.g. output = \"bar\" => \"bar/foo.html\")."],[3,"test","","Run any tests/code examples in the markdown file `input`."],[0,"passes","rustdoc",""],[3,"strip_hidden","rustdoc::passes","Strip items marked `#[doc(hidden)]`"],[3,"strip_private","","Strip private items from the point of view of a crate or externally from a\ncrate, specified by the `xcrate` flag."],[3,"unindent_comments","",""],[3,"collapse_docs","",""],[3,"unindent","",""],[0,"plugins","rustdoc",""],[1,"PluginManager","rustdoc::plugins","Manages loading and running of plugins"],[11,"prefix","","The directory plugins will be loaded from",144],[4,"PluginJson","",""],[4,"PluginResult","",""],[4,"PluginCallback","",""],[10,"new","","Create a new plugin manager",144],[10,"load_plugin","","Load a plugin with the given name.",144],[10,"add_plugin","","Load a normal Rust function as a plugin.",144],[10,"run_plugins","","Run all the loaded plugins over the crate, returning their results",144],[0,"stability_summary","rustdoc","This module crawls a `clean::Crate` and produces a summarization of the\nstability levels within the crate. The summary contains the module\nhierarchy, with item counts for every stability level per module. A parent\nmodule's count includes its children's."],[1,"Counts","rustdoc::stability_summary","The counts for each stability level."],[11,"deprecated","","",145],[11,"experimental","","",145],[11,"unstable","","",145],[11,"stable","","",145],[11,"frozen","","",145],[11,"locked","","",145],[11,"unmarked","","No stability level, inherited or otherwise.",145],[1,"ModuleSummary","","A summarized module, which includes total counts and summarized children\nmodules."],[11,"name","","",146],[11,"counts","","",146],[11,"submodules","","",146],[3,"build","","Summarizes the stability levels in a crate."],[10,"eq","","",145],[10,"ne","","",145],[10,"decode","","",145],[10,"encode","","",145],[10,"zero","","",145],[10,"is_zero","","",145],[10,"add","","",145],[10,"total","","",145],[10,"eq","","",146],[10,"ne","","",146],[10,"decode","","",146],[10,"encode","","",146],[10,"partial_cmp","","",146],[10,"cmp","","",146],[0,"visit_ast","rustdoc","Rust AST Visitor. Extracts useful information and massages it into a form\nusable for clean"],[1,"RustdocVisitor","rustdoc::visit_ast",""],[11,"module","","",147],[11,"attrs","","",147],[11,"cx","","",147],[11,"analysis","","",147],[10,"new","","",147],[10,"visit","","",147],[10,"visit_struct_def","","",147],[10,"visit_enum_def","","",147],[10,"visit_fn","","",147],[10,"visit_mod_contents","","",147],[10,"visit_view_item","","",147],[10,"visit_item","","",147],[0,"test","rustdoc",""],[1,"Collector","rustdoc::test",""],[11,"tests","","",148],[3,"run","",""],[3,"maketest","",""],[10,"new","","",148],[10,"add_test","","",148],[10,"register_header","","",148],[10,"fold_item","","",148],[5,"analysiskey","rustdoc",""],[10,"clean","rustdoc::visit_ast","",147],[10,"clean","rustdoc::doctree","",110],[10,"clean","","",114],[10,"clean","","",117],[10,"clean","","",111],[10,"clean","","",112],[10,"clean","","",113],[10,"clean","","",115],[10,"clean","","",116],[10,"clean","","",118],[10,"clean","","",119],[10,"fmt","rustdoc::stability_summary","",146]],"paths":[[1,"Crate"],[1,"ExternalCrate"],[1,"Item"],[1,"Module"],[1,"TyParam"],[1,"Generics"],[1,"Method"],[1,"TyMethod"],[1,"Function"],[1,"ClosureDecl"],[1,"FnDecl"],[1,"Arguments"],[1,"Argument"],[1,"Trait"],[1,"Struct"],[1,"VariantStruct"],[1,"Enum"],[1,"Variant"],[1,"Span"],[1,"Path"],[1,"PathSegment"],[1,"Typedef"],[1,"BareFunctionDecl"],[1,"Static"],[1,"Impl"],[1,"ViewItem"],[1,"ImportSource"],[1,"ViewListIdent"],[1,"Macro"],[1,"Stability"],[2,"ItemEnum"],[2,"Attribute"],[2,"TyParamBound"],[2,"SelfTy"],[2,"RetStyle"],[2,"TraitMethod"],[2,"ImplMethod"],[2,"Type"],[2,"PrimitiveType"],[2,"TypeKind"],[2,"StructField"],[2,"VariantKind"],[2,"Mutability"],[2,"ViewItemInner"],[2,"ViewPath"],[6,"Clean"],[6,"ToSource"],[1,"Vec"],[1,"VecPerParamSpace"],[1,"P"],[1,"Rc"],[2,"Option"],[1,"OwnedSlice"],[1,"crate_metadata"],[4,"MetaItem"],[4,"Attribute"],[1,"TyParam"],[1,"TypeParameterDef"],[2,"TyParamBound"],[1,"ExistentialBounds"],[2,"BuiltinBound"],[1,"TraitRef"],[1,"ParamBounds"],[1,"Substs"],[1,"Lifetime"],[1,"Lifetime"],[1,"LifetimeDef"],[1,"RegionParameterDef"],[2,"Region"],[1,"Generics"],[1,"Method"],[1,"TypeMethod"],[2,"ExplicitSelf_"],[1,"ClosureTy"],[1,"FnDecl"],[1,"Arg"],[2,"RetStyle"],[1,"TraitRef"],[2,"TraitItem"],[2,"ImplItem"],[1,"Method"],[2,"ImplOrTraitItem"],[1,"Ty"],[1,"t"],[4,"StructField"],[1,"field_ty"],[2,"Visibility"],[1,"StructDef"],[1,"VariantInfo"],[2,"VariantKind"],[1,"Span"],[1,"Path"],[1,"PathSegment"],[1,"Ident"],[1,"Name"],[1,"BareFnTy"],[2,"Mutability"],[1,"ViewItem"],[2,"ViewItem_"],[4,"ViewPath"],[4,"PathListItem"],[1,"ForeignMod"],[1,"ForeignItem"],[1,"Stability"],[1,"AssociatedType"],[1,"AssociatedType"],[1,"Typedef"],[1,"DocContext"],[1,"CrateAnalysis"],[2,"MaybeTyped"],[1,"Module"],[1,"Struct"],[1,"Enum"],[1,"Variant"],[1,"Function"],[1,"Typedef"],[1,"Static"],[1,"Trait"],[1,"Impl"],[1,"Macro"],[2,"StructType"],[2,"TypeBound"],[1,"ExternalHtml"],[6,"DocFolder"],[1,"Escape"],[2,"ItemType"],[1,"VisSpace"],[1,"FnStyleSpace"],[1,"Method"],[1,"MutableSpace"],[1,"RawMutableSpace"],[1,"Stability"],[1,"ConciseStability"],[1,"Layout"],[1,"Page"],[1,"Markdown"],[1,"MarkdownWithToc"],[1,"Context"],[1,"Cache"],[2,"ExternalLocation"],[1,"Impl"],[1,"Toc"],[1,"TocEntry"],[1,"TocBuilder"],[1,"PluginManager"],[1,"Counts"],[1,"ModuleSummary"],[1,"RustdocVisitor"],[1,"Collector"]]};

searchIndex['unicode'] = {"items":[[0,"","unicode","The Unicode Library"],[0,"regex","",""],[5,"UNICODE_CLASSES","unicode::regex",""],[5,"PERLD","",""],[5,"PERLS","",""],[5,"PERLW","",""],[0,"char","unicode","Character manipulation (`char` type, Unicode Scalar Value)"],[3,"decompose_canonical","unicode::char","Compute canonical Unicode decomposition for character"],[3,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character"],[3,"compose","",""],[3,"canonical_combining_class","",""],[3,"is_alphabetic","","Returns whether the specified `char` is considered a Unicode alphabetic\ncode point"],[3,"is_XID_start","","Returns whether the specified `char` satisfies the 'XID_Start' Unicode property"],[3,"is_XID_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property"],[3,"is_lowercase","","\nIndicates whether a `char` is in lower case"],[3,"is_uppercase","","\nIndicates whether a `char` is in upper case"],[3,"is_whitespace","","\nIndicates whether a `char` is whitespace"],[3,"is_alphanumeric","","\nIndicates whether a `char` is alphanumeric"],[3,"is_control","","\nIndicates whether a `char` is a control code point"],[3,"is_digit","","Indicates whether the `char` is numeric (Nd, Nl, or No)"],[3,"to_uppercase","","Convert a char to its uppercase equivalent"],[3,"to_lowercase","","Convert a char to its lowercase equivalent"],[3,"width","","Returns this character's displayed width in columns, or `None` if it is a\ncontrol character other than `'\\x00'`."],[6,"UnicodeChar","","Useful functions for Unicode characters."],[9,"is_alphabetic","","Returns whether the specified character is considered a Unicode\nalphabetic code point.",0],[9,"is_XID_start","","Returns whether the specified character satisfies the 'XID_Start'\nUnicode property.",0],[9,"is_XID_continue","","Returns whether the specified `char` satisfies the 'XID_Continue'\nUnicode property.",0],[9,"is_lowercase","","Indicates whether a character is in lowercase.",0],[9,"is_uppercase","","Indicates whether a character is in uppercase.",0],[9,"is_whitespace","","Indicates whether a character is whitespace.",0],[9,"is_alphanumeric","","Indicates whether a character is alphanumeric.",0],[9,"is_control","","Indicates whether a character is a control code point.",0],[9,"is_digit","","Indicates whether the character is numeric (Nd, Nl, or No).",0],[9,"to_lowercase","","Converts a character to its lowercase equivalent.",0],[9,"to_uppercase","","Converts a character to its uppercase equivalent.",0],[9,"width","","Returns this character's displayed width in columns, or `None` if it is a\ncontrol character other than `'\\x00'`.",0],[5,"MAX","",""],[3,"from_u32","","Converts from `u32` to a `char`"],[3,"is_digit_radix","","\nChecks if a `char` parses as a numeric digit in the given radix"],[3,"to_digit","","\nConverts a `char` to the corresponding digit"],[3,"from_digit","","\nConverts a number to the character representing it"],[3,"escape_unicode","","\nReturns the hexadecimal Unicode escape of a `char`"],[3,"escape_default","","\nReturns a 'default' ASCII and C++11-like literal escape of a `char`"],[3,"len_utf8_bytes","","Returns the amount of bytes this `char` would need if encoded in UTF-8"],[6,"Char","","Basic `char` manipulations."],[9,"is_digit_radix","","Checks if a `char` parses as a numeric digit in the given radix.",1],[9,"to_digit","","Converts a character to the corresponding digit.",1],[9,"from_digit","","Converts a number to the character representing it.",1],[9,"escape_unicode","","Returns the hexadecimal Unicode escape of a character.",1],[9,"escape_default","","Returns a 'default' ASCII and C++11-like literal escape of a\ncharacter.",1],[9,"len_utf8_bytes","","Returns the amount of bytes this character would need if encoded in\nUTF-8.",1],[9,"encode_utf8","","Encodes this character as UTF-8 into the provided byte buffer,\nand then returns the number of bytes written.",1],[9,"encode_utf16","","Encodes this character as UTF-16 into the provided `u16` buffer,\nand then returns the number of `u16`s written.",1],[0,"str","unicode",""],[1,"Graphemes","unicode::str","External iterator for a string's\n[grapheme clusters](http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries)."],[1,"GraphemeIndices","","External iterator for grapheme clusters and byte offsets."],[4,"Words","","An iterator over the words of a string, separated by a sequence of whitespace"],[6,"UnicodeStrSlice","","Methods for Unicode string slices"],[9,"graphemes","","Returns an iterator over the\n[grapheme clusters](http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries)\nof the string.",2],[9,"grapheme_indices","","Returns an iterator over the grapheme clusters of self and their byte offsets.\nSee `graphemes()` method for more information.",2],[9,"words","","An iterator over the words of a string (subsequences separated\nby any sequence of whitespace). Sequences of whitespace are\ncollapsed, so empty \"words\" are not included.",2],[9,"is_whitespace","","Returns true if the string contains only whitespace.",2],[9,"is_alphanumeric","","Returns true if the string contains only alphanumeric code\npoints.",2],[9,"width","","Returns a string's displayed width in columns, treating control\ncharacters as zero-width.",2],[9,"trim","","Returns a string with leading and trailing whitespace removed.",2],[9,"trim_left","","Returns a string with leading whitespace removed.",2],[9,"trim_right","","Returns a string with trailing whitespace removed.",2],[10,"reverse","core::cmp","Reverse the `Ordering`, so that `Less` becomes `Greater` and\nvice versa.",3],[10,"fmt","core::num","",4],[10,"eq","","",4],[10,"ne","","",4],[10,"ne","","",4],[10,"fmt","core::intrinsics","",5],[10,"assert_receiver_is_total_eq","","",5],[10,"eq","","",5],[10,"ne","","",5],[10,"ne","","",5],[10,"of","","Returns the `TypeId` of the type this generic function has been instantiated with",5],[10,"hash","","",5],[10,"clone","core::kinds::marker","",6],[10,"clone_from","","",6],[10,"eq","","",6],[10,"ne","","",6],[10,"ne","","",6],[10,"clone","","",7],[10,"clone_from","","",7],[10,"eq","","",7],[10,"ne","","",7],[10,"ne","","",7],[10,"clone","","",8],[10,"clone_from","","",8],[10,"eq","","",8],[10,"ne","","",8],[10,"ne","","",8],[10,"clone","","",9],[10,"clone_from","","",9],[10,"eq","","",9],[10,"ne","","",9],[10,"ne","","",9],[10,"clone","","",10],[10,"clone_from","","",10],[10,"eq","","",10],[10,"ne","","",10],[10,"ne","","",10],[10,"clone","","",11],[10,"clone_from","","",11],[10,"eq","","",11],[10,"ne","","",11],[10,"ne","","",11],[10,"clone","","",12],[10,"clone_from","","",12],[10,"eq","","",12],[10,"ne","","",12],[10,"ne","","",12],[10,"clone","","",13],[10,"clone_from","","",13],[10,"eq","","",13],[10,"ne","","",13],[10,"ne","","",13],[10,"clone","","",14],[10,"clone_from","","",14],[10,"eq","","",14],[10,"ne","","",14],[10,"ne","","",14],[10,"clone","","",15],[10,"clone_from","","",15],[10,"eq","","",15],[10,"ne","","",15],[10,"ne","","",15],[10,"fmt","core::cmp","",3],[10,"eq","","",3],[10,"ne","","",3],[10,"ne","","",3],[10,"clone","","",3],[10,"clone_from","","",3],[10,"assert_receiver_is_total_eq","","",3],[10,"cmp","","",3],[10,"partial_cmp","","",3],[10,"lt","","",3],[10,"le","","",3],[10,"gt","","",3],[10,"ge","","",3],[10,"new","core::atomic","Create a new `AtomicBool`",16],[10,"load","","Load the value",16],[10,"store","","Store the value",16],[10,"swap","","Store a value, returning the old value",16],[10,"compare_and_swap","","If the current value is the same as expected, store a new value",16],[10,"fetch_and","","A logical \"and\" operation",16],[10,"fetch_nand","","A logical \"nand\" operation",16],[10,"fetch_or","","A logical \"or\" operation",16],[10,"fetch_xor","","A logical \"xor\" operation",16],[10,"new","","Create a new `AtomicInt`",17],[10,"load","","Load the value",17],[10,"store","","Store the value",17],[10,"swap","","Store a value, returning the old value",17],[10,"compare_and_swap","","If the current value is the same as expected, store a new value",17],[10,"fetch_add","","Add to the current value, returning the previous",17],[10,"fetch_sub","","Subtract from the current value, returning the previous",17],[10,"fetch_and","","Bitwise and with the current value, returning the previous",17],[10,"fetch_or","","Bitwise or with the current value, returning the previous",17],[10,"fetch_xor","","Bitwise xor with the current value, returning the previous",17],[10,"new","","Create a new `AtomicUint`",18],[10,"load","","Load the value",18],[10,"store","","Store the value",18],[10,"swap","","Store a value, returning the old value",18],[10,"compare_and_swap","","If the current value is the same as expected, store a new value",18],[10,"fetch_add","","Add to the current value, returning the previous",18],[10,"fetch_sub","","Subtract from the current value, returning the previous",18],[10,"fetch_and","","Bitwise and with the current value, returning the previous",18],[10,"fetch_or","","Bitwise or with the current value, returning the previous",18],[10,"fetch_xor","","Bitwise xor with the current value, returning the previous",18],[10,"new","","Create a new `AtomicPtr`",19],[10,"load","","Load the value",19],[10,"store","","Store the value",19],[10,"swap","","Store a value, returning the old value",19],[10,"compare_and_swap","","If the current value is the same as expected, store a new value",19],[10,"new","core::cell","Creates a new `Cell` containing the given value.",20],[10,"get","","Returns a copy of the contained value.",20],[10,"set","","Sets the contained value.",20],[10,"clone","","",20],[10,"clone_from","","",20],[10,"eq","","",20],[10,"ne","","",20],[10,"new","","Create a new `RefCell` containing `value`",21],[10,"unwrap","","Consumes the `RefCell`, returning the wrapped value.",21],[10,"try_borrow","","Attempts to immutably borrow the wrapped value.",21],[10,"borrow","","Immutably borrows the wrapped value.",21],[10,"try_borrow_mut","","Mutably borrows the wrapped value.",21],[10,"borrow_mut","","Mutably borrows the wrapped value.",21],[10,"clone","","",21],[10,"clone_from","","",21],[10,"eq","","",21],[10,"ne","","",21],[10,"drop","","",22],[10,"deref","","",22],[10,"drop","","",23],[10,"deref","","",23],[10,"deref_mut","","",23],[10,"new","","Construct a new instance of `UnsafeCell` which will wrap the specified\nvalue.",24],[10,"get","","Gets a mutable pointer to the wrapped value.",24],[10,"unwrap","","Unwraps the value",24],[10,"drop","core::finally","",25],[10,"rposition","core::iter","",26],[10,"len","","",26],[10,"rposition","","",27],[10,"len","","",27],[10,"rposition","","",28],[10,"len","","",28],[10,"rposition","","",29],[10,"len","","",29],[10,"rposition","","",30],[10,"len","","",30],[10,"clone","","",28],[10,"clone_from","","",28],[10,"next","","",28],[10,"size_hint","","",28],[10,"size_hint","","",28],[10,"chain","","",28],[10,"zip","","",28],[10,"map","","",28],[10,"filter","","",28],[10,"filter_map","","",28],[10,"enumerate","","",28],[10,"peekable","","",28],[10,"skip_while","","",28],[10,"take_while","","",28],[10,"skip","","",28],[10,"take","","",28],[10,"scan","","",28],[10,"flat_map","","",28],[10,"fuse","","",28],[10,"inspect","","",28],[10,"by_ref","","",28],[10,"advance","","",28],[10,"collect","","",28],[10,"nth","","",28],[10,"last","","",28],[10,"fold","","",28],[10,"count","","",28],[10,"all","","",28],[10,"any","","",28],[10,"find","","",28],[10,"position","","",28],[10,"max_by","","",28],[10,"min_by","","",28],[10,"next_back","","",28],[10,"rev","","",28],[10,"indexable","","",28],[10,"idx","","",28],[10,"next","","",31],[10,"size_hint","","",31],[10,"size_hint","","",31],[10,"chain","","",31],[10,"zip","","",31],[10,"map","","",31],[10,"filter","","",31],[10,"filter_map","","",31],[10,"enumerate","","",31],[10,"peekable","","",31],[10,"skip_while","","",31],[10,"take_while","","",31],[10,"skip","","",31],[10,"take","","",31],[10,"scan","","",31],[10,"flat_map","","",31],[10,"fuse","","",31],[10,"inspect","","",31],[10,"by_ref","","",31],[10,"advance","","",31],[10,"collect","","",31],[10,"nth","","",31],[10,"last","","",31],[10,"fold","","",31],[10,"count","","",31],[10,"all","","",31],[10,"any","","",31],[10,"find","","",31],[10,"position","","",31],[10,"max_by","","",31],[10,"min_by","","",31],[10,"next_back","","",31],[10,"rev","","",31],[10,"fmt","","",32],[10,"eq","","",32],[10,"ne","","",32],[10,"ne","","",32],[10,"clone","","",32],[10,"clone_from","","",32],[10,"into_option","","`into_option` creates an `Option` of type `(T,T)`. The returned `Option` has variant\n`None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise variant\n`Some(x,y)` is returned where `x <= y`. If `MinMaxResult` has variant `OneElement(x)`,\nperforming this operation will make one clone of `x`.",32],[10,"clone","","",33],[10,"clone_from","","",33],[10,"next","","",33],[10,"size_hint","","",33],[10,"size_hint","","",33],[10,"chain","","",33],[10,"zip","","",33],[10,"map","","",33],[10,"filter","","",33],[10,"filter_map","","",33],[10,"enumerate","","",33],[10,"peekable","","",33],[10,"skip_while","","",33],[10,"take_while","","",33],[10,"skip","","",33],[10,"take","","",33],[10,"scan","","",33],[10,"flat_map","","",33],[10,"fuse","","",33],[10,"inspect","","",33],[10,"by_ref","","",33],[10,"advance","","",33],[10,"collect","","",33],[10,"nth","","",33],[10,"last","","",33],[10,"fold","","",33],[10,"count","","",33],[10,"all","","",33],[10,"any","","",33],[10,"find","","",33],[10,"position","","",33],[10,"max_by","","",33],[10,"min_by","","",33],[10,"indexable","","",33],[10,"idx","","",33],[10,"clone","","",34],[10,"clone_from","","",34],[10,"next","","",34],[10,"size_hint","","",34],[10,"size_hint","","",34],[10,"chain","","",34],[10,"zip","","",34],[10,"map","","",34],[10,"filter","","",34],[10,"filter_map","","",34],[10,"enumerate","","",34],[10,"peekable","","",34],[10,"skip_while","","",34],[10,"take_while","","",34],[10,"skip","","",34],[10,"take","","",34],[10,"scan","","",34],[10,"flat_map","","",34],[10,"fuse","","",34],[10,"inspect","","",34],[10,"by_ref","","",34],[10,"advance","","",34],[10,"collect","","",34],[10,"nth","","",34],[10,"last","","",34],[10,"fold","","",34],[10,"count","","",34],[10,"all","","",34],[10,"any","","",34],[10,"find","","",34],[10,"position","","",34],[10,"max_by","","",34],[10,"min_by","","",34],[10,"next_back","","",34],[10,"rev","","",34],[10,"indexable","","",34],[10,"idx","","",34],[10,"clone","","",30],[10,"clone_from","","",30],[10,"next","","",30],[10,"size_hint","","",30],[10,"size_hint","","",30],[10,"chain","","",30],[10,"zip","","",30],[10,"map","","",30],[10,"filter","","",30],[10,"filter_map","","",30],[10,"enumerate","","",30],[10,"peekable","","",30],[10,"skip_while","","",30],[10,"take_while","","",30],[10,"skip","","",30],[10,"take","","",30],[10,"scan","","",30],[10,"flat_map","","",30],[10,"fuse","","",30],[10,"inspect","","",30],[10,"by_ref","","",30],[10,"advance","","",30],[10,"collect","","",30],[10,"nth","","",30],[10,"last","","",30],[10,"fold","","",30],[10,"count","","",30],[10,"all","","",30],[10,"any","","",30],[10,"find","","",30],[10,"position","","",30],[10,"max_by","","",30],[10,"min_by","","",30],[10,"next_back","","",30],[10,"rev","","",30],[10,"indexable","","",30],[10,"idx","","",30],[10,"next","","",29],[10,"size_hint","","",29],[10,"size_hint","","",29],[10,"chain","","",29],[10,"zip","","",29],[10,"map","","",29],[10,"filter","","",29],[10,"filter_map","","",29],[10,"enumerate","","",29],[10,"peekable","","",29],[10,"skip_while","","",29],[10,"take_while","","",29],[10,"skip","","",29],[10,"take","","",29],[10,"scan","","",29],[10,"flat_map","","",29],[10,"fuse","","",29],[10,"inspect","","",29],[10,"by_ref","","",29],[10,"advance","","",29],[10,"collect","","",29],[10,"nth","","",29],[10,"last","","",29],[10,"fold","","",29],[10,"count","","",29],[10,"all","","",29],[10,"any","","",29],[10,"find","","",29],[10,"position","","",29],[10,"max_by","","",29],[10,"min_by","","",29],[10,"next_back","","",29],[10,"rev","","",29],[10,"indexable","","",29],[10,"idx","","",29],[10,"next","","",35],[10,"size_hint","","",35],[10,"size_hint","","",35],[10,"chain","","",35],[10,"zip","","",35],[10,"map","","",35],[10,"filter","","",35],[10,"filter_map","","",35],[10,"enumerate","","",35],[10,"peekable","","",35],[10,"skip_while","","",35],[10,"take_while","","",35],[10,"skip","","",35],[10,"take","","",35],[10,"scan","","",35],[10,"flat_map","","",35],[10,"fuse","","",35],[10,"inspect","","",35],[10,"by_ref","","",35],[10,"advance","","",35],[10,"collect","","",35],[10,"nth","","",35],[10,"last","","",35],[10,"fold","","",35],[10,"count","","",35],[10,"all","","",35],[10,"any","","",35],[10,"find","","",35],[10,"position","","",35],[10,"max_by","","",35],[10,"min_by","","",35],[10,"next_back","","",35],[10,"rev","","",35],[10,"next","","",36],[10,"size_hint","","",36],[10,"size_hint","","",36],[10,"chain","","",36],[10,"zip","","",36],[10,"map","","",36],[10,"filter","","",36],[10,"filter_map","","",36],[10,"enumerate","","",36],[10,"peekable","","",36],[10,"skip_while","","",36],[10,"take_while","","",36],[10,"skip","","",36],[10,"take","","",36],[10,"scan","","",36],[10,"flat_map","","",36],[10,"fuse","","",36],[10,"inspect","","",36],[10,"by_ref","","",36],[10,"advance","","",36],[10,"collect","","",36],[10,"nth","","",36],[10,"last","","",36],[10,"fold","","",36],[10,"count","","",36],[10,"all","","",36],[10,"any","","",36],[10,"find","","",36],[10,"position","","",36],[10,"max_by","","",36],[10,"min_by","","",36],[10,"next_back","","",36],[10,"rev","","",36],[10,"clone","","",26],[10,"clone_from","","",26],[10,"next","","",26],[10,"size_hint","","",26],[10,"size_hint","","",26],[10,"chain","","",26],[10,"zip","","",26],[10,"map","","",26],[10,"filter","","",26],[10,"filter_map","","",26],[10,"enumerate","","",26],[10,"peekable","","",26],[10,"skip_while","","",26],[10,"take_while","","",26],[10,"skip","","",26],[10,"take","","",26],[10,"scan","","",26],[10,"flat_map","","",26],[10,"fuse","","",26],[10,"inspect","","",26],[10,"by_ref","","",26],[10,"advance","","",26],[10,"collect","","",26],[10,"nth","","",26],[10,"last","","",26],[10,"fold","","",26],[10,"count","","",26],[10,"all","","",26],[10,"any","","",26],[10,"find","","",26],[10,"position","","",26],[10,"max_by","","",26],[10,"min_by","","",26],[10,"next_back","","",26],[10,"rev","","",26],[10,"indexable","","",26],[10,"idx","","",26],[10,"next","","",37],[10,"size_hint","","",37],[10,"size_hint","","",37],[10,"chain","","",37],[10,"zip","","",37],[10,"map","","",37],[10,"filter","","",37],[10,"filter_map","","",37],[10,"enumerate","","",37],[10,"peekable","","",37],[10,"skip_while","","",37],[10,"take_while","","",37],[10,"skip","","",37],[10,"take","","",37],[10,"scan","","",37],[10,"flat_map","","",37],[10,"fuse","","",37],[10,"inspect","","",37],[10,"by_ref","","",37],[10,"advance","","",37],[10,"collect","","",37],[10,"nth","","",37],[10,"last","","",37],[10,"fold","","",37],[10,"count","","",37],[10,"all","","",37],[10,"any","","",37],[10,"find","","",37],[10,"position","","",37],[10,"max_by","","",37],[10,"min_by","","",37],[10,"peek","","Return a reference to the next element of the iterator with out advancing it,\nor None if the iterator is exhausted.",37],[10,"is_empty","","Check whether peekable iterator is empty or not.",37],[10,"next","","",38],[10,"size_hint","","",38],[10,"size_hint","","",38],[10,"chain","","",38],[10,"zip","","",38],[10,"map","","",38],[10,"filter","","",38],[10,"filter_map","","",38],[10,"enumerate","","",38],[10,"peekable","","",38],[10,"skip_while","","",38],[10,"take_while","","",38],[10,"skip","","",38],[10,"take","","",38],[10,"scan","","",38],[10,"flat_map","","",38],[10,"fuse","","",38],[10,"inspect","","",38],[10,"by_ref","","",38],[10,"advance","","",38],[10,"collect","","",38],[10,"nth","","",38],[10,"last","","",38],[10,"fold","","",38],[10,"count","","",38],[10,"all","","",38],[10,"any","","",38],[10,"find","","",38],[10,"position","","",38],[10,"max_by","","",38],[10,"min_by","","",38],[10,"next","","",39],[10,"size_hint","","",39],[10,"size_hint","","",39],[10,"chain","","",39],[10,"zip","","",39],[10,"map","","",39],[10,"filter","","",39],[10,"filter_map","","",39],[10,"enumerate","","",39],[10,"peekable","","",39],[10,"skip_while","","",39],[10,"take_while","","",39],[10,"skip","","",39],[10,"take","","",39],[10,"scan","","",39],[10,"flat_map","","",39],[10,"fuse","","",39],[10,"inspect","","",39],[10,"by_ref","","",39],[10,"advance","","",39],[10,"collect","","",39],[10,"nth","","",39],[10,"last","","",39],[10,"fold","","",39],[10,"count","","",39],[10,"all","","",39],[10,"any","","",39],[10,"find","","",39],[10,"position","","",39],[10,"max_by","","",39],[10,"min_by","","",39],[10,"clone","","",40],[10,"clone_from","","",40],[10,"next","","",40],[10,"size_hint","","",40],[10,"size_hint","","",40],[10,"chain","","",40],[10,"zip","","",40],[10,"map","","",40],[10,"filter","","",40],[10,"filter_map","","",40],[10,"enumerate","","",40],[10,"peekable","","",40],[10,"skip_while","","",40],[10,"take_while","","",40],[10,"skip","","",40],[10,"take","","",40],[10,"scan","","",40],[10,"flat_map","","",40],[10,"fuse","","",40],[10,"inspect","","",40],[10,"by_ref","","",40],[10,"advance","","",40],[10,"collect","","",40],[10,"nth","","",40],[10,"last","","",40],[10,"fold","","",40],[10,"count","","",40],[10,"all","","",40],[10,"any","","",40],[10,"find","","",40],[10,"position","","",40],[10,"max_by","","",40],[10,"min_by","","",40],[10,"indexable","","",40],[10,"idx","","",40],[10,"clone","","",41],[10,"clone_from","","",41],[10,"next","","",41],[10,"size_hint","","",41],[10,"size_hint","","",41],[10,"chain","","",41],[10,"zip","","",41],[10,"map","","",41],[10,"filter","","",41],[10,"filter_map","","",41],[10,"enumerate","","",41],[10,"peekable","","",41],[10,"skip_while","","",41],[10,"take_while","","",41],[10,"skip","","",41],[10,"take","","",41],[10,"scan","","",41],[10,"flat_map","","",41],[10,"fuse","","",41],[10,"inspect","","",41],[10,"by_ref","","",41],[10,"advance","","",41],[10,"collect","","",41],[10,"nth","","",41],[10,"last","","",41],[10,"fold","","",41],[10,"count","","",41],[10,"all","","",41],[10,"any","","",41],[10,"find","","",41],[10,"position","","",41],[10,"max_by","","",41],[10,"min_by","","",41],[10,"indexable","","",41],[10,"idx","","",41],[10,"next","","",42],[10,"size_hint","","",42],[10,"size_hint","","",42],[10,"chain","","",42],[10,"zip","","",42],[10,"map","","",42],[10,"filter","","",42],[10,"filter_map","","",42],[10,"enumerate","","",42],[10,"peekable","","",42],[10,"skip_while","","",42],[10,"take_while","","",42],[10,"skip","","",42],[10,"take","","",42],[10,"scan","","",42],[10,"flat_map","","",42],[10,"fuse","","",42],[10,"inspect","","",42],[10,"by_ref","","",42],[10,"advance","","",42],[10,"collect","","",42],[10,"nth","","",42],[10,"last","","",42],[10,"fold","","",42],[10,"count","","",42],[10,"all","","",42],[10,"any","","",42],[10,"find","","",42],[10,"position","","",42],[10,"max_by","","",42],[10,"min_by","","",42],[10,"next","","",43],[10,"size_hint","","",43],[10,"size_hint","","",43],[10,"chain","","",43],[10,"zip","","",43],[10,"map","","",43],[10,"filter","","",43],[10,"filter_map","","",43],[10,"enumerate","","",43],[10,"peekable","","",43],[10,"skip_while","","",43],[10,"take_while","","",43],[10,"skip","","",43],[10,"take","","",43],[10,"scan","","",43],[10,"flat_map","","",43],[10,"fuse","","",43],[10,"inspect","","",43],[10,"by_ref","","",43],[10,"advance","","",43],[10,"collect","","",43],[10,"nth","","",43],[10,"last","","",43],[10,"fold","","",43],[10,"count","","",43],[10,"all","","",43],[10,"any","","",43],[10,"find","","",43],[10,"position","","",43],[10,"max_by","","",43],[10,"min_by","","",43],[10,"next_back","","",43],[10,"rev","","",43],[10,"clone","","",44],[10,"clone_from","","",44],[10,"next","","",44],[10,"size_hint","","",44],[10,"size_hint","","",44],[10,"chain","","",44],[10,"zip","","",44],[10,"map","","",44],[10,"filter","","",44],[10,"filter_map","","",44],[10,"enumerate","","",44],[10,"peekable","","",44],[10,"skip_while","","",44],[10,"take_while","","",44],[10,"skip","","",44],[10,"take","","",44],[10,"scan","","",44],[10,"flat_map","","",44],[10,"fuse","","",44],[10,"inspect","","",44],[10,"by_ref","","",44],[10,"advance","","",44],[10,"collect","","",44],[10,"nth","","",44],[10,"last","","",44],[10,"fold","","",44],[10,"count","","",44],[10,"all","","",44],[10,"any","","",44],[10,"find","","",44],[10,"position","","",44],[10,"max_by","","",44],[10,"min_by","","",44],[10,"next_back","","",44],[10,"rev","","",44],[10,"indexable","","",44],[10,"idx","","",44],[10,"reset_fuse","","Resets the fuse such that the next call to .next() or .next_back() will\ncall the underlying iterator again even if it previously returned None.",44],[10,"next","","",27],[10,"size_hint","","",27],[10,"size_hint","","",27],[10,"chain","","",27],[10,"zip","","",27],[10,"map","","",27],[10,"filter","","",27],[10,"filter_map","","",27],[10,"enumerate","","",27],[10,"peekable","","",27],[10,"skip_while","","",27],[10,"take_while","","",27],[10,"skip","","",27],[10,"take","","",27],[10,"scan","","",27],[10,"flat_map","","",27],[10,"fuse","","",27],[10,"inspect","","",27],[10,"by_ref","","",27],[10,"advance","","",27],[10,"collect","","",27],[10,"nth","","",27],[10,"last","","",27],[10,"fold","","",27],[10,"count","","",27],[10,"all","","",27],[10,"any","","",27],[10,"find","","",27],[10,"position","","",27],[10,"max_by","","",27],[10,"min_by","","",27],[10,"next_back","","",27],[10,"rev","","",27],[10,"indexable","","",27],[10,"idx","","",27],[10,"new","","Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the iterator",45],[10,"next","","",45],[10,"size_hint","","",45],[10,"size_hint","","",45],[10,"chain","","",45],[10,"zip","","",45],[10,"map","","",45],[10,"filter","","",45],[10,"filter_map","","",45],[10,"enumerate","","",45],[10,"peekable","","",45],[10,"skip_while","","",45],[10,"take_while","","",45],[10,"skip","","",45],[10,"take","","",45],[10,"scan","","",45],[10,"flat_map","","",45],[10,"fuse","","",45],[10,"inspect","","",45],[10,"by_ref","","",45],[10,"advance","","",45],[10,"collect","","",45],[10,"nth","","",45],[10,"last","","",45],[10,"fold","","",45],[10,"count","","",45],[10,"all","","",45],[10,"any","","",45],[10,"find","","",45],[10,"position","","",45],[10,"max_by","","",45],[10,"min_by","","",45],[10,"clone","","",46],[10,"clone_from","","",46],[10,"next","","",46],[10,"size_hint","","",46],[10,"size_hint","","",46],[10,"chain","","",46],[10,"zip","","",46],[10,"map","","",46],[10,"filter","","",46],[10,"filter_map","","",46],[10,"enumerate","","",46],[10,"peekable","","",46],[10,"skip_while","","",46],[10,"take_while","","",46],[10,"skip","","",46],[10,"take","","",46],[10,"scan","","",46],[10,"flat_map","","",46],[10,"fuse","","",46],[10,"inspect","","",46],[10,"by_ref","","",46],[10,"advance","","",46],[10,"collect","","",46],[10,"nth","","",46],[10,"last","","",46],[10,"fold","","",46],[10,"count","","",46],[10,"all","","",46],[10,"any","","",46],[10,"find","","",46],[10,"position","","",46],[10,"max_by","","",46],[10,"min_by","","",46],[10,"clone","","",47],[10,"clone_from","","",47],[10,"next","","",47],[10,"size_hint","","",47],[10,"size_hint","","",47],[10,"chain","","",47],[10,"zip","","",47],[10,"map","","",47],[10,"filter","","",47],[10,"filter_map","","",47],[10,"enumerate","","",47],[10,"peekable","","",47],[10,"skip_while","","",47],[10,"take_while","","",47],[10,"skip","","",47],[10,"take","","",47],[10,"scan","","",47],[10,"flat_map","","",47],[10,"fuse","","",47],[10,"inspect","","",47],[10,"by_ref","","",47],[10,"advance","","",47],[10,"collect","","",47],[10,"nth","","",47],[10,"last","","",47],[10,"fold","","",47],[10,"count","","",47],[10,"all","","",47],[10,"any","","",47],[10,"find","","",47],[10,"position","","",47],[10,"max_by","","",47],[10,"min_by","","",47],[10,"next_back","","",47],[10,"rev","","",47],[10,"clone","","",48],[10,"clone_from","","",48],[10,"next","","",48],[10,"size_hint","","",48],[10,"size_hint","","",48],[10,"chain","","",48],[10,"zip","","",48],[10,"map","","",48],[10,"filter","","",48],[10,"filter_map","","",48],[10,"enumerate","","",48],[10,"peekable","","",48],[10,"skip_while","","",48],[10,"take_while","","",48],[10,"skip","","",48],[10,"take","","",48],[10,"scan","","",48],[10,"flat_map","","",48],[10,"fuse","","",48],[10,"inspect","","",48],[10,"by_ref","","",48],[10,"advance","","",48],[10,"collect","","",48],[10,"nth","","",48],[10,"last","","",48],[10,"fold","","",48],[10,"count","","",48],[10,"all","","",48],[10,"any","","",48],[10,"find","","",48],[10,"position","","",48],[10,"max_by","","",48],[10,"min_by","","",48],[10,"next_back","","",48],[10,"rev","","",48],[10,"clone","","",49],[10,"clone_from","","",49],[10,"next","","",49],[10,"size_hint","","",49],[10,"chain","","",49],[10,"zip","","",49],[10,"map","","",49],[10,"filter","","",49],[10,"filter_map","","",49],[10,"enumerate","","",49],[10,"peekable","","",49],[10,"skip_while","","",49],[10,"take_while","","",49],[10,"skip","","",49],[10,"take","","",49],[10,"scan","","",49],[10,"flat_map","","",49],[10,"fuse","","",49],[10,"inspect","","",49],[10,"by_ref","","",49],[10,"advance","","",49],[10,"collect","","",49],[10,"nth","","",49],[10,"last","","",49],[10,"fold","","",49],[10,"count","","",49],[10,"all","","",49],[10,"any","","",49],[10,"find","","",49],[10,"position","","",49],[10,"max_by","","",49],[10,"min_by","","",49],[10,"clone","","",50],[10,"clone_from","","",50],[10,"next","","",50],[10,"size_hint","","",50],[10,"chain","","",50],[10,"zip","","",50],[10,"map","","",50],[10,"filter","","",50],[10,"filter_map","","",50],[10,"enumerate","","",50],[10,"peekable","","",50],[10,"skip_while","","",50],[10,"take_while","","",50],[10,"skip","","",50],[10,"take","","",50],[10,"scan","","",50],[10,"flat_map","","",50],[10,"fuse","","",50],[10,"inspect","","",50],[10,"by_ref","","",50],[10,"advance","","",50],[10,"collect","","",50],[10,"nth","","",50],[10,"last","","",50],[10,"fold","","",50],[10,"count","","",50],[10,"all","","",50],[10,"any","","",50],[10,"find","","",50],[10,"position","","",50],[10,"max_by","","",50],[10,"min_by","","",50],[10,"clone","","",51],[10,"clone_from","","",51],[10,"new","","Create a new `Repeat` that endlessly repeats the element `elt`.",51],[10,"next","","",51],[10,"size_hint","","",51],[10,"size_hint","","",51],[10,"chain","","",51],[10,"zip","","",51],[10,"map","","",51],[10,"filter","","",51],[10,"filter_map","","",51],[10,"enumerate","","",51],[10,"peekable","","",51],[10,"skip_while","","",51],[10,"take_while","","",51],[10,"skip","","",51],[10,"take","","",51],[10,"scan","","",51],[10,"flat_map","","",51],[10,"fuse","","",51],[10,"inspect","","",51],[10,"by_ref","","",51],[10,"advance","","",51],[10,"collect","","",51],[10,"nth","","",51],[10,"last","","",51],[10,"fold","","",51],[10,"count","","",51],[10,"all","","",51],[10,"any","","",51],[10,"find","","",51],[10,"position","","",51],[10,"max_by","","",51],[10,"min_by","","",51],[10,"next_back","","",51],[10,"rev","","",51],[10,"indexable","","",51],[10,"idx","","",51],[10,"fmt","core::option","",52],[10,"cmp","","",52],[10,"assert_receiver_is_total_eq","","",52],[10,"partial_cmp","","",52],[10,"lt","","",52],[10,"le","","",52],[10,"gt","","",52],[10,"ge","","",52],[10,"lt","","",52],[10,"le","","",52],[10,"gt","","",52],[10,"ge","","",52],[10,"eq","","",52],[10,"ne","","",52],[10,"ne","","",52],[10,"clone","","",52],[10,"clone_from","","",52],[10,"is_some","","Returns `true` if the option is a `Some` value",52],[10,"is_none","","Returns `true` if the option is a `None` value",52],[10,"as_ref","","Convert from `Option<T>` to `Option<&T>`",52],[10,"as_mut","","Convert from `Option<T>` to `Option<&mut T>`",52],[10,"as_mut_slice","","Convert from `Option<T>` to `&mut [T]` (without copying)",52],[10,"expect","","Unwraps an option, yielding the content of a `Some`",52],[10,"unwrap","","Returns the inner `T` of a `Some(T)`.",52],[10,"unwrap_or","","Returns the contained value or a default.",52],[10,"unwrap_or_else","","Returns the contained value or computes it from a closure.",52],[10,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",52],[10,"map_or","","Applies a function to the contained value or returns a default.",52],[10,"map_or_else","","Applies a function to the contained value or computes a default.",52],[10,"mutate","","Deprecated.",52],[10,"mutate_or_set","","Deprecated.",52],[10,"iter","","Returns an iterator over the possibly contained value.",52],[10,"mut_iter","","Deprecated: use `iter_mut`",52],[10,"iter_mut","","Returns a mutable iterator over the possibly contained value.",52],[10,"move_iter","","Deprecated: use `into_iter`.",52],[10,"into_iter","","Returns a consuming iterator over the possibly contained value.",52],[10,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",52],[10,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",52],[10,"or","","Returns the option if it contains a value, otherwise returns `optb`.",52],[10,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",52],[10,"take","","Takes the value out of the option, leaving a `None` in its place.",52],[10,"filtered","","Deprecated.",52],[10,"while_some","","Deprecated.",52],[10,"take_unwrap","","Deprecated: use `take().unwrap()` instead.",52],[10,"get_ref","","Deprecated: use `as_ref().unwrap()` instead.",52],[10,"get_mut_ref","","Deprecated: use `as_mut().unwrap()` instead.",52],[10,"unwrap_or_default","","Returns the contained value or a default",52],[10,"as_slice","","Convert from `Option<T>` to `&[T]` (without copying)",52],[10,"default","","",52],[10,"clone","","",53],[10,"clone_from","","",53],[10,"next","","",53],[10,"size_hint","","",53],[10,"size_hint","","",53],[10,"chain","","",53],[10,"zip","","",53],[10,"map","","",53],[10,"filter","","",53],[10,"filter_map","","",53],[10,"enumerate","","",53],[10,"peekable","","",53],[10,"skip_while","","",53],[10,"take_while","","",53],[10,"skip","","",53],[10,"take","","",53],[10,"scan","","",53],[10,"flat_map","","",53],[10,"fuse","","",53],[10,"inspect","","",53],[10,"by_ref","","",53],[10,"advance","","",53],[10,"collect","","",53],[10,"nth","","",53],[10,"last","","",53],[10,"fold","","",53],[10,"count","","",53],[10,"all","","",53],[10,"any","","",53],[10,"find","","",53],[10,"position","","",53],[10,"max_by","","",53],[10,"min_by","","",53],[10,"next_back","","",53],[10,"rev","","",53],[10,"rposition","","",53],[10,"len","","",53],[10,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",52],[10,"fmt","core::result","",54],[10,"cmp","","",54],[10,"assert_receiver_is_total_eq","","",54],[10,"partial_cmp","","",54],[10,"lt","","",54],[10,"le","","",54],[10,"gt","","",54],[10,"ge","","",54],[10,"lt","","",54],[10,"le","","",54],[10,"gt","","",54],[10,"ge","","",54],[10,"eq","","",54],[10,"ne","","",54],[10,"ne","","",54],[10,"clone","","",54],[10,"clone_from","","",54],[10,"is_ok","","Returns true if the result is `Ok`",54],[10,"is_err","","Returns true if the result is `Err`",54],[10,"ok","","Convert from `Result<T, E>` to `Option<T>`",54],[10,"err","","Convert from `Result<T, E>` to `Option<E>`",54],[10,"as_ref","","Convert from `Result<T, E>` to `Result<&T, &E>`",54],[10,"as_mut","","Convert from `Result<T, E>` to `Result<&mut T, &mut E>`",54],[10,"as_mut_slice","","Convert from `Result<T, E>` to `&mut [T]` (without copying)",54],[10,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",54],[10,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",54],[10,"iter","","Returns an iterator over the possibly contained value.",54],[10,"mut_iter","","Deprecated: use `iter_mut`.",54],[10,"iter_mut","","Returns a mutable iterator over the possibly contained value.",54],[10,"move_iter","","Deprecated: `use into_iter`.",54],[10,"into_iter","","Returns a consuming iterator over the possibly contained value.",54],[10,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",54],[10,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",54],[10,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",54],[10,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",54],[10,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",54],[10,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",54],[10,"unwrap_or_handle","","Deprecated name for `unwrap_or_else()`.",54],[10,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",54],[10,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",54],[10,"as_slice","","Convert from `Result<T, E>` to `&[T]` (without copying)",54],[10,"clone","","",55],[10,"clone_from","","",55],[10,"next","","",55],[10,"size_hint","","",55],[10,"size_hint","","",55],[10,"chain","","",55],[10,"zip","","",55],[10,"map","","",55],[10,"filter","","",55],[10,"filter_map","","",55],[10,"enumerate","","",55],[10,"peekable","","",55],[10,"skip_while","","",55],[10,"take_while","","",55],[10,"skip","","",55],[10,"take","","",55],[10,"scan","","",55],[10,"flat_map","","",55],[10,"fuse","","",55],[10,"inspect","","",55],[10,"by_ref","","",55],[10,"advance","","",55],[10,"collect","","",55],[10,"nth","","",55],[10,"last","","",55],[10,"fold","","",55],[10,"count","","",55],[10,"all","","",55],[10,"any","","",55],[10,"find","","",55],[10,"position","","",55],[10,"max_by","","",55],[10,"min_by","","",55],[10,"next_back","","",55],[10,"rev","","",55],[10,"rposition","","",55],[10,"len","","",55],[10,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",54],[10,"fmt","core::simd","",56],[10,"fmt","","",57],[10,"fmt","","",58],[10,"fmt","","",59],[10,"fmt","","",60],[10,"fmt","","",61],[10,"fmt","","",62],[10,"fmt","","",63],[10,"fmt","","",64],[10,"fmt","","",65],[10,"next","core::slice","",66],[10,"size_hint","","",66],[10,"size_hint","","",66],[10,"chain","","",66],[10,"zip","","",66],[10,"map","","",66],[10,"filter","","",66],[10,"filter_map","","",66],[10,"enumerate","","",66],[10,"peekable","","",66],[10,"skip_while","","",66],[10,"take_while","","",66],[10,"skip","","",66],[10,"take","","",66],[10,"scan","","",66],[10,"flat_map","","",66],[10,"fuse","","",66],[10,"inspect","","",66],[10,"by_ref","","",66],[10,"advance","","",66],[10,"collect","","",66],[10,"nth","","",66],[10,"last","","",66],[10,"fold","","",66],[10,"count","","",66],[10,"all","","",66],[10,"any","","",66],[10,"find","","",66],[10,"position","","",66],[10,"max_by","","",66],[10,"min_by","","",66],[10,"next_back","","",66],[10,"rev","","",66],[10,"rposition","","",66],[10,"len","","",66],[10,"clone","","",66],[10,"clone_from","","",66],[10,"indexable","","",66],[10,"idx","","",66],[10,"next","","",67],[10,"size_hint","","",67],[10,"size_hint","","",67],[10,"chain","","",67],[10,"zip","","",67],[10,"map","","",67],[10,"filter","","",67],[10,"filter_map","","",67],[10,"enumerate","","",67],[10,"peekable","","",67],[10,"skip_while","","",67],[10,"take_while","","",67],[10,"skip","","",67],[10,"take","","",67],[10,"scan","","",67],[10,"flat_map","","",67],[10,"fuse","","",67],[10,"inspect","","",67],[10,"by_ref","","",67],[10,"advance","","",67],[10,"collect","","",67],[10,"nth","","",67],[10,"last","","",67],[10,"fold","","",67],[10,"count","","",67],[10,"all","","",67],[10,"any","","",67],[10,"find","","",67],[10,"position","","",67],[10,"max_by","","",67],[10,"min_by","","",67],[10,"next_back","","",67],[10,"rev","","",67],[10,"rposition","","",67],[10,"len","","",67],[10,"next","","",68],[10,"size_hint","","",68],[10,"size_hint","","",68],[10,"chain","","",68],[10,"zip","","",68],[10,"map","","",68],[10,"filter","","",68],[10,"filter_map","","",68],[10,"enumerate","","",68],[10,"peekable","","",68],[10,"skip_while","","",68],[10,"take_while","","",68],[10,"skip","","",68],[10,"take","","",68],[10,"scan","","",68],[10,"flat_map","","",68],[10,"fuse","","",68],[10,"inspect","","",68],[10,"by_ref","","",68],[10,"advance","","",68],[10,"collect","","",68],[10,"nth","","",68],[10,"last","","",68],[10,"fold","","",68],[10,"count","","",68],[10,"all","","",68],[10,"any","","",68],[10,"find","","",68],[10,"position","","",68],[10,"max_by","","",68],[10,"min_by","","",68],[10,"next_back","","",68],[10,"rev","","",68],[10,"next","","",69],[10,"size_hint","","",69],[10,"size_hint","","",69],[10,"chain","","",69],[10,"zip","","",69],[10,"map","","",69],[10,"filter","","",69],[10,"filter_map","","",69],[10,"enumerate","","",69],[10,"peekable","","",69],[10,"skip_while","","",69],[10,"take_while","","",69],[10,"skip","","",69],[10,"take","","",69],[10,"scan","","",69],[10,"flat_map","","",69],[10,"fuse","","",69],[10,"inspect","","",69],[10,"by_ref","","",69],[10,"advance","","",69],[10,"collect","","",69],[10,"nth","","",69],[10,"last","","",69],[10,"fold","","",69],[10,"count","","",69],[10,"all","","",69],[10,"any","","",69],[10,"find","","",69],[10,"position","","",69],[10,"max_by","","",69],[10,"min_by","","",69],[10,"next_back","","",69],[10,"rev","","",69],[10,"next","","",70],[10,"size_hint","","",70],[10,"size_hint","","",70],[10,"chain","","",70],[10,"zip","","",70],[10,"map","","",70],[10,"filter","","",70],[10,"filter_map","","",70],[10,"enumerate","","",70],[10,"peekable","","",70],[10,"skip_while","","",70],[10,"take_while","","",70],[10,"skip","","",70],[10,"take","","",70],[10,"scan","","",70],[10,"flat_map","","",70],[10,"fuse","","",70],[10,"inspect","","",70],[10,"by_ref","","",70],[10,"advance","","",70],[10,"collect","","",70],[10,"nth","","",70],[10,"last","","",70],[10,"fold","","",70],[10,"count","","",70],[10,"all","","",70],[10,"any","","",70],[10,"find","","",70],[10,"position","","",70],[10,"max_by","","",70],[10,"min_by","","",70],[10,"clone","","",71],[10,"clone_from","","",71],[10,"next","","",71],[10,"size_hint","","",71],[10,"size_hint","","",71],[10,"chain","","",71],[10,"zip","","",71],[10,"map","","",71],[10,"filter","","",71],[10,"filter_map","","",71],[10,"enumerate","","",71],[10,"peekable","","",71],[10,"skip_while","","",71],[10,"take_while","","",71],[10,"skip","","",71],[10,"take","","",71],[10,"scan","","",71],[10,"flat_map","","",71],[10,"fuse","","",71],[10,"inspect","","",71],[10,"by_ref","","",71],[10,"advance","","",71],[10,"collect","","",71],[10,"nth","","",71],[10,"last","","",71],[10,"fold","","",71],[10,"count","","",71],[10,"all","","",71],[10,"any","","",71],[10,"find","","",71],[10,"position","","",71],[10,"max_by","","",71],[10,"min_by","","",71],[10,"clone","","",72],[10,"clone_from","","",72],[10,"next","","",72],[10,"size_hint","","",72],[10,"size_hint","","",72],[10,"chain","","",72],[10,"zip","","",72],[10,"map","","",72],[10,"filter","","",72],[10,"filter_map","","",72],[10,"enumerate","","",72],[10,"peekable","","",72],[10,"skip_while","","",72],[10,"take_while","","",72],[10,"skip","","",72],[10,"take","","",72],[10,"scan","","",72],[10,"flat_map","","",72],[10,"fuse","","",72],[10,"inspect","","",72],[10,"by_ref","","",72],[10,"advance","","",72],[10,"collect","","",72],[10,"nth","","",72],[10,"last","","",72],[10,"fold","","",72],[10,"count","","",72],[10,"all","","",72],[10,"any","","",72],[10,"find","","",72],[10,"position","","",72],[10,"max_by","","",72],[10,"min_by","","",72],[10,"next_back","","",72],[10,"rev","","",72],[10,"indexable","","",72],[10,"idx","","",72],[10,"next","","",73],[10,"size_hint","","",73],[10,"size_hint","","",73],[10,"chain","","",73],[10,"zip","","",73],[10,"map","","",73],[10,"filter","","",73],[10,"filter_map","","",73],[10,"enumerate","","",73],[10,"peekable","","",73],[10,"skip_while","","",73],[10,"take_while","","",73],[10,"skip","","",73],[10,"take","","",73],[10,"scan","","",73],[10,"flat_map","","",73],[10,"fuse","","",73],[10,"inspect","","",73],[10,"by_ref","","",73],[10,"advance","","",73],[10,"collect","","",73],[10,"nth","","",73],[10,"last","","",73],[10,"fold","","",73],[10,"count","","",73],[10,"all","","",73],[10,"any","","",73],[10,"find","","",73],[10,"position","","",73],[10,"max_by","","",73],[10,"min_by","","",73],[10,"next_back","","",73],[10,"rev","","",73],[10,"fmt","","",74],[10,"eq","","",74],[10,"ne","","",74],[10,"ne","","",74],[10,"found","","Converts a `Found` to `Some`, `NotFound` to `None`.\nSimilar to `Result::ok`.",74],[10,"not_found","","Convert a `Found` to `None`, `NotFound` to `Some`.\nSimilar to `Result::err`.",74],[10,"clone","core::str","",75],[10,"clone_from","","",75],[10,"next","","",75],[10,"size_hint","","",75],[10,"size_hint","","",75],[10,"chain","","",75],[10,"zip","","",75],[10,"map","","",75],[10,"filter","","",75],[10,"filter_map","","",75],[10,"enumerate","","",75],[10,"peekable","","",75],[10,"skip_while","","",75],[10,"take_while","","",75],[10,"skip","","",75],[10,"take","","",75],[10,"scan","","",75],[10,"flat_map","","",75],[10,"fuse","","",75],[10,"inspect","","",75],[10,"by_ref","","",75],[10,"advance","","",75],[10,"collect","","",75],[10,"nth","","",75],[10,"last","","",75],[10,"fold","","",75],[10,"count","","",75],[10,"all","","",75],[10,"any","","",75],[10,"find","","",75],[10,"position","","",75],[10,"max_by","","",75],[10,"min_by","","",75],[10,"next_back","","",75],[10,"rev","","",75],[10,"clone","","",76],[10,"clone_from","","",76],[10,"next","","",76],[10,"size_hint","","",76],[10,"size_hint","","",76],[10,"chain","","",76],[10,"zip","","",76],[10,"map","","",76],[10,"filter","","",76],[10,"filter_map","","",76],[10,"enumerate","","",76],[10,"peekable","","",76],[10,"skip_while","","",76],[10,"take_while","","",76],[10,"skip","","",76],[10,"take","","",76],[10,"scan","","",76],[10,"flat_map","","",76],[10,"fuse","","",76],[10,"inspect","","",76],[10,"by_ref","","",76],[10,"advance","","",76],[10,"collect","","",76],[10,"nth","","",76],[10,"last","","",76],[10,"fold","","",76],[10,"count","","",76],[10,"all","","",76],[10,"any","","",76],[10,"find","","",76],[10,"position","","",76],[10,"max_by","","",76],[10,"min_by","","",76],[10,"next_back","","",76],[10,"rev","","",76],[10,"clone","","",77],[10,"clone_from","","",77],[10,"clone","","",78],[10,"clone_from","","",78],[10,"next","","",77],[10,"size_hint","","",77],[10,"chain","","",77],[10,"zip","","",77],[10,"map","","",77],[10,"filter","","",77],[10,"filter_map","","",77],[10,"enumerate","","",77],[10,"peekable","","",77],[10,"skip_while","","",77],[10,"take_while","","",77],[10,"skip","","",77],[10,"take","","",77],[10,"scan","","",77],[10,"flat_map","","",77],[10,"fuse","","",77],[10,"inspect","","",77],[10,"by_ref","","",77],[10,"advance","","",77],[10,"collect","","",77],[10,"nth","","",77],[10,"last","","",77],[10,"fold","","",77],[10,"count","","",77],[10,"all","","",77],[10,"any","","",77],[10,"find","","",77],[10,"position","","",77],[10,"max_by","","",77],[10,"min_by","","",77],[10,"next_back","","",77],[10,"rev","","",77],[10,"next","","",78],[10,"size_hint","","",78],[10,"chain","","",78],[10,"zip","","",78],[10,"map","","",78],[10,"filter","","",78],[10,"filter_map","","",78],[10,"enumerate","","",78],[10,"peekable","","",78],[10,"skip_while","","",78],[10,"take_while","","",78],[10,"skip","","",78],[10,"take","","",78],[10,"scan","","",78],[10,"flat_map","","",78],[10,"fuse","","",78],[10,"inspect","","",78],[10,"by_ref","","",78],[10,"advance","","",78],[10,"collect","","",78],[10,"nth","","",78],[10,"last","","",78],[10,"fold","","",78],[10,"count","","",78],[10,"all","","",78],[10,"any","","",78],[10,"find","","",78],[10,"position","","",78],[10,"max_by","","",78],[10,"min_by","","",78],[10,"clone","","",79],[10,"clone_from","","",79],[10,"clone","","",80],[10,"clone_from","","",80],[10,"clone","","",81],[10,"clone_from","","",81],[10,"clone","","",82],[10,"clone_from","","",82],[10,"clone","","",83],[10,"clone_from","","",83],[10,"next","","",82],[10,"size_hint","","",82],[10,"chain","","",82],[10,"zip","","",82],[10,"map","","",82],[10,"filter","","",82],[10,"filter_map","","",82],[10,"enumerate","","",82],[10,"peekable","","",82],[10,"skip_while","","",82],[10,"take_while","","",82],[10,"skip","","",82],[10,"take","","",82],[10,"scan","","",82],[10,"flat_map","","",82],[10,"fuse","","",82],[10,"inspect","","",82],[10,"by_ref","","",82],[10,"advance","","",82],[10,"collect","","",82],[10,"nth","","",82],[10,"last","","",82],[10,"fold","","",82],[10,"count","","",82],[10,"all","","",82],[10,"any","","",82],[10,"find","","",82],[10,"position","","",82],[10,"max_by","","",82],[10,"min_by","","",82],[10,"next","","",83],[10,"size_hint","","",83],[10,"chain","","",83],[10,"zip","","",83],[10,"map","","",83],[10,"filter","","",83],[10,"filter_map","","",83],[10,"enumerate","","",83],[10,"peekable","","",83],[10,"skip_while","","",83],[10,"take_while","","",83],[10,"skip","","",83],[10,"take","","",83],[10,"scan","","",83],[10,"flat_map","","",83],[10,"fuse","","",83],[10,"inspect","","",83],[10,"by_ref","","",83],[10,"advance","","",83],[10,"collect","","",83],[10,"nth","","",83],[10,"last","","",83],[10,"fold","","",83],[10,"count","","",83],[10,"all","","",83],[10,"any","","",83],[10,"find","","",83],[10,"position","","",83],[10,"max_by","","",83],[10,"min_by","","",83],[10,"clone","","",84],[10,"clone_from","","",84],[10,"next","","",84],[10,"size_hint","","",84],[10,"size_hint","","",84],[10,"chain","","",84],[10,"zip","","",84],[10,"map","","",84],[10,"filter","","",84],[10,"filter_map","","",84],[10,"enumerate","","",84],[10,"peekable","","",84],[10,"skip_while","","",84],[10,"take_while","","",84],[10,"skip","","",84],[10,"take","","",84],[10,"scan","","",84],[10,"flat_map","","",84],[10,"fuse","","",84],[10,"inspect","","",84],[10,"by_ref","","",84],[10,"advance","","",84],[10,"collect","","",84],[10,"nth","","",84],[10,"last","","",84],[10,"fold","","",84],[10,"count","","",84],[10,"all","","",84],[10,"any","","",84],[10,"find","","",84],[10,"position","","",84],[10,"max_by","","",84],[10,"min_by","","",84],[10,"clone","","",85],[10,"clone_from","","",85],[10,"fmt","","",86],[10,"clone","","",86],[10,"clone_from","","",86],[10,"assert_receiver_is_total_eq","","",86],[10,"eq","","",86],[10,"ne","","",86],[10,"ne","","",86],[10,"to_char_lossy","","Convert `self` to a `char`, taking `LoneSurrogate`s to the\nreplacement character (U+FFFD).",86],[10,"next","","",85],[10,"size_hint","","",85],[10,"size_hint","","",85],[10,"chain","","",85],[10,"zip","","",85],[10,"map","","",85],[10,"filter","","",85],[10,"filter_map","","",85],[10,"enumerate","","",85],[10,"peekable","","",85],[10,"skip_while","","",85],[10,"take_while","","",85],[10,"skip","","",85],[10,"take","","",85],[10,"scan","","",85],[10,"flat_map","","",85],[10,"fuse","","",85],[10,"inspect","","",85],[10,"by_ref","","",85],[10,"advance","","",85],[10,"collect","","",85],[10,"nth","","",85],[10,"last","","",85],[10,"fold","","",85],[10,"count","","",85],[10,"all","","",85],[10,"any","","",85],[10,"find","","",85],[10,"position","","",85],[10,"max_by","","",85],[10,"min_by","","",85],[10,"eq","core::fmt::num","",87],[10,"ne","","",87],[10,"ne","","",87],[10,"clone","","",87],[10,"clone_from","","",87],[10,"eq","","",88],[10,"ne","","",88],[10,"ne","","",88],[10,"clone","","",88],[10,"clone_from","","",88],[10,"eq","","",89],[10,"ne","","",89],[10,"ne","","",89],[10,"clone","","",89],[10,"clone_from","","",89],[10,"eq","","",90],[10,"ne","","",90],[10,"ne","","",90],[10,"clone","","",90],[10,"clone_from","","",90],[10,"eq","","",91],[10,"ne","","",91],[10,"ne","","",91],[10,"clone","","",91],[10,"clone_from","","",91],[10,"eq","","",92],[10,"ne","","",92],[10,"ne","","",92],[10,"clone","","",92],[10,"clone_from","","",92],[10,"fmt","","",93],[10,"fmt","","",93],[10,"fmt","","",93],[10,"fmt","","",93],[10,"fmt","","",93],[10,"fmt","","",93],[10,"fmt","","",93],[10,"fmt","","",93],[10,"fmt","","",93],[10,"fmt","","",93],[10,"eq","core::fmt::rt","",94],[10,"ne","","",94],[10,"ne","","",94],[10,"fmt","core::fmt","",95],[10,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a byte-array. The byte-array should *not* contain the sign\nfor the integer, that will be added by this method.",96],[10,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",96],[10,"write","","Writes some data to the underlying buffer contained within this\nformatter.",96],[10,"write_fmt","","Writes some formatted information into this instance",96],[10,"fmt","core::cell","",20],[10,"fmt","","",22],[10,"fmt","","",23],[10,"clone","unicode::str","",97],[10,"next","","",97],[10,"size_hint","","",97],[10,"next_back","","",97],[10,"clone","","",98],[10,"size_hint","","",98],[10,"next","","",98],[10,"next_back","","",98]],"paths":[[6,"UnicodeChar"],[6,"Char"],[6,"UnicodeStrSlice"],[2,"Ordering"],[2,"FPCategory"],[1,"TypeId"],[1,"CovariantType"],[1,"ContravariantType"],[1,"InvariantType"],[1,"CovariantLifetime"],[1,"ContravariantLifetime"],[1,"InvariantLifetime"],[1,"NoSend"],[1,"NoCopy"],[1,"NoSync"],[1,"Managed"],[1,"AtomicBool"],[1,"AtomicInt"],[1,"AtomicUint"],[1,"AtomicPtr"],[1,"Cell"],[1,"RefCell"],[1,"Ref"],[1,"RefMut"],[1,"UnsafeCell"],[1,"Finallyalizer"],[1,"Enumerate"],[1,"Inspect"],[1,"Rev"],[1,"Map"],[1,"Zip"],[1,"ByRef"],[2,"MinMaxResult"],[1,"Cycle"],[1,"Chain"],[1,"Filter"],[1,"FilterMap"],[1,"Peekable"],[1,"SkipWhile"],[1,"TakeWhile"],[1,"Skip"],[1,"Take"],[1,"Scan"],[1,"FlatMap"],[1,"Fuse"],[1,"Unfold"],[1,"Counter"],[1,"Range"],[1,"RangeInclusive"],[1,"RangeStep"],[1,"RangeStepInclusive"],[1,"Repeat"],[2,"Option"],[1,"Item"],[2,"Result"],[1,"Item"],[1,"i8x16"],[1,"i16x8"],[1,"i32x4"],[1,"i64x2"],[1,"u8x16"],[1,"u16x8"],[1,"u32x4"],[1,"u64x2"],[1,"f32x4"],[1,"f64x2"],[1,"Items"],[1,"MutItems"],[1,"Splits"],[1,"MutSplits"],[1,"SplitsN"],[1,"Windows"],[1,"Chunks"],[1,"MutChunks"],[2,"BinarySearchResult"],[1,"Chars"],[1,"CharOffsets"],[1,"CharSplits"],[1,"CharSplitsN"],[1,"NaiveSearcher"],[1,"TwoWaySearcher"],[2,"Searcher"],[1,"MatchIndices"],[1,"StrSplits"],[1,"Utf16CodeUnits"],[1,"Utf16Items"],[2,"Utf16Item"],[1,"Binary"],[1,"Octal"],[1,"Decimal"],[1,"LowerHex"],[1,"UpperHex"],[1,"Radix"],[1,"RadixFmt"],[2,"Alignment"],[1,"Arguments"],[1,"Formatter"],[1,"GraphemeIndices"],[1,"Graphemes"]]};

searchIndex['rustrt'] = {"items":[[0,"","rustrt",""],[1,"Stdio","",""],[3,"init","","One-time runtime initialization."],[3,"at_exit","","Enqueues a procedure to run when the runtime is cleaned up"],[3,"cleanup","","One-time runtime cleanup."],[10,"write","","",0],[0,"args","","Global storage for command line arguments"],[3,"init","rustrt::args","One-time global initialization."],[3,"cleanup","","One-time global cleanup."],[3,"take","","Take the global arguments from global storage."],[3,"put","","Give the global arguments to global storage."],[3,"clone","","Make a clone of the global arguments."],[0,"bookkeeping","rustrt","Task bookkeeping"],[1,"Token","rustrt::bookkeeping",""],[3,"increment","","Increment the number of live tasks, returning a token which will decrement\nthe count when dropped."],[3,"decrement","",""],[3,"wait_for_other_tasks","","Waits for all other native tasks in the system to exit. This is only used by\nthe entry points of native programs"],[10,"drop","","",1],[0,"c_str","rustrt","C-string manipulation and management"],[1,"CString","rustrt::c_str","The representation of a C String."],[1,"CChars","","External iterator for a CString's bytes."],[3,"from_c_multistring","","Parses a C \"multistring\", eg windows env values or\nthe req->ptr result in a uv_fs_readdir() call."],[6,"ToCStr","","A generic trait for converting a value to a CString."],[9,"to_c_str","","Copy the receiver into a CString.",2],[9,"to_c_str_unchecked","","Unsafe variant of `to_c_str()` that doesn't check for nulls.",2],[10,"with_c_str","","Work with a temporary CString constructed from the receiver.\nThe provided `*libc::c_char` will be freed immediately upon return.",2],[10,"with_c_str_unchecked","","Unsafe variant of `with_c_str()` that doesn't check for nulls.",2],[10,"clone","","Clone this CString into a new, uniquely owned CString. For safety\nreasons, this is always a deep clone with the memory allocated\nwith C's allocator API, rather than the usual shallow clone.",3],[10,"eq","","",3],[10,"partial_cmp","","",3],[10,"hash","","",3],[10,"new","","Create a C String from a pointer, with memory managed by C's allocator\n API, so avoid calling it with a pointer to memory managed by Rust's\n allocator API, as the behaviour would not be well defined.",3],[10,"as_ptr","","Return a pointer to the NUL-terminated string data.",3],[10,"as_mut_ptr","","Return a mutable pointer to the NUL-terminated string data.",3],[10,"with_ref","","Calls a closure with a reference to the underlying `*libc::c_char`.",3],[10,"with_mut_ref","","Calls a closure with a mutable reference to the underlying `*libc::c_char`.",3],[10,"is_null","","Returns true if the CString is a null.",3],[10,"is_not_null","","Returns true if the CString is not null.",3],[10,"owns_buffer","","Returns whether or not the `CString` owns the buffer.",3],[10,"as_bytes","","Converts the CString into a `&[u8]` without copying.\nIncludes the terminating NUL byte.",3],[10,"as_bytes_no_nul","","Converts the CString into a `&[u8]` without copying.\nDoes not include the terminating NUL byte.",3],[10,"as_str","","Converts the CString into a `&str` without copying.\nReturns None if the CString is not UTF-8.",3],[10,"iter","","Return a CString iterator.",3],[10,"unwrap","","Unwraps the wrapped `*libc::c_char` from the `CString` wrapper.",3],[10,"drop","","",3],[10,"len","","Return the number of bytes in the CString (not including the NUL terminator).",3],[10,"fmt","","",3],[10,"to_c_str","collections::string","",4],[10,"to_c_str_unchecked","","",4],[10,"with_c_str","","",4],[10,"with_c_str_unchecked","","",4],[10,"next","rustrt::c_str","",5],[0,"exclusive","rustrt",""],[1,"Exclusive","rustrt::exclusive","An OS mutex over some data."],[1,"ExclusiveGuard","","An RAII guard returned via `lock`"],[10,"new","","Creates a new `Exclusive` which will protect the data provided.",6],[10,"lock","","Acquires this lock, returning a guard which the data is accessed through\nand from which that lock will be unlocked.",6],[10,"signal","","",7],[10,"wait","","",7],[10,"deref","","",7],[10,"deref_mut","","",7],[0,"local","rustrt",""],[6,"Local","rustrt::local","Encapsulates some task-local data."],[9,"put","","",8],[9,"take","","",8],[9,"try_take","","",8],[9,"exists","","",8],[9,"borrow","","",8],[9,"unsafe_take","","",8],[9,"unsafe_borrow","","",8],[9,"try_unsafe_borrow","","",8],[0,"local_data","rustrt","Task local data management"],[1,"Ref","rustrt::local_data","A RAII immutable reference to a task-local value."],[2,"KeyValue","",""],[12,"KeyValueKey","","",9],[4,"Key","","Indexes a task-local data slot. This pointer is used for comparison to\ndifferentiate keys from one another. The actual type `T` is not used anywhere\nas a member of this type, except that it is parameterized with it to define\nthe type of each key's value."],[10,"replace","","Replaces a value in task local data.",9],[10,"get","","Borrows a value from TLD.",9],[10,"deref","","",10],[10,"fmt","","",10],[10,"eq","","",10],[10,"ne","","",10],[10,"partial_cmp","","",10],[10,"lt","","",10],[10,"le","","",10],[10,"gt","","",10],[10,"ge","","",10],[10,"cmp","","",10],[10,"drop","","",10],[0,"local_heap","rustrt","The local, garbage collected heap"],[1,"MemoryRegion","rustrt::local_heap",""],[1,"LocalHeap","",""],[3,"local_malloc_","",""],[3,"local_malloc","",""],[3,"local_free_","",""],[3,"local_free","",""],[4,"Box","",""],[10,"new","","",11],[10,"alloc","","",11],[10,"realloc","","",11],[10,"free","","",11],[10,"immortalize","","Immortalize all pending allocations, forcing them to live forever.",11],[10,"drop","","",11],[10,"drop","","",12],[0,"mutex","rustrt","A native mutex and condition variable type."],[1,"StaticNativeMutex","rustrt::mutex","A native mutex suitable for storing in statics (that is, it has\nthe `destroy` method rather than a destructor)."],[1,"NativeMutex","","A native mutex with a destructor for clean-up."],[1,"LockGuard","","Automatically unlocks the mutex that it was created from on\ndestruction."],[5,"NATIVE_MUTEX_INIT","",""],[10,"new","","Creates a new mutex.",13],[10,"lock","","Acquires this lock. This assumes that the current thread does not\nalready hold the lock.",13],[10,"trylock","","Attempts to acquire the lock. The value returned is `Some` if\nthe attempt succeeded.",13],[10,"lock_noguard","","Acquire the lock without creating a `LockGuard`.",13],[10,"trylock_noguard","","Attempts to acquire the lock without creating a\n`LockGuard`. The value returned is whether the lock was\nacquired or not.",13],[10,"unlock_noguard","","Unlocks the lock. This assumes that the current thread already holds the\nlock.",13],[10,"wait_noguard","","Block on the internal condition variable.",13],[10,"signal_noguard","","Signals a thread in `wait` to wake up",13],[10,"destroy","","This function is especially unsafe because there are no guarantees made\nthat no other thread is currently holding the lock or waiting on the\ncondition variable contained inside.",13],[10,"new","","Creates a new mutex.",14],[10,"lock","","Acquires this lock. This assumes that the current thread does not\nalready hold the lock.",14],[10,"trylock","","Attempts to acquire the lock. The value returned is `Some` if\nthe attempt succeeded.",14],[10,"lock_noguard","","Acquire the lock without creating a `LockGuard`.",14],[10,"trylock_noguard","","Attempts to acquire the lock without creating a\n`LockGuard`. The value returned is whether the lock was\nacquired or not.",14],[10,"unlock_noguard","","Unlocks the lock. This assumes that the current thread already holds the\nlock.",14],[10,"wait_noguard","","Block on the internal condition variable.",14],[10,"signal_noguard","","Signals a thread in `wait` to wake up",14],[10,"drop","","",14],[10,"wait","","Block on the internal condition variable.",15],[10,"signal","","Signals a thread in `wait` to wake up.",15],[10,"drop","","",15],[0,"rtio","rustrt","The EventLoop and internal synchronous I/O interface."],[1,"ProcessConfig","rustrt::rtio","Data needed to spawn a process. Serializes the `std::io::process::Command`\nbuilder."],[11,"program","","Path to the program to run.",16],[11,"args","","Arguments to pass to the program (doesn't include the program itself).",16],[11,"env","","Optional environment to specify for the program. If this is None, then\nit will inherit the current process's environment.",16],[11,"cwd","","Optional working directory for the new process. If this is None, then\nthe current directory of the running process is inherited.",16],[11,"stdin","","Configuration for the child process's stdin handle (file descriptor 0).\nThis field defaults to `CreatePipe(true, false)` so the input can be\nwritten to.",16],[11,"stdout","","Configuration for the child process's stdout handle (file descriptor 1).\nThis field defaults to `CreatePipe(false, true)` so the output can be\ncollected.",16],[11,"stderr","","Configuration for the child process's stdout handle (file descriptor 2).\nThis field defaults to `CreatePipe(false, true)` so the output can be\ncollected.",16],[11,"extra_io","","Any number of streams/file descriptors/pipes may be attached to this\nprocess. This list enumerates the file descriptors and such for the\nprocess to be spawned, and the file descriptors inherited will start at\n3 and go to the length of this array. The first three file descriptors\n(stdin/stdout/stderr) are configured with the `stdin`, `stdout`, and\n`stderr` fields.",16],[11,"uid","","Sets the child process's user id. This translates to a `setuid` call in\nthe child process. Setting this value on windows will cause the spawn to\nfail. Failure in the `setuid` call on unix will also cause the spawn to\nfail.",16],[11,"gid","","Similar to `uid`, but sets the group id of the child process. This has\nthe same semantics as the `uid` field.",16],[11,"detach","","If true, the child process is spawned in a detached state. On unix, this\nmeans that the child is the leader of a new process group.",16],[1,"LocalIo","",""],[1,"IoError","",""],[11,"code","","",17],[11,"extra","","",17],[11,"detail","","",17],[1,"SocketAddr","",""],[11,"ip","","",18],[11,"port","","",18],[1,"FileStat","",""],[11,"size","","",19],[11,"kind","","",19],[11,"perm","","",19],[11,"created","","",19],[11,"modified","","",19],[11,"accessed","","",19],[11,"device","","",19],[11,"inode","","",19],[11,"rdev","","",19],[11,"nlink","","",19],[11,"uid","","",19],[11,"gid","","",19],[11,"blksize","","",19],[11,"blocks","","",19],[11,"flags","","",19],[11,"gen","","",19],[1,"AddrinfoHint","",""],[11,"family","","",20],[11,"socktype","","",20],[11,"protocol","","",20],[11,"flags","","",20],[1,"AddrinfoInfo","",""],[11,"address","","",21],[11,"family","","",21],[11,"socktype","","",21],[11,"protocol","","",21],[11,"flags","","",21],[2,"CloseBehavior","","Description of what to do when a file handle is closed"],[12,"DontClose","","Do not close this handle when the object is destroyed",22],[12,"CloseSynchronously","","Synchronously close the handle, meaning that the task will block when\nthe handle is destroyed until it has been fully closed.",22],[12,"CloseAsynchronously","","Asynchronously closes a handle, meaning that the task will *not* block\nwhen the handle is destroyed, but the handle will still get deallocated\nand cleaned up (but this will happen asynchronously on the local event\nloop).",22],[2,"IpAddr","",""],[12,"Ipv4Addr","","",23],[12,"Ipv6Addr","","",23],[2,"StdioContainer","",""],[12,"Ignored","","",24],[12,"InheritFd","","",24],[12,"CreatePipe","","",24],[2,"ProcessExit","",""],[12,"ExitStatus","","",25],[12,"ExitSignal","","",25],[2,"FileMode","",""],[12,"Open","","",26],[12,"Append","","",26],[12,"Truncate","","",26],[2,"FileAccess","",""],[12,"Read","","",27],[12,"Write","","",27],[12,"ReadWrite","","",27],[2,"SeekStyle","",""],[12,"SeekSet","","",28],[12,"SeekEnd","","",28],[12,"SeekCur","","",28],[4,"IoResult","",""],[6,"EventLoop","",""],[9,"run","","",29],[9,"callback","","",29],[9,"pausable_idle_callback","","",29],[9,"remote_callback","","",29],[9,"io","","The asynchronous I/O services. Not all event loops may provide one.",29],[9,"has_active_io","","",29],[6,"Callback","",""],[9,"call","","",30],[6,"RemoteCallback","",""],[9,"fire","","Trigger the remote callback. Note that the number of times the\ncallback is run is not guaranteed. All that is guaranteed is\nthat, after calling 'fire', the callback will be called at\nleast once, but multiple callbacks may be coalesced and\ncallbacks may be called more often requested. Destruction also\ntriggers the callback.",31],[6,"IoFactory","",""],[9,"tcp_connect","","",32],[9,"tcp_bind","","",32],[9,"udp_bind","","",32],[9,"unix_bind","","",32],[9,"unix_connect","","",32],[9,"get_host_addresses","","",32],[9,"fs_from_raw_fd","","",32],[9,"fs_open","","",32],[9,"fs_unlink","","",32],[9,"fs_stat","","",32],[9,"fs_mkdir","","",32],[9,"fs_chmod","","",32],[9,"fs_rmdir","","",32],[9,"fs_rename","","",32],[9,"fs_readdir","","",32],[9,"fs_lstat","","",32],[9,"fs_chown","","",32],[9,"fs_readlink","","",32],[9,"fs_symlink","","",32],[9,"fs_link","","",32],[9,"fs_utime","","",32],[9,"timer_init","","",32],[9,"spawn","","",32],[9,"kill","","",32],[9,"pipe_open","","",32],[9,"tty_open","","",32],[9,"signal","","",32],[6,"RtioTcpListener","",""],[9,"listen","","",33],[6,"RtioTcpAcceptor","",""],[9,"accept","","",34],[9,"accept_simultaneously","","",34],[9,"dont_accept_simultaneously","","",34],[9,"set_timeout","","",34],[9,"clone","","",34],[9,"close_accept","","",34],[6,"RtioTcpStream","",""],[9,"read","","",35],[9,"write","","",35],[9,"peer_name","","",35],[9,"control_congestion","","",35],[9,"nodelay","","",35],[9,"keepalive","","",35],[9,"letdie","","",35],[9,"clone","","",35],[9,"close_write","","",35],[9,"close_read","","",35],[9,"set_timeout","","",35],[9,"set_read_timeout","","",35],[9,"set_write_timeout","","",35],[6,"RtioSocket","",""],[9,"socket_name","","",36],[6,"RtioUdpSocket","",""],[9,"recv_from","","",37],[9,"send_to","","",37],[9,"join_multicast","","",37],[9,"leave_multicast","","",37],[9,"loop_multicast_locally","","",37],[9,"dont_loop_multicast_locally","","",37],[9,"multicast_time_to_live","","",37],[9,"time_to_live","","",37],[9,"hear_broadcasts","","",37],[9,"ignore_broadcasts","","",37],[9,"clone","","",37],[9,"set_timeout","","",37],[9,"set_read_timeout","","",37],[9,"set_write_timeout","","",37],[6,"RtioTimer","",""],[9,"sleep","","",38],[9,"oneshot","","",38],[9,"period","","",38],[6,"RtioFileStream","",""],[9,"read","","",39],[9,"write","","",39],[9,"pread","","",39],[9,"pwrite","","",39],[9,"seek","","",39],[9,"tell","","",39],[9,"fsync","","",39],[9,"datasync","","",39],[9,"truncate","","",39],[9,"fstat","","",39],[6,"RtioProcess","",""],[9,"id","","",40],[9,"kill","","",40],[9,"wait","","",40],[9,"set_timeout","","",40],[6,"RtioPipe","",""],[9,"read","","",41],[9,"write","","",41],[9,"clone","","",41],[9,"close_write","","",41],[9,"close_read","","",41],[9,"set_timeout","","",41],[9,"set_read_timeout","","",41],[9,"set_write_timeout","","",41],[6,"RtioUnixListener","",""],[9,"listen","","",42],[6,"RtioUnixAcceptor","",""],[9,"accept","","",43],[9,"set_timeout","","",43],[9,"clone","","",43],[9,"close_accept","","",43],[6,"RtioTTY","",""],[9,"read","","",44],[9,"write","","",44],[9,"set_raw","","",44],[9,"get_winsize","","",44],[9,"isatty","","",44],[6,"PausableIdleCallback","",""],[9,"pause","","",45],[9,"resume","","",45],[6,"RtioSignal","",""],[10,"drop","","",46],[10,"borrow","","Returns the local I/O: either the local scheduler's I/O services or\nthe native I/O services.",46],[10,"maybe_raise","","",46],[10,"new","","",46],[10,"get","","Returns the underlying I/O factory as a trait reference.",46],[10,"eq","","",23],[10,"ne","","",23],[10,"fmt","","",23],[10,"eq","","",18],[10,"ne","","",18],[0,"stack","rustrt","Rust stack-limit management"],[3,"record_os_managed_stack_bounds","rustrt::stack",""],[3,"record_rust_managed_stack_bounds","",""],[3,"record_sp_limit","","Records the current limit of the stack as specified by `end`."],[3,"get_sp_limit","","The counterpart of the function above, this function will fetch the current\nstack limit stored in TLS."],[5,"RED_ZONE","",""],[0,"task","rustrt","Language-level runtime services that should reasonably expected\nto be available 'everywhere'. Local heaps, GC, unwinding,\nlocal storage, and logging. Even a 'freestanding' Rust would likely want\nto implement this."],[1,"Task","rustrt::task","State associated with Rust tasks."],[11,"heap","","",47],[11,"gc","","",47],[11,"storage","","",47],[11,"unwinder","","",47],[11,"death","","",47],[11,"name","","",47],[1,"TaskOpts","",""],[11,"on_exit","","Invoke this procedure with the result of the task when it finishes.",48],[11,"name","","A name for the task-to-be, for identification in failure messages",48],[11,"stack_size","","The size of the stack for the spawned task",48],[1,"GarbageCollector","",""],[1,"LocalStorage","",""],[1,"Death","","Per-task state related to task death, killing, failure, etc."],[11,"on_exit","","",49],[1,"BlockedTasks","",""],[2,"BlockedTask","","A handle to a blocked task. Usually this means having the Box<Task>\npointer by ownership, but if the task is killable, a killer can steal it\nat any time."],[12,"Owned","","",50],[12,"Shared","","",50],[4,"Result","","Indicates the manner in which a task exited."],[10,"new","","Creates a new uninitialized task.",47],[10,"run","","Consumes ownership of a task, runs some code, and returns the task back.",47],[10,"destroy","","Destroy all associated resources of this task.",47],[10,"is_destroyed","","Queries whether this can be destroyed or not.",47],[10,"put_runtime","","Inserts a runtime object into this task, transferring ownership to the\ntask. It is illegal to replace a previous runtime object in this task\nwith this argument.",47],[10,"take_runtime","","Removes the runtime from this task, transferring ownership to the\ncaller.",47],[10,"maybe_take_runtime","","Attempts to extract the runtime as a specific type. If the runtime does\nnot have the provided type, then the runtime is not removed. If the\nruntime does have the specified type, then it is removed and returned\n(transfer of ownership).",47],[10,"spawn_sibling","","Spawns a sibling to this task. The newly spawned task is configured with\nthe `opts` structure and will run `f` as the body of its code.",47],[10,"deschedule","","Deschedules the current task, invoking `f` `amt` times. It is not\nrecommended to use this function directly, but rather communication\nprimitives in `std::comm` should be used.",47],[10,"reawaken","","Wakes up a previously blocked task, optionally specifying whether the\ncurrent task can accept a change in scheduling. This function can only\nbe called on tasks that were previously blocked in `deschedule`.",47],[10,"yield_now","","Yields control of this task to another task. This function will\neventually return, but possibly not immediately. This is used as an\nopportunity to allow other tasks a chance to run.",47],[10,"maybe_yield","","Similar to `yield_now`, except that this function may immediately return\nwithout yielding (depending on what the runtime decides to do).",47],[10,"local_io","","Acquires a handle to the I/O factory that this task contains, normally\nstored in the task's runtime. This factory may not always be available,\nwhich is why the return type is `Option`",47],[10,"stack_bounds","","Returns the stack bounds for this task in (lo, hi) format. The stack\nbounds may not be known for all tasks, so the return value may be\n`None`.",47],[10,"can_block","","Returns whether it is legal for this task to block the OS thread that it\nis running on.",47],[10,"drop","","Consume this task, flagging it as a candidate for destruction.",47],[10,"drop","","",47],[10,"new","","",48],[10,"next","","",51],[10,"wake","","Returns Some if the task was successfully woken; None if already killed.",50],[10,"reawaken","","Reawakens this task if ownership is acquired. If finer-grained control\nis desired, use `wake` instead.",50],[10,"trash","","",50],[10,"block","","Create a blocked task, unless the task was already killed.",50],[10,"make_selectable","","Converts one blocked task handle to a list of many handles to the same.",50],[10,"cast_to_uint","","Convert to an unsafe uint value. Useful for storing in a pipe's state\nflag.",50],[10,"cast_from_uint","","Convert from an unsafe uint value. Useful for retrieving a pipe's state\nflag.",50],[10,"new","","",49],[0,"thread","rustrt","Native os-thread management"],[1,"Thread","rustrt::thread","This struct represents a native thread's state. This is used to join on an\nexisting thread created in the join-able state."],[10,"start","","Starts execution of a new OS thread.",52],[10,"start_stack","","Performs the same functionality as `start`, but specifies an explicit\nstack size for the new thread.",52],[10,"spawn","","This will spawn a new thread, but it will not wait for the thread to\nfinish, nor is it possible to wait for the thread to finish.",52],[10,"spawn_stack","","Performs the same functionality as `spawn`, but explicitly specifies a\nstack size for the new thread.",52],[10,"yield_now","","Relinquishes the CPU slot that this OS-thread is currently using,\nallowing another thread to run for awhile.",52],[10,"join","","Wait for this thread to finish, returning the result of the thread's\ncalculation.",52],[10,"drop","","",52],[0,"unwind","rustrt","Implementation of Rust stack unwinding"],[1,"Unwinder","rustrt::unwind",""],[3,"try","","Invoke a closure, capturing the cause of failure if one occurs."],[3,"rust_begin_unwind","",""],[3,"begin_unwind_fmt","","The entry point for unwinding with a formatted message."],[3,"begin_unwind","","This is the entry point of unwinding for fail!() and assert!()."],[3,"register","","Register a callback to be invoked when a task unwinds."],[4,"Callback","",""],[10,"new","","",53],[10,"unwinding","","",53],[10,"fmt","core::num","",54],[10,"eq","","",54],[10,"ne","","",54],[10,"ne","","",54],[10,"fmt","core::intrinsics","",55],[10,"assert_receiver_is_total_eq","","",55],[10,"eq","","",55],[10,"ne","","",55],[10,"ne","","",55],[10,"of","","Returns the `TypeId` of the type this generic function has been instantiated with",55],[10,"hash","","",55],[10,"clone","core::kinds::marker","",56],[10,"clone_from","","",56],[10,"eq","","",56],[10,"ne","","",56],[10,"ne","","",56],[10,"clone","","",57],[10,"clone_from","","",57],[10,"eq","","",57],[10,"ne","","",57],[10,"ne","","",57],[10,"clone","","",58],[10,"clone_from","","",58],[10,"eq","","",58],[10,"ne","","",58],[10,"ne","","",58],[10,"clone","","",59],[10,"clone_from","","",59],[10,"eq","","",59],[10,"ne","","",59],[10,"ne","","",59],[10,"clone","","",60],[10,"clone_from","","",60],[10,"eq","","",60],[10,"ne","","",60],[10,"ne","","",60],[10,"clone","","",61],[10,"clone_from","","",61],[10,"eq","","",61],[10,"ne","","",61],[10,"ne","","",61],[10,"clone","","",62],[10,"clone_from","","",62],[10,"eq","","",62],[10,"ne","","",62],[10,"ne","","",62],[10,"clone","","",63],[10,"clone_from","","",63],[10,"eq","","",63],[10,"ne","","",63],[10,"ne","","",63],[10,"clone","","",64],[10,"clone_from","","",64],[10,"eq","","",64],[10,"ne","","",64],[10,"ne","","",64],[10,"clone","","",65],[10,"clone_from","","",65],[10,"eq","","",65],[10,"ne","","",65],[10,"ne","","",65],[10,"fmt","core::cmp","",66],[10,"eq","","",66],[10,"ne","","",66],[10,"ne","","",66],[10,"clone","","",66],[10,"clone_from","","",66],[10,"reverse","","Reverse the `Ordering`, so that `Less` becomes `Greater` and\nvice versa.",66],[10,"assert_receiver_is_total_eq","","",66],[10,"cmp","","",66],[10,"partial_cmp","","",66],[10,"lt","","",66],[10,"le","","",66],[10,"gt","","",66],[10,"ge","","",66],[10,"new","core::atomic","Create a new `AtomicBool`",67],[10,"load","","Load the value",67],[10,"store","","Store the value",67],[10,"swap","","Store a value, returning the old value",67],[10,"compare_and_swap","","If the current value is the same as expected, store a new value",67],[10,"fetch_and","","A logical \"and\" operation",67],[10,"fetch_nand","","A logical \"nand\" operation",67],[10,"fetch_or","","A logical \"or\" operation",67],[10,"fetch_xor","","A logical \"xor\" operation",67],[10,"new","","Create a new `AtomicInt`",68],[10,"load","","Load the value",68],[10,"store","","Store the value",68],[10,"swap","","Store a value, returning the old value",68],[10,"compare_and_swap","","If the current value is the same as expected, store a new value",68],[10,"fetch_add","","Add to the current value, returning the previous",68],[10,"fetch_sub","","Subtract from the current value, returning the previous",68],[10,"fetch_and","","Bitwise and with the current value, returning the previous",68],[10,"fetch_or","","Bitwise or with the current value, returning the previous",68],[10,"fetch_xor","","Bitwise xor with the current value, returning the previous",68],[10,"new","","Create a new `AtomicUint`",69],[10,"load","","Load the value",69],[10,"store","","Store the value",69],[10,"swap","","Store a value, returning the old value",69],[10,"compare_and_swap","","If the current value is the same as expected, store a new value",69],[10,"fetch_add","","Add to the current value, returning the previous",69],[10,"fetch_sub","","Subtract from the current value, returning the previous",69],[10,"fetch_and","","Bitwise and with the current value, returning the previous",69],[10,"fetch_or","","Bitwise or with the current value, returning the previous",69],[10,"fetch_xor","","Bitwise xor with the current value, returning the previous",69],[10,"new","","Create a new `AtomicPtr`",70],[10,"load","","Load the value",70],[10,"store","","Store the value",70],[10,"swap","","Store a value, returning the old value",70],[10,"compare_and_swap","","If the current value is the same as expected, store a new value",70],[10,"new","core::cell","Creates a new `Cell` containing the given value.",71],[10,"get","","Returns a copy of the contained value.",71],[10,"set","","Sets the contained value.",71],[10,"clone","","",71],[10,"clone_from","","",71],[10,"eq","","",71],[10,"ne","","",71],[10,"new","","Create a new `RefCell` containing `value`",72],[10,"unwrap","","Consumes the `RefCell`, returning the wrapped value.",72],[10,"try_borrow","","Attempts to immutably borrow the wrapped value.",72],[10,"borrow","","Immutably borrows the wrapped value.",72],[10,"try_borrow_mut","","Mutably borrows the wrapped value.",72],[10,"borrow_mut","","Mutably borrows the wrapped value.",72],[10,"clone","","",72],[10,"clone_from","","",72],[10,"eq","","",72],[10,"ne","","",72],[10,"drop","","",73],[10,"deref","","",73],[10,"drop","","",74],[10,"deref","","",74],[10,"deref_mut","","",74],[10,"new","","Construct a new instance of `UnsafeCell` which will wrap the specified\nvalue.",75],[10,"get","","Gets a mutable pointer to the wrapped value.",75],[10,"unwrap","","Unwraps the value",75],[10,"drop","core::finally","",76],[10,"rposition","core::iter","",77],[10,"len","","",77],[10,"rposition","","",78],[10,"len","","",78],[10,"rposition","","",79],[10,"len","","",79],[10,"rposition","","",80],[10,"len","","",80],[10,"rposition","","",81],[10,"len","","",81],[10,"clone","","",79],[10,"clone_from","","",79],[10,"next","","",79],[10,"size_hint","","",79],[10,"size_hint","","",79],[10,"chain","","",79],[10,"zip","","",79],[10,"map","","",79],[10,"filter","","",79],[10,"filter_map","","",79],[10,"enumerate","","",79],[10,"peekable","","",79],[10,"skip_while","","",79],[10,"take_while","","",79],[10,"skip","","",79],[10,"take","","",79],[10,"scan","","",79],[10,"flat_map","","",79],[10,"fuse","","",79],[10,"inspect","","",79],[10,"by_ref","","",79],[10,"advance","","",79],[10,"collect","","",79],[10,"nth","","",79],[10,"last","","",79],[10,"fold","","",79],[10,"count","","",79],[10,"all","","",79],[10,"any","","",79],[10,"find","","",79],[10,"position","","",79],[10,"max_by","","",79],[10,"min_by","","",79],[10,"next_back","","",79],[10,"rev","","",79],[10,"indexable","","",79],[10,"idx","","",79],[10,"next","","",82],[10,"size_hint","","",82],[10,"size_hint","","",82],[10,"chain","","",82],[10,"zip","","",82],[10,"map","","",82],[10,"filter","","",82],[10,"filter_map","","",82],[10,"enumerate","","",82],[10,"peekable","","",82],[10,"skip_while","","",82],[10,"take_while","","",82],[10,"skip","","",82],[10,"take","","",82],[10,"scan","","",82],[10,"flat_map","","",82],[10,"fuse","","",82],[10,"inspect","","",82],[10,"by_ref","","",82],[10,"advance","","",82],[10,"collect","","",82],[10,"nth","","",82],[10,"last","","",82],[10,"fold","","",82],[10,"count","","",82],[10,"all","","",82],[10,"any","","",82],[10,"find","","",82],[10,"position","","",82],[10,"max_by","","",82],[10,"min_by","","",82],[10,"next_back","","",82],[10,"rev","","",82],[10,"fmt","","",83],[10,"eq","","",83],[10,"ne","","",83],[10,"ne","","",83],[10,"clone","","",83],[10,"clone_from","","",83],[10,"into_option","","`into_option` creates an `Option` of type `(T,T)`. The returned `Option` has variant\n`None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise variant\n`Some(x,y)` is returned where `x <= y`. If `MinMaxResult` has variant `OneElement(x)`,\nperforming this operation will make one clone of `x`.",83],[10,"clone","","",84],[10,"clone_from","","",84],[10,"next","","",84],[10,"size_hint","","",84],[10,"size_hint","","",84],[10,"chain","","",84],[10,"zip","","",84],[10,"map","","",84],[10,"filter","","",84],[10,"filter_map","","",84],[10,"enumerate","","",84],[10,"peekable","","",84],[10,"skip_while","","",84],[10,"take_while","","",84],[10,"skip","","",84],[10,"take","","",84],[10,"scan","","",84],[10,"flat_map","","",84],[10,"fuse","","",84],[10,"inspect","","",84],[10,"by_ref","","",84],[10,"advance","","",84],[10,"collect","","",84],[10,"nth","","",84],[10,"last","","",84],[10,"fold","","",84],[10,"count","","",84],[10,"all","","",84],[10,"any","","",84],[10,"find","","",84],[10,"position","","",84],[10,"max_by","","",84],[10,"min_by","","",84],[10,"indexable","","",84],[10,"idx","","",84],[10,"clone","","",85],[10,"clone_from","","",85],[10,"next","","",85],[10,"size_hint","","",85],[10,"size_hint","","",85],[10,"chain","","",85],[10,"zip","","",85],[10,"map","","",85],[10,"filter","","",85],[10,"filter_map","","",85],[10,"enumerate","","",85],[10,"peekable","","",85],[10,"skip_while","","",85],[10,"take_while","","",85],[10,"skip","","",85],[10,"take","","",85],[10,"scan","","",85],[10,"flat_map","","",85],[10,"fuse","","",85],[10,"inspect","","",85],[10,"by_ref","","",85],[10,"advance","","",85],[10,"collect","","",85],[10,"nth","","",85],[10,"last","","",85],[10,"fold","","",85],[10,"count","","",85],[10,"all","","",85],[10,"any","","",85],[10,"find","","",85],[10,"position","","",85],[10,"max_by","","",85],[10,"min_by","","",85],[10,"next_back","","",85],[10,"rev","","",85],[10,"indexable","","",85],[10,"idx","","",85],[10,"clone","","",81],[10,"clone_from","","",81],[10,"next","","",81],[10,"size_hint","","",81],[10,"size_hint","","",81],[10,"chain","","",81],[10,"zip","","",81],[10,"map","","",81],[10,"filter","","",81],[10,"filter_map","","",81],[10,"enumerate","","",81],[10,"peekable","","",81],[10,"skip_while","","",81],[10,"take_while","","",81],[10,"skip","","",81],[10,"take","","",81],[10,"scan","","",81],[10,"flat_map","","",81],[10,"fuse","","",81],[10,"inspect","","",81],[10,"by_ref","","",81],[10,"advance","","",81],[10,"collect","","",81],[10,"nth","","",81],[10,"last","","",81],[10,"fold","","",81],[10,"count","","",81],[10,"all","","",81],[10,"any","","",81],[10,"find","","",81],[10,"position","","",81],[10,"max_by","","",81],[10,"min_by","","",81],[10,"next_back","","",81],[10,"rev","","",81],[10,"indexable","","",81],[10,"idx","","",81],[10,"next","","",80],[10,"size_hint","","",80],[10,"size_hint","","",80],[10,"chain","","",80],[10,"zip","","",80],[10,"map","","",80],[10,"filter","","",80],[10,"filter_map","","",80],[10,"enumerate","","",80],[10,"peekable","","",80],[10,"skip_while","","",80],[10,"take_while","","",80],[10,"skip","","",80],[10,"take","","",80],[10,"scan","","",80],[10,"flat_map","","",80],[10,"fuse","","",80],[10,"inspect","","",80],[10,"by_ref","","",80],[10,"advance","","",80],[10,"collect","","",80],[10,"nth","","",80],[10,"last","","",80],[10,"fold","","",80],[10,"count","","",80],[10,"all","","",80],[10,"any","","",80],[10,"find","","",80],[10,"position","","",80],[10,"max_by","","",80],[10,"min_by","","",80],[10,"next_back","","",80],[10,"rev","","",80],[10,"indexable","","",80],[10,"idx","","",80],[10,"next","","",86],[10,"size_hint","","",86],[10,"size_hint","","",86],[10,"chain","","",86],[10,"zip","","",86],[10,"map","","",86],[10,"filter","","",86],[10,"filter_map","","",86],[10,"enumerate","","",86],[10,"peekable","","",86],[10,"skip_while","","",86],[10,"take_while","","",86],[10,"skip","","",86],[10,"take","","",86],[10,"scan","","",86],[10,"flat_map","","",86],[10,"fuse","","",86],[10,"inspect","","",86],[10,"by_ref","","",86],[10,"advance","","",86],[10,"collect","","",86],[10,"nth","","",86],[10,"last","","",86],[10,"fold","","",86],[10,"count","","",86],[10,"all","","",86],[10,"any","","",86],[10,"find","","",86],[10,"position","","",86],[10,"max_by","","",86],[10,"min_by","","",86],[10,"next_back","","",86],[10,"rev","","",86],[10,"next","","",87],[10,"size_hint","","",87],[10,"size_hint","","",87],[10,"chain","","",87],[10,"zip","","",87],[10,"map","","",87],[10,"filter","","",87],[10,"filter_map","","",87],[10,"enumerate","","",87],[10,"peekable","","",87],[10,"skip_while","","",87],[10,"take_while","","",87],[10,"skip","","",87],[10,"take","","",87],[10,"scan","","",87],[10,"flat_map","","",87],[10,"fuse","","",87],[10,"inspect","","",87],[10,"by_ref","","",87],[10,"advance","","",87],[10,"collect","","",87],[10,"nth","","",87],[10,"last","","",87],[10,"fold","","",87],[10,"count","","",87],[10,"all","","",87],[10,"any","","",87],[10,"find","","",87],[10,"position","","",87],[10,"max_by","","",87],[10,"min_by","","",87],[10,"next_back","","",87],[10,"rev","","",87],[10,"clone","","",77],[10,"clone_from","","",77],[10,"next","","",77],[10,"size_hint","","",77],[10,"size_hint","","",77],[10,"chain","","",77],[10,"zip","","",77],[10,"map","","",77],[10,"filter","","",77],[10,"filter_map","","",77],[10,"enumerate","","",77],[10,"peekable","","",77],[10,"skip_while","","",77],[10,"take_while","","",77],[10,"skip","","",77],[10,"take","","",77],[10,"scan","","",77],[10,"flat_map","","",77],[10,"fuse","","",77],[10,"inspect","","",77],[10,"by_ref","","",77],[10,"advance","","",77],[10,"collect","","",77],[10,"nth","","",77],[10,"last","","",77],[10,"fold","","",77],[10,"count","","",77],[10,"all","","",77],[10,"any","","",77],[10,"find","","",77],[10,"position","","",77],[10,"max_by","","",77],[10,"min_by","","",77],[10,"next_back","","",77],[10,"rev","","",77],[10,"indexable","","",77],[10,"idx","","",77],[10,"next","","",88],[10,"size_hint","","",88],[10,"size_hint","","",88],[10,"chain","","",88],[10,"zip","","",88],[10,"map","","",88],[10,"filter","","",88],[10,"filter_map","","",88],[10,"enumerate","","",88],[10,"peekable","","",88],[10,"skip_while","","",88],[10,"take_while","","",88],[10,"skip","","",88],[10,"take","","",88],[10,"scan","","",88],[10,"flat_map","","",88],[10,"fuse","","",88],[10,"inspect","","",88],[10,"by_ref","","",88],[10,"advance","","",88],[10,"collect","","",88],[10,"nth","","",88],[10,"last","","",88],[10,"fold","","",88],[10,"count","","",88],[10,"all","","",88],[10,"any","","",88],[10,"find","","",88],[10,"position","","",88],[10,"max_by","","",88],[10,"min_by","","",88],[10,"peek","","Return a reference to the next element of the iterator with out advancing it,\nor None if the iterator is exhausted.",88],[10,"is_empty","","Check whether peekable iterator is empty or not.",88],[10,"next","","",89],[10,"size_hint","","",89],[10,"size_hint","","",89],[10,"chain","","",89],[10,"zip","","",89],[10,"map","","",89],[10,"filter","","",89],[10,"filter_map","","",89],[10,"enumerate","","",89],[10,"peekable","","",89],[10,"skip_while","","",89],[10,"take_while","","",89],[10,"skip","","",89],[10,"take","","",89],[10,"scan","","",89],[10,"flat_map","","",89],[10,"fuse","","",89],[10,"inspect","","",89],[10,"by_ref","","",89],[10,"advance","","",89],[10,"collect","","",89],[10,"nth","","",89],[10,"last","","",89],[10,"fold","","",89],[10,"count","","",89],[10,"all","","",89],[10,"any","","",89],[10,"find","","",89],[10,"position","","",89],[10,"max_by","","",89],[10,"min_by","","",89],[10,"next","","",90],[10,"size_hint","","",90],[10,"size_hint","","",90],[10,"chain","","",90],[10,"zip","","",90],[10,"map","","",90],[10,"filter","","",90],[10,"filter_map","","",90],[10,"enumerate","","",90],[10,"peekable","","",90],[10,"skip_while","","",90],[10,"take_while","","",90],[10,"skip","","",90],[10,"take","","",90],[10,"scan","","",90],[10,"flat_map","","",90],[10,"fuse","","",90],[10,"inspect","","",90],[10,"by_ref","","",90],[10,"advance","","",90],[10,"collect","","",90],[10,"nth","","",90],[10,"last","","",90],[10,"fold","","",90],[10,"count","","",90],[10,"all","","",90],[10,"any","","",90],[10,"find","","",90],[10,"position","","",90],[10,"max_by","","",90],[10,"min_by","","",90],[10,"clone","","",91],[10,"clone_from","","",91],[10,"next","","",91],[10,"size_hint","","",91],[10,"size_hint","","",91],[10,"chain","","",91],[10,"zip","","",91],[10,"map","","",91],[10,"filter","","",91],[10,"filter_map","","",91],[10,"enumerate","","",91],[10,"peekable","","",91],[10,"skip_while","","",91],[10,"take_while","","",91],[10,"skip","","",91],[10,"take","","",91],[10,"scan","","",91],[10,"flat_map","","",91],[10,"fuse","","",91],[10,"inspect","","",91],[10,"by_ref","","",91],[10,"advance","","",91],[10,"collect","","",91],[10,"nth","","",91],[10,"last","","",91],[10,"fold","","",91],[10,"count","","",91],[10,"all","","",91],[10,"any","","",91],[10,"find","","",91],[10,"position","","",91],[10,"max_by","","",91],[10,"min_by","","",91],[10,"indexable","","",91],[10,"idx","","",91],[10,"clone","","",92],[10,"clone_from","","",92],[10,"next","","",92],[10,"size_hint","","",92],[10,"size_hint","","",92],[10,"chain","","",92],[10,"zip","","",92],[10,"map","","",92],[10,"filter","","",92],[10,"filter_map","","",92],[10,"enumerate","","",92],[10,"peekable","","",92],[10,"skip_while","","",92],[10,"take_while","","",92],[10,"skip","","",92],[10,"take","","",92],[10,"scan","","",92],[10,"flat_map","","",92],[10,"fuse","","",92],[10,"inspect","","",92],[10,"by_ref","","",92],[10,"advance","","",92],[10,"collect","","",92],[10,"nth","","",92],[10,"last","","",92],[10,"fold","","",92],[10,"count","","",92],[10,"all","","",92],[10,"any","","",92],[10,"find","","",92],[10,"position","","",92],[10,"max_by","","",92],[10,"min_by","","",92],[10,"indexable","","",92],[10,"idx","","",92],[10,"next","","",93],[10,"size_hint","","",93],[10,"size_hint","","",93],[10,"chain","","",93],[10,"zip","","",93],[10,"map","","",93],[10,"filter","","",93],[10,"filter_map","","",93],[10,"enumerate","","",93],[10,"peekable","","",93],[10,"skip_while","","",93],[10,"take_while","","",93],[10,"skip","","",93],[10,"take","","",93],[10,"scan","","",93],[10,"flat_map","","",93],[10,"fuse","","",93],[10,"inspect","","",93],[10,"by_ref","","",93],[10,"advance","","",93],[10,"collect","","",93],[10,"nth","","",93],[10,"last","","",93],[10,"fold","","",93],[10,"count","","",93],[10,"all","","",93],[10,"any","","",93],[10,"find","","",93],[10,"position","","",93],[10,"max_by","","",93],[10,"min_by","","",93],[10,"next","","",94],[10,"size_hint","","",94],[10,"size_hint","","",94],[10,"chain","","",94],[10,"zip","","",94],[10,"map","","",94],[10,"filter","","",94],[10,"filter_map","","",94],[10,"enumerate","","",94],[10,"peekable","","",94],[10,"skip_while","","",94],[10,"take_while","","",94],[10,"skip","","",94],[10,"take","","",94],[10,"scan","","",94],[10,"flat_map","","",94],[10,"fuse","","",94],[10,"inspect","","",94],[10,"by_ref","","",94],[10,"advance","","",94],[10,"collect","","",94],[10,"nth","","",94],[10,"last","","",94],[10,"fold","","",94],[10,"count","","",94],[10,"all","","",94],[10,"any","","",94],[10,"find","","",94],[10,"position","","",94],[10,"max_by","","",94],[10,"min_by","","",94],[10,"next_back","","",94],[10,"rev","","",94],[10,"clone","","",95],[10,"clone_from","","",95],[10,"next","","",95],[10,"size_hint","","",95],[10,"size_hint","","",95],[10,"chain","","",95],[10,"zip","","",95],[10,"map","","",95],[10,"filter","","",95],[10,"filter_map","","",95],[10,"enumerate","","",95],[10,"peekable","","",95],[10,"skip_while","","",95],[10,"take_while","","",95],[10,"skip","","",95],[10,"take","","",95],[10,"scan","","",95],[10,"flat_map","","",95],[10,"fuse","","",95],[10,"inspect","","",95],[10,"by_ref","","",95],[10,"advance","","",95],[10,"collect","","",95],[10,"nth","","",95],[10,"last","","",95],[10,"fold","","",95],[10,"count","","",95],[10,"all","","",95],[10,"any","","",95],[10,"find","","",95],[10,"position","","",95],[10,"max_by","","",95],[10,"min_by","","",95],[10,"next_back","","",95],[10,"rev","","",95],[10,"indexable","","",95],[10,"idx","","",95],[10,"reset_fuse","","Resets the fuse such that the next call to .next() or .next_back() will\ncall the underlying iterator again even if it previously returned None.",95],[10,"next","","",78],[10,"size_hint","","",78],[10,"size_hint","","",78],[10,"chain","","",78],[10,"zip","","",78],[10,"map","","",78],[10,"filter","","",78],[10,"filter_map","","",78],[10,"enumerate","","",78],[10,"peekable","","",78],[10,"skip_while","","",78],[10,"take_while","","",78],[10,"skip","","",78],[10,"take","","",78],[10,"scan","","",78],[10,"flat_map","","",78],[10,"fuse","","",78],[10,"inspect","","",78],[10,"by_ref","","",78],[10,"advance","","",78],[10,"collect","","",78],[10,"nth","","",78],[10,"last","","",78],[10,"fold","","",78],[10,"count","","",78],[10,"all","","",78],[10,"any","","",78],[10,"find","","",78],[10,"position","","",78],[10,"max_by","","",78],[10,"min_by","","",78],[10,"next_back","","",78],[10,"rev","","",78],[10,"indexable","","",78],[10,"idx","","",78],[10,"new","","Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the iterator",96],[10,"next","","",96],[10,"size_hint","","",96],[10,"size_hint","","",96],[10,"chain","","",96],[10,"zip","","",96],[10,"map","","",96],[10,"filter","","",96],[10,"filter_map","","",96],[10,"enumerate","","",96],[10,"peekable","","",96],[10,"skip_while","","",96],[10,"take_while","","",96],[10,"skip","","",96],[10,"take","","",96],[10,"scan","","",96],[10,"flat_map","","",96],[10,"fuse","","",96],[10,"inspect","","",96],[10,"by_ref","","",96],[10,"advance","","",96],[10,"collect","","",96],[10,"nth","","",96],[10,"last","","",96],[10,"fold","","",96],[10,"count","","",96],[10,"all","","",96],[10,"any","","",96],[10,"find","","",96],[10,"position","","",96],[10,"max_by","","",96],[10,"min_by","","",96],[10,"clone","","",97],[10,"clone_from","","",97],[10,"next","","",97],[10,"size_hint","","",97],[10,"size_hint","","",97],[10,"chain","","",97],[10,"zip","","",97],[10,"map","","",97],[10,"filter","","",97],[10,"filter_map","","",97],[10,"enumerate","","",97],[10,"peekable","","",97],[10,"skip_while","","",97],[10,"take_while","","",97],[10,"skip","","",97],[10,"take","","",97],[10,"scan","","",97],[10,"flat_map","","",97],[10,"fuse","","",97],[10,"inspect","","",97],[10,"by_ref","","",97],[10,"advance","","",97],[10,"collect","","",97],[10,"nth","","",97],[10,"last","","",97],[10,"fold","","",97],[10,"count","","",97],[10,"all","","",97],[10,"any","","",97],[10,"find","","",97],[10,"position","","",97],[10,"max_by","","",97],[10,"min_by","","",97],[10,"clone","","",98],[10,"clone_from","","",98],[10,"next","","",98],[10,"size_hint","","",98],[10,"size_hint","","",98],[10,"chain","","",98],[10,"zip","","",98],[10,"map","","",98],[10,"filter","","",98],[10,"filter_map","","",98],[10,"enumerate","","",98],[10,"peekable","","",98],[10,"skip_while","","",98],[10,"take_while","","",98],[10,"skip","","",98],[10,"take","","",98],[10,"scan","","",98],[10,"flat_map","","",98],[10,"fuse","","",98],[10,"inspect","","",98],[10,"by_ref","","",98],[10,"advance","","",98],[10,"collect","","",98],[10,"nth","","",98],[10,"last","","",98],[10,"fold","","",98],[10,"count","","",98],[10,"all","","",98],[10,"any","","",98],[10,"find","","",98],[10,"position","","",98],[10,"max_by","","",98],[10,"min_by","","",98],[10,"next_back","","",98],[10,"rev","","",98],[10,"clone","","",99],[10,"clone_from","","",99],[10,"next","","",99],[10,"size_hint","","",99],[10,"size_hint","","",99],[10,"chain","","",99],[10,"zip","","",99],[10,"map","","",99],[10,"filter","","",99],[10,"filter_map","","",99],[10,"enumerate","","",99],[10,"peekable","","",99],[10,"skip_while","","",99],[10,"take_while","","",99],[10,"skip","","",99],[10,"take","","",99],[10,"scan","","",99],[10,"flat_map","","",99],[10,"fuse","","",99],[10,"inspect","","",99],[10,"by_ref","","",99],[10,"advance","","",99],[10,"collect","","",99],[10,"nth","","",99],[10,"last","","",99],[10,"fold","","",99],[10,"count","","",99],[10,"all","","",99],[10,"any","","",99],[10,"find","","",99],[10,"position","","",99],[10,"max_by","","",99],[10,"min_by","","",99],[10,"next_back","","",99],[10,"rev","","",99],[10,"clone","","",100],[10,"clone_from","","",100],[10,"next","","",100],[10,"size_hint","","",100],[10,"chain","","",100],[10,"zip","","",100],[10,"map","","",100],[10,"filter","","",100],[10,"filter_map","","",100],[10,"enumerate","","",100],[10,"peekable","","",100],[10,"skip_while","","",100],[10,"take_while","","",100],[10,"skip","","",100],[10,"take","","",100],[10,"scan","","",100],[10,"flat_map","","",100],[10,"fuse","","",100],[10,"inspect","","",100],[10,"by_ref","","",100],[10,"advance","","",100],[10,"collect","","",100],[10,"nth","","",100],[10,"last","","",100],[10,"fold","","",100],[10,"count","","",100],[10,"all","","",100],[10,"any","","",100],[10,"find","","",100],[10,"position","","",100],[10,"max_by","","",100],[10,"min_by","","",100],[10,"clone","","",101],[10,"clone_from","","",101],[10,"next","","",101],[10,"size_hint","","",101],[10,"chain","","",101],[10,"zip","","",101],[10,"map","","",101],[10,"filter","","",101],[10,"filter_map","","",101],[10,"enumerate","","",101],[10,"peekable","","",101],[10,"skip_while","","",101],[10,"take_while","","",101],[10,"skip","","",101],[10,"take","","",101],[10,"scan","","",101],[10,"flat_map","","",101],[10,"fuse","","",101],[10,"inspect","","",101],[10,"by_ref","","",101],[10,"advance","","",101],[10,"collect","","",101],[10,"nth","","",101],[10,"last","","",101],[10,"fold","","",101],[10,"count","","",101],[10,"all","","",101],[10,"any","","",101],[10,"find","","",101],[10,"position","","",101],[10,"max_by","","",101],[10,"min_by","","",101],[10,"clone","","",102],[10,"clone_from","","",102],[10,"new","","Create a new `Repeat` that endlessly repeats the element `elt`.",102],[10,"next","","",102],[10,"size_hint","","",102],[10,"size_hint","","",102],[10,"chain","","",102],[10,"zip","","",102],[10,"map","","",102],[10,"filter","","",102],[10,"filter_map","","",102],[10,"enumerate","","",102],[10,"peekable","","",102],[10,"skip_while","","",102],[10,"take_while","","",102],[10,"skip","","",102],[10,"take","","",102],[10,"scan","","",102],[10,"flat_map","","",102],[10,"fuse","","",102],[10,"inspect","","",102],[10,"by_ref","","",102],[10,"advance","","",102],[10,"collect","","",102],[10,"nth","","",102],[10,"last","","",102],[10,"fold","","",102],[10,"count","","",102],[10,"all","","",102],[10,"any","","",102],[10,"find","","",102],[10,"position","","",102],[10,"max_by","","",102],[10,"min_by","","",102],[10,"next_back","","",102],[10,"rev","","",102],[10,"indexable","","",102],[10,"idx","","",102],[10,"fmt","core::option","",103],[10,"cmp","","",103],[10,"assert_receiver_is_total_eq","","",103],[10,"partial_cmp","","",103],[10,"lt","","",103],[10,"le","","",103],[10,"gt","","",103],[10,"ge","","",103],[10,"lt","","",103],[10,"le","","",103],[10,"gt","","",103],[10,"ge","","",103],[10,"eq","","",103],[10,"ne","","",103],[10,"ne","","",103],[10,"clone","","",103],[10,"clone_from","","",103],[10,"is_some","","Returns `true` if the option is a `Some` value",103],[10,"is_none","","Returns `true` if the option is a `None` value",103],[10,"as_ref","","Convert from `Option<T>` to `Option<&T>`",103],[10,"as_mut","","Convert from `Option<T>` to `Option<&mut T>`",103],[10,"as_mut_slice","","Convert from `Option<T>` to `&mut [T]` (without copying)",103],[10,"expect","","Unwraps an option, yielding the content of a `Some`",103],[10,"unwrap","","Returns the inner `T` of a `Some(T)`.",103],[10,"unwrap_or","","Returns the contained value or a default.",103],[10,"unwrap_or_else","","Returns the contained value or computes it from a closure.",103],[10,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",103],[10,"map_or","","Applies a function to the contained value or returns a default.",103],[10,"map_or_else","","Applies a function to the contained value or computes a default.",103],[10,"mutate","","Deprecated.",103],[10,"mutate_or_set","","Deprecated.",103],[10,"iter","","Returns an iterator over the possibly contained value.",103],[10,"mut_iter","","Deprecated: use `iter_mut`",103],[10,"iter_mut","","Returns a mutable iterator over the possibly contained value.",103],[10,"move_iter","","Deprecated: use `into_iter`.",103],[10,"into_iter","","Returns a consuming iterator over the possibly contained value.",103],[10,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",103],[10,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",103],[10,"or","","Returns the option if it contains a value, otherwise returns `optb`.",103],[10,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",103],[10,"take","","Takes the value out of the option, leaving a `None` in its place.",103],[10,"filtered","","Deprecated.",103],[10,"while_some","","Deprecated.",103],[10,"take_unwrap","","Deprecated: use `take().unwrap()` instead.",103],[10,"get_ref","","Deprecated: use `as_ref().unwrap()` instead.",103],[10,"get_mut_ref","","Deprecated: use `as_mut().unwrap()` instead.",103],[10,"unwrap_or_default","","Returns the contained value or a default",103],[10,"as_slice","","Convert from `Option<T>` to `&[T]` (without copying)",103],[10,"default","","",103],[10,"clone","","",104],[10,"clone_from","","",104],[10,"next","","",104],[10,"size_hint","","",104],[10,"size_hint","","",104],[10,"chain","","",104],[10,"zip","","",104],[10,"map","","",104],[10,"filter","","",104],[10,"filter_map","","",104],[10,"enumerate","","",104],[10,"peekable","","",104],[10,"skip_while","","",104],[10,"take_while","","",104],[10,"skip","","",104],[10,"take","","",104],[10,"scan","","",104],[10,"flat_map","","",104],[10,"fuse","","",104],[10,"inspect","","",104],[10,"by_ref","","",104],[10,"advance","","",104],[10,"collect","","",104],[10,"nth","","",104],[10,"last","","",104],[10,"fold","","",104],[10,"count","","",104],[10,"all","","",104],[10,"any","","",104],[10,"find","","",104],[10,"position","","",104],[10,"max_by","","",104],[10,"min_by","","",104],[10,"next_back","","",104],[10,"rev","","",104],[10,"rposition","","",104],[10,"len","","",104],[10,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",103],[10,"fmt","core::result","",105],[10,"cmp","","",105],[10,"assert_receiver_is_total_eq","","",105],[10,"partial_cmp","","",105],[10,"lt","","",105],[10,"le","","",105],[10,"gt","","",105],[10,"ge","","",105],[10,"lt","","",105],[10,"le","","",105],[10,"gt","","",105],[10,"ge","","",105],[10,"eq","","",105],[10,"ne","","",105],[10,"ne","","",105],[10,"clone","","",105],[10,"clone_from","","",105],[10,"is_ok","","Returns true if the result is `Ok`",105],[10,"is_err","","Returns true if the result is `Err`",105],[10,"ok","","Convert from `Result<T, E>` to `Option<T>`",105],[10,"err","","Convert from `Result<T, E>` to `Option<E>`",105],[10,"as_ref","","Convert from `Result<T, E>` to `Result<&T, &E>`",105],[10,"as_mut","","Convert from `Result<T, E>` to `Result<&mut T, &mut E>`",105],[10,"as_mut_slice","","Convert from `Result<T, E>` to `&mut [T]` (without copying)",105],[10,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",105],[10,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",105],[10,"iter","","Returns an iterator over the possibly contained value.",105],[10,"mut_iter","","Deprecated: use `iter_mut`.",105],[10,"iter_mut","","Returns a mutable iterator over the possibly contained value.",105],[10,"move_iter","","Deprecated: `use into_iter`.",105],[10,"into_iter","","Returns a consuming iterator over the possibly contained value.",105],[10,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",105],[10,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",105],[10,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",105],[10,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",105],[10,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",105],[10,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",105],[10,"unwrap_or_handle","","Deprecated name for `unwrap_or_else()`.",105],[10,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",105],[10,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",105],[10,"as_slice","","Convert from `Result<T, E>` to `&[T]` (without copying)",105],[10,"clone","","",106],[10,"clone_from","","",106],[10,"next","","",106],[10,"size_hint","","",106],[10,"size_hint","","",106],[10,"chain","","",106],[10,"zip","","",106],[10,"map","","",106],[10,"filter","","",106],[10,"filter_map","","",106],[10,"enumerate","","",106],[10,"peekable","","",106],[10,"skip_while","","",106],[10,"take_while","","",106],[10,"skip","","",106],[10,"take","","",106],[10,"scan","","",106],[10,"flat_map","","",106],[10,"fuse","","",106],[10,"inspect","","",106],[10,"by_ref","","",106],[10,"advance","","",106],[10,"collect","","",106],[10,"nth","","",106],[10,"last","","",106],[10,"fold","","",106],[10,"count","","",106],[10,"all","","",106],[10,"any","","",106],[10,"find","","",106],[10,"position","","",106],[10,"max_by","","",106],[10,"min_by","","",106],[10,"next_back","","",106],[10,"rev","","",106],[10,"rposition","","",106],[10,"len","","",106],[10,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",105],[10,"fmt","core::simd","",107],[10,"fmt","","",108],[10,"fmt","","",109],[10,"fmt","","",110],[10,"fmt","","",111],[10,"fmt","","",112],[10,"fmt","","",113],[10,"fmt","","",114],[10,"fmt","","",115],[10,"fmt","","",116],[10,"next","core::slice","",117],[10,"size_hint","","",117],[10,"size_hint","","",117],[10,"chain","","",117],[10,"zip","","",117],[10,"map","","",117],[10,"filter","","",117],[10,"filter_map","","",117],[10,"enumerate","","",117],[10,"peekable","","",117],[10,"skip_while","","",117],[10,"take_while","","",117],[10,"skip","","",117],[10,"take","","",117],[10,"scan","","",117],[10,"flat_map","","",117],[10,"fuse","","",117],[10,"inspect","","",117],[10,"by_ref","","",117],[10,"advance","","",117],[10,"collect","","",117],[10,"nth","","",117],[10,"last","","",117],[10,"fold","","",117],[10,"count","","",117],[10,"all","","",117],[10,"any","","",117],[10,"find","","",117],[10,"position","","",117],[10,"max_by","","",117],[10,"min_by","","",117],[10,"next_back","","",117],[10,"rev","","",117],[10,"rposition","","",117],[10,"len","","",117],[10,"clone","","",117],[10,"clone_from","","",117],[10,"indexable","","",117],[10,"idx","","",117],[10,"next","","",118],[10,"size_hint","","",118],[10,"size_hint","","",118],[10,"chain","","",118],[10,"zip","","",118],[10,"map","","",118],[10,"filter","","",118],[10,"filter_map","","",118],[10,"enumerate","","",118],[10,"peekable","","",118],[10,"skip_while","","",118],[10,"take_while","","",118],[10,"skip","","",118],[10,"take","","",118],[10,"scan","","",118],[10,"flat_map","","",118],[10,"fuse","","",118],[10,"inspect","","",118],[10,"by_ref","","",118],[10,"advance","","",118],[10,"collect","","",118],[10,"nth","","",118],[10,"last","","",118],[10,"fold","","",118],[10,"count","","",118],[10,"all","","",118],[10,"any","","",118],[10,"find","","",118],[10,"position","","",118],[10,"max_by","","",118],[10,"min_by","","",118],[10,"next_back","","",118],[10,"rev","","",118],[10,"rposition","","",118],[10,"len","","",118],[10,"next","","",119],[10,"size_hint","","",119],[10,"size_hint","","",119],[10,"chain","","",119],[10,"zip","","",119],[10,"map","","",119],[10,"filter","","",119],[10,"filter_map","","",119],[10,"enumerate","","",119],[10,"peekable","","",119],[10,"skip_while","","",119],[10,"take_while","","",119],[10,"skip","","",119],[10,"take","","",119],[10,"scan","","",119],[10,"flat_map","","",119],[10,"fuse","","",119],[10,"inspect","","",119],[10,"by_ref","","",119],[10,"advance","","",119],[10,"collect","","",119],[10,"nth","","",119],[10,"last","","",119],[10,"fold","","",119],[10,"count","","",119],[10,"all","","",119],[10,"any","","",119],[10,"find","","",119],[10,"position","","",119],[10,"max_by","","",119],[10,"min_by","","",119],[10,"next_back","","",119],[10,"rev","","",119],[10,"next","","",120],[10,"size_hint","","",120],[10,"size_hint","","",120],[10,"chain","","",120],[10,"zip","","",120],[10,"map","","",120],[10,"filter","","",120],[10,"filter_map","","",120],[10,"enumerate","","",120],[10,"peekable","","",120],[10,"skip_while","","",120],[10,"take_while","","",120],[10,"skip","","",120],[10,"take","","",120],[10,"scan","","",120],[10,"flat_map","","",120],[10,"fuse","","",120],[10,"inspect","","",120],[10,"by_ref","","",120],[10,"advance","","",120],[10,"collect","","",120],[10,"nth","","",120],[10,"last","","",120],[10,"fold","","",120],[10,"count","","",120],[10,"all","","",120],[10,"any","","",120],[10,"find","","",120],[10,"position","","",120],[10,"max_by","","",120],[10,"min_by","","",120],[10,"next_back","","",120],[10,"rev","","",120],[10,"next","","",121],[10,"size_hint","","",121],[10,"size_hint","","",121],[10,"chain","","",121],[10,"zip","","",121],[10,"map","","",121],[10,"filter","","",121],[10,"filter_map","","",121],[10,"enumerate","","",121],[10,"peekable","","",121],[10,"skip_while","","",121],[10,"take_while","","",121],[10,"skip","","",121],[10,"take","","",121],[10,"scan","","",121],[10,"flat_map","","",121],[10,"fuse","","",121],[10,"inspect","","",121],[10,"by_ref","","",121],[10,"advance","","",121],[10,"collect","","",121],[10,"nth","","",121],[10,"last","","",121],[10,"fold","","",121],[10,"count","","",121],[10,"all","","",121],[10,"any","","",121],[10,"find","","",121],[10,"position","","",121],[10,"max_by","","",121],[10,"min_by","","",121],[10,"clone","","",122],[10,"clone_from","","",122],[10,"next","","",122],[10,"size_hint","","",122],[10,"size_hint","","",122],[10,"chain","","",122],[10,"zip","","",122],[10,"map","","",122],[10,"filter","","",122],[10,"filter_map","","",122],[10,"enumerate","","",122],[10,"peekable","","",122],[10,"skip_while","","",122],[10,"take_while","","",122],[10,"skip","","",122],[10,"take","","",122],[10,"scan","","",122],[10,"flat_map","","",122],[10,"fuse","","",122],[10,"inspect","","",122],[10,"by_ref","","",122],[10,"advance","","",122],[10,"collect","","",122],[10,"nth","","",122],[10,"last","","",122],[10,"fold","","",122],[10,"count","","",122],[10,"all","","",122],[10,"any","","",122],[10,"find","","",122],[10,"position","","",122],[10,"max_by","","",122],[10,"min_by","","",122],[10,"clone","","",123],[10,"clone_from","","",123],[10,"next","","",123],[10,"size_hint","","",123],[10,"size_hint","","",123],[10,"chain","","",123],[10,"zip","","",123],[10,"map","","",123],[10,"filter","","",123],[10,"filter_map","","",123],[10,"enumerate","","",123],[10,"peekable","","",123],[10,"skip_while","","",123],[10,"take_while","","",123],[10,"skip","","",123],[10,"take","","",123],[10,"scan","","",123],[10,"flat_map","","",123],[10,"fuse","","",123],[10,"inspect","","",123],[10,"by_ref","","",123],[10,"advance","","",123],[10,"collect","","",123],[10,"nth","","",123],[10,"last","","",123],[10,"fold","","",123],[10,"count","","",123],[10,"all","","",123],[10,"any","","",123],[10,"find","","",123],[10,"position","","",123],[10,"max_by","","",123],[10,"min_by","","",123],[10,"next_back","","",123],[10,"rev","","",123],[10,"indexable","","",123],[10,"idx","","",123],[10,"next","","",124],[10,"size_hint","","",124],[10,"size_hint","","",124],[10,"chain","","",124],[10,"zip","","",124],[10,"map","","",124],[10,"filter","","",124],[10,"filter_map","","",124],[10,"enumerate","","",124],[10,"peekable","","",124],[10,"skip_while","","",124],[10,"take_while","","",124],[10,"skip","","",124],[10,"take","","",124],[10,"scan","","",124],[10,"flat_map","","",124],[10,"fuse","","",124],[10,"inspect","","",124],[10,"by_ref","","",124],[10,"advance","","",124],[10,"collect","","",124],[10,"nth","","",124],[10,"last","","",124],[10,"fold","","",124],[10,"count","","",124],[10,"all","","",124],[10,"any","","",124],[10,"find","","",124],[10,"position","","",124],[10,"max_by","","",124],[10,"min_by","","",124],[10,"next_back","","",124],[10,"rev","","",124],[10,"fmt","","",125],[10,"eq","","",125],[10,"ne","","",125],[10,"ne","","",125],[10,"found","","Converts a `Found` to `Some`, `NotFound` to `None`.\nSimilar to `Result::ok`.",125],[10,"not_found","","Convert a `Found` to `None`, `NotFound` to `Some`.\nSimilar to `Result::err`.",125],[10,"clone","core::str","",126],[10,"clone_from","","",126],[10,"next","","",126],[10,"size_hint","","",126],[10,"size_hint","","",126],[10,"chain","","",126],[10,"zip","","",126],[10,"map","","",126],[10,"filter","","",126],[10,"filter_map","","",126],[10,"enumerate","","",126],[10,"peekable","","",126],[10,"skip_while","","",126],[10,"take_while","","",126],[10,"skip","","",126],[10,"take","","",126],[10,"scan","","",126],[10,"flat_map","","",126],[10,"fuse","","",126],[10,"inspect","","",126],[10,"by_ref","","",126],[10,"advance","","",126],[10,"collect","","",126],[10,"nth","","",126],[10,"last","","",126],[10,"fold","","",126],[10,"count","","",126],[10,"all","","",126],[10,"any","","",126],[10,"find","","",126],[10,"position","","",126],[10,"max_by","","",126],[10,"min_by","","",126],[10,"next_back","","",126],[10,"rev","","",126],[10,"clone","","",127],[10,"clone_from","","",127],[10,"next","","",127],[10,"size_hint","","",127],[10,"size_hint","","",127],[10,"chain","","",127],[10,"zip","","",127],[10,"map","","",127],[10,"filter","","",127],[10,"filter_map","","",127],[10,"enumerate","","",127],[10,"peekable","","",127],[10,"skip_while","","",127],[10,"take_while","","",127],[10,"skip","","",127],[10,"take","","",127],[10,"scan","","",127],[10,"flat_map","","",127],[10,"fuse","","",127],[10,"inspect","","",127],[10,"by_ref","","",127],[10,"advance","","",127],[10,"collect","","",127],[10,"nth","","",127],[10,"last","","",127],[10,"fold","","",127],[10,"count","","",127],[10,"all","","",127],[10,"any","","",127],[10,"find","","",127],[10,"position","","",127],[10,"max_by","","",127],[10,"min_by","","",127],[10,"next_back","","",127],[10,"rev","","",127],[10,"clone","","",128],[10,"clone_from","","",128],[10,"clone","","",129],[10,"clone_from","","",129],[10,"next","","",128],[10,"size_hint","","",128],[10,"chain","","",128],[10,"zip","","",128],[10,"map","","",128],[10,"filter","","",128],[10,"filter_map","","",128],[10,"enumerate","","",128],[10,"peekable","","",128],[10,"skip_while","","",128],[10,"take_while","","",128],[10,"skip","","",128],[10,"take","","",128],[10,"scan","","",128],[10,"flat_map","","",128],[10,"fuse","","",128],[10,"inspect","","",128],[10,"by_ref","","",128],[10,"advance","","",128],[10,"collect","","",128],[10,"nth","","",128],[10,"last","","",128],[10,"fold","","",128],[10,"count","","",128],[10,"all","","",128],[10,"any","","",128],[10,"find","","",128],[10,"position","","",128],[10,"max_by","","",128],[10,"min_by","","",128],[10,"next_back","","",128],[10,"rev","","",128],[10,"next","","",129],[10,"size_hint","","",129],[10,"chain","","",129],[10,"zip","","",129],[10,"map","","",129],[10,"filter","","",129],[10,"filter_map","","",129],[10,"enumerate","","",129],[10,"peekable","","",129],[10,"skip_while","","",129],[10,"take_while","","",129],[10,"skip","","",129],[10,"take","","",129],[10,"scan","","",129],[10,"flat_map","","",129],[10,"fuse","","",129],[10,"inspect","","",129],[10,"by_ref","","",129],[10,"advance","","",129],[10,"collect","","",129],[10,"nth","","",129],[10,"last","","",129],[10,"fold","","",129],[10,"count","","",129],[10,"all","","",129],[10,"any","","",129],[10,"find","","",129],[10,"position","","",129],[10,"max_by","","",129],[10,"min_by","","",129],[10,"clone","","",130],[10,"clone_from","","",130],[10,"clone","","",131],[10,"clone_from","","",131],[10,"clone","","",132],[10,"clone_from","","",132],[10,"clone","","",133],[10,"clone_from","","",133],[10,"clone","","",134],[10,"clone_from","","",134],[10,"next","","",133],[10,"size_hint","","",133],[10,"chain","","",133],[10,"zip","","",133],[10,"map","","",133],[10,"filter","","",133],[10,"filter_map","","",133],[10,"enumerate","","",133],[10,"peekable","","",133],[10,"skip_while","","",133],[10,"take_while","","",133],[10,"skip","","",133],[10,"take","","",133],[10,"scan","","",133],[10,"flat_map","","",133],[10,"fuse","","",133],[10,"inspect","","",133],[10,"by_ref","","",133],[10,"advance","","",133],[10,"collect","","",133],[10,"nth","","",133],[10,"last","","",133],[10,"fold","","",133],[10,"count","","",133],[10,"all","","",133],[10,"any","","",133],[10,"find","","",133],[10,"position","","",133],[10,"max_by","","",133],[10,"min_by","","",133],[10,"next","","",134],[10,"size_hint","","",134],[10,"chain","","",134],[10,"zip","","",134],[10,"map","","",134],[10,"filter","","",134],[10,"filter_map","","",134],[10,"enumerate","","",134],[10,"peekable","","",134],[10,"skip_while","","",134],[10,"take_while","","",134],[10,"skip","","",134],[10,"take","","",134],[10,"scan","","",134],[10,"flat_map","","",134],[10,"fuse","","",134],[10,"inspect","","",134],[10,"by_ref","","",134],[10,"advance","","",134],[10,"collect","","",134],[10,"nth","","",134],[10,"last","","",134],[10,"fold","","",134],[10,"count","","",134],[10,"all","","",134],[10,"any","","",134],[10,"find","","",134],[10,"position","","",134],[10,"max_by","","",134],[10,"min_by","","",134],[10,"clone","","",135],[10,"clone_from","","",135],[10,"next","","",135],[10,"size_hint","","",135],[10,"size_hint","","",135],[10,"chain","","",135],[10,"zip","","",135],[10,"map","","",135],[10,"filter","","",135],[10,"filter_map","","",135],[10,"enumerate","","",135],[10,"peekable","","",135],[10,"skip_while","","",135],[10,"take_while","","",135],[10,"skip","","",135],[10,"take","","",135],[10,"scan","","",135],[10,"flat_map","","",135],[10,"fuse","","",135],[10,"inspect","","",135],[10,"by_ref","","",135],[10,"advance","","",135],[10,"collect","","",135],[10,"nth","","",135],[10,"last","","",135],[10,"fold","","",135],[10,"count","","",135],[10,"all","","",135],[10,"any","","",135],[10,"find","","",135],[10,"position","","",135],[10,"max_by","","",135],[10,"min_by","","",135],[10,"clone","","",136],[10,"clone_from","","",136],[10,"fmt","","",137],[10,"clone","","",137],[10,"clone_from","","",137],[10,"assert_receiver_is_total_eq","","",137],[10,"eq","","",137],[10,"ne","","",137],[10,"ne","","",137],[10,"to_char_lossy","","Convert `self` to a `char`, taking `LoneSurrogate`s to the\nreplacement character (U+FFFD).",137],[10,"next","","",136],[10,"size_hint","","",136],[10,"size_hint","","",136],[10,"chain","","",136],[10,"zip","","",136],[10,"map","","",136],[10,"filter","","",136],[10,"filter_map","","",136],[10,"enumerate","","",136],[10,"peekable","","",136],[10,"skip_while","","",136],[10,"take_while","","",136],[10,"skip","","",136],[10,"take","","",136],[10,"scan","","",136],[10,"flat_map","","",136],[10,"fuse","","",136],[10,"inspect","","",136],[10,"by_ref","","",136],[10,"advance","","",136],[10,"collect","","",136],[10,"nth","","",136],[10,"last","","",136],[10,"fold","","",136],[10,"count","","",136],[10,"all","","",136],[10,"any","","",136],[10,"find","","",136],[10,"position","","",136],[10,"max_by","","",136],[10,"min_by","","",136],[10,"eq","core::fmt::num","",138],[10,"ne","","",138],[10,"ne","","",138],[10,"clone","","",138],[10,"clone_from","","",138],[10,"eq","","",139],[10,"ne","","",139],[10,"ne","","",139],[10,"clone","","",139],[10,"clone_from","","",139],[10,"eq","","",140],[10,"ne","","",140],[10,"ne","","",140],[10,"clone","","",140],[10,"clone_from","","",140],[10,"eq","","",141],[10,"ne","","",141],[10,"ne","","",141],[10,"clone","","",141],[10,"clone_from","","",141],[10,"eq","","",142],[10,"ne","","",142],[10,"ne","","",142],[10,"clone","","",142],[10,"clone_from","","",142],[10,"eq","","",143],[10,"ne","","",143],[10,"ne","","",143],[10,"clone","","",143],[10,"clone_from","","",143],[10,"fmt","","",144],[10,"fmt","","",144],[10,"fmt","","",144],[10,"fmt","","",144],[10,"fmt","","",144],[10,"fmt","","",144],[10,"fmt","","",144],[10,"fmt","","",144],[10,"fmt","","",144],[10,"fmt","","",144],[10,"eq","core::fmt::rt","",145],[10,"ne","","",145],[10,"ne","","",145],[10,"fmt","core::fmt","",146],[10,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a byte-array. The byte-array should *not* contain the sign\nfor the integer, that will be added by this method.",147],[10,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",147],[10,"write","","Writes some data to the underlying buffer contained within this\nformatter.",147],[10,"write_fmt","","Writes some formatted information into this instance",147],[10,"fmt","core::cell","",71],[10,"fmt","","",73],[10,"fmt","","",74],[5,"Stdout","rustrt",""],[5,"Stderr","",""],[5,"DEFAULT_ERROR_CODE","","The default error code of the rust runtime if the main task fails instead\nof exiting cleanly."],[6,"Runtime","","The interface to the current runtime."],[9,"yield_now","","",148],[9,"maybe_yield","","",148],[9,"deschedule","","",148],[9,"reawaken","","",148],[9,"spawn_sibling","","",148],[9,"local_io","","",148],[9,"stack_bounds","","The (low, high) edges of the current stack.",148],[9,"can_block","","",148],[9,"wrap","","",148],[10,"put","rustrt::task","",47],[10,"take","","",47],[10,"try_take","","",47],[10,"exists","","",47],[10,"borrow","","",47],[10,"unsafe_take","","",47],[10,"unsafe_borrow","","",47],[10,"try_unsafe_borrow","","",47]],"paths":[[1,"Stdio"],[1,"Token"],[6,"ToCStr"],[1,"CString"],[1,"String"],[1,"CChars"],[1,"Exclusive"],[1,"ExclusiveGuard"],[6,"Local"],[2,"KeyValue"],[1,"Ref"],[1,"LocalHeap"],[1,"MemoryRegion"],[1,"StaticNativeMutex"],[1,"NativeMutex"],[1,"LockGuard"],[1,"ProcessConfig"],[1,"IoError"],[1,"SocketAddr"],[1,"FileStat"],[1,"AddrinfoHint"],[1,"AddrinfoInfo"],[2,"CloseBehavior"],[2,"IpAddr"],[2,"StdioContainer"],[2,"ProcessExit"],[2,"FileMode"],[2,"FileAccess"],[2,"SeekStyle"],[6,"EventLoop"],[6,"Callback"],[6,"RemoteCallback"],[6,"IoFactory"],[6,"RtioTcpListener"],[6,"RtioTcpAcceptor"],[6,"RtioTcpStream"],[6,"RtioSocket"],[6,"RtioUdpSocket"],[6,"RtioTimer"],[6,"RtioFileStream"],[6,"RtioProcess"],[6,"RtioPipe"],[6,"RtioUnixListener"],[6,"RtioUnixAcceptor"],[6,"RtioTTY"],[6,"PausableIdleCallback"],[1,"LocalIo"],[1,"Task"],[1,"TaskOpts"],[1,"Death"],[2,"BlockedTask"],[1,"BlockedTasks"],[1,"Thread"],[1,"Unwinder"],[2,"FPCategory"],[1,"TypeId"],[1,"CovariantType"],[1,"ContravariantType"],[1,"InvariantType"],[1,"CovariantLifetime"],[1,"ContravariantLifetime"],[1,"InvariantLifetime"],[1,"NoSend"],[1,"NoCopy"],[1,"NoSync"],[1,"Managed"],[2,"Ordering"],[1,"AtomicBool"],[1,"AtomicInt"],[1,"AtomicUint"],[1,"AtomicPtr"],[1,"Cell"],[1,"RefCell"],[1,"Ref"],[1,"RefMut"],[1,"UnsafeCell"],[1,"Finallyalizer"],[1,"Enumerate"],[1,"Inspect"],[1,"Rev"],[1,"Map"],[1,"Zip"],[1,"ByRef"],[2,"MinMaxResult"],[1,"Cycle"],[1,"Chain"],[1,"Filter"],[1,"FilterMap"],[1,"Peekable"],[1,"SkipWhile"],[1,"TakeWhile"],[1,"Skip"],[1,"Take"],[1,"Scan"],[1,"FlatMap"],[1,"Fuse"],[1,"Unfold"],[1,"Counter"],[1,"Range"],[1,"RangeInclusive"],[1,"RangeStep"],[1,"RangeStepInclusive"],[1,"Repeat"],[2,"Option"],[1,"Item"],[2,"Result"],[1,"Item"],[1,"i8x16"],[1,"i16x8"],[1,"i32x4"],[1,"i64x2"],[1,"u8x16"],[1,"u16x8"],[1,"u32x4"],[1,"u64x2"],[1,"f32x4"],[1,"f64x2"],[1,"Items"],[1,"MutItems"],[1,"Splits"],[1,"MutSplits"],[1,"SplitsN"],[1,"Windows"],[1,"Chunks"],[1,"MutChunks"],[2,"BinarySearchResult"],[1,"Chars"],[1,"CharOffsets"],[1,"CharSplits"],[1,"CharSplitsN"],[1,"NaiveSearcher"],[1,"TwoWaySearcher"],[2,"Searcher"],[1,"MatchIndices"],[1,"StrSplits"],[1,"Utf16CodeUnits"],[1,"Utf16Items"],[2,"Utf16Item"],[1,"Binary"],[1,"Octal"],[1,"Decimal"],[1,"LowerHex"],[1,"UpperHex"],[1,"Radix"],[1,"RadixFmt"],[2,"Alignment"],[1,"Arguments"],[1,"Formatter"],[6,"Runtime"]]};

searchIndex['debug'] = {"items":[[0,"","debug","Debugging utilities for Rust programs"],[0,"fmt","","Implementation of the `{:?}` format qualifier"],[6,"Poly","debug::fmt","Format trait for the `?` character"],[9,"fmt","","Formats the value using the given formatter.",0],[0,"reflect","debug","Runtime type reflection"],[1,"MovePtrAdaptor","debug::reflect","Adaptor to wrap around visitors implementing MovePtr."],[3,"align","","Helper function for alignment calculation."],[6,"MovePtr","","Trait for visitor that wishes to reflect on data."],[9,"move_ptr","","",1],[9,"push_ptr","","",1],[9,"pop_ptr","","",1],[10,"new","","",2],[10,"bump","","",2],[10,"align","","",2],[10,"align_to","","",2],[10,"bump_past","","",2],[10,"unwrap","","",2],[10,"visit_bot","","",2],[10,"visit_nil","","",2],[10,"visit_bool","","",2],[10,"visit_int","","",2],[10,"visit_i8","","",2],[10,"visit_i16","","",2],[10,"visit_i32","","",2],[10,"visit_i64","","",2],[10,"visit_uint","","",2],[10,"visit_u8","","",2],[10,"visit_u16","","",2],[10,"visit_u32","","",2],[10,"visit_u64","","",2],[10,"visit_f32","","",2],[10,"visit_f64","","",2],[10,"visit_char","","",2],[10,"visit_estr_slice","","",2],[10,"visit_box","","",2],[10,"visit_uniq","","",2],[10,"visit_ptr","","",2],[10,"visit_rptr","","",2],[10,"visit_evec_slice","","",2],[10,"visit_evec_fixed","","",2],[10,"visit_enter_rec","","",2],[10,"visit_rec_field","","",2],[10,"visit_leave_rec","","",2],[10,"visit_enter_class","","",2],[10,"visit_class_field","","",2],[10,"visit_leave_class","","",2],[10,"visit_enter_tup","","",2],[10,"visit_tup_field","","",2],[10,"visit_leave_tup","","",2],[10,"visit_enter_fn","","",2],[10,"visit_fn_input","","",2],[10,"visit_fn_output","","",2],[10,"visit_leave_fn","","",2],[10,"visit_enter_enum","","",2],[10,"visit_enter_enum_variant","","",2],[10,"visit_enum_variant_field","","",2],[10,"visit_leave_enum_variant","","",2],[10,"visit_leave_enum","","",2],[10,"visit_trait","","",2],[10,"visit_param","","",2],[10,"visit_self","","",2],[0,"repr","debug","More runtime type reflection"],[1,"ReprVisitor","debug::repr",""],[3,"write_repr","",""],[3,"repr_to_string","",""],[6,"Repr","","Representations"],[9,"write_repr","","",3],[10,"move_ptr","","",4],[10,"push_ptr","","",4],[10,"pop_ptr","","",4],[10,"new","","",4],[10,"get","","",4],[10,"visit_inner","","",4],[10,"visit_ptr_inner","","",4],[10,"write","","",4],[10,"write_escaped_slice","","",4],[10,"write_mut_qualifier","","",4],[10,"write_vec_range","","",4],[10,"visit_bot","","",4],[10,"visit_nil","","",4],[10,"visit_bool","","",4],[10,"visit_int","","",4],[10,"visit_i8","","",4],[10,"visit_i16","","",4],[10,"visit_i32","","",4],[10,"visit_i64","","",4],[10,"visit_uint","","",4],[10,"visit_u8","","",4],[10,"visit_u16","","",4],[10,"visit_u32","","",4],[10,"visit_u64","","",4],[10,"visit_f32","","",4],[10,"visit_f64","","",4],[10,"visit_char","","",4],[10,"visit_estr_slice","","",4],[10,"visit_box","","",4],[10,"visit_uniq","","",4],[10,"visit_ptr","","",4],[10,"visit_rptr","","",4],[10,"visit_evec_slice","","",4],[10,"visit_evec_fixed","","",4],[10,"visit_enter_rec","","",4],[10,"visit_rec_field","","",4],[10,"visit_leave_rec","","",4],[10,"visit_enter_class","","",4],[10,"visit_class_field","","",4],[10,"visit_leave_class","","",4],[10,"visit_enter_tup","","",4],[10,"visit_tup_field","","",4],[10,"visit_leave_tup","","",4],[10,"visit_enter_enum","","",4],[10,"visit_enter_enum_variant","","",4],[10,"visit_enum_variant_field","","",4],[10,"visit_leave_enum_variant","","",4],[10,"visit_leave_enum","","",4],[10,"visit_enter_fn","","",4],[10,"visit_fn_input","","",4],[10,"visit_fn_output","","",4],[10,"visit_leave_fn","","",4],[10,"visit_trait","","",4],[10,"visit_param","","",4],[10,"visit_self","","",4]],"paths":[[6,"Poly"],[6,"MovePtr"],[1,"MovePtrAdaptor"],[6,"Repr"],[1,"ReprVisitor"]]};

searchIndex['alloc'] = {"items":[[0,"","alloc","The Rust core allocation library"],[0,"heap","",""],[3,"allocate","alloc::heap","Returns a pointer to `size` bytes of memory."],[3,"reallocate","","Extends or shrinks the allocation referenced by `ptr` to `size` bytes of\nmemory."],[3,"reallocate_inplace","","Extends or shrinks the allocation referenced by `ptr` to `size` bytes of\nmemory in-place."],[3,"deallocate","","Deallocates the memory referenced by `ptr`."],[3,"usable_size","","Returns the usable size of an allocation created with the specified the\n`size` and `align`."],[3,"stats_print","","Prints implementation-defined allocator statistics."],[5,"EMPTY","","An arbitrary non-null address to represent zero-size allocations."],[0,"libc_heap","alloc","The global (exchange) heap."],[3,"malloc_raw","alloc::libc_heap","A wrapper around libc::malloc, aborting on out-of-memory."],[3,"realloc_raw","","A wrapper around libc::realloc, aborting on out-of-memory."],[0,"boxed","alloc","A unique pointer type."],[1,"Box","alloc::boxed","A type that represents a uniquely-owned value."],[5,"HEAP","","A value that represents the global exchange heap. This is the default\nplace that the `box` keyword allocates into when no place is supplied."],[6,"BoxAny","","Extension methods for an owning `Any` trait object."],[9,"downcast","","Returns the boxed value if it is of type `T`, or\n`Err(Self)` if it isn't.",0],[10,"move","","Deprecated; this method has been renamed to `downcast`.",0],[10,"default","","",1],[10,"clone","","Returns a copy of the owned box.",1],[10,"clone_from","","Performs copy-assignment from `source` by reusing the existing allocation.",1],[10,"eq","","",1],[10,"ne","","",1],[10,"partial_cmp","","",1],[10,"lt","","",1],[10,"le","","",1],[10,"ge","","",1],[10,"gt","","",1],[10,"cmp","","",1],[10,"downcast","","",1],[10,"fmt","","",1],[10,"fmt","","",1],[0,"arc","alloc","Concurrency-enabled mechanisms for sharing mutable and/or immutable state\nbetween tasks."],[1,"Arc","alloc::arc","An atomically reference counted wrapper for shared state."],[1,"Weak","","A weak pointer to an `Arc`."],[10,"new","","Creates an atomically reference counted wrapper.",2],[10,"downgrade","","Downgrades a strong pointer to a weak pointer.",2],[10,"clone","","Duplicate an atomically reference counted wrapper.",2],[10,"deref","","",2],[10,"make_unique","","Acquires a mutable pointer to the inner contents by guaranteeing that\nthe reference count is one (no sharing is possible).",2],[10,"drop","","",2],[10,"upgrade","","Attempts to upgrade this weak reference to a strong reference.",3],[10,"clone","","",3],[10,"drop","","",3],[0,"rc","alloc","Task-local reference-counted boxes (the `Rc` type)."],[1,"Rc","alloc::rc","An immutable reference-counted pointer type."],[1,"Weak","","A weak reference to a reference-counted pointer."],[3,"is_unique","","Returns true if the `Rc` currently has unique ownership."],[3,"try_unwrap","","Unwraps the contained value if the `Rc` has unique ownership."],[3,"get_mut","","Returns a mutable reference to the contained value if the `Rc` has\nunique ownership."],[10,"new","","Constructs a new reference-counted pointer.",4],[10,"downgrade","","Downgrades the reference-counted pointer to a weak reference.",4],[10,"make_unique","","Acquires a mutable pointer to the inner contents by guaranteeing that\nthe reference count is one (no sharing is possible).",4],[10,"deref","","Borrows the value contained in the reference-counted pointer.",4],[10,"drop","","",4],[10,"clone","","",4],[10,"default","","",4],[10,"eq","","",4],[10,"ne","","",4],[10,"partial_cmp","","",4],[10,"lt","","",4],[10,"le","","",4],[10,"gt","","",4],[10,"ge","","",4],[10,"cmp","","",4],[10,"fmt","","",4],[10,"upgrade","","Upgrades a weak reference to a strong reference.",5],[10,"drop","","",5],[10,"clone","","",5]],"paths":[[6,"BoxAny"],[1,"Box"],[1,"Arc"],[1,"Weak"],[1,"Rc"],[1,"Weak"]]};

searchIndex['rlibc'] = {"items":[[0,"","rlibc","A bare-metal library supplying functions rustc may lower code to"],[3,"memcpy","",""],[3,"memmove","",""],[3,"memset","",""],[3,"memcmp","",""]],"paths":[]};

searchIndex['rbml'] = {"items":[[0,"","rbml","Really Bad Markup Language (rbml) is a temporary measure until we migrate\nthe rust object metadata to a better serialization format. It is not\nintended to be used by users."],[1,"Doc","","Common data structures"],[11,"data","","",0],[11,"start","","",0],[11,"end","","",0],[1,"TaggedDoc","",""],[11,"doc","","",1],[2,"EbmlEncoderTag","",""],[12,"EsUint","","",2],[12,"EsU64","","",2],[12,"EsU32","","",2],[12,"EsU16","","",2],[12,"EsU8","","",2],[12,"EsInt","","",2],[12,"EsI64","","",2],[12,"EsI32","","",2],[12,"EsI16","","",2],[12,"EsI8","","",2],[12,"EsBool","","",2],[12,"EsChar","","",2],[12,"EsStr","","",2],[12,"EsF64","","",2],[12,"EsF32","","",2],[12,"EsFloat","","",2],[12,"EsEnum","","",2],[12,"EsEnumVid","","",2],[12,"EsEnumBody","","",2],[12,"EsVec","","",2],[12,"EsVecLen","","",2],[12,"EsVecElt","","",2],[12,"EsMap","","",2],[12,"EsMapLen","","",2],[12,"EsMapKey","","",2],[12,"EsMapVal","","",2],[12,"EsOpaque","","",2],[12,"EsLabel","","",2],[2,"Error","",""],[12,"IntTooBig","","",3],[12,"Expected","","",3],[12,"IoError","","",3],[12,"ApplicationError","","",3],[0,"io","",""],[1,"SeekableMemWriter","rbml::io","Writes to an owned, growable byte vector that supports seeking."],[10,"new","","Create a new `SeekableMemWriter`.",4],[10,"with_capacity","","Create a new `SeekableMemWriter`, allocating at least `n` bytes for\nthe internal buffer.",4],[10,"get_ref","","Acquires an immutable reference to the underlying buffer of this\n`SeekableMemWriter`.",4],[10,"unwrap","","Unwraps this `SeekableMemWriter`, returning the underlying buffer",4],[10,"write","","",4],[10,"tell","","",4],[10,"seek","","",4],[0,"reader","rbml",""],[1,"Res","rbml::reader",""],[11,"val","","",5],[11,"next","","",5],[1,"Decoder","",""],[3,"vuint_at","",""],[3,"doc_at","",""],[3,"maybe_get_doc","",""],[3,"get_doc","",""],[3,"docs","",""],[3,"tagged_docs","",""],[3,"with_doc_data","",""],[3,"doc_as_u8","",""],[3,"doc_as_u16","",""],[3,"doc_as_u32","",""],[3,"doc_as_u64","",""],[3,"doc_as_i8","",""],[3,"doc_as_i16","",""],[3,"doc_as_i32","",""],[3,"doc_as_i64","",""],[4,"DecodeResult","",""],[10,"new","","",6],[10,"read_opaque","","",6],[10,"read_nil","","",6],[10,"read_u64","","",6],[10,"read_u32","","",6],[10,"read_u16","","",6],[10,"read_u8","","",6],[10,"read_uint","","",6],[10,"read_i64","","",6],[10,"read_i32","","",6],[10,"read_i16","","",6],[10,"read_i8","","",6],[10,"read_int","","",6],[10,"read_bool","","",6],[10,"read_f64","","",6],[10,"read_f32","","",6],[10,"read_char","","",6],[10,"read_str","","",6],[10,"read_enum","","",6],[10,"read_enum_variant","","",6],[10,"read_enum_variant_arg","","",6],[10,"read_enum_struct_variant","","",6],[10,"read_enum_struct_variant_field","","",6],[10,"read_struct","","",6],[10,"read_struct_field","","",6],[10,"read_tuple","","",6],[10,"read_tuple_arg","","",6],[10,"read_tuple_struct","","",6],[10,"read_tuple_struct_arg","","",6],[10,"read_option","","",6],[10,"read_seq","","",6],[10,"read_seq_elt","","",6],[10,"read_map","","",6],[10,"read_map_elt_key","","",6],[10,"read_map_elt_val","","",6],[10,"error","","",6],[0,"writer","rbml",""],[1,"Encoder","rbml::writer",""],[11,"writer","","",7],[4,"EncodeResult","",""],[10,"new","","",7],[10,"unsafe_clone","","FIXME(pcwalton): Workaround for badness in trans. DO NOT USE ME.",7],[10,"start_tag","","",7],[10,"end_tag","","",7],[10,"wr_tag","","",7],[10,"wr_tagged_bytes","","",7],[10,"wr_tagged_u64","","",7],[10,"wr_tagged_u32","","",7],[10,"wr_tagged_u16","","",7],[10,"wr_tagged_u8","","",7],[10,"wr_tagged_i64","","",7],[10,"wr_tagged_i32","","",7],[10,"wr_tagged_i16","","",7],[10,"wr_tagged_i8","","",7],[10,"wr_tagged_str","","",7],[10,"wr_bytes","","",7],[10,"wr_str","","",7],[10,"emit_opaque","","",7],[10,"emit_nil","","",7],[10,"emit_uint","","",7],[10,"emit_u64","","",7],[10,"emit_u32","","",7],[10,"emit_u16","","",7],[10,"emit_u8","","",7],[10,"emit_int","","",7],[10,"emit_i64","","",7],[10,"emit_i32","","",7],[10,"emit_i16","","",7],[10,"emit_i8","","",7],[10,"emit_bool","","",7],[10,"emit_f64","","",7],[10,"emit_f32","","",7],[10,"emit_char","","",7],[10,"emit_str","","",7],[10,"emit_enum","","",7],[10,"emit_enum_variant","","",7],[10,"emit_enum_variant_arg","","",7],[10,"emit_enum_struct_variant","","",7],[10,"emit_enum_struct_variant_field","","",7],[10,"emit_struct","","",7],[10,"emit_struct_field","","",7],[10,"emit_tuple","","",7],[10,"emit_tuple_arg","","",7],[10,"emit_tuple_struct","","",7],[10,"emit_tuple_struct_arg","","",7],[10,"emit_option","","",7],[10,"emit_option_none","","",7],[10,"emit_option_some","","",7],[10,"emit_seq","","",7],[10,"emit_seq_elt","","",7],[10,"emit_map","","",7],[10,"emit_map_elt_key","","",7],[10,"emit_map_elt_val","","",7],[10,"clone","rbml","",0],[10,"new","","",0],[10,"get","","",0],[10,"as_str_slice","","",0],[10,"as_str","","",0],[10,"fmt","","",2],[10,"fmt","","",3]],"paths":[[1,"Doc"],[1,"TaggedDoc"],[2,"EbmlEncoderTag"],[2,"Error"],[1,"SeekableMemWriter"],[1,"Res"],[1,"Decoder"],[1,"Encoder"]]};

searchIndex['core'] = {"items":[[0,"","core","The Rust Core Library"],[0,"int","","Operations and constants for architecture-sized signed integers (`int` type)"],[5,"BITS","core::int",""],[5,"BYTES","",""],[5,"MIN","",""],[5,"MAX","",""],[16,"int","","Operations and constants for architecture-sized signed integers (`int` type)"],[0,"i8","core","Operations and constants for signed 8-bits integers (`i8` type)"],[5,"BITS","core::i8",""],[5,"BYTES","",""],[5,"MIN","",""],[5,"MAX","",""],[16,"i8","","Operations and constants for signed 8-bits integers (`i8` type)"],[0,"i16","core","Operations and constants for signed 16-bits integers (`i16` type)"],[5,"BITS","core::i16",""],[5,"BYTES","",""],[5,"MIN","",""],[5,"MAX","",""],[16,"i16","","Operations and constants for signed 16-bits integers (`i16` type)"],[0,"i32","core","Operations and constants for signed 32-bits integers (`i32` type)"],[5,"BITS","core::i32",""],[5,"BYTES","",""],[5,"MIN","",""],[5,"MAX","",""],[16,"i32","","Operations and constants for signed 32-bits integers (`i32` type)"],[0,"i64","core","Operations and constants for signed 64-bits integers (`i64` type)"],[5,"BITS","core::i64",""],[5,"BYTES","",""],[5,"MIN","",""],[5,"MAX","",""],[16,"i64","","Operations and constants for signed 64-bits integers (`i64` type)"],[0,"uint","core","Operations and constants for architecture-sized unsigned integers (`uint` type)"],[5,"BITS","core::uint",""],[5,"BYTES","",""],[5,"MIN","",""],[5,"MAX","",""],[16,"uint","","Operations and constants for architecture-sized unsigned integers (`uint` type)"],[0,"u8","core","Operations and constants for unsigned 8-bits integers (`u8` type)"],[5,"BITS","core::u8",""],[5,"BYTES","",""],[5,"MIN","",""],[5,"MAX","",""],[16,"u8","","Operations and constants for unsigned 8-bits integers (`u8` type)"],[0,"u16","core","Operations and constants for unsigned 16-bits integers (`u16` type)"],[5,"BITS","core::u16",""],[5,"BYTES","",""],[5,"MIN","",""],[5,"MAX","",""],[16,"u16","","Operations and constants for unsigned 16-bits integers (`u16` type)"],[0,"u32","core","Operations and constants for unsigned 32-bits integers (`u32` type)"],[5,"BITS","core::u32",""],[5,"BYTES","",""],[5,"MIN","",""],[5,"MAX","",""],[16,"u32","","Operations and constants for unsigned 32-bits integers (`u32` type)"],[0,"u64","core","Operations and constants for unsigned 64-bits integer (`u64` type)"],[5,"BITS","core::u64",""],[5,"BYTES","",""],[5,"MIN","",""],[5,"MAX","",""],[16,"u64","","Operations and constants for unsigned 64-bits integer (`u64` type)"],[0,"f32","core","Operations and constants for 32-bits floats (`f32` type)"],[0,"consts","core::f32","Various useful constants."],[5,"PI","core::f32::consts","Archimedes' constant"],[5,"PI_2","","pi * 2.0"],[5,"FRAC_PI_2","","pi/2.0"],[5,"FRAC_PI_3","","pi/3.0"],[5,"FRAC_PI_4","","pi/4.0"],[5,"FRAC_PI_6","","pi/6.0"],[5,"FRAC_PI_8","","pi/8.0"],[5,"FRAC_1_PI","","1.0/pi"],[5,"FRAC_2_PI","","2.0/pi"],[5,"FRAC_2_SQRTPI","","2.0/sqrt(pi)"],[5,"SQRT2","","sqrt(2.0)"],[5,"FRAC_1_SQRT2","","1.0/sqrt(2.0)"],[5,"E","","Euler's number"],[5,"LOG2_E","","log2(e)"],[5,"LOG10_E","","log10(e)"],[5,"LN_2","","ln(2.0)"],[5,"LN_10","","ln(10.0)"],[5,"RADIX","core::f32",""],[5,"MANTISSA_DIGITS","",""],[5,"DIGITS","",""],[5,"EPSILON","",""],[5,"MIN_VALUE","","Smallest finite f32 value"],[5,"MIN_POS_VALUE","","Smallest positive, normalized f32 value"],[5,"MAX_VALUE","","Largest finite f32 value"],[5,"MIN_EXP","",""],[5,"MAX_EXP","",""],[5,"MIN_10_EXP","",""],[5,"MAX_10_EXP","",""],[5,"NAN","",""],[5,"INFINITY","",""],[5,"NEG_INFINITY","",""],[16,"f32","","Operations and constants for 32-bits floats (`f32` type)"],[0,"f64","core","Operations and constants for 64-bits floats (`f64` type)"],[0,"consts","core::f64","Various useful constants."],[5,"PI","core::f64::consts","Archimedes' constant"],[5,"PI_2","","pi * 2.0"],[5,"FRAC_PI_2","","pi/2.0"],[5,"FRAC_PI_3","","pi/3.0"],[5,"FRAC_PI_4","","pi/4.0"],[5,"FRAC_PI_6","","pi/6.0"],[5,"FRAC_PI_8","","pi/8.0"],[5,"FRAC_1_PI","","1.0/pi"],[5,"FRAC_2_PI","","2.0/pi"],[5,"FRAC_2_SQRTPI","","2.0/sqrt(pi)"],[5,"SQRT2","","sqrt(2.0)"],[5,"FRAC_1_SQRT2","","1.0/sqrt(2.0)"],[5,"E","","Euler's number"],[5,"LOG2_E","","log2(e)"],[5,"LOG10_E","","log10(e)"],[5,"LN_2","","ln(2.0)"],[5,"LN_10","","ln(10.0)"],[5,"RADIX","core::f64",""],[5,"MANTISSA_DIGITS","",""],[5,"DIGITS","",""],[5,"EPSILON","",""],[5,"MIN_VALUE","","Smallest finite f64 value"],[5,"MIN_POS_VALUE","","Smallest positive, normalized f64 value"],[5,"MAX_VALUE","","Largest finite f64 value"],[5,"MIN_EXP","",""],[5,"MAX_EXP","",""],[5,"MIN_10_EXP","",""],[5,"MAX_10_EXP","",""],[5,"NAN","",""],[5,"INFINITY","",""],[5,"NEG_INFINITY","",""],[16,"f64","","Operations and constants for 64-bits floats (`f64` type)"],[0,"num","core","Numeric traits and functions for generic mathematics"],[2,"FPCategory","core::num","Used for representing the classification of floating point numbers"],[12,"FPNaN","","\"Not a Number\", often obtained by dividing by zero",0],[12,"FPInfinite","","Positive or negative infinity",0],[12,"FPZero","","Positive or negative zero",0],[12,"FPSubnormal","","De-normalized floating point representation (less precise than `FPNormal`)",0],[12,"FPNormal","","A regular floating point number",0],[3,"div_rem","","Simultaneous division and remainder"],[3,"zero","","Returns the additive identity, `0`."],[3,"one","","Returns the multiplicative identity, `1`."],[3,"abs","","Computes the absolute value."],[3,"abs_sub","","The positive difference of two numbers."],[3,"signum","","Returns the sign of the number."],[3,"pow","","Raises a value to the power of exp, using exponentiation by squaring."],[3,"next_power_of_two","","Returns the smallest power of 2 greater than or equal to `n`."],[3,"is_power_of_two","",""],[3,"checked_next_power_of_two","","Returns the smallest power of 2 greater than or equal to `n`. If the next\npower of two is greater than the type's maximum value, `None` is returned,\notherwise the power of 2 is wrapped in `Some`."],[3,"from_int","","A utility function that just calls `FromPrimitive::from_int`."],[3,"from_i8","","A utility function that just calls `FromPrimitive::from_i8`."],[3,"from_i16","","A utility function that just calls `FromPrimitive::from_i16`."],[3,"from_i32","","A utility function that just calls `FromPrimitive::from_i32`."],[3,"from_i64","","A utility function that just calls `FromPrimitive::from_i64`."],[3,"from_uint","","A utility function that just calls `FromPrimitive::from_uint`."],[3,"from_u8","","A utility function that just calls `FromPrimitive::from_u8`."],[3,"from_u16","","A utility function that just calls `FromPrimitive::from_u16`."],[3,"from_u32","","A utility function that just calls `FromPrimitive::from_u32`."],[3,"from_u64","","A utility function that just calls `FromPrimitive::from_u64`."],[3,"from_f32","","A utility function that just calls `FromPrimitive::from_f32`."],[3,"from_f64","","A utility function that just calls `FromPrimitive::from_f64`."],[3,"cast","","Cast from one machine scalar to another."],[6,"Num","","The base trait for numeric types"],[6,"Zero","","Defines an additive identity element for `Self`."],[9,"zero","","Returns the additive identity element of `Self`, `0`.",1],[9,"is_zero","","Returns `true` if `self` is equal to the additive identity.",1],[6,"One","","Defines a multiplicative identity element for `Self`."],[9,"one","","Returns the multiplicative identity element of `Self`, `1`.",2],[6,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative)."],[9,"abs","","Computes the absolute value.",3],[9,"abs_sub","","The positive difference of two numbers.",3],[9,"signum","","Returns the sign of the number.",3],[9,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",3],[9,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",3],[6,"Unsigned","","A trait for values which cannot be negative"],[6,"Bounded","","Numbers which have upper and lower bounds"],[9,"min_value","","returns the smallest finite number this type can represent",4],[9,"max_value","","returns the largest finite number this type can represent",4],[6,"Primitive","","Specifies the available operations common to all of Rust's core numeric primitives.\nThese may not always make sense from a purely mathematical point of view, but\nmay be useful for systems programming."],[6,"Int","","A primitive signed or unsigned integer equipped with various bitwise\noperators, bit counting methods, and endian conversion functions."],[9,"count_ones","","Returns the number of ones in the binary representation of the integer.",5],[10,"count_zeros","","Returns the number of zeros in the binary representation of the integer.",5],[9,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof the integer.",5],[9,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof the integer.",5],[9,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",5],[9,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",5],[9,"swap_bytes","","Reverses the byte order of the integer.",5],[10,"from_be","","Convert a integer from big endian to the target's endianness.",5],[10,"from_le","","Convert a integer from little endian to the target's endianness.",5],[10,"to_be","","Convert the integer to big endian from the target's endianness.",5],[10,"to_le","","Convert the integer to little endian from the target's endianness.",5],[6,"ToPrimitive","","A generic trait for converting a value to a number."],[10,"to_int","","Converts the value of `self` to an `int`.",6],[10,"to_i8","","Converts the value of `self` to an `i8`.",6],[10,"to_i16","","Converts the value of `self` to an `i16`.",6],[10,"to_i32","","Converts the value of `self` to an `i32`.",6],[9,"to_i64","","Converts the value of `self` to an `i64`.",6],[10,"to_uint","","Converts the value of `self` to an `uint`.",6],[10,"to_u8","","Converts the value of `self` to an `u8`.",6],[10,"to_u16","","Converts the value of `self` to an `u16`.",6],[10,"to_u32","","Converts the value of `self` to an `u32`.",6],[9,"to_u64","","Converts the value of `self` to an `u64`.",6],[10,"to_f32","","Converts the value of `self` to an `f32`.",6],[10,"to_f64","","Converts the value of `self` to an `f64`.",6],[6,"FromPrimitive","","A generic trait for converting a number to a value."],[10,"from_int","","Convert an `int` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",7],[10,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",7],[10,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",7],[10,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",7],[9,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",7],[10,"from_uint","","Convert an `uint` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",7],[10,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",7],[10,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",7],[10,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",7],[9,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",7],[10,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",7],[10,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",7],[6,"NumCast","","An interface for casting between machine scalars."],[9,"from","","Creates a number from another value that can be converted into a primitive via the\n`ToPrimitive` trait.",8],[6,"Saturating","","Saturating math operations"],[9,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",9],[9,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",9],[6,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow."],[9,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",10],[6,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow."],[9,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",11],[6,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow."],[9,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow\nhappens, `None` is returned.",12],[6,"CheckedDiv","","Performs division that returns `None` instead of failing on division by zero and instead of\nwrapping around on underflow and overflow."],[9,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that\nhappens, / `None` is returned.",13],[6,"Float","","Operations on primitive floating point numbers."],[9,"nan","","Returns the NaN value.",14],[9,"infinity","","Returns the infinite value.",14],[9,"neg_infinity","","Returns the negative infinite value.",14],[9,"neg_zero","","Returns -0.0.",14],[9,"is_nan","","Returns true if this value is NaN and false otherwise.",14],[9,"is_infinite","","Returns true if this value is positive infinity or negative infinity and\nfalse otherwise.",14],[9,"is_finite","","Returns true if this number is neither infinite nor NaN.",14],[9,"is_normal","","Returns true if this number is neither zero, infinite, denormal, or NaN.",14],[9,"classify","","Returns the category that this number falls into.",14],[9,"mantissa_digits","","Returns the number of binary digits of mantissa that this type supports.",14],[9,"digits","","Returns the number of base-10 digits of precision that this type supports.",14],[9,"epsilon","","Returns the difference between 1.0 and the smallest representable number larger than 1.0.",14],[9,"min_exp","","Returns the minimum binary exponent that this type can represent.",14],[9,"max_exp","","Returns the maximum binary exponent that this type can represent.",14],[9,"min_10_exp","","Returns the minimum base-10 exponent that this type can represent.",14],[9,"max_10_exp","","Returns the maximum base-10 exponent that this type can represent.",14],[9,"min_pos_value","","Returns the smallest normalized positive number that this type can represent.",14],[9,"integer_decode","","Returns the mantissa, exponent and sign as integers, respectively.",14],[9,"floor","","Return the largest integer less than or equal to a number.",14],[9,"ceil","","Return the smallest integer greater than or equal to a number.",14],[9,"round","","Return the nearest integer to a number. Round half-way cases away from\n`0.0`.",14],[9,"trunc","","Return the integer part of a number.",14],[9,"fract","","Return the fractional part of a number.",14],[9,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",14],[9,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14],[9,"powi","","Raise a number to an integer power.",14],[9,"powf","","Raise a number to a floating point power.",14],[9,"sqrt2","","sqrt(2.0).",14],[9,"frac_1_sqrt2","","1.0 / sqrt(2.0).",14],[9,"sqrt","","Take the square root of a number.",14],[9,"rsqrt","","Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.",14],[9,"pi","","Archimedes' constant.",14],[9,"two_pi","","2.0 * pi.",14],[9,"frac_pi_2","","pi / 2.0.",14],[9,"frac_pi_3","","pi / 3.0.",14],[9,"frac_pi_4","","pi / 4.0.",14],[9,"frac_pi_6","","pi / 6.0.",14],[9,"frac_pi_8","","pi / 8.0.",14],[9,"frac_1_pi","","1.0 / pi.",14],[9,"frac_2_pi","","2.0 / pi.",14],[9,"frac_2_sqrtpi","","2.0 / sqrt(pi).",14],[9,"e","","Euler's number.",14],[9,"log2_e","","log2(e).",14],[9,"log10_e","","log10(e).",14],[9,"ln_2","","ln(2.0).",14],[9,"ln_10","","ln(10.0).",14],[9,"exp","","Returns `e^(self)`, (the exponential function).",14],[9,"exp2","","Returns 2 raised to the power of the number, `2^(self)`.",14],[9,"ln","","Returns the natural logarithm of the number.",14],[9,"log","","Returns the logarithm of the number with respect to an arbitrary base.",14],[9,"log2","","Returns the base 2 logarithm of the number.",14],[9,"log10","","Returns the base 10 logarithm of the number.",14],[9,"to_degrees","","Convert radians to degrees.",14],[9,"to_radians","","Convert degrees to radians.",14],[10,"fmt","","",0],[10,"eq","","",0],[10,"ne","","",0],[0,"prelude","core","The core prelude"],[0,"intrinsics","","rustc compiler intrinsics."],[1,"TyDesc","core::intrinsics",""],[11,"size","","",15],[11,"align","","",15],[11,"drop_glue","","",15],[11,"visit_glue","","",15],[11,"name","","",15],[1,"TypeId","","`TypeId` represents a globally unique identifier for a type"],[2,"Opaque","",""],[13,"atomic_cxchg","",""],[13,"atomic_cxchg_acq","",""],[13,"atomic_cxchg_rel","",""],[13,"atomic_cxchg_acqrel","",""],[13,"atomic_cxchg_relaxed","",""],[13,"atomic_load","",""],[13,"atomic_load_acq","",""],[13,"atomic_load_relaxed","",""],[13,"atomic_store","",""],[13,"atomic_store_rel","",""],[13,"atomic_store_relaxed","",""],[13,"atomic_xchg","",""],[13,"atomic_xchg_acq","",""],[13,"atomic_xchg_rel","",""],[13,"atomic_xchg_acqrel","",""],[13,"atomic_xchg_relaxed","",""],[13,"atomic_xadd","",""],[13,"atomic_xadd_acq","",""],[13,"atomic_xadd_rel","",""],[13,"atomic_xadd_acqrel","",""],[13,"atomic_xadd_relaxed","",""],[13,"atomic_xsub","",""],[13,"atomic_xsub_acq","",""],[13,"atomic_xsub_rel","",""],[13,"atomic_xsub_acqrel","",""],[13,"atomic_xsub_relaxed","",""],[13,"atomic_and","",""],[13,"atomic_and_acq","",""],[13,"atomic_and_rel","",""],[13,"atomic_and_acqrel","",""],[13,"atomic_and_relaxed","",""],[13,"atomic_nand","",""],[13,"atomic_nand_acq","",""],[13,"atomic_nand_rel","",""],[13,"atomic_nand_acqrel","",""],[13,"atomic_nand_relaxed","",""],[13,"atomic_or","",""],[13,"atomic_or_acq","",""],[13,"atomic_or_rel","",""],[13,"atomic_or_acqrel","",""],[13,"atomic_or_relaxed","",""],[13,"atomic_xor","",""],[13,"atomic_xor_acq","",""],[13,"atomic_xor_rel","",""],[13,"atomic_xor_acqrel","",""],[13,"atomic_xor_relaxed","",""],[13,"atomic_max","",""],[13,"atomic_max_acq","",""],[13,"atomic_max_rel","",""],[13,"atomic_max_acqrel","",""],[13,"atomic_max_relaxed","",""],[13,"atomic_min","",""],[13,"atomic_min_acq","",""],[13,"atomic_min_rel","",""],[13,"atomic_min_acqrel","",""],[13,"atomic_min_relaxed","",""],[13,"atomic_umin","",""],[13,"atomic_umin_acq","",""],[13,"atomic_umin_rel","",""],[13,"atomic_umin_acqrel","",""],[13,"atomic_umin_relaxed","",""],[13,"atomic_umax","",""],[13,"atomic_umax_acq","",""],[13,"atomic_umax_rel","",""],[13,"atomic_umax_acqrel","",""],[13,"atomic_umax_relaxed","",""],[13,"atomic_fence","",""],[13,"atomic_fence_acq","",""],[13,"atomic_fence_rel","",""],[13,"atomic_fence_acqrel","",""],[13,"abort","","Abort the execution of the process."],[13,"breakpoint","","Execute a breakpoint trap, for inspection by a debugger."],[13,"size_of","","The size of a type in bytes."],[13,"move_val_init","","Move a value to an uninitialized memory location."],[13,"min_align_of","",""],[13,"pref_align_of","",""],[13,"get_tydesc","","Get a static pointer to a type descriptor."],[13,"type_id","","Gets an identifier which is globally unique to the specified type. This\nfunction will return the same value for a type regardless of whichever\ncrate it is invoked in."],[13,"init","","Create a value initialized to zero."],[13,"uninit","","Create an uninitialized value."],[13,"forget","","Move a value out of scope without running drop glue."],[13,"transmute","","Unsafely transforms a value of one type into a value of another type."],[13,"return_address","","Gives the address for the return value of the enclosing function."],[13,"needs_drop","","Returns `true` if a type requires drop glue."],[13,"owns_managed","","Returns `true` if a type is managed (will be allocated on the local heap)"],[13,"visit_tydesc","",""],[13,"offset","","Calculates the offset from a pointer. The offset *must* be in-bounds of\nthe object, or one-byte-past-the-end. An arithmetic overflow is also\nundefined behaviour."],[13,"copy_nonoverlapping_memory","","Copies data from one location to another."],[13,"copy_memory","","Copies data from one location to another."],[13,"set_memory","","Invokes memset on the specified pointer, setting `count * size_of::<T>()`\nbytes of memory starting at `dst` to `c`."],[13,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`"],[13,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`"],[13,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\nsize of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`."],[13,"volatile_load","","Perform a volatile load from the `src` pointer."],[13,"volatile_store","","Perform a volatile store to the `dst` pointer."],[13,"sqrtf32","","Returns the square root of an `f32`"],[13,"sqrtf64","","Returns the square root of an `f64`"],[13,"powif32","","Raises an `f32` to an integer power."],[13,"powif64","","Raises an `f64` to an integer power."],[13,"sinf32","","Returns the sine of an `f32`."],[13,"sinf64","","Returns the sine of an `f64`."],[13,"cosf32","","Returns the cosine of an `f32`."],[13,"cosf64","","Returns the cosine of an `f64`."],[13,"powf32","","Raises an `f32` to an `f32` power."],[13,"powf64","","Raises an `f64` to an `f64` power."],[13,"expf32","","Returns the exponential of an `f32`."],[13,"expf64","","Returns the exponential of an `f64`."],[13,"exp2f32","","Returns 2 raised to the power of an `f32`."],[13,"exp2f64","","Returns 2 raised to the power of an `f64`."],[13,"logf32","","Returns the natural logarithm of an `f32`."],[13,"logf64","","Returns the natural logarithm of an `f64`."],[13,"log10f32","","Returns the base 10 logarithm of an `f32`."],[13,"log10f64","","Returns the base 10 logarithm of an `f64`."],[13,"log2f32","","Returns the base 2 logarithm of an `f32`."],[13,"log2f64","","Returns the base 2 logarithm of an `f64`."],[13,"fmaf32","","Returns `a * b + c` for `f32` values."],[13,"fmaf64","","Returns `a * b + c` for `f64` values."],[13,"fabsf32","","Returns the absolute value of an `f32`."],[13,"fabsf64","","Returns the absolute value of an `f64`."],[13,"copysignf32","","Copies the sign from `y` to `x` for `f32` values."],[13,"copysignf64","","Copies the sign from `y` to `x` for `f64` values."],[13,"floorf32","","Returns the largest integer less than or equal to an `f32`."],[13,"floorf64","","Returns the largest integer less than or equal to an `f64`."],[13,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`."],[13,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`."],[13,"truncf32","","Returns the integer part of an `f32`."],[13,"truncf64","","Returns the integer part of an `f64`."],[13,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception\nif the argument is not an integer."],[13,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception\nif the argument is not an integer."],[13,"nearbyintf32","","Returns the nearest integer to an `f32`."],[13,"nearbyintf64","","Returns the nearest integer to an `f64`."],[13,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero."],[13,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero."],[13,"ctpop8","","Returns the number of bits set in a `u8`."],[13,"ctpop16","","Returns the number of bits set in a `u16`."],[13,"ctpop32","","Returns the number of bits set in a `u32`."],[13,"ctpop64","","Returns the number of bits set in a `u64`."],[13,"ctlz8","","Returns the number of leading bits unset in a `u8`."],[13,"ctlz16","","Returns the number of leading bits unset in a `u16`."],[13,"ctlz32","","Returns the number of leading bits unset in a `u32`."],[13,"ctlz64","","Returns the number of leading bits unset in a `u64`."],[13,"cttz8","","Returns the number of trailing bits unset in a `u8`."],[13,"cttz16","","Returns the number of trailing bits unset in a `u16`."],[13,"cttz32","","Returns the number of trailing bits unset in a `u32`."],[13,"cttz64","","Returns the number of trailing bits unset in a `u64`."],[13,"bswap16","","Reverses the bytes in a `u16`."],[13,"bswap32","","Reverses the bytes in a `u32`."],[13,"bswap64","","Reverses the bytes in a `u64`."],[13,"i8_add_with_overflow","","Performs checked `i8` addition."],[13,"i16_add_with_overflow","","Performs checked `i16` addition."],[13,"i32_add_with_overflow","","Performs checked `i32` addition."],[13,"i64_add_with_overflow","","Performs checked `i64` addition."],[13,"u8_add_with_overflow","","Performs checked `u8` addition."],[13,"u16_add_with_overflow","","Performs checked `u16` addition."],[13,"u32_add_with_overflow","","Performs checked `u32` addition."],[13,"u64_add_with_overflow","","Performs checked `u64` addition."],[13,"i8_sub_with_overflow","","Performs checked `i8` subtraction."],[13,"i16_sub_with_overflow","","Performs checked `i16` subtraction."],[13,"i32_sub_with_overflow","","Performs checked `i32` subtraction."],[13,"i64_sub_with_overflow","","Performs checked `i64` subtraction."],[13,"u8_sub_with_overflow","","Performs checked `u8` subtraction."],[13,"u16_sub_with_overflow","","Performs checked `u16` subtraction."],[13,"u32_sub_with_overflow","","Performs checked `u32` subtraction."],[13,"u64_sub_with_overflow","","Performs checked `u64` subtraction."],[13,"i8_mul_with_overflow","","Performs checked `i8` multiplication."],[13,"i16_mul_with_overflow","","Performs checked `i16` multiplication."],[13,"i32_mul_with_overflow","","Performs checked `i32` multiplication."],[13,"i64_mul_with_overflow","","Performs checked `i64` multiplication."],[13,"u8_mul_with_overflow","","Performs checked `u8` multiplication."],[13,"u16_mul_with_overflow","","Performs checked `u16` multiplication."],[13,"u32_mul_with_overflow","","Performs checked `u32` multiplication."],[13,"u64_mul_with_overflow","","Performs checked `u64` multiplication."],[4,"GlueFn","",""],[4,"Disr","",""],[6,"TyVisitor","",""],[9,"visit_bot","","",16],[9,"visit_nil","","",16],[9,"visit_bool","","",16],[9,"visit_int","","",16],[9,"visit_i8","","",16],[9,"visit_i16","","",16],[9,"visit_i32","","",16],[9,"visit_i64","","",16],[9,"visit_uint","","",16],[9,"visit_u8","","",16],[9,"visit_u16","","",16],[9,"visit_u32","","",16],[9,"visit_u64","","",16],[9,"visit_f32","","",16],[9,"visit_f64","","",16],[9,"visit_char","","",16],[9,"visit_estr_slice","","",16],[9,"visit_box","","",16],[9,"visit_uniq","","",16],[9,"visit_ptr","","",16],[9,"visit_rptr","","",16],[9,"visit_evec_slice","","",16],[9,"visit_evec_fixed","","",16],[9,"visit_enter_rec","","",16],[9,"visit_rec_field","","",16],[9,"visit_leave_rec","","",16],[9,"visit_enter_class","","",16],[9,"visit_class_field","","",16],[9,"visit_leave_class","","",16],[9,"visit_enter_tup","","",16],[9,"visit_tup_field","","",16],[9,"visit_leave_tup","","",16],[9,"visit_enter_enum","","",16],[9,"visit_enter_enum_variant","","",16],[9,"visit_enum_variant_field","","",16],[9,"visit_leave_enum_variant","","",16],[9,"visit_leave_enum","","",16],[9,"visit_enter_fn","","",16],[9,"visit_fn_input","","",16],[9,"visit_fn_output","","",16],[9,"visit_leave_fn","","",16],[9,"visit_trait","","",16],[9,"visit_param","","",16],[9,"visit_self","","",16],[10,"fmt","","",17],[10,"eq","","",17],[10,"ne","","",17],[10,"of","","Returns the `TypeId` of the type this generic function has been instantiated with",17],[10,"hash","","",17],[0,"mem","core","Basic functions for dealing with memory"],[3,"size_of","core::mem","Returns the size of a type in bytes."],[3,"size_of_val","","Returns the size of the type that `_val` points to in bytes."],[3,"nonzero_size_of","","Deprecated, this function will be removed soon"],[3,"nonzero_size_of_val","","Deprecated, this function will be removed soon"],[3,"min_align_of","","Returns the ABI-required minimum alignment of a type"],[3,"min_align_of_val","","Returns the ABI-required minimum alignment of the type of the value that\n`_val` points to"],[3,"align_of","","Returns the alignment in memory for a type."],[3,"align_of_val","","Returns the alignment of the type of the value that `_val` points to."],[3,"pref_align_of","","Deprecated, this function has been renamed to align_of"],[3,"pref_align_of_val","","Deprecated, this function has been renamed to align_of_val"],[3,"zeroed","","Create a value initialized to zero."],[3,"init","","Deprecated, use zeroed() instead"],[3,"uninitialized","","Create an uninitialized value."],[3,"uninit","","Deprecated, use `uninitialized` instead."],[3,"overwrite","","Unsafely overwrite a memory location with the given value without destroying\nthe old value."],[3,"move_val_init","","Deprecated, use `overwrite` instead"],[3,"to_le16","","Convert an u16 to little endian from the target's endianness."],[3,"to_le32","","Convert an u32 to little endian from the target's endianness."],[3,"to_le64","","Convert an u64 to little endian from the target's endianness."],[3,"to_be16","","Convert an u16 to big endian from the target's endianness."],[3,"to_be32","","Convert an u32 to big endian from the target's endianness."],[3,"to_be64","","Convert an u64 to big endian from the target's endianness."],[3,"from_le16","","Convert an u16 from little endian to the target's endianness."],[3,"from_le32","","Convert an u32 from little endian to the target's endianness."],[3,"from_le64","","Convert an u64 from little endian to the target's endianness."],[3,"from_be16","","Convert an u16 from big endian to the target's endianness."],[3,"from_be32","","Convert an u32 from big endian to the target's endianness."],[3,"from_be64","","Convert an u64 from big endian to the target's endianness."],[3,"swap","","Swap the values at two mutable locations of the same type, without\ndeinitialising or copying either one."],[3,"replace","","Replace the value at a mutable location with a new one, returning the old\nvalue, without deinitialising or copying either one."],[3,"drop","","Disposes of a value."],[3,"transmute_copy","","Interprets `src` as `&U`, and then reads `src` without moving the contained\nvalue."],[3,"copy_lifetime","","Transforms lifetime of the second pointer to match the first."],[3,"copy_mut_lifetime","","Transforms lifetime of the second mutable pointer to match the first."],[0,"ptr","core","Operations on unsafe pointers, `*const T`, and `*mut T`."],[3,"null","core::ptr","Create a null pointer."],[3,"mut_null","","Deprecated: use `null_mut`."],[3,"null_mut","","Create an unsafe mutable null pointer."],[3,"zero_memory","","Zeroes out `count * size_of::<T>` bytes of memory at `dst`"],[3,"swap","","Swap the values at two mutable locations of the same type, without\ndeinitialising either. They may overlap."],[3,"replace","","Replace the value at a mutable location with a new one, returning the old\nvalue, without deinitialising either."],[3,"read","","Reads the value from `*src` and returns it."],[3,"read_and_zero","","Reads the value from `*src` and nulls it out.\nThis currently prevents destructors from executing."],[3,"write","","Unsafely overwrite a memory location with the given value without destroying\nthe old value."],[3,"array_each_with_len","","Given a *const *const T (pointer to an array of pointers),\niterate through each *const T, up to the provided `len`,\npassing to the provided callback function"],[3,"array_each","","Given a null-pointer-terminated *const *const T (pointer to\nan array of pointers), iterate through each *const T,\npassing to the provided callback function"],[3,"buf_len","","Return the offset of the first null pointer in `buf`."],[3,"position","","Return the first offset `i` such that `f(buf[i]) == true`."],[6,"RawPtr","","Methods on raw pointers"],[9,"null","","Returns the null pointer.",18],[9,"is_null","","Returns true if the pointer is equal to the null pointer.",18],[10,"is_not_null","","Returns true if the pointer is not equal to the null pointer.",18],[9,"to_uint","","Returns the value of this pointer (ie, the address it points to)",18],[9,"as_ref","","Returns `None` if the pointer is null, or else returns a reference to the\nvalue wrapped in `Some`.",18],[10,"to_option","","A synonym for `as_ref`, except with incorrect lifetime semantics",18],[9,"offset","","Calculates the offset from a pointer. The offset *must* be in-bounds of\nthe object, or one-byte-past-the-end.  `count` is in units of T; e.g. a\n`count` of 3 represents a pointer offset of `3 * sizeof::<T>()` bytes.",18],[6,"RawMutPtr","","Methods on mutable raw pointers"],[9,"as_mut","","Returns `None` if the pointer is null, or else returns a mutable reference\nto the value wrapped in `Some`. As with `as_ref`, this is unsafe because\nit cannot verify the validity of the returned pointer.",19],[0,"kinds","core","Primitive traits representing basic 'kinds' of types"],[0,"marker","core::kinds","Marker types are special types that are used with unsafe code to\ninform the compiler of special constraints. Marker types should\nonly be needed when you are creating an abstraction that is\nimplemented using unsafe code. In that case, you may want to embed\nsome of the marker types below into your type."],[1,"CovariantType","core::kinds::marker","A marker type whose type parameter `T` is considered to be\ncovariant with respect to the type itself. This is (typically)\nused to indicate that an instance of the type `T` is being stored\ninto memory and read from, even though that may not be apparent."],[1,"ContravariantType","","A marker type whose type parameter `T` is considered to be\ncontravariant with respect to the type itself. This is (typically)\nused to indicate that an instance of the type `T` will be consumed\n(but not read from), even though that may not be apparent."],[1,"InvariantType","","A marker type whose type parameter `T` is considered to be\ninvariant with respect to the type itself. This is (typically)\nused to indicate that instances of the type `T` may be read or\nwritten, even though that may not be apparent."],[1,"CovariantLifetime","","As `CovariantType`, but for lifetime parameters. Using\n`CovariantLifetime<'a>` indicates that it is ok to substitute\na *longer* lifetime for `'a` than the one you originally\nstarted with (e.g., you could convert any lifetime `'foo` to\n`'static`). You almost certainly want `ContravariantLifetime`\ninstead, or possibly `InvariantLifetime`. The only case where\nit would be appropriate is that you have a (type-casted, and\nhence hidden from the type system) function pointer with a\nsignature like `fn(&'a T)` (and no other uses of `'a`). In\nthis case, it is ok to substitute a larger lifetime for `'a`\n(e.g., `fn(&'static T)`), because the function is only\nbecoming more selective in terms of what it accepts as\nargument."],[1,"ContravariantLifetime","","As `ContravariantType`, but for lifetime parameters. Using\n`ContravariantLifetime<'a>` indicates that it is ok to\nsubstitute a *shorter* lifetime for `'a` than the one you\noriginally started with (e.g., you could convert `'static` to\nany lifetime `'foo`). This is appropriate for cases where you\nhave an unsafe pointer that is actually a pointer into some\nmemory with lifetime `'a`, and thus you want to limit the\nlifetime of your data structure to `'a`. An example of where\nthis is used is the iterator for vectors."],[1,"InvariantLifetime","","As `InvariantType`, but for lifetime parameters. Using\n`InvariantLifetime<'a>` indicates that it is not ok to\nsubstitute any other lifetime for `'a` besides its original\nvalue. This is appropriate for cases where you have an unsafe\npointer that is actually a pointer into memory with lifetime `'a`,\nand this pointer is itself stored in an inherently mutable\nlocation (such as a `Cell`)."],[1,"NoSend","","A type which is considered \"not sendable\", meaning that it cannot\nbe safely sent between tasks, even if it is owned. This is\ntypically embedded in other types, such as `Gc`, to ensure that\ntheir instances remain thread-local."],[1,"NoCopy","","A type which is considered \"not POD\", meaning that it is not\nimplicitly copyable. This is typically embedded in other types to\nensure that they are never copied, even if they lack a destructor."],[1,"NoSync","","A type which is considered \"not sync\", meaning that\nits contents are not threadsafe, hence they cannot be\nshared between tasks."],[1,"Managed","","A type which is considered managed by the GC. This is typically\nembedded in other types."],[10,"clone","","",20],[10,"eq","","",20],[10,"ne","","",20],[10,"clone","","",21],[10,"eq","","",21],[10,"ne","","",21],[10,"clone","","",22],[10,"eq","","",22],[10,"ne","","",22],[10,"clone","","",23],[10,"eq","","",23],[10,"ne","","",23],[10,"clone","","",24],[10,"eq","","",24],[10,"ne","","",24],[10,"clone","","",25],[10,"eq","","",25],[10,"ne","","",25],[10,"clone","","",26],[10,"eq","","",26],[10,"ne","","",26],[10,"clone","","",27],[10,"eq","","",27],[10,"ne","","",27],[10,"clone","","",28],[10,"eq","","",28],[10,"ne","","",28],[10,"clone","","",29],[10,"eq","","",29],[10,"ne","","",29],[6,"Send","core::kinds","Types able to be transferred across task boundaries."],[6,"Sized","","Types with a constant size known at compile-time."],[6,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`)."],[6,"Sync","","Types that can be safely shared between tasks when aliased."],[0,"ops","core","\nOverloadable operators"],[6,"Drop","core::ops","\nThe `Drop` trait is used to run some code when a value goes out of scope. This\nis sometimes called a 'destructor'."],[9,"drop","","The `drop` method, called when the value goes out of scope.",30],[6,"Add","","\nThe `Add` trait is used to specify the functionality of `+`."],[9,"add","","The method for the `+` operator",31],[6,"Sub","","\nThe `Sub` trait is used to specify the functionality of `-`."],[9,"sub","","The method for the `-` operator",32],[6,"Mul","","\nThe `Mul` trait is used to specify the functionality of `*`."],[9,"mul","","The method for the `*` operator",33],[6,"Div","","\nThe `Div` trait is used to specify the functionality of `/`."],[9,"div","","The method for the `/` operator",34],[6,"Rem","","\nThe `Rem` trait is used to specify the functionality of `%`."],[9,"rem","","The method for the `%` operator",35],[6,"Neg","","\nThe `Neg` trait is used to specify the functionality of unary `-`."],[9,"neg","","The method for the unary `-` operator",36],[6,"Not","","\nThe `Not` trait is used to specify the functionality of unary `!`."],[9,"not","","The method for the unary `!` operator",37],[6,"BitAnd","","\nThe `BitAnd` trait is used to specify the functionality of `&`."],[9,"bitand","","The method for the `&` operator",38],[6,"BitOr","","\nThe `BitOr` trait is used to specify the functionality of `|`."],[9,"bitor","","The method for the `|` operator",39],[6,"BitXor","","\nThe `BitXor` trait is used to specify the functionality of `^`."],[9,"bitxor","","The method for the `^` operator",40],[6,"Shl","","\nThe `Shl` trait is used to specify the functionality of `<<`."],[9,"shl","","The method for the `<<` operator",41],[6,"Shr","","\nThe `Shr` trait is used to specify the functionality of `>>`."],[9,"shr","","The method for the `>>` operator",42],[6,"Index","","\nThe `Index` trait is used to specify the functionality of indexing operations\nlike `arr[idx]` when used in an immutable context."],[9,"index","","The method for the indexing (`Foo[Bar]`) operation",43],[6,"IndexMut","","\nThe `IndexMut` trait is used to specify the functionality of indexing\noperations like `arr[idx]`, when used in a mutable context."],[9,"index_mut","","The method for the indexing (`Foo[Bar]`) operation",44],[6,"Slice","","\nThe `Slice` trait is used to specify the functionality of slicing operations\nlike `arr[from..to]` when used in an immutable context."],[9,"as_slice_","","The method for the slicing operation foo[]",45],[9,"slice_from_","","The method for the slicing operation foo[from..]",45],[9,"slice_to_","","The method for the slicing operation foo[..to]",45],[9,"slice_","","The method for the slicing operation foo[from..to]",45],[6,"SliceMut","","\nThe `SliceMut` trait is used to specify the functionality of slicing\noperations like `arr[from..to]`, when used in a mutable context."],[9,"as_mut_slice_","","The method for the slicing operation foo[]",46],[9,"slice_from_mut_","","The method for the slicing operation foo[from..]",46],[9,"slice_to_mut_","","The method for the slicing operation foo[..to]",46],[9,"slice_mut_","","The method for the slicing operation foo[from..to]",46],[6,"Deref","","\nThe `Deref` trait is used to specify the functionality of dereferencing\noperations like `*v`."],[9,"deref","","The method called to dereference a value",47],[6,"DerefMut","","\nThe `DerefMut` trait is used to specify the functionality of dereferencing\nmutably like `*v = 1;`"],[9,"deref_mut","","The method called to mutably dereference a value",48],[6,"Fn","","A version of the call operator that takes an immutable receiver."],[9,"call","","This is called when the call operator is used.",49],[6,"FnMut","","A version of the call operator that takes a mutable receiver."],[9,"call_mut","","This is called when the call operator is used.",50],[6,"FnOnce","","A version of the call operator that takes a by-value receiver."],[9,"call_once","","This is called when the call operator is used.",51],[0,"cmp","core","Defines the `PartialOrd` and `PartialEq` comparison traits."],[2,"Ordering","core::cmp","An ordering is, e.g, a result of a comparison between two values."],[12,"Less","","An ordering where a compared value is less [than another].",52],[12,"Equal","","An ordering where a compared value is equal [to another].",52],[12,"Greater","","An ordering where a compared value is greater [than another].",52],[3,"lexical_ordering","","Combine orderings, lexically."],[3,"min","","Compare and return the minimum of two values."],[3,"max","","Compare and return the maximum of two values."],[6,"PartialEq","","Trait for values that can be compared for equality and inequality."],[9,"eq","","This method tests for `self` and `other` values to be equal, and is used by `==`.",53],[10,"ne","","This method tests for `!=`.",53],[6,"Eq","","Trait for equality comparisons which are [equivalence relation]"],[6,"Ord","","Trait for types that form a [total order]"],[9,"cmp","","This method returns an ordering between `self` and `other` values.",54],[6,"PartialOrd","","Trait for values that can be compared for a sort-order."],[9,"partial_cmp","","This method returns an ordering between `self` and `other` values\nif one exists.",55],[10,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",55],[10,"le","","This method tests less than or equal to (`<=`).",55],[10,"gt","","This method tests greater than (`>`).",55],[10,"ge","","This method tests greater than or equal to (`>=`).",55],[6,"Equiv","","The equivalence relation. Two values may be equivalent even if they are\nof different types. The most common use case for this relation is\ncontainer types; e.g. it is often desirable to be able to use `&str`\nvalues to look up entries in a container with `String` keys."],[9,"equiv","","Implement this function to decide equivalent values.",56],[10,"fmt","","",52],[10,"eq","","",52],[10,"ne","","",52],[10,"clone","","",52],[10,"reverse","","Reverse the `Ordering`, so that `Less` becomes `Greater` and\nvice versa.",52],[10,"cmp","","",52],[10,"partial_cmp","","",52],[0,"clone","core","The `Clone` trait for types that cannot be 'implicitly copied'"],[6,"Clone","core::clone","A common trait for cloning an object."],[9,"clone","","Returns a copy of the value. The contents of owned pointers\nare copied to maintain uniqueness, while the contents of\nmanaged pointers are not copied.",57],[10,"clone_from","","Perform copy-assignment from `source`.",57],[0,"default","core","The `Default` trait for types which may have meaningful default values"],[6,"Default","core::default","A trait that types which have a useful default value should implement."],[9,"default","","Return the \"default value\" for a type.",58],[0,"collections","core","Traits for generic collections"],[6,"Collection","core::collections","A trait to represent the abstract idea of a container. The only concrete\nknowledge known is the number of elements contained within."],[9,"len","","Return the number of elements in the container",59],[10,"is_empty","","Return true if the container contains no elements",59],[0,"ty","core","Deprecated module in favor of `std::cell`"],[0,"any","","Traits for dynamic typing of any `'static` type (through runtime reflection)"],[2,"Void","core::any","A type with no inhabitants"],[6,"Any","","The `Any` trait is implemented by all `'static` types, and can be used for\ndynamic typing"],[6,"AnyPrivate","","An inner trait to ensure that only this module can call `get_type_id()`."],[9,"get_type_id","","Get the `TypeId` of `self`",60],[6,"AnyRefExt","","Extension methods for a referenced `Any` trait object"],[9,"is","","Returns true if the boxed type is the same as `T`",61],[9,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",61],[10,"as_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",61],[6,"AnyMutRefExt","","Extension methods for a mutable referenced `Any` trait object"],[9,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",62],[10,"as_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",62],[0,"atomic","core","Core atomic primitives"],[1,"AtomicBool","core::atomic","An atomic boolean type."],[1,"AtomicInt","","A signed atomic integer type, supporting basic atomic arithmetic operations"],[1,"AtomicUint","","An unsigned atomic integer type, supporting basic atomic arithmetic operations"],[1,"AtomicPtr","","An unsafe atomic pointer. Only supports basic atomic operations"],[2,"Ordering","","Atomic memory orderings"],[12,"Relaxed","","No ordering constraints, only atomic operations",63],[12,"Release","","When coupled with a store, all previous writes become visible\nto another thread that performs a load with `Acquire` ordering\non the same value",63],[12,"Acquire","","When coupled with a load, all subsequent loads will see data\nwritten before a store with `Release` ordering on the same value\nin another thread",63],[12,"AcqRel","","When coupled with a load, uses `Acquire` ordering, and with a store\n`Release` ordering",63],[12,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all\nsequentially consistent operations in the same order.",63],[3,"fence","","An atomic fence."],[5,"INIT_ATOMIC_BOOL","","An `AtomicBool` initialized to `false`"],[5,"INIT_ATOMIC_INT","","An `AtomicInt` initialized to `0`"],[5,"INIT_ATOMIC_UINT","","An `AtomicUint` initialized to `0`"],[10,"new","","Create a new `AtomicBool`",64],[10,"load","","Load the value",64],[10,"store","","Store the value",64],[10,"swap","","Store a value, returning the old value",64],[10,"compare_and_swap","","If the current value is the same as expected, store a new value",64],[10,"fetch_and","","A logical \"and\" operation",64],[10,"fetch_nand","","A logical \"nand\" operation",64],[10,"fetch_or","","A logical \"or\" operation",64],[10,"fetch_xor","","A logical \"xor\" operation",64],[10,"new","","Create a new `AtomicInt`",65],[10,"load","","Load the value",65],[10,"store","","Store the value",65],[10,"swap","","Store a value, returning the old value",65],[10,"compare_and_swap","","If the current value is the same as expected, store a new value",65],[10,"fetch_add","","Add to the current value, returning the previous",65],[10,"fetch_sub","","Subtract from the current value, returning the previous",65],[10,"fetch_and","","Bitwise and with the current value, returning the previous",65],[10,"fetch_or","","Bitwise or with the current value, returning the previous",65],[10,"fetch_xor","","Bitwise xor with the current value, returning the previous",65],[10,"new","","Create a new `AtomicUint`",66],[10,"load","","Load the value",66],[10,"store","","Store the value",66],[10,"swap","","Store a value, returning the old value",66],[10,"compare_and_swap","","If the current value is the same as expected, store a new value",66],[10,"fetch_add","","Add to the current value, returning the previous",66],[10,"fetch_sub","","Subtract from the current value, returning the previous",66],[10,"fetch_and","","Bitwise and with the current value, returning the previous",66],[10,"fetch_or","","Bitwise or with the current value, returning the previous",66],[10,"fetch_xor","","Bitwise xor with the current value, returning the previous",66],[10,"new","","Create a new `AtomicPtr`",67],[10,"load","","Load the value",67],[10,"store","","Store the value",67],[10,"swap","","Store a value, returning the old value",67],[10,"compare_and_swap","","If the current value is the same as expected, store a new value",67],[0,"bool","core","The boolean type"],[16,"bool","core::bool","The boolean type"],[0,"cell","core","Shareable mutable containers."],[1,"Cell","core::cell","A mutable memory location that admits only `Copy` data."],[1,"RefCell","","A mutable memory location with dynamically checked borrow rules"],[1,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box."],[1,"RefMut","","Wraps a mutable borrowed reference to a value in a `RefCell` box."],[1,"UnsafeCell","","The core primitive for interior mutability in Rust."],[11,"value","","Wrapped value",68],[3,"clone_ref","","Copy a `Ref`."],[10,"new","","Creates a new `Cell` containing the given value.",69],[10,"get","","Returns a copy of the contained value.",69],[10,"set","","Sets the contained value.",69],[10,"clone","","",69],[10,"eq","","",69],[10,"new","","Create a new `RefCell` containing `value`",70],[10,"unwrap","","Consumes the `RefCell`, returning the wrapped value.",70],[10,"try_borrow","","Attempts to immutably borrow the wrapped value.",70],[10,"borrow","","Immutably borrows the wrapped value.",70],[10,"try_borrow_mut","","Mutably borrows the wrapped value.",70],[10,"borrow_mut","","Mutably borrows the wrapped value.",70],[10,"clone","","",70],[10,"eq","","",70],[10,"drop","","",71],[10,"deref","","",71],[10,"drop","","",72],[10,"deref","","",72],[10,"deref_mut","","",72],[10,"new","","Construct a new instance of `UnsafeCell` which will wrap the specified\nvalue.",68],[10,"get","","Gets a mutable pointer to the wrapped value.",68],[10,"unwrap","","Unwraps the value",68],[0,"char","core","Character manipulation."],[3,"from_u32","core::char","Converts from `u32` to a `char`"],[3,"is_digit_radix","","\nChecks if a `char` parses as a numeric digit in the given radix"],[3,"to_digit","","\nConverts a `char` to the corresponding digit"],[3,"from_digit","","\nConverts a number to the character representing it"],[3,"escape_unicode","","\nReturns the hexadecimal Unicode escape of a `char`"],[3,"escape_default","","\nReturns a 'default' ASCII and C++11-like literal escape of a `char`"],[3,"len_utf8_bytes","","Returns the amount of bytes this `char` would need if encoded in UTF-8"],[5,"MAX","","The highest valid code point"],[6,"Char","","Basic `char` manipulations."],[9,"is_digit_radix","","Checks if a `char` parses as a numeric digit in the given radix.",73],[9,"to_digit","","Converts a character to the corresponding digit.",73],[9,"from_digit","","Converts a number to the character representing it.",73],[9,"escape_unicode","","Returns the hexadecimal Unicode escape of a character.",73],[9,"escape_default","","Returns a 'default' ASCII and C++11-like literal escape of a\ncharacter.",73],[9,"len_utf8_bytes","","Returns the amount of bytes this character would need if encoded in\nUTF-8.",73],[9,"encode_utf8","","Encodes this character as UTF-8 into the provided byte buffer,\nand then returns the number of bytes written.",73],[9,"encode_utf16","","Encodes this character as UTF-16 into the provided `u16` buffer,\nand then returns the number of `u16`s written.",73],[16,"char","","Character manipulation."],[0,"failure","core","Failure support for libcore"],[3,"begin_unwind_string","core::failure",""],[3,"begin_unwind","",""],[0,"finally","core","The Finally trait provides a method, `finally` on\nstack closures that emulates Java-style try/finally blocks."],[3,"try_finally","core::finally","The most general form of the `finally` functions. The function\n`try_fn` will be invoked first; whether or not it fails, the\nfunction `finally_fn` will be invoked next. The two parameters\n`mutate` and `drop` are used to thread state through the two\nclosures. `mutate` is used for any shared, mutable state that both\nclosures require access to; `drop` is used for any state that the\n`try_fn` requires ownership of."],[6,"Finally","","A trait for executing a destructor unconditionally after a block of code,\nregardless of whether the blocked fails."],[9,"finally","","Executes this object, unconditionally running `dtor` after this block of\ncode has run.",74],[0,"iter","core","Composable external iterators"],[1,"Rev","core::iter","An double-ended iterator with the direction inverted"],[1,"ByRef","","A mutable reference to an iterator"],[1,"Cycle","","An iterator that repeats endlessly"],[1,"Chain","","An iterator which strings two iterators together"],[1,"Zip","","An iterator which iterates two other iterators simultaneously"],[1,"Map","","An iterator which maps the values of `iter` with `f`"],[1,"Filter","","An iterator which filters the elements of `iter` with `predicate`"],[1,"FilterMap","","An iterator which uses `f` to both filter and map elements from `iter`"],[1,"Enumerate","","An iterator which yields the current count and the element during iteration"],[1,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next element."],[1,"SkipWhile","","An iterator which rejects elements while `predicate` is true"],[1,"TakeWhile","","An iterator which only accepts elements while `predicate` is true"],[1,"Skip","","An iterator which skips over `n` elements of `iter`."],[1,"Take","","An iterator which only iterates over the first `n` iterations of `iter`."],[1,"Scan","","An iterator to maintain state while iterating another iterator"],[11,"state","","The current internal state to be passed to the closure next.",75],[1,"FlatMap","","An iterator that maps each element to an iterator,\nand yields the elements of the produced iterators\n"],[1,"Fuse","","An iterator that yields `None` forever after the underlying iterator\nyields `None` once."],[1,"Inspect","","An iterator that calls a function with a reference to each\nelement before yielding it."],[1,"Unfold","","An iterator which just modifies the contained state throughout iteration."],[11,"state","","Internal state that will be yielded on the next iteration",76],[1,"Counter","","An infinite iterator starting at `start` and advancing by `step` with each\niteration"],[1,"Range","","An iterator over the range [start, stop)"],[1,"RangeInclusive","","An iterator over the range [start, stop]"],[1,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping."],[1,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping."],[1,"Repeat","","An iterator that repeats an element endlessly"],[2,"MinMaxResult","","`MinMaxResult` is an enum returned by `min_max`. See `OrdIterator::min_max` for more detail."],[12,"NoElements","","Empty iterator",77],[12,"OneElement","","Iterator with one element, so the minimum and maximum are the same",77],[12,"MinMax","","More than one element in the iterator, the first element is not larger than the second",77],[3,"count","","Creates a new counter with the specified start/step"],[3,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive))."],[3,"range_inclusive","","Return an iterator over the range [start, stop]"],[3,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping."],[3,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping."],[3,"iterate","","Creates a new iterator that produces an infinite sequence of\nrepeated applications of the given function `f`."],[0,"order","","Functions for lexicographical ordering of sequences."],[3,"equals","core::iter::order","Compare `a` and `b` for equality using `Eq`"],[3,"cmp","","Order `a` and `b` lexicographically using `Ord`"],[3,"partial_cmp","","Order `a` and `b` lexicographically using `PartialOrd`"],[3,"eq","","Compare `a` and `b` for equality (Using partial equality, `PartialEq`)"],[3,"ne","","Compare `a` and `b` for nonequality (Using partial equality, `PartialEq`)"],[3,"lt","","Return `a` < `b` lexicographically (Using partial order, `PartialOrd`)"],[3,"le","","Return `a` <= `b` lexicographically (Using partial order, `PartialOrd`)"],[3,"gt","","Return `a` > `b` lexicographically (Using partial order, `PartialOrd`)"],[3,"ge","","Return `a` >= `b` lexicographically (Using partial order, `PartialOrd`)"],[4,"Iterate","core::iter","An iterator that repeatedly applies a given function, starting\nfrom a given seed value."],[6,"FromIterator","","Conversion from an `Iterator`"],[9,"from_iter","","Build a container with elements from an external iterator.",78],[6,"Extendable","","A type growable from an `Iterator` implementation"],[9,"extend","","Extend a container with the elements yielded by an iterator",79],[6,"Iterator","","An interface for dealing with \"external iterators\". These types of iterators\ncan be resumed at any time as all state is stored internally as opposed to\nbeing located on the call stack."],[9,"next","","Advance the iterator and return the next value. Return `None` when the end is reached.",80],[10,"size_hint","","Returns a lower and upper bound on the remaining length of the iterator.",80],[10,"chain","","Chain this iterator with another, returning a new iterator which will\nfinish iterating over the current iterator, and then it will iterate\nover the other specified iterator.",80],[10,"zip","","Creates an iterator which iterates over both this and the specified\niterators simultaneously, yielding the two elements as pairs. When\neither iterator returns None, all further invocations of next() will\nreturn None.",80],[10,"map","","Creates a new iterator which will apply the specified function to each\nelement returned by the first, yielding the mapped element instead.",80],[10,"filter","","Creates an iterator which applies the predicate to each element returned\nby this iterator. Only elements which have the predicate evaluate to\n`true` will be yielded.",80],[10,"filter_map","","Creates an iterator which both filters and maps elements.\nIf the specified function returns None, the element is skipped.\nOtherwise the option is unwrapped and the new value is yielded.",80],[10,"enumerate","","Creates an iterator which yields a pair of the value returned by this\niterator plus the current index of iteration.",80],[10,"peekable","","Creates an iterator that has a `.peek()` method\nthat returns an optional reference to the next element.",80],[10,"skip_while","","Creates an iterator which invokes the predicate on elements until it\nreturns false. Once the predicate returns false, all further elements are\nyielded.",80],[10,"take_while","","Creates an iterator which yields elements so long as the predicate\nreturns true. After the predicate returns false for the first time, no\nfurther elements will be yielded.",80],[10,"skip","","Creates an iterator which skips the first `n` elements of this iterator,\nand then it yields all further items.",80],[10,"take","","Creates an iterator which yields the first `n` elements of this\niterator, and then it will always return None.",80],[10,"scan","","Creates a new iterator which behaves in a similar fashion to fold.\nThere is a state which is passed between each iteration and can be\nmutated as necessary. The yielded values from the closure are yielded\nfrom the Scan instance when not None.",80],[10,"flat_map","","Creates an iterator that maps each element to an iterator,\nand yields the elements of the produced iterators",80],[10,"fuse","","Creates an iterator that yields `None` forever after the underlying\niterator yields `None`. Random-access iterator behavior is not\naffected, only single and double-ended iterator behavior.",80],[10,"inspect","","Creates an iterator that calls a function with a reference to each\nelement before yielding it. This is often useful for debugging an\niterator pipeline.",80],[10,"by_ref","","Creates a wrapper around a mutable reference to the iterator.",80],[10,"advance","","Apply a function to each element, or stop iterating if the\nfunction returns `false`.",80],[10,"collect","","Loops through the entire iterator, collecting all of the elements into\na container implementing `FromIterator`.",80],[10,"nth","","Loops through `n` iterations, returning the `n`th element of the\niterator.",80],[10,"last","","Loops through the entire iterator, returning the last element of the\niterator.",80],[10,"fold","","Performs a fold operation over the entire iterator, returning the\neventual state at the end of the iteration.",80],[10,"count","","Counts the number of elements in this iterator.",80],[10,"all","","Tests whether the predicate holds true for all elements in the iterator.",80],[10,"any","","Tests whether any element of an iterator satisfies the specified\npredicate.",80],[10,"find","","Return the first element satisfying the specified predicate",80],[10,"position","","Return the index of the first element satisfying the specified predicate",80],[10,"max_by","","Return the element that gives the maximum value from the\nspecified function.",80],[10,"min_by","","Return the element that gives the minimum value from the\nspecified function.",80],[6,"DoubleEndedIterator","","A range iterator able to yield elements from both ends"],[9,"next_back","","Yield an element from the end of the range, returning `None` if the range is empty.",81],[10,"rev","","Change the direction of the iterator",81],[6,"MutableDoubleEndedIterator","","A double-ended iterator yielding mutable references"],[9,"reverse_","","Use an iterator to reverse a container in-place",82],[6,"RandomAccessIterator","","An object implementing random access indexing by `uint`"],[9,"indexable","","Return the number of indexable elements. At most `std::uint::MAX`\nelements are indexable, even if the iterator represents a longer range.",83],[9,"idx","","Return an element at an index, or `None` if the index is out of bounds",83],[6,"ExactSize","","An iterator that knows its exact length"],[10,"rposition","","Return the index of the last element satisfying the specified predicate",84],[10,"len","","Return the exact length of the iterator.",84],[6,"AdditiveIterator","","A trait for iterators over elements which can be added together"],[9,"sum","","Iterates over the entire iterator, summing up all the elements",85],[6,"MultiplicativeIterator","","A trait for iterators over elements whose elements can be multiplied\ntogether."],[9,"product","","Iterates over the entire iterator, multiplying all the elements",86],[6,"OrdIterator","","A trait for iterators over elements which can be compared to one another.\nThe type of each element must ascribe to the `PartialOrd` trait."],[9,"max","","Consumes the entire iterator to return the maximum element.",87],[9,"min","","Consumes the entire iterator to return the minimum element.",87],[9,"min_max","","`min_max` finds the minimum and maximum elements in the iterator.",87],[6,"CloneableIterator","","A trait for iterators that are cloneable."],[9,"cycle","","Repeats an iterator endlessly",88],[10,"clone","","",89],[10,"next","","",89],[10,"size_hint","","",89],[10,"next_back","","",89],[10,"indexable","","",89],[10,"idx","","",89],[10,"next","","",90],[10,"size_hint","","",90],[10,"next_back","","",90],[10,"fmt","","",77],[10,"eq","","",77],[10,"ne","","",77],[10,"clone","","",77],[10,"into_option","","`into_option` creates an `Option` of type `(T,T)`. The returned `Option` has variant\n`None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise variant\n`Some(x,y)` is returned where `x <= y`. If `MinMaxResult` has variant `OneElement(x)`,\nperforming this operation will make one clone of `x`.",77],[10,"clone","","",91],[10,"next","","",91],[10,"size_hint","","",91],[10,"indexable","","",91],[10,"idx","","",91],[10,"clone","","",92],[10,"next","","",92],[10,"size_hint","","",92],[10,"next_back","","",92],[10,"indexable","","",92],[10,"idx","","",92],[10,"clone","","",93],[10,"next","","",93],[10,"size_hint","","",93],[10,"next_back","","",93],[10,"indexable","","",93],[10,"idx","","",93],[10,"next","","",94],[10,"size_hint","","",94],[10,"next_back","","",94],[10,"indexable","","",94],[10,"idx","","",94],[10,"next","","",95],[10,"size_hint","","",95],[10,"next_back","","",95],[10,"next","","",96],[10,"size_hint","","",96],[10,"next_back","","",96],[10,"clone","","",97],[10,"next","","",97],[10,"size_hint","","",97],[10,"next_back","","",97],[10,"indexable","","",97],[10,"idx","","",97],[10,"next","","",98],[10,"size_hint","","",98],[10,"peek","","Return a reference to the next element of the iterator with out advancing it,\nor None if the iterator is exhausted.",98],[10,"is_empty","","Check whether peekable iterator is empty or not.",98],[10,"next","","",99],[10,"size_hint","","",99],[10,"next","","",100],[10,"size_hint","","",100],[10,"clone","","",101],[10,"next","","",101],[10,"size_hint","","",101],[10,"indexable","","",101],[10,"idx","","",101],[10,"clone","","",102],[10,"next","","",102],[10,"size_hint","","",102],[10,"indexable","","",102],[10,"idx","","",102],[10,"next","","",75],[10,"size_hint","","",75],[10,"next","","",103],[10,"size_hint","","",103],[10,"next_back","","",103],[10,"clone","","",104],[10,"next","","",104],[10,"size_hint","","",104],[10,"next_back","","",104],[10,"indexable","","",104],[10,"idx","","",104],[10,"reset_fuse","","Resets the fuse such that the next call to .next() or .next_back() will\ncall the underlying iterator again even if it previously returned None.",104],[10,"next","","",105],[10,"size_hint","","",105],[10,"next_back","","",105],[10,"indexable","","",105],[10,"idx","","",105],[10,"new","","Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the iterator",76],[10,"next","","",76],[10,"size_hint","","",76],[10,"clone","","",106],[10,"next","","",106],[10,"size_hint","","",106],[10,"clone","","",107],[10,"next","","",107],[10,"size_hint","","",107],[10,"next_back","","",107],[10,"clone","","",108],[10,"next","","",108],[10,"size_hint","","",108],[10,"next_back","","",108],[10,"clone","","",109],[10,"next","","",109],[10,"clone","","",110],[10,"next","","",110],[10,"clone","","",111],[10,"new","","Create a new `Repeat` that endlessly repeats the element `elt`.",111],[10,"next","","",111],[10,"size_hint","","",111],[10,"next_back","","",111],[10,"indexable","","",111],[10,"idx","","",111],[0,"option","core","Optional values"],[1,"Item","core::option","An `Option` iterator that yields either one or zero elements"],[2,"Option","","The `Option` type."],[12,"None","","No value",112],[12,"Some","","Some value `T`",112],[3,"collect","","Deprecated: use `Iterator::collect` instead."],[10,"fmt","","",112],[10,"cmp","","",112],[10,"partial_cmp","","",112],[10,"lt","","",112],[10,"le","","",112],[10,"gt","","",112],[10,"ge","","",112],[10,"eq","","",112],[10,"ne","","",112],[10,"clone","","",112],[10,"is_some","","Returns `true` if the option is a `Some` value",112],[10,"is_none","","Returns `true` if the option is a `None` value",112],[10,"as_ref","","Convert from `Option<T>` to `Option<&T>`",112],[10,"as_mut","","Convert from `Option<T>` to `Option<&mut T>`",112],[10,"as_mut_slice","","Convert from `Option<T>` to `&mut [T]` (without copying)",112],[10,"expect","","Unwraps an option, yielding the content of a `Some`",112],[10,"unwrap","","Returns the inner `T` of a `Some(T)`.",112],[10,"unwrap_or","","Returns the contained value or a default.",112],[10,"unwrap_or_else","","Returns the contained value or computes it from a closure.",112],[10,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",112],[10,"map_or","","Applies a function to the contained value or returns a default.",112],[10,"map_or_else","","Applies a function to the contained value or computes a default.",112],[10,"mutate","","Deprecated.",112],[10,"mutate_or_set","","Deprecated.",112],[10,"iter","","Returns an iterator over the possibly contained value.",112],[10,"mut_iter","","Deprecated: use `iter_mut`",112],[10,"iter_mut","","Returns a mutable iterator over the possibly contained value.",112],[10,"move_iter","","Deprecated: use `into_iter`.",112],[10,"into_iter","","Returns a consuming iterator over the possibly contained value.",112],[10,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",112],[10,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",112],[10,"or","","Returns the option if it contains a value, otherwise returns `optb`.",112],[10,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",112],[10,"take","","Takes the value out of the option, leaving a `None` in its place.",112],[10,"filtered","","Deprecated.",112],[10,"while_some","","Deprecated.",112],[10,"take_unwrap","","Deprecated: use `take().unwrap()` instead.",112],[10,"get_ref","","Deprecated: use `as_ref().unwrap()` instead.",112],[10,"get_mut_ref","","Deprecated: use `as_mut().unwrap()` instead.",112],[10,"unwrap_or_default","","Returns the contained value or a default",112],[10,"as_slice","","Convert from `Option<T>` to `&[T]` (without copying)",112],[10,"default","","",112],[10,"clone","","",113],[10,"next","","",113],[10,"size_hint","","",113],[10,"next_back","","",113],[10,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",112],[0,"raw","core","Contains struct definitions for the layout of compiler built-in types."],[1,"Box","core::raw","The representation of a Rust managed box"],[11,"ref_count","","",114],[11,"drop_glue","","",114],[11,"prev","","",114],[11,"next","","",114],[11,"data","","",114],[1,"Slice","","The representation of a Rust slice"],[11,"data","","",115],[11,"len","","",115],[1,"Closure","","The representation of a Rust closure"],[11,"code","","",116],[11,"env","","",116],[1,"Procedure","","The representation of a Rust procedure (`proc()`)"],[11,"code","","",117],[11,"env","","",117],[1,"TraitObject","","The representation of a Rust trait object."],[11,"data","","",118],[11,"vtable","","",118],[6,"Repr","","This trait is meant to map equivalences between raw structs and their\ncorresponding rust values."],[10,"repr","","This function \"unwraps\" a rust value (without consuming it) into its raw\nstruct representation. This can be used to read/write different values\nfor the struct. This is a safe method because by default it does not\nenable write-access to the fields of the return value in safe code.",119],[0,"result","core","Error handling with the `Result` type"],[1,"Item","core::result","A `Result` iterator that yields either one or zero elements"],[2,"Result","","`Result` is a type that represents either success (`Ok`) or failure (`Err`)."],[12,"Ok","","Contains the success value",120],[12,"Err","","Contains the error value",120],[3,"collect","","Deprecated: use `Iterator::collect`."],[3,"fold","","Perform a fold operation over the result values from an iterator."],[3,"fold_","","Deprecated."],[10,"fmt","","",120],[10,"cmp","","",120],[10,"partial_cmp","","",120],[10,"lt","","",120],[10,"le","","",120],[10,"gt","","",120],[10,"ge","","",120],[10,"eq","","",120],[10,"ne","","",120],[10,"clone","","",120],[10,"is_ok","","Returns true if the result is `Ok`",120],[10,"is_err","","Returns true if the result is `Err`",120],[10,"ok","","Convert from `Result<T, E>` to `Option<T>`",120],[10,"err","","Convert from `Result<T, E>` to `Option<E>`",120],[10,"as_ref","","Convert from `Result<T, E>` to `Result<&T, &E>`",120],[10,"as_mut","","Convert from `Result<T, E>` to `Result<&mut T, &mut E>`",120],[10,"as_mut_slice","","Convert from `Result<T, E>` to `&mut [T]` (without copying)",120],[10,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",120],[10,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",120],[10,"iter","","Returns an iterator over the possibly contained value.",120],[10,"mut_iter","","Deprecated: use `iter_mut`.",120],[10,"iter_mut","","Returns a mutable iterator over the possibly contained value.",120],[10,"move_iter","","Deprecated: `use into_iter`.",120],[10,"into_iter","","Returns a consuming iterator over the possibly contained value.",120],[10,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",120],[10,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",120],[10,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",120],[10,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",120],[10,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",120],[10,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",120],[10,"unwrap_or_handle","","Deprecated name for `unwrap_or_else()`.",120],[10,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",120],[10,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",120],[10,"as_slice","","Convert from `Result<T, E>` to `&[T]` (without copying)",120],[10,"clone","","",121],[10,"next","","",121],[10,"size_hint","","",121],[10,"next_back","","",121],[10,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",120],[0,"simd","core","SIMD vectors."],[1,"i8x16","core::simd",""],[1,"i16x8","",""],[1,"i32x4","",""],[1,"i64x2","",""],[1,"u8x16","",""],[1,"u16x8","",""],[1,"u32x4","",""],[1,"u64x2","",""],[1,"f32x4","",""],[1,"f64x2","",""],[10,"fmt","","",122],[10,"fmt","","",123],[10,"fmt","","",124],[10,"fmt","","",125],[10,"fmt","","",126],[10,"fmt","","",127],[10,"fmt","","",128],[10,"fmt","","",129],[10,"fmt","","",130],[10,"fmt","","",131],[0,"slice","core","Slice management and manipulation"],[1,"Items","core::slice","Immutable slice iterator"],[1,"MutItems","","Mutable slice iterator"],[1,"Splits","","An iterator over the slices of a vector separated by elements that\nmatch a predicate function."],[1,"MutSplits","","An iterator over the subslices of the vector which are separated\nby elements that match `pred`."],[1,"SplitsN","","An iterator over the slices of a vector separated by elements that\nmatch a predicate function, splitting at most a fixed number of times."],[1,"Windows","","An iterator over the (overlapping) slices of length `size` within\na vector."],[1,"Chunks","","An iterator over a vector in (non-overlapping) chunks (`size`\nelements at a time)."],[1,"MutChunks","","An iterator over a vector in (non-overlapping) mutable chunks (`size`  elements at a time). When\nthe vector len is not evenly divided by the chunk size, the last slice of the iteration will be\nthe remainder."],[2,"BinarySearchResult","","The result of calling `binary_search`."],[12,"Found","","The index of the found value.",132],[12,"NotFound","","The index where the value should have been found.",132],[3,"ref_slice","","Converts a pointer to A into a slice of length 1 (without copying)."],[3,"mut_ref_slice","","Converts a pointer to A into a slice of length 1 (without copying)."],[0,"raw","","Unsafe operations"],[3,"buf_as_slice","core::slice::raw","Form a slice from a pointer and length (as a number of units,\nnot bytes)."],[3,"mut_buf_as_slice","","Form a slice from a pointer and length (as a number of units,\nnot bytes)."],[3,"shift_ptr","","Returns a pointer to first element in slice and adjusts\nslice so it no longer contains that element. Returns None\nif the slice is empty. O(1)."],[3,"pop_ptr","","Returns a pointer to last element in slice and adjusts\nslice so it no longer contains that element. Returns None\nif the slice is empty. O(1)."],[0,"bytes","core::slice","Operations on `[u8]`."],[3,"copy_memory","core::slice::bytes","Copies data from `src` to `dst`"],[6,"MutableByteVector","","A trait for operations on mutable `[u8]`s."],[9,"set_memory","","Sets all bytes of the receiver to the given value.",133],[6,"ImmutableSlice","core::slice","Extension methods for immutable slices."],[9,"slice","","Returns a subslice spanning the interval [`start`, `end`).",134],[9,"slice_from","","Returns a subslice from `start` to the end of the slice.",134],[9,"slice_to","","Returns a subslice from the start of the slice to `end`.",134],[9,"split_at","","Divides one slice into two at an index.",134],[9,"iter","","Returns an iterator over the vector",134],[9,"split","","Returns an iterator over the subslices of the vector which are\nseparated by elements that match `pred`.  The matched element\nis not contained in the subslices.",134],[9,"splitn","","Returns an iterator over the subslices of the vector which are\nseparated by elements that match `pred`, limited to splitting\nat most `n` times.  The matched element is not contained in\nthe subslices.",134],[9,"rsplitn","","Returns an iterator over the subslices of the vector which are\nseparated by elements that match `pred` limited to splitting\nat most `n` times. This starts at the end of the vector and\nworks backwards.  The matched element is not contained in the\nsubslices.",134],[9,"windows","","Returns an iterator over all contiguous windows of length\n`size`. The windows overlap. If the vector is shorter than\n`size`, the iterator returns no values.",134],[9,"chunks","","\nReturns an iterator over `size` elements of the vector at a\ntime. The chunks do not overlap. If `size` does not divide the\nlength of the vector, then the last chunk will not have length\n`size`.",134],[9,"get","","Returns the element of a vector at the given index, or `None` if the\nindex is out of bounds",134],[9,"head","","Returns the first element of a vector, or `None` if it is empty",134],[9,"tail","","Returns all but the first element of a vector",134],[9,"tailn","","Returns all but the first `n' elements of a vector",134],[9,"init","","Returns all but the last element of a vector",134],[9,"initn","","Returns all but the last `n' elements of a vector",134],[9,"last","","Returns the last element of a vector, or `None` if it is empty.",134],[9,"unsafe_ref","","Returns a pointer to the element at the given index, without doing\nbounds checking.",134],[9,"unsafe_get","","Returns a pointer to the element at the given index, without doing\nbounds checking.",134],[9,"as_ptr","","Returns an unsafe pointer to the vector's buffer",134],[9,"bsearch","","Binary search a sorted vector with a comparator function.",134],[9,"binary_search","","Binary search a sorted vector with a comparator function.",134],[9,"shift_ref","","Returns an immutable reference to the first element in this slice\nand adjusts the slice in place so that it no longer contains\nthat element. O(1).",134],[9,"pop_ref","","Returns an immutable reference to the last element in this slice\nand adjusts the slice in place so that it no longer contains\nthat element. O(1).",134],[6,"MutableSlice","","Extension methods for vectors such that their elements are\nmutable."],[9,"get_mut","","Returns a mutable reference to the element at the given index,\nor `None` if the index is out of bounds",135],[9,"as_mut_slice","","Work with `self` as a mut slice.\nPrimarily intended for getting a &mut [T] from a [T, ..N].",135],[10,"mut_slice","","Deprecated: use `slice_mut`.",135],[9,"slice_mut","","Returns a mutable subslice spanning the interval [`start`, `end`).",135],[10,"mut_slice_from","","Deprecated: use `slice_from_mut`.",135],[9,"slice_from_mut","","Returns a mutable subslice from `start` to the end of the slice.",135],[10,"mut_slice_to","","Deprecated: use `slice_to_mut`.",135],[9,"slice_to_mut","","Returns a mutable subslice from the start of the slice to `end`.",135],[10,"mut_iter","","Deprecated: use `iter_mut`.",135],[9,"iter_mut","","Returns an iterator that allows modifying each value",135],[10,"mut_last","","Deprecated: use `last_mut`.",135],[9,"last_mut","","Returns a mutable pointer to the last item in the vector.",135],[10,"mut_split","","Deprecated: use `split_mut`.",135],[9,"split_mut","","Returns an iterator over the mutable subslices of the vector\nwhich are separated by elements that match `pred`.  The\nmatched element is not contained in the subslices.",135],[10,"mut_chunks","","Deprecated: use `chunks_mut`.",135],[9,"chunks_mut","","Returns an iterator over `chunk_size` elements of the vector at a time.\nThe chunks are mutable and do not overlap. If `chunk_size` does\nnot divide the length of the vector, then the last chunk will not\nhave length `chunk_size`.",135],[9,"mut_shift_ref","","Returns a mutable reference to the first element in this slice\nand adjusts the slice in place so that it no longer contains\nthat element. O(1).",135],[9,"mut_pop_ref","","Returns a mutable reference to the last element in this slice\nand adjusts the slice in place so that it no longer contains\nthat element. O(1).",135],[9,"swap","","Swaps two elements in a vector.",135],[10,"mut_split_at","","Deprecated: use `split_at_mut`.",135],[9,"split_at_mut","","Divides one `&mut` into two at an index.",135],[9,"reverse","","Reverse the order of elements in a vector, in place.",135],[10,"unsafe_mut_ref","","Deprecated: use `unsafe_mut`.",135],[9,"unsafe_mut","","Returns an unsafe mutable pointer to the element in index",135],[9,"as_mut_ptr","","Return an unsafe mutable pointer to the vector's buffer.",135],[9,"unsafe_set","","Unsafely sets the element in index to the value.",135],[9,"init_elem","","Unchecked vector index assignment.  Does not drop the\nold value and hence is only suitable when the vector\nis newly allocated.",135],[9,"copy_memory","","Copies raw bytes from `src` to `self`.",135],[6,"ImmutablePartialEqSlice","","Extension methods for vectors contain `PartialEq` elements."],[9,"position_elem","","Find the first index containing a matching value",136],[9,"rposition_elem","","Find the last index containing a matching value",136],[9,"contains","","Return true if a vector contains an element with the given value",136],[9,"starts_with","","Returns true if `needle` is a prefix of the vector.",136],[9,"ends_with","","Returns true if `needle` is a suffix of the vector.",136],[6,"ImmutableOrdSlice","","Extension methods for vectors containing `Ord` elements."],[9,"bsearch_elem","","Binary search a sorted vector for a given element.",137],[9,"binary_search_elem","","Binary search a sorted vector for a given element.",137],[6,"MutableCloneableSlice","","Trait for &[T] where T is Cloneable"],[10,"copy_from","","Copies as many elements from `src` as it can into `self` (the\nshorter of `self.len()` and `src.len()`). Returns the number\nof elements copied.",138],[9,"clone_from_slice","","Copies as many elements from `src` as it can into `self` (the\nshorter of `self.len()` and `src.len()`). Returns the number\nof elements copied.",138],[6,"Slice","","Any vector that can be represented as a slice."],[9,"as_slice","","Work with `self` as a slice.",139],[10,"next","","",140],[10,"size_hint","","",140],[10,"next_back","","",140],[10,"clone","","",140],[10,"indexable","","",140],[10,"idx","","",140],[10,"next","","",141],[10,"size_hint","","",141],[10,"next_back","","",141],[10,"next","","",142],[10,"size_hint","","",142],[10,"next_back","","",142],[10,"next","","",143],[10,"size_hint","","",143],[10,"next_back","","",143],[10,"next","","",144],[10,"size_hint","","",144],[10,"clone","","",145],[10,"next","","",145],[10,"size_hint","","",145],[10,"clone","","",146],[10,"next","","",146],[10,"size_hint","","",146],[10,"next_back","","",146],[10,"indexable","","",146],[10,"idx","","",146],[10,"next","","",147],[10,"size_hint","","",147],[10,"next_back","","",147],[10,"fmt","","",132],[10,"eq","","",132],[10,"ne","","",132],[10,"found","","Converts a `Found` to `Some`, `NotFound` to `None`.\nSimilar to `Result::ok`.",132],[10,"not_found","","Convert a `Found` to `None`, `NotFound` to `Some`.\nSimilar to `Result::err`.",132],[16,"slice","","Slice management and manipulation"],[0,"str","core","String manipulation"],[1,"Chars","core::str","Iterator for the char (representing *Unicode Scalar Values*) of a string"],[1,"CharOffsets","","External iterator for a string's characters and their byte offsets.\nUse with the `std::iter` module."],[1,"CharSplits","","An iterator over the substrings of a string, separated by `sep`."],[1,"CharSplitsN","","An iterator over the substrings of a string, separated by `sep`,\nsplitting at most `count` times."],[1,"MatchIndices","","An iterator over the start and end indices of the matches of a\nsubstring within a larger string"],[1,"StrSplits","","An iterator over the substrings of a string separated by a given\nsearch string"],[1,"Utf16CodeUnits","","External iterator for a string's UTF16 codeunits.\nUse with the `std::iter` module."],[1,"Utf16Items","","An iterator that decodes UTF-16 encoded codepoints from a vector\nof `u16`s."],[1,"CharRange","","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string."],[11,"ch","","Current `char`",148],[11,"next","","Index of the first byte of the next `char`",148],[2,"Utf16Item","","The possibilities for values decoded from a `u16` stream."],[12,"ScalarValue","","A valid codepoint.",149],[12,"LoneSurrogate","","An invalid surrogate without its pair.",149],[3,"from_utf8","","Converts a vector to a string slice without performing any allocations."],[3,"eq_slice","","Bytewise slice equality\nNOTE: This function is (ab)used in rustc::middle::trans::_match\nto compare &[u8] byte slices that are not necessarily valid UTF-8."],[3,"is_utf8","","Determines if a vector of bytes contains valid UTF-8."],[3,"is_utf16","","Determines if a vector of `u16` contains valid UTF-16"],[3,"utf16_items","","Create an iterator over the UTF-16 encoded codepoints in `v`,\nreturning invalid surrogates as `LoneSurrogate`s."],[3,"truncate_utf16_at_nul","","Return a slice of `v` ending at (and not including) the first NUL\n(0)."],[3,"utf8_char_width","","Given a first byte, determine how many bytes are in this UTF-8 character"],[0,"raw","","Unsafe operations"],[3,"from_utf8","core::str::raw","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8."],[3,"c_str_to_static_slice","","Form a slice from a C string. Unsafe because the caller must ensure the\nC string has the static lifetime, or else the return value may be\ninvalidated later."],[3,"slice_bytes","","Takes a bytewise (not UTF-8) slice from a string."],[3,"slice_unchecked","","Takes a bytewise (not UTF-8) slice from a string."],[0,"traits","core::str",""],[4,"Bytes","","External iterator for a string's bytes.\nUse with the `std::iter` module."],[4,"AnyLines","","An iterator over the lines of a string, separated by either `\\n` or (`\\r\\n`)."],[6,"CharEq","","Something that can be used to compare against a character"],[9,"matches","","Determine if the splitter should split at the given character",150],[9,"only_ascii","","Indicate if this is only concerned about ASCII characters,\nwhich can allow for a faster implementation.",150],[6,"Str","","Any string that can be represented as a slice"],[9,"as_slice","","Work with `self` as a slice.",151],[6,"StrSlice","","Methods for string slices"],[9,"contains","","Returns true if one string contains another",152],[9,"contains_char","","Returns true if a string contains a char.",152],[9,"chars","","An iterator over the characters of `self`. Note, this iterates\nover Unicode code-points, not Unicode graphemes.",152],[9,"bytes","","An iterator over the bytes of `self`",152],[9,"char_indices","","An iterator over the characters of `self` and their byte offsets.",152],[9,"split","","An iterator over substrings of `self`, separated by characters\nmatched by `sep`.",152],[9,"splitn","","An iterator over substrings of `self`, separated by characters\nmatched by `sep`, restricted to splitting at most `count`\ntimes.",152],[9,"split_terminator","","An iterator over substrings of `self`, separated by characters\nmatched by `sep`.",152],[9,"rsplitn","","An iterator over substrings of `self`, separated by characters\nmatched by `sep`, starting from the end of the string.\nRestricted to splitting at most `count` times.",152],[9,"match_indices","","An iterator over the start and end indices of the disjoint\nmatches of `sep` within `self`.",152],[9,"split_str","","An iterator over the substrings of `self` separated by `sep`.",152],[9,"lines","","An iterator over the lines of a string (subsequences separated\nby `\\n`). This does not include the empty string after a\ntrailing `\\n`.",152],[9,"lines_any","","An iterator over the lines of a string, separated by either\n`\\n` or `\\r\\n`. As with `.lines()`, this does not include an\nempty trailing line.",152],[9,"char_len","","Returns the number of Unicode code points (`char`) that a\nstring holds.",152],[9,"slice","","Returns a slice of the given string from the byte range\n[`begin`..`end`).",152],[9,"slice_from","","Returns a slice of the string from `begin` to its end.",152],[9,"slice_to","","Returns a slice of the string from the beginning to byte\n`end`.",152],[9,"slice_chars","","Returns a slice of the string from the character range\n[`begin`..`end`).",152],[9,"starts_with","","Returns true if `needle` is a prefix of the string.",152],[9,"ends_with","","Returns true if `needle` is a suffix of the string.",152],[9,"trim_chars","","Returns a string with characters that match `to_trim` removed.",152],[9,"trim_left_chars","","Returns a string with leading `chars_to_trim` removed.",152],[9,"trim_right_chars","","Returns a string with trailing `chars_to_trim` removed.",152],[9,"is_char_boundary","","Check that `index`-th byte lies at the start and/or end of a\nUTF-8 code point sequence.",152],[9,"char_range_at","","Pluck a character out of a string and return the index of the next\ncharacter.",152],[9,"char_range_at_reverse","","Given a byte position and a str, return the previous char and its position.",152],[9,"char_at","","Plucks the character starting at the `i`th byte of a string.",152],[9,"char_at_reverse","","Plucks the character ending at the `i`th byte of a string.",152],[9,"as_bytes","","Work with the byte buffer of a string as a byte slice.",152],[9,"find","","Returns the byte index of the first character of `self` that\nmatches `search`.",152],[9,"rfind","","Returns the byte index of the last character of `self` that\nmatches `search`.",152],[9,"find_str","","Returns the byte index of the first matching substring",152],[9,"slice_shift_char","","Retrieves the first character from a string slice and returns\nit. This does not allocate a new string; instead, it returns a\nslice that point one character beyond the character that was\nshifted. If the string does not contain any characters,\na tuple of None and an empty string is returned instead.",152],[9,"subslice_offset","","Returns the byte offset of an inner slice relative to an enclosing outer slice.",152],[9,"as_ptr","","Return an unsafe pointer to the strings buffer.",152],[9,"utf16_units","","Return an iterator of `u16` over the string encoded as UTF-16.",152],[10,"clone","","",153],[10,"next","","",153],[10,"size_hint","","",153],[10,"next_back","","",153],[10,"clone","","",154],[10,"next","","",154],[10,"size_hint","","",154],[10,"next_back","","",154],[10,"clone","","",155],[10,"clone","","",156],[10,"next","","",155],[10,"next_back","","",155],[10,"next","","",156],[10,"clone","","",157],[10,"clone","","",158],[10,"next","","",157],[10,"next","","",158],[10,"clone","","",159],[10,"next","","",159],[10,"size_hint","","",159],[10,"clone","","",160],[10,"fmt","","",149],[10,"clone","","",149],[10,"eq","","",149],[10,"ne","","",149],[10,"to_char_lossy","","Convert `self` to a `char`, taking `LoneSurrogate`s to the\nreplacement character (U+FFFD).",149],[10,"next","","",160],[10,"size_hint","","",160],[16,"str","","String manipulation"],[0,"tuple","core","Operations on tuples"],[6,"Tuple1","core::tuple",""],[9,"val0","","",161],[9,"ref0","","",161],[9,"mut0","","",161],[6,"Tuple2","",""],[9,"val0","","",162],[9,"ref0","","",162],[9,"mut0","","",162],[9,"val1","","",162],[9,"ref1","","",162],[9,"mut1","","",162],[6,"Tuple3","",""],[9,"val0","","",163],[9,"ref0","","",163],[9,"mut0","","",163],[9,"val1","","",163],[9,"ref1","","",163],[9,"mut1","","",163],[9,"val2","","",163],[9,"ref2","","",163],[9,"mut2","","",163],[6,"Tuple4","",""],[9,"val0","","",164],[9,"ref0","","",164],[9,"mut0","","",164],[9,"val1","","",164],[9,"ref1","","",164],[9,"mut1","","",164],[9,"val2","","",164],[9,"ref2","","",164],[9,"mut2","","",164],[9,"val3","","",164],[9,"ref3","","",164],[9,"mut3","","",164],[6,"Tuple5","",""],[9,"val0","","",165],[9,"ref0","","",165],[9,"mut0","","",165],[9,"val1","","",165],[9,"ref1","","",165],[9,"mut1","","",165],[9,"val2","","",165],[9,"ref2","","",165],[9,"mut2","","",165],[9,"val3","","",165],[9,"ref3","","",165],[9,"mut3","","",165],[9,"val4","","",165],[9,"ref4","","",165],[9,"mut4","","",165],[6,"Tuple6","",""],[9,"val0","","",166],[9,"ref0","","",166],[9,"mut0","","",166],[9,"val1","","",166],[9,"ref1","","",166],[9,"mut1","","",166],[9,"val2","","",166],[9,"ref2","","",166],[9,"mut2","","",166],[9,"val3","","",166],[9,"ref3","","",166],[9,"mut3","","",166],[9,"val4","","",166],[9,"ref4","","",166],[9,"mut4","","",166],[9,"val5","","",166],[9,"ref5","","",166],[9,"mut5","","",166],[6,"Tuple7","",""],[9,"val0","","",167],[9,"ref0","","",167],[9,"mut0","","",167],[9,"val1","","",167],[9,"ref1","","",167],[9,"mut1","","",167],[9,"val2","","",167],[9,"ref2","","",167],[9,"mut2","","",167],[9,"val3","","",167],[9,"ref3","","",167],[9,"mut3","","",167],[9,"val4","","",167],[9,"ref4","","",167],[9,"mut4","","",167],[9,"val5","","",167],[9,"ref5","","",167],[9,"mut5","","",167],[9,"val6","","",167],[9,"ref6","","",167],[9,"mut6","","",167],[6,"Tuple8","",""],[9,"val0","","",168],[9,"ref0","","",168],[9,"mut0","","",168],[9,"val1","","",168],[9,"ref1","","",168],[9,"mut1","","",168],[9,"val2","","",168],[9,"ref2","","",168],[9,"mut2","","",168],[9,"val3","","",168],[9,"ref3","","",168],[9,"mut3","","",168],[9,"val4","","",168],[9,"ref4","","",168],[9,"mut4","","",168],[9,"val5","","",168],[9,"ref5","","",168],[9,"mut5","","",168],[9,"val6","","",168],[9,"ref6","","",168],[9,"mut6","","",168],[9,"val7","","",168],[9,"ref7","","",168],[9,"mut7","","",168],[6,"Tuple9","",""],[9,"val0","","",169],[9,"ref0","","",169],[9,"mut0","","",169],[9,"val1","","",169],[9,"ref1","","",169],[9,"mut1","","",169],[9,"val2","","",169],[9,"ref2","","",169],[9,"mut2","","",169],[9,"val3","","",169],[9,"ref3","","",169],[9,"mut3","","",169],[9,"val4","","",169],[9,"ref4","","",169],[9,"mut4","","",169],[9,"val5","","",169],[9,"ref5","","",169],[9,"mut5","","",169],[9,"val6","","",169],[9,"ref6","","",169],[9,"mut6","","",169],[9,"val7","","",169],[9,"ref7","","",169],[9,"mut7","","",169],[9,"val8","","",169],[9,"ref8","","",169],[9,"mut8","","",169],[6,"Tuple10","",""],[9,"val0","","",170],[9,"ref0","","",170],[9,"mut0","","",170],[9,"val1","","",170],[9,"ref1","","",170],[9,"mut1","","",170],[9,"val2","","",170],[9,"ref2","","",170],[9,"mut2","","",170],[9,"val3","","",170],[9,"ref3","","",170],[9,"mut3","","",170],[9,"val4","","",170],[9,"ref4","","",170],[9,"mut4","","",170],[9,"val5","","",170],[9,"ref5","","",170],[9,"mut5","","",170],[9,"val6","","",170],[9,"ref6","","",170],[9,"mut6","","",170],[9,"val7","","",170],[9,"ref7","","",170],[9,"mut7","","",170],[9,"val8","","",170],[9,"ref8","","",170],[9,"mut8","","",170],[9,"val9","","",170],[9,"ref9","","",170],[9,"mut9","","",170],[6,"Tuple11","",""],[9,"val0","","",171],[9,"ref0","","",171],[9,"mut0","","",171],[9,"val1","","",171],[9,"ref1","","",171],[9,"mut1","","",171],[9,"val2","","",171],[9,"ref2","","",171],[9,"mut2","","",171],[9,"val3","","",171],[9,"ref3","","",171],[9,"mut3","","",171],[9,"val4","","",171],[9,"ref4","","",171],[9,"mut4","","",171],[9,"val5","","",171],[9,"ref5","","",171],[9,"mut5","","",171],[9,"val6","","",171],[9,"ref6","","",171],[9,"mut6","","",171],[9,"val7","","",171],[9,"ref7","","",171],[9,"mut7","","",171],[9,"val8","","",171],[9,"ref8","","",171],[9,"mut8","","",171],[9,"val9","","",171],[9,"ref9","","",171],[9,"mut9","","",171],[9,"val10","","",171],[9,"ref10","","",171],[9,"mut10","","",171],[6,"Tuple12","",""],[9,"val0","","",172],[9,"ref0","","",172],[9,"mut0","","",172],[9,"val1","","",172],[9,"ref1","","",172],[9,"mut1","","",172],[9,"val2","","",172],[9,"ref2","","",172],[9,"mut2","","",172],[9,"val3","","",172],[9,"ref3","","",172],[9,"mut3","","",172],[9,"val4","","",172],[9,"ref4","","",172],[9,"mut4","","",172],[9,"val5","","",172],[9,"ref5","","",172],[9,"mut5","","",172],[9,"val6","","",172],[9,"ref6","","",172],[9,"mut6","","",172],[9,"val7","","",172],[9,"ref7","","",172],[9,"mut7","","",172],[9,"val8","","",172],[9,"ref8","","",172],[9,"mut8","","",172],[9,"val9","","",172],[9,"ref9","","",172],[9,"mut9","","",172],[9,"val10","","",172],[9,"ref10","","",172],[9,"mut10","","",172],[9,"val11","","",172],[9,"ref11","","",172],[9,"mut11","","",172],[16,"tuple","","Operations on tuples"],[0,"unit","core","The `()` type, sometimes called \"unit\" or \"nil\"."],[16,"unit","core::unit","The `()` type, sometimes called \"unit\" or \"nil\"."],[0,"fmt","core","Utilities for formatting and printing strings"],[1,"Radix","core::fmt","A radix with in the range of `2..36`."],[1,"RadixFmt","","A helper type for formatting radixes."],[1,"Formatter","","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits."],[11,"flags","","Flags for formatting (packed version of rt::Flag)",173],[11,"fill","","Character used as 'fill' whenever there is alignment",173],[11,"align","","Boolean indication of whether the output should be left-aligned",173],[11,"width","","Optionally specified integer width that the output should be",173],[11,"precision","","Optionally specified precision for numeric types",173],[1,"Argument","","This struct represents the generic \"argument\" which is taken by the Xprintf\nfamily of functions. It contains a function to format the given value. At\ncompile time it is ensured that the function and the value have the correct\ntypes, and then this struct is used to canonicalize arguments to one type."],[1,"Arguments","","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification."],[2,"FormatError","","The error type which is returned from formatting a message into a stream."],[12,"WriteError","","A generic write error occurred during formatting, no other information\nis transmitted via this variant.",174],[3,"radix","","Constructs a radix formatter in the range of `2..36`."],[3,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided."],[10,"eq","","",175],[10,"ne","","",175],[10,"clone","","",175],[10,"fmt","","",176],[10,"fmt","","",176],[10,"fmt","","",176],[10,"fmt","","",176],[10,"fmt","","",176],[10,"fmt","","",176],[10,"fmt","","",176],[10,"fmt","","",176],[10,"fmt","","",176],[10,"fmt","","",176],[0,"rt","","This is an internal module used by the ifmt! runtime. These structures are\nemitted to static arrays to precompile format strings ahead of time."],[2,"Alignment","core::fmt::rt","Possible alignments that can be requested as part of a formatting directive."],[12,"AlignLeft","","Indication that contents should be left-aligned.",177],[12,"AlignRight","","Indication that contents should be right-aligned.",177],[12,"AlignCenter","","Indication that contents should be center-aligned.",177],[12,"AlignUnknown","","No alignment was requested.",177],[2,"Flag","","Flags which can be passed to formatting via a directive."],[12,"FlagSignPlus","","A flag which enables number formatting to always print the sign of a\nnumber.",178],[12,"FlagSignMinus","","Currently not a used flag",178],[12,"FlagAlternate","","Indicates that the \"alternate formatting\" for a type should be used.",178],[12,"FlagSignAwareZeroPad","","Indicates that padding should be done with a `0` character as well as\nbeing aware of the sign to be printed.",178],[10,"eq","","",177],[10,"ne","","",177],[4,"Result","core::fmt",""],[6,"FormatWriter","","A collection of methods that are required to format a message into a stream."],[9,"write","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",179],[10,"write_fmt","","Glue for usage of the `write!` macro with implementers of this trait.",179],[6,"Show","","When a format is not otherwise specified, types are formatted by ascribing\nto this trait. There is not an explicit way of selecting this trait to be\nused for formatting, it is only if no other format is specified."],[9,"fmt","","Formats the value using the given formatter.",180],[6,"Bool","","Format trait for the `b` character"],[9,"fmt","","Formats the value using the given formatter.",181],[6,"Char","","Format trait for the `c` character"],[9,"fmt","","Formats the value using the given formatter.",182],[6,"Signed","","Format trait for the `i` and `d` characters"],[9,"fmt","","Formats the value using the given formatter.",183],[6,"Unsigned","","Format trait for the `u` character"],[9,"fmt","","Formats the value using the given formatter.",184],[6,"Octal","","Format trait for the `o` character"],[9,"fmt","","Formats the value using the given formatter.",185],[6,"Binary","","Format trait for the `t` character"],[9,"fmt","","Formats the value using the given formatter.",186],[6,"LowerHex","","Format trait for the `x` character"],[9,"fmt","","Formats the value using the given formatter.",187],[6,"UpperHex","","Format trait for the `X` character"],[9,"fmt","","Formats the value using the given formatter.",188],[6,"String","","Format trait for the `s` character"],[9,"fmt","","Formats the value using the given formatter.",189],[6,"Pointer","","Format trait for the `p` character"],[9,"fmt","","Formats the value using the given formatter.",190],[6,"Float","","Format trait for the `f` character"],[9,"fmt","","Formats the value using the given formatter.",191],[6,"LowerExp","","Format trait for the `e` character"],[9,"fmt","","Formats the value using the given formatter.",192],[6,"UpperExp","","Format trait for the `E` character"],[9,"fmt","","Formats the value using the given formatter.",193],[10,"fmt","","",194],[10,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a byte-array. The byte-array should *not* contain the sign\nfor the integer, that will be added by this method.",173],[10,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",173],[10,"write","","Writes some data to the underlying buffer contained within this\nformatter.",173],[10,"write_fmt","","Writes some formatted information into this instance",173],[10,"fmt","core::cell","",69],[10,"fmt","","",71],[10,"fmt","","",72],[15,"fail!","core","Entry point of failure, for details, see std::macros"],[15,"assert!","","Runtime assertion, for details see std::macros"],[15,"debug_assert!","","Runtime assertion, only without `--cfg ndebug`"],[15,"assert_eq!","","Runtime assertion for equality, for details see std::macros"],[15,"debug_assert_eq!","","Runtime assertion for equality, only without `--cfg ndebug`"],[15,"debug_assert!","","Runtime assertion, disableable at compile time"],[15,"try!","","Short circuiting evaluation on Err"],[15,"write!","","Writing a formatted string into a writer"],[15,"writeln!","","Writing a formatted string plus a newline into a writer"],[15,"write!","","Write some formatted data into a stream."],[15,"unreachable!","",""],[16,"int","",""],[16,"i8","",""],[16,"i16","",""],[16,"i32","",""],[16,"i64","",""],[16,"uint","",""],[16,"u8","",""],[16,"u16","",""],[16,"u32","",""],[16,"u64","",""],[16,"f32","",""],[16,"f64","",""],[16,"bool","",""],[16,"char","",""],[16,"slice","",""],[16,"str","",""],[16,"tuple","",""],[16,"unit","",""]],"paths":[[2,"FPCategory"],[6,"Zero"],[6,"One"],[6,"Signed"],[6,"Bounded"],[6,"Int"],[6,"ToPrimitive"],[6,"FromPrimitive"],[6,"NumCast"],[6,"Saturating"],[6,"CheckedAdd"],[6,"CheckedSub"],[6,"CheckedMul"],[6,"CheckedDiv"],[6,"Float"],[1,"TyDesc"],[6,"TyVisitor"],[1,"TypeId"],[6,"RawPtr"],[6,"RawMutPtr"],[1,"CovariantType"],[1,"ContravariantType"],[1,"InvariantType"],[1,"CovariantLifetime"],[1,"ContravariantLifetime"],[1,"InvariantLifetime"],[1,"NoSend"],[1,"NoCopy"],[1,"NoSync"],[1,"Managed"],[6,"Drop"],[6,"Add"],[6,"Sub"],[6,"Mul"],[6,"Div"],[6,"Rem"],[6,"Neg"],[6,"Not"],[6,"BitAnd"],[6,"BitOr"],[6,"BitXor"],[6,"Shl"],[6,"Shr"],[6,"Index"],[6,"IndexMut"],[6,"Slice"],[6,"SliceMut"],[6,"Deref"],[6,"DerefMut"],[6,"Fn"],[6,"FnMut"],[6,"FnOnce"],[2,"Ordering"],[6,"PartialEq"],[6,"Ord"],[6,"PartialOrd"],[6,"Equiv"],[6,"Clone"],[6,"Default"],[6,"Collection"],[6,"AnyPrivate"],[6,"AnyRefExt"],[6,"AnyMutRefExt"],[2,"Ordering"],[1,"AtomicBool"],[1,"AtomicInt"],[1,"AtomicUint"],[1,"AtomicPtr"],[1,"UnsafeCell"],[1,"Cell"],[1,"RefCell"],[1,"Ref"],[1,"RefMut"],[6,"Char"],[6,"Finally"],[1,"Scan"],[1,"Unfold"],[2,"MinMaxResult"],[6,"FromIterator"],[6,"Extendable"],[6,"Iterator"],[6,"DoubleEndedIterator"],[6,"MutableDoubleEndedIterator"],[6,"RandomAccessIterator"],[6,"ExactSize"],[6,"AdditiveIterator"],[6,"MultiplicativeIterator"],[6,"OrdIterator"],[6,"CloneableIterator"],[1,"Rev"],[1,"ByRef"],[1,"Cycle"],[1,"Chain"],[1,"Zip"],[1,"Map"],[1,"Filter"],[1,"FilterMap"],[1,"Enumerate"],[1,"Peekable"],[1,"SkipWhile"],[1,"TakeWhile"],[1,"Skip"],[1,"Take"],[1,"FlatMap"],[1,"Fuse"],[1,"Inspect"],[1,"Counter"],[1,"Range"],[1,"RangeInclusive"],[1,"RangeStep"],[1,"RangeStepInclusive"],[1,"Repeat"],[2,"Option"],[1,"Item"],[1,"Box"],[1,"Slice"],[1,"Closure"],[1,"Procedure"],[1,"TraitObject"],[6,"Repr"],[2,"Result"],[1,"Item"],[1,"i8x16"],[1,"i16x8"],[1,"i32x4"],[1,"i64x2"],[1,"u8x16"],[1,"u16x8"],[1,"u32x4"],[1,"u64x2"],[1,"f32x4"],[1,"f64x2"],[2,"BinarySearchResult"],[6,"MutableByteVector"],[6,"ImmutableSlice"],[6,"MutableSlice"],[6,"ImmutablePartialEqSlice"],[6,"ImmutableOrdSlice"],[6,"MutableCloneableSlice"],[6,"Slice"],[1,"Items"],[1,"MutItems"],[1,"Splits"],[1,"MutSplits"],[1,"SplitsN"],[1,"Windows"],[1,"Chunks"],[1,"MutChunks"],[1,"CharRange"],[2,"Utf16Item"],[6,"CharEq"],[6,"Str"],[6,"StrSlice"],[1,"Chars"],[1,"CharOffsets"],[1,"CharSplits"],[1,"CharSplitsN"],[1,"MatchIndices"],[1,"StrSplits"],[1,"Utf16CodeUnits"],[1,"Utf16Items"],[6,"Tuple1"],[6,"Tuple2"],[6,"Tuple3"],[6,"Tuple4"],[6,"Tuple5"],[6,"Tuple6"],[6,"Tuple7"],[6,"Tuple8"],[6,"Tuple9"],[6,"Tuple10"],[6,"Tuple11"],[6,"Tuple12"],[1,"Formatter"],[2,"FormatError"],[1,"Radix"],[1,"RadixFmt"],[2,"Alignment"],[2,"Flag"],[6,"FormatWriter"],[6,"Show"],[6,"Bool"],[6,"Char"],[6,"Signed"],[6,"Unsigned"],[6,"Octal"],[6,"Binary"],[6,"LowerHex"],[6,"UpperHex"],[6,"String"],[6,"Pointer"],[6,"Float"],[6,"LowerExp"],[6,"UpperExp"],[1,"Arguments"]]};

searchIndex['graphviz'] = {"items":[[0,"","graphviz","Generate files suitable for use with [Graphviz](http://www.graphviz.org/)"],[1,"Id","","`Id` is a Graphviz `ID`."],[2,"LabelText","","The text for a graphviz label on a node or edge."],[12,"LabelStr","","This kind of label preserves the text directly as is.",0],[12,"EscStr","","This kind of label uses the graphviz label escString type:\nhttp://www.graphviz.org/content/attrs#kescString",0],[3,"render","","Renders directed graph `g` into the writer `w` in DOT syntax.\n(Main entry point for the library.)"],[0,"maybe_owned_vec","",""],[2,"MaybeOwnedVector","graphviz::maybe_owned_vec","MaybeOwnedVector<'a,T> abstracts over `Vec<T>`, `&'a [T]`."],[12,"Growable","","",1],[12,"Borrowed","","",1],[6,"IntoMaybeOwnedVector","","Trait for moving into a `MaybeOwnedVector`"],[9,"into_maybe_owned","","Moves self into a `MaybeOwnedVector`",2],[10,"into_maybe_owned","collections::vec","",3],[10,"iter","graphviz::maybe_owned_vec","",1],[10,"eq","","",1],[10,"partial_cmp","","",1],[10,"cmp","","",1],[10,"equiv","","",1],[10,"as_slice","","",1],[10,"from_iter","","",1],[10,"fmt","","",1],[10,"to_vec","","Returns a copy of `self`.",1],[10,"into_vec","","Convert `self` into an owned slice, not making a copy if possible.",1],[10,"clone","","",1],[10,"default","","",1],[10,"len","","",1],[10,"container_as_bytes","","",1],[10,"into_vec","","Convert `self` into a growable `Vec`, not making a copy if possible.",1],[4,"Nodes","graphviz",""],[4,"Edges","",""],[6,"Labeller","","Each instance of a type that implements `Label<C>` maps to a\nunique identifier with respect to `C`, which is used to identify\nit in the generated .dot file. They can also provide more\nelaborate (and non-unique) label text that is used in the graphviz\nrendered output.\nThe graph instance is responsible for providing the DOT compatible\nidentifiers for the nodes and (optionally) rendered labels for the nodes and\nedges, as well as an identifier for the graph itself."],[9,"graph_id","","Must return a DOT compatible identifier naming the graph.",4],[9,"node_id","","Maps `n` to a unique identifier with respect to `self`. The\nimplementer is responsible for ensuring that the returned name\nis a valid DOT identifier.",4],[10,"node_label","","Maps `n` to a label that will be used in the rendered output.\nThe label need not be unique, and may be the empty string; the\ndefault is just the output from `node_id`.",4],[10,"edge_label","","Maps `e` to a label that will be used in the rendered output.\nThe label need not be unique, and may be the empty string; the\ndefault is in fact the empty string.",4],[6,"GraphWalk","","GraphWalk is an abstraction over a directed graph = (nodes,edges)\nmade up of node handles `N` and edge handles `E`, where each `E`\ncan be mapped to its source and target nodes."],[9,"nodes","","Returns all the nodes in this graph.",5],[9,"edges","","Returns all of the edges in this graph.",5],[9,"source","","The source node for `edge`.",5],[9,"target","","The target node for `edge`.",5],[10,"new","","Creates an `Id` named `name`.",6],[10,"as_slice","","",6],[10,"name","","",6],[10,"escape","","Renders text as string suitable for a label in a .dot file.",0],[10,"prefix_line","","Puts `prefix` on a line above this label, with a blank line separator.",0],[10,"suffix_line","","Puts `suffix` on a line below this label, with a blank line separator.",0]],"paths":[[2,"LabelText"],[2,"MaybeOwnedVector"],[6,"IntoMaybeOwnedVector"],[1,"Vec"],[6,"Labeller"],[6,"GraphWalk"],[1,"Id"]]};

searchIndex['regex'] = {"items":[[0,"","regex","This crate provides a native implementation of regular expressions that is\nheavily based on RE2 both in syntax and in implementation. Notably,\nbackreferences and arbitrary lookahead/lookbehind assertions are not\nprovided. In return, regular expression searching provided by this package\nhas excellent worst case performance. The specific syntax supported is\ndocumented further down."],[1,"Error","","Error corresponds to something that can go wrong while parsing\na regular expression."],[11,"pos","","The *approximate* character index of where the error occurred.",0],[11,"msg","","A message describing the error.",0],[1,"Captures","","Captures represents a group of captured strings for a single match."],[1,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression."],[1,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression."],[1,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression."],[1,"FindMatches","","An iterator over all non-overlapping matches for a particular string."],[1,"NoExpand","","NoExpand indicates literal string replacement."],[1,"RegexSplits","","Yields all substrings delimited by a regular expression match."],[1,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match."],[2,"Regex","","A compiled regular expression"],[3,"quote","","Escapes all regular expression meta characters in `text`."],[3,"is_match","","Tests if the given regular expression matches somewhere in the text given."],[10,"fmt","","",0],[10,"clone","","",1],[10,"fmt","","Shows the original regular expression.",1],[10,"new","","Compiles a dynamic regular expression. Once compiled, it can be\nused repeatedly to search, split or replace text in a string.",1],[10,"is_match","","Returns true if and only if the regex matches the string given.",1],[10,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",1],[10,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",1],[10,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",1],[10,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter` (except it\nyields information about submatches).",1],[10,"split","","Returns an iterator of substrings of `text` delimited by a match\nof the regular expression.\nNamely, each element of the iterator corresponds to text that *isn't*\nmatched by the regular expression.",1],[10,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.)\nNamely, each element of the iterator corresponds to text that *isn't*\nmatched by the regular expression.\nThe remainder of the string that is not split will be the last element\nin the iterator.",1],[10,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches'\n`Captures` and returns the replaced string.",1],[10,"replace_all","","Replaces all non-overlapping matches in `text` with the\nreplacement provided. This is the same as calling `replacen` with\n`limit` set to `0`.",1],[10,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",1],[10,"as_str","","Returns the original string of this regex.",1],[10,"reg_replace","","",2],[10,"next","","",3],[10,"next","","",4],[10,"pos","","Returns the start and end positions of the Nth capture group.\nReturns `None` if `i` is not a valid capture group or if the capture\ngroup did not match anything.\nThe positions returned are *always* byte indices with respect to the\noriginal string matched.",5],[10,"at","","Returns the matched string for the capture group `i`.\nIf `i` isn't a valid capture group or didn't match anything, then the\nempty string is returned.",5],[10,"name","","Returns the matched string for the capture group named `name`.\nIf `name` isn't a valid capture group or didn't match anything, then\nthe empty string is returned.",5],[10,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",5],[10,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",5],[10,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`.",5],[10,"len","","Returns the number of captured groups.",5],[10,"next","","",6],[10,"next","","",7],[10,"next","","",8],[10,"next","","",9],[6,"Replacer","","Replacer describes types that can be used to replace matches in a string."],[9,"reg_replace","","Returns a possibly owned string that is used to replace the match\ncorresponding the the `caps` capture group.",10]],"paths":[[1,"Error"],[2,"Regex"],[1,"NoExpand"],[1,"RegexSplits"],[1,"RegexSplitsN"],[1,"Captures"],[1,"SubCaptures"],[1,"SubCapturesPos"],[1,"FindCaptures"],[1,"FindMatches"],[6,"Replacer"]]};

searchIndex['log'] = {"items":[[0,"","log","Utilities for program-wide and customizable logging"],[1,"LogLevel","","Wraps the log level with fmt implementations."],[1,"LogRecord","","A LogRecord is created by the logging macros, and passed as the only\nargument to Loggers."],[11,"module_path","","The module path of where the LogRecord originated.",0],[11,"level","","The LogLevel of this record.",0],[11,"args","","The arguments from the log line.",0],[11,"file","","The file of where the LogRecord originated.",0],[11,"line","","The line number of where the LogRecord originated.",0],[3,"set_logger","","Replaces the task-local logger with the specified logger, returning the old\nlogger."],[0,"macros","","Logging macros"],[5,"MAX_LOG_LEVEL","","Maximum logging level of a module that can be specified. Common logging\nlevels are found in the DEBUG/INFO/WARN/ERROR constants."],[5,"DEBUG","","Debug log level"],[5,"INFO","","Info log level"],[5,"WARN","","Warn log level"],[5,"ERROR","","Error log level"],[6,"Logger","","A trait used to represent an interface to a task-local logger. Each task\ncan have its own custom logger which can respond to logging messages\nhowever it likes."],[9,"log","","Logs a single message described by the `record`.",1],[10,"partial_cmp","","",2],[10,"lt","","",2],[10,"le","","",2],[10,"gt","","",2],[10,"ge","","",2],[10,"eq","","",2],[10,"ne","","",2],[10,"fmt","","",2],[10,"fmt","","",2],[10,"fmt","","",0],[15,"log!","","The standard logging macro"],[15,"error!","","A convenience macro for logging at the error log level."],[15,"warn!","","A convenience macro for logging at the warning log level."],[15,"info!","","A convenience macro for logging at the info log level."],[15,"debug!","","A convenience macro for logging at the debug log level. This macro can also\nbe omitted at compile time by passing `--cfg ndebug` to the compiler. If\nthis option is not passed, then debug statements will be compiled."],[15,"log_enabled!","","A macro to test whether a log level is enabled for the current module."]],"paths":[[1,"LogRecord"],[6,"Logger"],[1,"LogLevel"]]};

searchIndex['url'] = {"items":[[0,"","url","Types/fns concerning URLs (see RFC 3986)"],[1,"Url","","A Uniform Resource Locator (URL).  A URL is a form of URI (Uniform Resource\nIdentifier) that includes network location information, such as hostname or\nport number."],[11,"scheme","","The scheme part of a URL, such as `https` in the above example.",0],[11,"user","","A URL subcomponent for user authentication.  `username` in the above example.",0],[11,"host","","A domain name or IP address.  For example, `example.com`.",0],[11,"port","","A TCP port number, for example `8080`.",0],[11,"path","","The path component of a URL, for example `/foo/bar?baz=qux#quz`.",0],[1,"Path","",""],[11,"path","","The path component of a URL, for example `/foo/bar`.",1],[11,"query","","The query component of a URL.\n`vec![(\"baz\".to_string(), \"qux\".to_string())]` represents the fragment\n`baz=qux` in the above example.",1],[11,"fragment","","The fragment component, such as `quz`. Not including the leading `#` character.",1],[1,"UserInfo","","An optional subcomponent of a URI authority component."],[11,"user","","The user name.",2],[11,"pass","","Password or other scheme-specific authentication information.",2],[3,"from_str","",""],[3,"path_from_str","",""],[3,"encode","","Encodes a URI by replacing reserved characters with percent-encoded\ncharacter sequences."],[3,"encode_component","","Encodes a URI component by replacing reserved characters with percent-\nencoded character sequences."],[3,"decode","","Decodes a percent-encoded string representing a URI."],[3,"decode_component","","Decode a string encoded with percent encoding."],[3,"encode_form_urlencoded","","Encode a hashmap to the 'application/x-www-form-urlencoded' media type."],[3,"decode_form_urlencoded","","Decode a string encoded with the 'application/x-www-form-urlencoded' media\ntype into a hashmap."],[3,"query_to_str","","Converts an instance of a URI `Query` type to a string."],[3,"get_scheme","","Returns a tuple of the URI scheme and the rest of the URI, or a parsing error."],[4,"Query","","Represents the query component of a URI."],[4,"DecodeResult","",""],[10,"eq","","",0],[10,"ne","","",0],[10,"clone","","",0],[10,"eq","","",1],[10,"ne","","",1],[10,"clone","","",1],[10,"eq","","",2],[10,"ne","","",2],[10,"clone","","",2],[10,"new","","",0],[10,"parse","","Parses a URL, converting it from a string to a `Url` representation.",0],[10,"new","","",1],[10,"parse","","Parses a URL path, converting it from a string to a `Path` representation.",1],[10,"new","","",2],[10,"fmt","","",2],[10,"from_str","","",0],[10,"from_str","","",1],[10,"fmt","","Converts a URL from `Url` to string representation.",0],[10,"fmt","","",1],[10,"hash","","",0],[10,"hash","","",1]],"paths":[[1,"Url"],[1,"Path"],[1,"UserInfo"]]};

searchIndex['rand'] = {"items":[[0,"","rand","Interface to random number generators in Rust."],[1,"Generator","","Iterator which will generate a stream of random items."],[1,"AsciiGenerator","","Iterator which will continuously generate random ascii characters."],[1,"XorShiftRng","","An [Xorshift] random number generator"],[1,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint)."],[1,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints)."],[0,"distributions","","Sampling from random distributions."],[1,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` & `IndependentSample` traits."],[1,"Weighted","","A value with a particular weight for use with `WeightedChoice`."],[11,"weight","","The numerical weight of this item",0],[11,"item","","The actual item which is being weighted",0],[1,"WeightedChoice","","A distribution that selects from a finite collection of weighted items."],[0,"range","","Generating numbers between two others."],[1,"Range","rand::distributions::range","Sample values uniformly between two bounds."],[6,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`."],[9,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low < high`, so this\nfunction doesn't have to repeat the check.",1],[9,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",1],[10,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Fails if `low >= high`.",2],[10,"sample","","",2],[10,"ind_sample","","",2],[0,"gamma","rand::distributions","The Gamma and derived distributions."],[1,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution."],[1,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom."],[1,"FisherF","","The Fisher F distribution `F(m, n)`."],[1,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom."],[10,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",3],[10,"sample","","",3],[10,"ind_sample","","",3],[10,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Fails if `k < 0`.",4],[10,"sample","","",4],[10,"ind_sample","","",4],[10,"new","","Create a new `FisherF` distribution, with the given\nparameter. Fails if either `m` or `n` are not positive.",5],[10,"sample","","",5],[10,"ind_sample","","",5],[10,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Fails if `n <= 0`.",6],[10,"sample","","",6],[10,"ind_sample","","",6],[0,"normal","rand::distributions","The normal and derived distributions."],[1,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian)."],[1,"Normal","","The normal distribution `N(mean, std_dev**2)`."],[1,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`."],[10,"rand","","",7],[10,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation. Fails if `std_dev < 0`.",8],[10,"sample","","",8],[10,"ind_sample","","",8],[10,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation. Fails if `std_dev < 0`.",9],[10,"sample","","",9],[10,"ind_sample","","",9],[0,"exponential","rand::distributions","The exponential distribution."],[1,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers."],[1,"Exp","","The exponential distribution `Exp(lambda)`."],[10,"rand","","",10],[10,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Fails if `lambda <= 0`.",11],[10,"sample","","",11],[10,"ind_sample","","",11],[6,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`."],[9,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",12],[6,"IndependentSample","","`Sample`s that do not require keeping track of state."],[9,"ind_sample","","Generate a random value.",13],[10,"sample","","",14],[10,"ind_sample","","",14],[10,"new","","Create a new `WeightedChoice`.",15],[10,"sample","","",15],[10,"ind_sample","","",15],[0,"isaac","rand","The ISAAC random number generator."],[1,"IsaacRng","rand::isaac","A random number generator that uses the [ISAAC] algorithm."],[1,"Isaac64Rng","","A random number generator that uses [ISAAC-64], the 64-bit\nvariant of the ISAAC algorithm."],[10,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",16],[10,"next_u32","","",16],[10,"reseed","","",16],[10,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",16],[10,"rand","","",16],[10,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",17],[10,"next_u32","","",17],[10,"next_u64","","",17],[10,"reseed","","",17],[10,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",17],[10,"rand","","",17],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes."],[1,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes."],[11,"reseeder","","Controls the behaviour when reseeding the RNG.",18],[1,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call."],[6,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`."],[9,"reseed","","Reseed the given RNG.",19],[10,"new","","Create a new `ReseedingRng` with the given parameters.",18],[10,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",18],[10,"next_u32","","",18],[10,"next_u64","","",18],[10,"fill_bytes","","",18],[10,"reseed","","",18],[10,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",18],[10,"reseed","","",20],[10,"default","","",20],[10,"rand","rand","",21],[10,"rand","","",22],[10,"rand","","",21],[10,"rand","","",22],[10,"rand","core::option","",23],[10,"is_some","","Returns `true` if the option is a `Some` value",23],[10,"is_none","","Returns `true` if the option is a `None` value",23],[10,"as_ref","","Convert from `Option<T>` to `Option<&T>`",23],[10,"as_mut","","Convert from `Option<T>` to `Option<&mut T>`",23],[10,"as_mut_slice","","Convert from `Option<T>` to `&mut [T]` (without copying)",23],[10,"expect","","Unwraps an option, yielding the content of a `Some`",23],[10,"unwrap","","Returns the inner `T` of a `Some(T)`.",23],[10,"unwrap_or","","Returns the contained value or a default.",23],[10,"unwrap_or_else","","Returns the contained value or computes it from a closure.",23],[10,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",23],[10,"map_or","","Applies a function to the contained value or returns a default.",23],[10,"map_or_else","","Applies a function to the contained value or computes a default.",23],[10,"mutate","","Deprecated.",23],[10,"mutate_or_set","","Deprecated.",23],[10,"iter","","Returns an iterator over the possibly contained value.",23],[10,"mut_iter","","Deprecated: use `iter_mut`",23],[10,"iter_mut","","Returns a mutable iterator over the possibly contained value.",23],[10,"move_iter","","Deprecated: use `into_iter`.",23],[10,"into_iter","","Returns a consuming iterator over the possibly contained value.",23],[10,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",23],[10,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",23],[10,"or","","Returns the option if it contains a value, otherwise returns `optb`.",23],[10,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",23],[10,"take","","Takes the value out of the option, leaving a `None` in its place.",23],[10,"filtered","","Deprecated.",23],[10,"while_some","","Deprecated.",23],[10,"take_unwrap","","Deprecated: use `take().unwrap()` instead.",23],[10,"get_ref","","Deprecated: use `as_ref().unwrap()` instead.",23],[10,"get_mut_ref","","Deprecated: use `as_mut().unwrap()` instead.",23],[10,"unwrap_or_default","","Returns the contained value or a default",23],[10,"fmt","core::num","",24],[10,"eq","","",24],[10,"ne","","",24],[10,"ne","","",24],[10,"fmt","core::intrinsics","",25],[10,"assert_receiver_is_total_eq","","",25],[10,"eq","","",25],[10,"ne","","",25],[10,"ne","","",25],[10,"of","","Returns the `TypeId` of the type this generic function has been instantiated with",25],[10,"hash","","",25],[10,"clone","core::kinds::marker","",26],[10,"clone_from","","",26],[10,"eq","","",26],[10,"ne","","",26],[10,"ne","","",26],[10,"clone","","",27],[10,"clone_from","","",27],[10,"eq","","",27],[10,"ne","","",27],[10,"ne","","",27],[10,"clone","","",28],[10,"clone_from","","",28],[10,"eq","","",28],[10,"ne","","",28],[10,"ne","","",28],[10,"clone","","",29],[10,"clone_from","","",29],[10,"eq","","",29],[10,"ne","","",29],[10,"ne","","",29],[10,"clone","","",30],[10,"clone_from","","",30],[10,"eq","","",30],[10,"ne","","",30],[10,"ne","","",30],[10,"clone","","",31],[10,"clone_from","","",31],[10,"eq","","",31],[10,"ne","","",31],[10,"ne","","",31],[10,"clone","","",32],[10,"clone_from","","",32],[10,"eq","","",32],[10,"ne","","",32],[10,"ne","","",32],[10,"clone","","",33],[10,"clone_from","","",33],[10,"eq","","",33],[10,"ne","","",33],[10,"ne","","",33],[10,"clone","","",34],[10,"clone_from","","",34],[10,"eq","","",34],[10,"ne","","",34],[10,"ne","","",34],[10,"clone","","",35],[10,"clone_from","","",35],[10,"eq","","",35],[10,"ne","","",35],[10,"ne","","",35],[10,"fmt","core::cmp","",36],[10,"eq","","",36],[10,"ne","","",36],[10,"ne","","",36],[10,"clone","","",36],[10,"clone_from","","",36],[10,"reverse","","Reverse the `Ordering`, so that `Less` becomes `Greater` and\nvice versa.",36],[10,"assert_receiver_is_total_eq","","",36],[10,"cmp","","",36],[10,"partial_cmp","","",36],[10,"lt","","",36],[10,"le","","",36],[10,"gt","","",36],[10,"ge","","",36],[10,"new","core::atomic","Create a new `AtomicBool`",37],[10,"load","","Load the value",37],[10,"store","","Store the value",37],[10,"swap","","Store a value, returning the old value",37],[10,"compare_and_swap","","If the current value is the same as expected, store a new value",37],[10,"fetch_and","","A logical \"and\" operation",37],[10,"fetch_nand","","A logical \"nand\" operation",37],[10,"fetch_or","","A logical \"or\" operation",37],[10,"fetch_xor","","A logical \"xor\" operation",37],[10,"new","","Create a new `AtomicInt`",38],[10,"load","","Load the value",38],[10,"store","","Store the value",38],[10,"swap","","Store a value, returning the old value",38],[10,"compare_and_swap","","If the current value is the same as expected, store a new value",38],[10,"fetch_add","","Add to the current value, returning the previous",38],[10,"fetch_sub","","Subtract from the current value, returning the previous",38],[10,"fetch_and","","Bitwise and with the current value, returning the previous",38],[10,"fetch_or","","Bitwise or with the current value, returning the previous",38],[10,"fetch_xor","","Bitwise xor with the current value, returning the previous",38],[10,"new","","Create a new `AtomicUint`",39],[10,"load","","Load the value",39],[10,"store","","Store the value",39],[10,"swap","","Store a value, returning the old value",39],[10,"compare_and_swap","","If the current value is the same as expected, store a new value",39],[10,"fetch_add","","Add to the current value, returning the previous",39],[10,"fetch_sub","","Subtract from the current value, returning the previous",39],[10,"fetch_and","","Bitwise and with the current value, returning the previous",39],[10,"fetch_or","","Bitwise or with the current value, returning the previous",39],[10,"fetch_xor","","Bitwise xor with the current value, returning the previous",39],[10,"new","","Create a new `AtomicPtr`",40],[10,"load","","Load the value",40],[10,"store","","Store the value",40],[10,"swap","","Store a value, returning the old value",40],[10,"compare_and_swap","","If the current value is the same as expected, store a new value",40],[10,"new","core::cell","Creates a new `Cell` containing the given value.",41],[10,"get","","Returns a copy of the contained value.",41],[10,"set","","Sets the contained value.",41],[10,"clone","","",41],[10,"clone_from","","",41],[10,"eq","","",41],[10,"ne","","",41],[10,"new","","Create a new `RefCell` containing `value`",42],[10,"unwrap","","Consumes the `RefCell`, returning the wrapped value.",42],[10,"try_borrow","","Attempts to immutably borrow the wrapped value.",42],[10,"borrow","","Immutably borrows the wrapped value.",42],[10,"try_borrow_mut","","Mutably borrows the wrapped value.",42],[10,"borrow_mut","","Mutably borrows the wrapped value.",42],[10,"clone","","",42],[10,"clone_from","","",42],[10,"eq","","",42],[10,"ne","","",42],[10,"drop","","",43],[10,"deref","","",43],[10,"drop","","",44],[10,"deref","","",44],[10,"deref_mut","","",44],[10,"new","","Construct a new instance of `UnsafeCell` which will wrap the specified\nvalue.",45],[10,"get","","Gets a mutable pointer to the wrapped value.",45],[10,"unwrap","","Unwraps the value",45],[10,"drop","core::finally","",46],[10,"rposition","core::iter","",47],[10,"len","","",47],[10,"rposition","","",48],[10,"len","","",48],[10,"rposition","","",49],[10,"len","","",49],[10,"rposition","","",50],[10,"len","","",50],[10,"rposition","","",51],[10,"len","","",51],[10,"clone","","",49],[10,"clone_from","","",49],[10,"next","","",49],[10,"size_hint","","",49],[10,"size_hint","","",49],[10,"chain","","",49],[10,"zip","","",49],[10,"map","","",49],[10,"filter","","",49],[10,"filter_map","","",49],[10,"enumerate","","",49],[10,"peekable","","",49],[10,"skip_while","","",49],[10,"take_while","","",49],[10,"skip","","",49],[10,"take","","",49],[10,"scan","","",49],[10,"flat_map","","",49],[10,"fuse","","",49],[10,"inspect","","",49],[10,"by_ref","","",49],[10,"advance","","",49],[10,"collect","","",49],[10,"nth","","",49],[10,"last","","",49],[10,"fold","","",49],[10,"count","","",49],[10,"all","","",49],[10,"any","","",49],[10,"find","","",49],[10,"position","","",49],[10,"max_by","","",49],[10,"min_by","","",49],[10,"next_back","","",49],[10,"rev","","",49],[10,"indexable","","",49],[10,"idx","","",49],[10,"next","","",52],[10,"size_hint","","",52],[10,"size_hint","","",52],[10,"chain","","",52],[10,"zip","","",52],[10,"map","","",52],[10,"filter","","",52],[10,"filter_map","","",52],[10,"enumerate","","",52],[10,"peekable","","",52],[10,"skip_while","","",52],[10,"take_while","","",52],[10,"skip","","",52],[10,"take","","",52],[10,"scan","","",52],[10,"flat_map","","",52],[10,"fuse","","",52],[10,"inspect","","",52],[10,"by_ref","","",52],[10,"advance","","",52],[10,"collect","","",52],[10,"nth","","",52],[10,"last","","",52],[10,"fold","","",52],[10,"count","","",52],[10,"all","","",52],[10,"any","","",52],[10,"find","","",52],[10,"position","","",52],[10,"max_by","","",52],[10,"min_by","","",52],[10,"next_back","","",52],[10,"rev","","",52],[10,"fmt","","",53],[10,"eq","","",53],[10,"ne","","",53],[10,"ne","","",53],[10,"clone","","",53],[10,"clone_from","","",53],[10,"into_option","","`into_option` creates an `Option` of type `(T,T)`. The returned `Option` has variant\n`None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise variant\n`Some(x,y)` is returned where `x <= y`. If `MinMaxResult` has variant `OneElement(x)`,\nperforming this operation will make one clone of `x`.",53],[10,"clone","","",54],[10,"clone_from","","",54],[10,"next","","",54],[10,"size_hint","","",54],[10,"size_hint","","",54],[10,"chain","","",54],[10,"zip","","",54],[10,"map","","",54],[10,"filter","","",54],[10,"filter_map","","",54],[10,"enumerate","","",54],[10,"peekable","","",54],[10,"skip_while","","",54],[10,"take_while","","",54],[10,"skip","","",54],[10,"take","","",54],[10,"scan","","",54],[10,"flat_map","","",54],[10,"fuse","","",54],[10,"inspect","","",54],[10,"by_ref","","",54],[10,"advance","","",54],[10,"collect","","",54],[10,"nth","","",54],[10,"last","","",54],[10,"fold","","",54],[10,"count","","",54],[10,"all","","",54],[10,"any","","",54],[10,"find","","",54],[10,"position","","",54],[10,"max_by","","",54],[10,"min_by","","",54],[10,"indexable","","",54],[10,"idx","","",54],[10,"clone","","",55],[10,"clone_from","","",55],[10,"next","","",55],[10,"size_hint","","",55],[10,"size_hint","","",55],[10,"chain","","",55],[10,"zip","","",55],[10,"map","","",55],[10,"filter","","",55],[10,"filter_map","","",55],[10,"enumerate","","",55],[10,"peekable","","",55],[10,"skip_while","","",55],[10,"take_while","","",55],[10,"skip","","",55],[10,"take","","",55],[10,"scan","","",55],[10,"flat_map","","",55],[10,"fuse","","",55],[10,"inspect","","",55],[10,"by_ref","","",55],[10,"advance","","",55],[10,"collect","","",55],[10,"nth","","",55],[10,"last","","",55],[10,"fold","","",55],[10,"count","","",55],[10,"all","","",55],[10,"any","","",55],[10,"find","","",55],[10,"position","","",55],[10,"max_by","","",55],[10,"min_by","","",55],[10,"next_back","","",55],[10,"rev","","",55],[10,"indexable","","",55],[10,"idx","","",55],[10,"clone","","",51],[10,"clone_from","","",51],[10,"next","","",51],[10,"size_hint","","",51],[10,"size_hint","","",51],[10,"chain","","",51],[10,"zip","","",51],[10,"map","","",51],[10,"filter","","",51],[10,"filter_map","","",51],[10,"enumerate","","",51],[10,"peekable","","",51],[10,"skip_while","","",51],[10,"take_while","","",51],[10,"skip","","",51],[10,"take","","",51],[10,"scan","","",51],[10,"flat_map","","",51],[10,"fuse","","",51],[10,"inspect","","",51],[10,"by_ref","","",51],[10,"advance","","",51],[10,"collect","","",51],[10,"nth","","",51],[10,"last","","",51],[10,"fold","","",51],[10,"count","","",51],[10,"all","","",51],[10,"any","","",51],[10,"find","","",51],[10,"position","","",51],[10,"max_by","","",51],[10,"min_by","","",51],[10,"next_back","","",51],[10,"rev","","",51],[10,"indexable","","",51],[10,"idx","","",51],[10,"next","","",50],[10,"size_hint","","",50],[10,"size_hint","","",50],[10,"chain","","",50],[10,"zip","","",50],[10,"map","","",50],[10,"filter","","",50],[10,"filter_map","","",50],[10,"enumerate","","",50],[10,"peekable","","",50],[10,"skip_while","","",50],[10,"take_while","","",50],[10,"skip","","",50],[10,"take","","",50],[10,"scan","","",50],[10,"flat_map","","",50],[10,"fuse","","",50],[10,"inspect","","",50],[10,"by_ref","","",50],[10,"advance","","",50],[10,"collect","","",50],[10,"nth","","",50],[10,"last","","",50],[10,"fold","","",50],[10,"count","","",50],[10,"all","","",50],[10,"any","","",50],[10,"find","","",50],[10,"position","","",50],[10,"max_by","","",50],[10,"min_by","","",50],[10,"next_back","","",50],[10,"rev","","",50],[10,"indexable","","",50],[10,"idx","","",50],[10,"next","","",56],[10,"size_hint","","",56],[10,"size_hint","","",56],[10,"chain","","",56],[10,"zip","","",56],[10,"map","","",56],[10,"filter","","",56],[10,"filter_map","","",56],[10,"enumerate","","",56],[10,"peekable","","",56],[10,"skip_while","","",56],[10,"take_while","","",56],[10,"skip","","",56],[10,"take","","",56],[10,"scan","","",56],[10,"flat_map","","",56],[10,"fuse","","",56],[10,"inspect","","",56],[10,"by_ref","","",56],[10,"advance","","",56],[10,"collect","","",56],[10,"nth","","",56],[10,"last","","",56],[10,"fold","","",56],[10,"count","","",56],[10,"all","","",56],[10,"any","","",56],[10,"find","","",56],[10,"position","","",56],[10,"max_by","","",56],[10,"min_by","","",56],[10,"next_back","","",56],[10,"rev","","",56],[10,"next","","",57],[10,"size_hint","","",57],[10,"size_hint","","",57],[10,"chain","","",57],[10,"zip","","",57],[10,"map","","",57],[10,"filter","","",57],[10,"filter_map","","",57],[10,"enumerate","","",57],[10,"peekable","","",57],[10,"skip_while","","",57],[10,"take_while","","",57],[10,"skip","","",57],[10,"take","","",57],[10,"scan","","",57],[10,"flat_map","","",57],[10,"fuse","","",57],[10,"inspect","","",57],[10,"by_ref","","",57],[10,"advance","","",57],[10,"collect","","",57],[10,"nth","","",57],[10,"last","","",57],[10,"fold","","",57],[10,"count","","",57],[10,"all","","",57],[10,"any","","",57],[10,"find","","",57],[10,"position","","",57],[10,"max_by","","",57],[10,"min_by","","",57],[10,"next_back","","",57],[10,"rev","","",57],[10,"clone","","",47],[10,"clone_from","","",47],[10,"next","","",47],[10,"size_hint","","",47],[10,"size_hint","","",47],[10,"chain","","",47],[10,"zip","","",47],[10,"map","","",47],[10,"filter","","",47],[10,"filter_map","","",47],[10,"enumerate","","",47],[10,"peekable","","",47],[10,"skip_while","","",47],[10,"take_while","","",47],[10,"skip","","",47],[10,"take","","",47],[10,"scan","","",47],[10,"flat_map","","",47],[10,"fuse","","",47],[10,"inspect","","",47],[10,"by_ref","","",47],[10,"advance","","",47],[10,"collect","","",47],[10,"nth","","",47],[10,"last","","",47],[10,"fold","","",47],[10,"count","","",47],[10,"all","","",47],[10,"any","","",47],[10,"find","","",47],[10,"position","","",47],[10,"max_by","","",47],[10,"min_by","","",47],[10,"next_back","","",47],[10,"rev","","",47],[10,"indexable","","",47],[10,"idx","","",47],[10,"next","","",58],[10,"size_hint","","",58],[10,"size_hint","","",58],[10,"chain","","",58],[10,"zip","","",58],[10,"map","","",58],[10,"filter","","",58],[10,"filter_map","","",58],[10,"enumerate","","",58],[10,"peekable","","",58],[10,"skip_while","","",58],[10,"take_while","","",58],[10,"skip","","",58],[10,"take","","",58],[10,"scan","","",58],[10,"flat_map","","",58],[10,"fuse","","",58],[10,"inspect","","",58],[10,"by_ref","","",58],[10,"advance","","",58],[10,"collect","","",58],[10,"nth","","",58],[10,"last","","",58],[10,"fold","","",58],[10,"count","","",58],[10,"all","","",58],[10,"any","","",58],[10,"find","","",58],[10,"position","","",58],[10,"max_by","","",58],[10,"min_by","","",58],[10,"peek","","Return a reference to the next element of the iterator with out advancing it,\nor None if the iterator is exhausted.",58],[10,"is_empty","","Check whether peekable iterator is empty or not.",58],[10,"next","","",59],[10,"size_hint","","",59],[10,"size_hint","","",59],[10,"chain","","",59],[10,"zip","","",59],[10,"map","","",59],[10,"filter","","",59],[10,"filter_map","","",59],[10,"enumerate","","",59],[10,"peekable","","",59],[10,"skip_while","","",59],[10,"take_while","","",59],[10,"skip","","",59],[10,"take","","",59],[10,"scan","","",59],[10,"flat_map","","",59],[10,"fuse","","",59],[10,"inspect","","",59],[10,"by_ref","","",59],[10,"advance","","",59],[10,"collect","","",59],[10,"nth","","",59],[10,"last","","",59],[10,"fold","","",59],[10,"count","","",59],[10,"all","","",59],[10,"any","","",59],[10,"find","","",59],[10,"position","","",59],[10,"max_by","","",59],[10,"min_by","","",59],[10,"next","","",60],[10,"size_hint","","",60],[10,"size_hint","","",60],[10,"chain","","",60],[10,"zip","","",60],[10,"map","","",60],[10,"filter","","",60],[10,"filter_map","","",60],[10,"enumerate","","",60],[10,"peekable","","",60],[10,"skip_while","","",60],[10,"take_while","","",60],[10,"skip","","",60],[10,"take","","",60],[10,"scan","","",60],[10,"flat_map","","",60],[10,"fuse","","",60],[10,"inspect","","",60],[10,"by_ref","","",60],[10,"advance","","",60],[10,"collect","","",60],[10,"nth","","",60],[10,"last","","",60],[10,"fold","","",60],[10,"count","","",60],[10,"all","","",60],[10,"any","","",60],[10,"find","","",60],[10,"position","","",60],[10,"max_by","","",60],[10,"min_by","","",60],[10,"clone","","",61],[10,"clone_from","","",61],[10,"next","","",61],[10,"size_hint","","",61],[10,"size_hint","","",61],[10,"chain","","",61],[10,"zip","","",61],[10,"map","","",61],[10,"filter","","",61],[10,"filter_map","","",61],[10,"enumerate","","",61],[10,"peekable","","",61],[10,"skip_while","","",61],[10,"take_while","","",61],[10,"skip","","",61],[10,"take","","",61],[10,"scan","","",61],[10,"flat_map","","",61],[10,"fuse","","",61],[10,"inspect","","",61],[10,"by_ref","","",61],[10,"advance","","",61],[10,"collect","","",61],[10,"nth","","",61],[10,"last","","",61],[10,"fold","","",61],[10,"count","","",61],[10,"all","","",61],[10,"any","","",61],[10,"find","","",61],[10,"position","","",61],[10,"max_by","","",61],[10,"min_by","","",61],[10,"indexable","","",61],[10,"idx","","",61],[10,"clone","","",62],[10,"clone_from","","",62],[10,"next","","",62],[10,"size_hint","","",62],[10,"size_hint","","",62],[10,"chain","","",62],[10,"zip","","",62],[10,"map","","",62],[10,"filter","","",62],[10,"filter_map","","",62],[10,"enumerate","","",62],[10,"peekable","","",62],[10,"skip_while","","",62],[10,"take_while","","",62],[10,"skip","","",62],[10,"take","","",62],[10,"scan","","",62],[10,"flat_map","","",62],[10,"fuse","","",62],[10,"inspect","","",62],[10,"by_ref","","",62],[10,"advance","","",62],[10,"collect","","",62],[10,"nth","","",62],[10,"last","","",62],[10,"fold","","",62],[10,"count","","",62],[10,"all","","",62],[10,"any","","",62],[10,"find","","",62],[10,"position","","",62],[10,"max_by","","",62],[10,"min_by","","",62],[10,"indexable","","",62],[10,"idx","","",62],[10,"next","","",63],[10,"size_hint","","",63],[10,"size_hint","","",63],[10,"chain","","",63],[10,"zip","","",63],[10,"map","","",63],[10,"filter","","",63],[10,"filter_map","","",63],[10,"enumerate","","",63],[10,"peekable","","",63],[10,"skip_while","","",63],[10,"take_while","","",63],[10,"skip","","",63],[10,"take","","",63],[10,"scan","","",63],[10,"flat_map","","",63],[10,"fuse","","",63],[10,"inspect","","",63],[10,"by_ref","","",63],[10,"advance","","",63],[10,"collect","","",63],[10,"nth","","",63],[10,"last","","",63],[10,"fold","","",63],[10,"count","","",63],[10,"all","","",63],[10,"any","","",63],[10,"find","","",63],[10,"position","","",63],[10,"max_by","","",63],[10,"min_by","","",63],[10,"next","","",64],[10,"size_hint","","",64],[10,"size_hint","","",64],[10,"chain","","",64],[10,"zip","","",64],[10,"map","","",64],[10,"filter","","",64],[10,"filter_map","","",64],[10,"enumerate","","",64],[10,"peekable","","",64],[10,"skip_while","","",64],[10,"take_while","","",64],[10,"skip","","",64],[10,"take","","",64],[10,"scan","","",64],[10,"flat_map","","",64],[10,"fuse","","",64],[10,"inspect","","",64],[10,"by_ref","","",64],[10,"advance","","",64],[10,"collect","","",64],[10,"nth","","",64],[10,"last","","",64],[10,"fold","","",64],[10,"count","","",64],[10,"all","","",64],[10,"any","","",64],[10,"find","","",64],[10,"position","","",64],[10,"max_by","","",64],[10,"min_by","","",64],[10,"next_back","","",64],[10,"rev","","",64],[10,"clone","","",65],[10,"clone_from","","",65],[10,"next","","",65],[10,"size_hint","","",65],[10,"size_hint","","",65],[10,"chain","","",65],[10,"zip","","",65],[10,"map","","",65],[10,"filter","","",65],[10,"filter_map","","",65],[10,"enumerate","","",65],[10,"peekable","","",65],[10,"skip_while","","",65],[10,"take_while","","",65],[10,"skip","","",65],[10,"take","","",65],[10,"scan","","",65],[10,"flat_map","","",65],[10,"fuse","","",65],[10,"inspect","","",65],[10,"by_ref","","",65],[10,"advance","","",65],[10,"collect","","",65],[10,"nth","","",65],[10,"last","","",65],[10,"fold","","",65],[10,"count","","",65],[10,"all","","",65],[10,"any","","",65],[10,"find","","",65],[10,"position","","",65],[10,"max_by","","",65],[10,"min_by","","",65],[10,"next_back","","",65],[10,"rev","","",65],[10,"indexable","","",65],[10,"idx","","",65],[10,"reset_fuse","","Resets the fuse such that the next call to .next() or .next_back() will\ncall the underlying iterator again even if it previously returned None.",65],[10,"next","","",48],[10,"size_hint","","",48],[10,"size_hint","","",48],[10,"chain","","",48],[10,"zip","","",48],[10,"map","","",48],[10,"filter","","",48],[10,"filter_map","","",48],[10,"enumerate","","",48],[10,"peekable","","",48],[10,"skip_while","","",48],[10,"take_while","","",48],[10,"skip","","",48],[10,"take","","",48],[10,"scan","","",48],[10,"flat_map","","",48],[10,"fuse","","",48],[10,"inspect","","",48],[10,"by_ref","","",48],[10,"advance","","",48],[10,"collect","","",48],[10,"nth","","",48],[10,"last","","",48],[10,"fold","","",48],[10,"count","","",48],[10,"all","","",48],[10,"any","","",48],[10,"find","","",48],[10,"position","","",48],[10,"max_by","","",48],[10,"min_by","","",48],[10,"next_back","","",48],[10,"rev","","",48],[10,"indexable","","",48],[10,"idx","","",48],[10,"new","","Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the iterator",66],[10,"next","","",66],[10,"size_hint","","",66],[10,"size_hint","","",66],[10,"chain","","",66],[10,"zip","","",66],[10,"map","","",66],[10,"filter","","",66],[10,"filter_map","","",66],[10,"enumerate","","",66],[10,"peekable","","",66],[10,"skip_while","","",66],[10,"take_while","","",66],[10,"skip","","",66],[10,"take","","",66],[10,"scan","","",66],[10,"flat_map","","",66],[10,"fuse","","",66],[10,"inspect","","",66],[10,"by_ref","","",66],[10,"advance","","",66],[10,"collect","","",66],[10,"nth","","",66],[10,"last","","",66],[10,"fold","","",66],[10,"count","","",66],[10,"all","","",66],[10,"any","","",66],[10,"find","","",66],[10,"position","","",66],[10,"max_by","","",66],[10,"min_by","","",66],[10,"clone","","",67],[10,"clone_from","","",67],[10,"next","","",67],[10,"size_hint","","",67],[10,"size_hint","","",67],[10,"chain","","",67],[10,"zip","","",67],[10,"map","","",67],[10,"filter","","",67],[10,"filter_map","","",67],[10,"enumerate","","",67],[10,"peekable","","",67],[10,"skip_while","","",67],[10,"take_while","","",67],[10,"skip","","",67],[10,"take","","",67],[10,"scan","","",67],[10,"flat_map","","",67],[10,"fuse","","",67],[10,"inspect","","",67],[10,"by_ref","","",67],[10,"advance","","",67],[10,"collect","","",67],[10,"nth","","",67],[10,"last","","",67],[10,"fold","","",67],[10,"count","","",67],[10,"all","","",67],[10,"any","","",67],[10,"find","","",67],[10,"position","","",67],[10,"max_by","","",67],[10,"min_by","","",67],[10,"clone","","",68],[10,"clone_from","","",68],[10,"next","","",68],[10,"size_hint","","",68],[10,"size_hint","","",68],[10,"chain","","",68],[10,"zip","","",68],[10,"map","","",68],[10,"filter","","",68],[10,"filter_map","","",68],[10,"enumerate","","",68],[10,"peekable","","",68],[10,"skip_while","","",68],[10,"take_while","","",68],[10,"skip","","",68],[10,"take","","",68],[10,"scan","","",68],[10,"flat_map","","",68],[10,"fuse","","",68],[10,"inspect","","",68],[10,"by_ref","","",68],[10,"advance","","",68],[10,"collect","","",68],[10,"nth","","",68],[10,"last","","",68],[10,"fold","","",68],[10,"count","","",68],[10,"all","","",68],[10,"any","","",68],[10,"find","","",68],[10,"position","","",68],[10,"max_by","","",68],[10,"min_by","","",68],[10,"next_back","","",68],[10,"rev","","",68],[10,"clone","","",69],[10,"clone_from","","",69],[10,"next","","",69],[10,"size_hint","","",69],[10,"size_hint","","",69],[10,"chain","","",69],[10,"zip","","",69],[10,"map","","",69],[10,"filter","","",69],[10,"filter_map","","",69],[10,"enumerate","","",69],[10,"peekable","","",69],[10,"skip_while","","",69],[10,"take_while","","",69],[10,"skip","","",69],[10,"take","","",69],[10,"scan","","",69],[10,"flat_map","","",69],[10,"fuse","","",69],[10,"inspect","","",69],[10,"by_ref","","",69],[10,"advance","","",69],[10,"collect","","",69],[10,"nth","","",69],[10,"last","","",69],[10,"fold","","",69],[10,"count","","",69],[10,"all","","",69],[10,"any","","",69],[10,"find","","",69],[10,"position","","",69],[10,"max_by","","",69],[10,"min_by","","",69],[10,"next_back","","",69],[10,"rev","","",69],[10,"clone","","",70],[10,"clone_from","","",70],[10,"next","","",70],[10,"size_hint","","",70],[10,"chain","","",70],[10,"zip","","",70],[10,"map","","",70],[10,"filter","","",70],[10,"filter_map","","",70],[10,"enumerate","","",70],[10,"peekable","","",70],[10,"skip_while","","",70],[10,"take_while","","",70],[10,"skip","","",70],[10,"take","","",70],[10,"scan","","",70],[10,"flat_map","","",70],[10,"fuse","","",70],[10,"inspect","","",70],[10,"by_ref","","",70],[10,"advance","","",70],[10,"collect","","",70],[10,"nth","","",70],[10,"last","","",70],[10,"fold","","",70],[10,"count","","",70],[10,"all","","",70],[10,"any","","",70],[10,"find","","",70],[10,"position","","",70],[10,"max_by","","",70],[10,"min_by","","",70],[10,"clone","","",71],[10,"clone_from","","",71],[10,"next","","",71],[10,"size_hint","","",71],[10,"chain","","",71],[10,"zip","","",71],[10,"map","","",71],[10,"filter","","",71],[10,"filter_map","","",71],[10,"enumerate","","",71],[10,"peekable","","",71],[10,"skip_while","","",71],[10,"take_while","","",71],[10,"skip","","",71],[10,"take","","",71],[10,"scan","","",71],[10,"flat_map","","",71],[10,"fuse","","",71],[10,"inspect","","",71],[10,"by_ref","","",71],[10,"advance","","",71],[10,"collect","","",71],[10,"nth","","",71],[10,"last","","",71],[10,"fold","","",71],[10,"count","","",71],[10,"all","","",71],[10,"any","","",71],[10,"find","","",71],[10,"position","","",71],[10,"max_by","","",71],[10,"min_by","","",71],[10,"clone","","",72],[10,"clone_from","","",72],[10,"new","","Create a new `Repeat` that endlessly repeats the element `elt`.",72],[10,"next","","",72],[10,"size_hint","","",72],[10,"size_hint","","",72],[10,"chain","","",72],[10,"zip","","",72],[10,"map","","",72],[10,"filter","","",72],[10,"filter_map","","",72],[10,"enumerate","","",72],[10,"peekable","","",72],[10,"skip_while","","",72],[10,"take_while","","",72],[10,"skip","","",72],[10,"take","","",72],[10,"scan","","",72],[10,"flat_map","","",72],[10,"fuse","","",72],[10,"inspect","","",72],[10,"by_ref","","",72],[10,"advance","","",72],[10,"collect","","",72],[10,"nth","","",72],[10,"last","","",72],[10,"fold","","",72],[10,"count","","",72],[10,"all","","",72],[10,"any","","",72],[10,"find","","",72],[10,"position","","",72],[10,"max_by","","",72],[10,"min_by","","",72],[10,"next_back","","",72],[10,"rev","","",72],[10,"indexable","","",72],[10,"idx","","",72],[10,"fmt","core::option","",23],[10,"cmp","","",23],[10,"assert_receiver_is_total_eq","","",23],[10,"partial_cmp","","",23],[10,"lt","","",23],[10,"le","","",23],[10,"gt","","",23],[10,"ge","","",23],[10,"lt","","",23],[10,"le","","",23],[10,"gt","","",23],[10,"ge","","",23],[10,"eq","","",23],[10,"ne","","",23],[10,"ne","","",23],[10,"clone","","",23],[10,"clone_from","","",23],[10,"as_slice","","Convert from `Option<T>` to `&[T]` (without copying)",23],[10,"default","","",23],[10,"clone","","",73],[10,"clone_from","","",73],[10,"next","","",73],[10,"size_hint","","",73],[10,"size_hint","","",73],[10,"chain","","",73],[10,"zip","","",73],[10,"map","","",73],[10,"filter","","",73],[10,"filter_map","","",73],[10,"enumerate","","",73],[10,"peekable","","",73],[10,"skip_while","","",73],[10,"take_while","","",73],[10,"skip","","",73],[10,"take","","",73],[10,"scan","","",73],[10,"flat_map","","",73],[10,"fuse","","",73],[10,"inspect","","",73],[10,"by_ref","","",73],[10,"advance","","",73],[10,"collect","","",73],[10,"nth","","",73],[10,"last","","",73],[10,"fold","","",73],[10,"count","","",73],[10,"all","","",73],[10,"any","","",73],[10,"find","","",73],[10,"position","","",73],[10,"max_by","","",73],[10,"min_by","","",73],[10,"next_back","","",73],[10,"rev","","",73],[10,"rposition","","",73],[10,"len","","",73],[10,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",23],[10,"fmt","core::result","",74],[10,"cmp","","",74],[10,"assert_receiver_is_total_eq","","",74],[10,"partial_cmp","","",74],[10,"lt","","",74],[10,"le","","",74],[10,"gt","","",74],[10,"ge","","",74],[10,"lt","","",74],[10,"le","","",74],[10,"gt","","",74],[10,"ge","","",74],[10,"eq","","",74],[10,"ne","","",74],[10,"ne","","",74],[10,"clone","","",74],[10,"clone_from","","",74],[10,"is_ok","","Returns true if the result is `Ok`",74],[10,"is_err","","Returns true if the result is `Err`",74],[10,"ok","","Convert from `Result<T, E>` to `Option<T>`",74],[10,"err","","Convert from `Result<T, E>` to `Option<E>`",74],[10,"as_ref","","Convert from `Result<T, E>` to `Result<&T, &E>`",74],[10,"as_mut","","Convert from `Result<T, E>` to `Result<&mut T, &mut E>`",74],[10,"as_mut_slice","","Convert from `Result<T, E>` to `&mut [T]` (without copying)",74],[10,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",74],[10,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",74],[10,"iter","","Returns an iterator over the possibly contained value.",74],[10,"mut_iter","","Deprecated: use `iter_mut`.",74],[10,"iter_mut","","Returns a mutable iterator over the possibly contained value.",74],[10,"move_iter","","Deprecated: `use into_iter`.",74],[10,"into_iter","","Returns a consuming iterator over the possibly contained value.",74],[10,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",74],[10,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",74],[10,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",74],[10,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",74],[10,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",74],[10,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",74],[10,"unwrap_or_handle","","Deprecated name for `unwrap_or_else()`.",74],[10,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",74],[10,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",74],[10,"as_slice","","Convert from `Result<T, E>` to `&[T]` (without copying)",74],[10,"clone","","",75],[10,"clone_from","","",75],[10,"next","","",75],[10,"size_hint","","",75],[10,"size_hint","","",75],[10,"chain","","",75],[10,"zip","","",75],[10,"map","","",75],[10,"filter","","",75],[10,"filter_map","","",75],[10,"enumerate","","",75],[10,"peekable","","",75],[10,"skip_while","","",75],[10,"take_while","","",75],[10,"skip","","",75],[10,"take","","",75],[10,"scan","","",75],[10,"flat_map","","",75],[10,"fuse","","",75],[10,"inspect","","",75],[10,"by_ref","","",75],[10,"advance","","",75],[10,"collect","","",75],[10,"nth","","",75],[10,"last","","",75],[10,"fold","","",75],[10,"count","","",75],[10,"all","","",75],[10,"any","","",75],[10,"find","","",75],[10,"position","","",75],[10,"max_by","","",75],[10,"min_by","","",75],[10,"next_back","","",75],[10,"rev","","",75],[10,"rposition","","",75],[10,"len","","",75],[10,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",74],[10,"fmt","core::simd","",76],[10,"fmt","","",77],[10,"fmt","","",78],[10,"fmt","","",79],[10,"fmt","","",80],[10,"fmt","","",81],[10,"fmt","","",82],[10,"fmt","","",83],[10,"fmt","","",84],[10,"fmt","","",85],[10,"next","core::slice","",86],[10,"size_hint","","",86],[10,"size_hint","","",86],[10,"chain","","",86],[10,"zip","","",86],[10,"map","","",86],[10,"filter","","",86],[10,"filter_map","","",86],[10,"enumerate","","",86],[10,"peekable","","",86],[10,"skip_while","","",86],[10,"take_while","","",86],[10,"skip","","",86],[10,"take","","",86],[10,"scan","","",86],[10,"flat_map","","",86],[10,"fuse","","",86],[10,"inspect","","",86],[10,"by_ref","","",86],[10,"advance","","",86],[10,"collect","","",86],[10,"nth","","",86],[10,"last","","",86],[10,"fold","","",86],[10,"count","","",86],[10,"all","","",86],[10,"any","","",86],[10,"find","","",86],[10,"position","","",86],[10,"max_by","","",86],[10,"min_by","","",86],[10,"next_back","","",86],[10,"rev","","",86],[10,"rposition","","",86],[10,"len","","",86],[10,"clone","","",86],[10,"clone_from","","",86],[10,"indexable","","",86],[10,"idx","","",86],[10,"next","","",87],[10,"size_hint","","",87],[10,"size_hint","","",87],[10,"chain","","",87],[10,"zip","","",87],[10,"map","","",87],[10,"filter","","",87],[10,"filter_map","","",87],[10,"enumerate","","",87],[10,"peekable","","",87],[10,"skip_while","","",87],[10,"take_while","","",87],[10,"skip","","",87],[10,"take","","",87],[10,"scan","","",87],[10,"flat_map","","",87],[10,"fuse","","",87],[10,"inspect","","",87],[10,"by_ref","","",87],[10,"advance","","",87],[10,"collect","","",87],[10,"nth","","",87],[10,"last","","",87],[10,"fold","","",87],[10,"count","","",87],[10,"all","","",87],[10,"any","","",87],[10,"find","","",87],[10,"position","","",87],[10,"max_by","","",87],[10,"min_by","","",87],[10,"next_back","","",87],[10,"rev","","",87],[10,"rposition","","",87],[10,"len","","",87],[10,"next","","",88],[10,"size_hint","","",88],[10,"size_hint","","",88],[10,"chain","","",88],[10,"zip","","",88],[10,"map","","",88],[10,"filter","","",88],[10,"filter_map","","",88],[10,"enumerate","","",88],[10,"peekable","","",88],[10,"skip_while","","",88],[10,"take_while","","",88],[10,"skip","","",88],[10,"take","","",88],[10,"scan","","",88],[10,"flat_map","","",88],[10,"fuse","","",88],[10,"inspect","","",88],[10,"by_ref","","",88],[10,"advance","","",88],[10,"collect","","",88],[10,"nth","","",88],[10,"last","","",88],[10,"fold","","",88],[10,"count","","",88],[10,"all","","",88],[10,"any","","",88],[10,"find","","",88],[10,"position","","",88],[10,"max_by","","",88],[10,"min_by","","",88],[10,"next_back","","",88],[10,"rev","","",88],[10,"next","","",89],[10,"size_hint","","",89],[10,"size_hint","","",89],[10,"chain","","",89],[10,"zip","","",89],[10,"map","","",89],[10,"filter","","",89],[10,"filter_map","","",89],[10,"enumerate","","",89],[10,"peekable","","",89],[10,"skip_while","","",89],[10,"take_while","","",89],[10,"skip","","",89],[10,"take","","",89],[10,"scan","","",89],[10,"flat_map","","",89],[10,"fuse","","",89],[10,"inspect","","",89],[10,"by_ref","","",89],[10,"advance","","",89],[10,"collect","","",89],[10,"nth","","",89],[10,"last","","",89],[10,"fold","","",89],[10,"count","","",89],[10,"all","","",89],[10,"any","","",89],[10,"find","","",89],[10,"position","","",89],[10,"max_by","","",89],[10,"min_by","","",89],[10,"next_back","","",89],[10,"rev","","",89],[10,"next","","",90],[10,"size_hint","","",90],[10,"size_hint","","",90],[10,"chain","","",90],[10,"zip","","",90],[10,"map","","",90],[10,"filter","","",90],[10,"filter_map","","",90],[10,"enumerate","","",90],[10,"peekable","","",90],[10,"skip_while","","",90],[10,"take_while","","",90],[10,"skip","","",90],[10,"take","","",90],[10,"scan","","",90],[10,"flat_map","","",90],[10,"fuse","","",90],[10,"inspect","","",90],[10,"by_ref","","",90],[10,"advance","","",90],[10,"collect","","",90],[10,"nth","","",90],[10,"last","","",90],[10,"fold","","",90],[10,"count","","",90],[10,"all","","",90],[10,"any","","",90],[10,"find","","",90],[10,"position","","",90],[10,"max_by","","",90],[10,"min_by","","",90],[10,"clone","","",91],[10,"clone_from","","",91],[10,"next","","",91],[10,"size_hint","","",91],[10,"size_hint","","",91],[10,"chain","","",91],[10,"zip","","",91],[10,"map","","",91],[10,"filter","","",91],[10,"filter_map","","",91],[10,"enumerate","","",91],[10,"peekable","","",91],[10,"skip_while","","",91],[10,"take_while","","",91],[10,"skip","","",91],[10,"take","","",91],[10,"scan","","",91],[10,"flat_map","","",91],[10,"fuse","","",91],[10,"inspect","","",91],[10,"by_ref","","",91],[10,"advance","","",91],[10,"collect","","",91],[10,"nth","","",91],[10,"last","","",91],[10,"fold","","",91],[10,"count","","",91],[10,"all","","",91],[10,"any","","",91],[10,"find","","",91],[10,"position","","",91],[10,"max_by","","",91],[10,"min_by","","",91],[10,"clone","","",92],[10,"clone_from","","",92],[10,"next","","",92],[10,"size_hint","","",92],[10,"size_hint","","",92],[10,"chain","","",92],[10,"zip","","",92],[10,"map","","",92],[10,"filter","","",92],[10,"filter_map","","",92],[10,"enumerate","","",92],[10,"peekable","","",92],[10,"skip_while","","",92],[10,"take_while","","",92],[10,"skip","","",92],[10,"take","","",92],[10,"scan","","",92],[10,"flat_map","","",92],[10,"fuse","","",92],[10,"inspect","","",92],[10,"by_ref","","",92],[10,"advance","","",92],[10,"collect","","",92],[10,"nth","","",92],[10,"last","","",92],[10,"fold","","",92],[10,"count","","",92],[10,"all","","",92],[10,"any","","",92],[10,"find","","",92],[10,"position","","",92],[10,"max_by","","",92],[10,"min_by","","",92],[10,"next_back","","",92],[10,"rev","","",92],[10,"indexable","","",92],[10,"idx","","",92],[10,"next","","",93],[10,"size_hint","","",93],[10,"size_hint","","",93],[10,"chain","","",93],[10,"zip","","",93],[10,"map","","",93],[10,"filter","","",93],[10,"filter_map","","",93],[10,"enumerate","","",93],[10,"peekable","","",93],[10,"skip_while","","",93],[10,"take_while","","",93],[10,"skip","","",93],[10,"take","","",93],[10,"scan","","",93],[10,"flat_map","","",93],[10,"fuse","","",93],[10,"inspect","","",93],[10,"by_ref","","",93],[10,"advance","","",93],[10,"collect","","",93],[10,"nth","","",93],[10,"last","","",93],[10,"fold","","",93],[10,"count","","",93],[10,"all","","",93],[10,"any","","",93],[10,"find","","",93],[10,"position","","",93],[10,"max_by","","",93],[10,"min_by","","",93],[10,"next_back","","",93],[10,"rev","","",93],[10,"fmt","","",94],[10,"eq","","",94],[10,"ne","","",94],[10,"ne","","",94],[10,"found","","Converts a `Found` to `Some`, `NotFound` to `None`.\nSimilar to `Result::ok`.",94],[10,"not_found","","Convert a `Found` to `None`, `NotFound` to `Some`.\nSimilar to `Result::err`.",94],[10,"clone","core::str","",95],[10,"clone_from","","",95],[10,"next","","",95],[10,"size_hint","","",95],[10,"size_hint","","",95],[10,"chain","","",95],[10,"zip","","",95],[10,"map","","",95],[10,"filter","","",95],[10,"filter_map","","",95],[10,"enumerate","","",95],[10,"peekable","","",95],[10,"skip_while","","",95],[10,"take_while","","",95],[10,"skip","","",95],[10,"take","","",95],[10,"scan","","",95],[10,"flat_map","","",95],[10,"fuse","","",95],[10,"inspect","","",95],[10,"by_ref","","",95],[10,"advance","","",95],[10,"collect","","",95],[10,"nth","","",95],[10,"last","","",95],[10,"fold","","",95],[10,"count","","",95],[10,"all","","",95],[10,"any","","",95],[10,"find","","",95],[10,"position","","",95],[10,"max_by","","",95],[10,"min_by","","",95],[10,"next_back","","",95],[10,"rev","","",95],[10,"clone","","",96],[10,"clone_from","","",96],[10,"next","","",96],[10,"size_hint","","",96],[10,"size_hint","","",96],[10,"chain","","",96],[10,"zip","","",96],[10,"map","","",96],[10,"filter","","",96],[10,"filter_map","","",96],[10,"enumerate","","",96],[10,"peekable","","",96],[10,"skip_while","","",96],[10,"take_while","","",96],[10,"skip","","",96],[10,"take","","",96],[10,"scan","","",96],[10,"flat_map","","",96],[10,"fuse","","",96],[10,"inspect","","",96],[10,"by_ref","","",96],[10,"advance","","",96],[10,"collect","","",96],[10,"nth","","",96],[10,"last","","",96],[10,"fold","","",96],[10,"count","","",96],[10,"all","","",96],[10,"any","","",96],[10,"find","","",96],[10,"position","","",96],[10,"max_by","","",96],[10,"min_by","","",96],[10,"next_back","","",96],[10,"rev","","",96],[10,"clone","","",97],[10,"clone_from","","",97],[10,"clone","","",98],[10,"clone_from","","",98],[10,"next","","",97],[10,"size_hint","","",97],[10,"chain","","",97],[10,"zip","","",97],[10,"map","","",97],[10,"filter","","",97],[10,"filter_map","","",97],[10,"enumerate","","",97],[10,"peekable","","",97],[10,"skip_while","","",97],[10,"take_while","","",97],[10,"skip","","",97],[10,"take","","",97],[10,"scan","","",97],[10,"flat_map","","",97],[10,"fuse","","",97],[10,"inspect","","",97],[10,"by_ref","","",97],[10,"advance","","",97],[10,"collect","","",97],[10,"nth","","",97],[10,"last","","",97],[10,"fold","","",97],[10,"count","","",97],[10,"all","","",97],[10,"any","","",97],[10,"find","","",97],[10,"position","","",97],[10,"max_by","","",97],[10,"min_by","","",97],[10,"next_back","","",97],[10,"rev","","",97],[10,"next","","",98],[10,"size_hint","","",98],[10,"chain","","",98],[10,"zip","","",98],[10,"map","","",98],[10,"filter","","",98],[10,"filter_map","","",98],[10,"enumerate","","",98],[10,"peekable","","",98],[10,"skip_while","","",98],[10,"take_while","","",98],[10,"skip","","",98],[10,"take","","",98],[10,"scan","","",98],[10,"flat_map","","",98],[10,"fuse","","",98],[10,"inspect","","",98],[10,"by_ref","","",98],[10,"advance","","",98],[10,"collect","","",98],[10,"nth","","",98],[10,"last","","",98],[10,"fold","","",98],[10,"count","","",98],[10,"all","","",98],[10,"any","","",98],[10,"find","","",98],[10,"position","","",98],[10,"max_by","","",98],[10,"min_by","","",98],[10,"clone","","",99],[10,"clone_from","","",99],[10,"clone","","",100],[10,"clone_from","","",100],[10,"clone","","",101],[10,"clone_from","","",101],[10,"clone","","",102],[10,"clone_from","","",102],[10,"clone","","",103],[10,"clone_from","","",103],[10,"next","","",102],[10,"size_hint","","",102],[10,"chain","","",102],[10,"zip","","",102],[10,"map","","",102],[10,"filter","","",102],[10,"filter_map","","",102],[10,"enumerate","","",102],[10,"peekable","","",102],[10,"skip_while","","",102],[10,"take_while","","",102],[10,"skip","","",102],[10,"take","","",102],[10,"scan","","",102],[10,"flat_map","","",102],[10,"fuse","","",102],[10,"inspect","","",102],[10,"by_ref","","",102],[10,"advance","","",102],[10,"collect","","",102],[10,"nth","","",102],[10,"last","","",102],[10,"fold","","",102],[10,"count","","",102],[10,"all","","",102],[10,"any","","",102],[10,"find","","",102],[10,"position","","",102],[10,"max_by","","",102],[10,"min_by","","",102],[10,"next","","",103],[10,"size_hint","","",103],[10,"chain","","",103],[10,"zip","","",103],[10,"map","","",103],[10,"filter","","",103],[10,"filter_map","","",103],[10,"enumerate","","",103],[10,"peekable","","",103],[10,"skip_while","","",103],[10,"take_while","","",103],[10,"skip","","",103],[10,"take","","",103],[10,"scan","","",103],[10,"flat_map","","",103],[10,"fuse","","",103],[10,"inspect","","",103],[10,"by_ref","","",103],[10,"advance","","",103],[10,"collect","","",103],[10,"nth","","",103],[10,"last","","",103],[10,"fold","","",103],[10,"count","","",103],[10,"all","","",103],[10,"any","","",103],[10,"find","","",103],[10,"position","","",103],[10,"max_by","","",103],[10,"min_by","","",103],[10,"clone","","",104],[10,"clone_from","","",104],[10,"next","","",104],[10,"size_hint","","",104],[10,"size_hint","","",104],[10,"chain","","",104],[10,"zip","","",104],[10,"map","","",104],[10,"filter","","",104],[10,"filter_map","","",104],[10,"enumerate","","",104],[10,"peekable","","",104],[10,"skip_while","","",104],[10,"take_while","","",104],[10,"skip","","",104],[10,"take","","",104],[10,"scan","","",104],[10,"flat_map","","",104],[10,"fuse","","",104],[10,"inspect","","",104],[10,"by_ref","","",104],[10,"advance","","",104],[10,"collect","","",104],[10,"nth","","",104],[10,"last","","",104],[10,"fold","","",104],[10,"count","","",104],[10,"all","","",104],[10,"any","","",104],[10,"find","","",104],[10,"position","","",104],[10,"max_by","","",104],[10,"min_by","","",104],[10,"clone","","",105],[10,"clone_from","","",105],[10,"fmt","","",106],[10,"clone","","",106],[10,"clone_from","","",106],[10,"assert_receiver_is_total_eq","","",106],[10,"eq","","",106],[10,"ne","","",106],[10,"ne","","",106],[10,"to_char_lossy","","Convert `self` to a `char`, taking `LoneSurrogate`s to the\nreplacement character (U+FFFD).",106],[10,"next","","",105],[10,"size_hint","","",105],[10,"size_hint","","",105],[10,"chain","","",105],[10,"zip","","",105],[10,"map","","",105],[10,"filter","","",105],[10,"filter_map","","",105],[10,"enumerate","","",105],[10,"peekable","","",105],[10,"skip_while","","",105],[10,"take_while","","",105],[10,"skip","","",105],[10,"take","","",105],[10,"scan","","",105],[10,"flat_map","","",105],[10,"fuse","","",105],[10,"inspect","","",105],[10,"by_ref","","",105],[10,"advance","","",105],[10,"collect","","",105],[10,"nth","","",105],[10,"last","","",105],[10,"fold","","",105],[10,"count","","",105],[10,"all","","",105],[10,"any","","",105],[10,"find","","",105],[10,"position","","",105],[10,"max_by","","",105],[10,"min_by","","",105],[10,"eq","core::fmt::num","",107],[10,"ne","","",107],[10,"ne","","",107],[10,"clone","","",107],[10,"clone_from","","",107],[10,"eq","","",108],[10,"ne","","",108],[10,"ne","","",108],[10,"clone","","",108],[10,"clone_from","","",108],[10,"eq","","",109],[10,"ne","","",109],[10,"ne","","",109],[10,"clone","","",109],[10,"clone_from","","",109],[10,"eq","","",110],[10,"ne","","",110],[10,"ne","","",110],[10,"clone","","",110],[10,"clone_from","","",110],[10,"eq","","",111],[10,"ne","","",111],[10,"ne","","",111],[10,"clone","","",111],[10,"clone_from","","",111],[10,"eq","","",112],[10,"ne","","",112],[10,"ne","","",112],[10,"clone","","",112],[10,"clone_from","","",112],[10,"fmt","","",113],[10,"fmt","","",113],[10,"fmt","","",113],[10,"fmt","","",113],[10,"fmt","","",113],[10,"fmt","","",113],[10,"fmt","","",113],[10,"fmt","","",113],[10,"fmt","","",113],[10,"fmt","","",113],[10,"eq","core::fmt::rt","",114],[10,"ne","","",114],[10,"ne","","",114],[10,"fmt","core::fmt","",115],[10,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a byte-array. The byte-array should *not* contain the sign\nfor the integer, that will be added by this method.",116],[10,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",116],[10,"write","","Writes some data to the underlying buffer contained within this\nformatter.",116],[10,"write_fmt","","Writes some formatted information into this instance",116],[10,"fmt","core::cell","",41],[10,"fmt","","",43],[10,"fmt","","",44],[6,"Rand","rand","A type that can be randomly generated using an `Rng`."],[9,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",117],[6,"Rng","","A random number generator."],[9,"next_u32","","Return the next random u32.",118],[10,"next_u64","","Return the next random u64.",118],[10,"fill_bytes","","Fill `dest` with random data.",118],[10,"gen","","Return a random value of a `Rand` type.",118],[10,"gen_iter","","Return an iterator which will yield an infinite number of randomly\ngenerated items.",118],[10,"gen_range","","Generate a random value in the range [`low`, `high`). Fails if\n`low >= high`.",118],[10,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",118],[10,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",118],[10,"choose","","Return a random element from `values`.",118],[10,"choose_option","","Deprecated name for `choose()`.",118],[10,"shuffle","","Shuffle a mutable slice in place.",118],[6,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times."],[9,"reseed","","Reseed an RNG with the given seed.",119],[9,"from_seed","","Create a new RNG with the given seed.",119],[10,"next","","",120],[10,"next","","",121],[10,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",122],[10,"next_u32","","",122],[10,"reseed","","Reseed an XorShiftRng. This will fail if `seed` is entirely 0.",122],[10,"from_seed","","Create a new XorShiftRng. This will fail if `seed` is entirely 0.",122],[10,"rand","","",122]],"paths":[[1,"Weighted"],[6,"SampleRange"],[1,"Range"],[1,"Gamma"],[1,"ChiSquared"],[1,"FisherF"],[1,"StudentT"],[1,"StandardNormal"],[1,"Normal"],[1,"LogNormal"],[1,"Exp1"],[1,"Exp"],[6,"Sample"],[6,"IndependentSample"],[1,"RandSample"],[1,"WeightedChoice"],[1,"IsaacRng"],[1,"Isaac64Rng"],[1,"ReseedingRng"],[6,"Reseeder"],[1,"ReseedWithDefault"],[1,"Open01"],[1,"Closed01"],[2,"Option"],[2,"FPCategory"],[1,"TypeId"],[1,"CovariantType"],[1,"ContravariantType"],[1,"InvariantType"],[1,"CovariantLifetime"],[1,"ContravariantLifetime"],[1,"InvariantLifetime"],[1,"NoSend"],[1,"NoCopy"],[1,"NoSync"],[1,"Managed"],[2,"Ordering"],[1,"AtomicBool"],[1,"AtomicInt"],[1,"AtomicUint"],[1,"AtomicPtr"],[1,"Cell"],[1,"RefCell"],[1,"Ref"],[1,"RefMut"],[1,"UnsafeCell"],[1,"Finallyalizer"],[1,"Enumerate"],[1,"Inspect"],[1,"Rev"],[1,"Map"],[1,"Zip"],[1,"ByRef"],[2,"MinMaxResult"],[1,"Cycle"],[1,"Chain"],[1,"Filter"],[1,"FilterMap"],[1,"Peekable"],[1,"SkipWhile"],[1,"TakeWhile"],[1,"Skip"],[1,"Take"],[1,"Scan"],[1,"FlatMap"],[1,"Fuse"],[1,"Unfold"],[1,"Counter"],[1,"Range"],[1,"RangeInclusive"],[1,"RangeStep"],[1,"RangeStepInclusive"],[1,"Repeat"],[1,"Item"],[2,"Result"],[1,"Item"],[1,"i8x16"],[1,"i16x8"],[1,"i32x4"],[1,"i64x2"],[1,"u8x16"],[1,"u16x8"],[1,"u32x4"],[1,"u64x2"],[1,"f32x4"],[1,"f64x2"],[1,"Items"],[1,"MutItems"],[1,"Splits"],[1,"MutSplits"],[1,"SplitsN"],[1,"Windows"],[1,"Chunks"],[1,"MutChunks"],[2,"BinarySearchResult"],[1,"Chars"],[1,"CharOffsets"],[1,"CharSplits"],[1,"CharSplitsN"],[1,"NaiveSearcher"],[1,"TwoWaySearcher"],[2,"Searcher"],[1,"MatchIndices"],[1,"StrSplits"],[1,"Utf16CodeUnits"],[1,"Utf16Items"],[2,"Utf16Item"],[1,"Binary"],[1,"Octal"],[1,"Decimal"],[1,"LowerHex"],[1,"UpperHex"],[1,"Radix"],[1,"RadixFmt"],[2,"Alignment"],[1,"Arguments"],[1,"Formatter"],[6,"Rand"],[6,"Rng"],[6,"SeedableRng"],[1,"Generator"],[1,"AsciiGenerator"],[1,"XorShiftRng"]]};

searchIndex['time'] = {"items":[[0,"","time","Simple time handling."],[1,"Timespec","","A record specifying a time value in seconds and nanoseconds."],[11,"sec","","",0],[11,"nsec","","",0],[1,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on),\nalso called a broken-down time value."],[11,"tm_sec","","Seconds after the minute - [0, 60]",1],[11,"tm_min","","Minutes after the hour - [0, 59]",1],[11,"tm_hour","","Hours after midnight - [0, 23]",1],[11,"tm_mday","","Day of the month - [1, 31]",1],[11,"tm_mon","","Months since January - [0, 11]",1],[11,"tm_year","","Years since 1900",1],[11,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1],[11,"tm_yday","","Days since January 1 - [0, 365]",1],[11,"tm_isdst","","Daylight Saving Time flag.",1],[11,"tm_gmtoff","","Identifies the time zone that was used to compute this broken-down time value, including any\nadjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example,\nfor U.S. Pacific Daylight Time, the value is -7*60*60 = -25200.",1],[11,"tm_nsec","","Nanoseconds after the second - [0, 10<sup>9</sup> - 1]",1],[3,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z."],[3,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch."],[3,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch."],[3,"tzset","",""],[3,"empty_tm","",""],[3,"at_utc","","Returns the specified time in UTC"],[3,"now_utc","","Returns the current time in UTC"],[3,"at","","Returns the specified time in the local timezone"],[3,"now","","Returns the current time in the local timezone"],[3,"strptime","","Parses the time from the string according to the format string."],[3,"strftime","","Formats the time according to the format string."],[10,"fmt","","",0],[10,"decode","","",0],[10,"encode","","",0],[10,"cmp","","",0],[10,"partial_cmp","","",0],[10,"lt","","",0],[10,"le","","",0],[10,"gt","","",0],[10,"ge","","",0],[10,"eq","","",0],[10,"ne","","",0],[10,"clone","","",0],[10,"new","","",0],[10,"add","","",0],[10,"sub","","",0],[10,"fmt","","",1],[10,"eq","","",1],[10,"ne","","",1],[10,"clone","","",1],[10,"to_timespec","","Convert time to the seconds from January 1, 1970",1],[10,"to_local","","Convert time to the local timezone",1],[10,"to_utc","","Convert time to the UTC",1],[10,"ctime","","Returns a time string formatted according to the `asctime` format in ISO\nC, in the local timezone.",1],[10,"asctime","","Returns a time string formatted according to the `asctime` format in ISO\nC.",1],[10,"strftime","","Formats the time according to the format string.",1],[10,"rfc822","","Returns a time string formatted according to RFC 822.",1],[10,"rfc822z","","Returns a time string formatted according to RFC 822 with Zulu time.",1],[10,"rfc3339","","Returns a time string formatted according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1]],"paths":[[1,"Timespec"],[1,"Tm"]]};

searchIndex['test'] = {"items":[[0,"","test","Support code for rustc's built in unit-test and micro-benchmarking\nframework."],[1,"Bencher","","Manager of the benchmarking runs."],[11,"bytes","","",0],[1,"TestDesc","",""],[11,"name","","",1],[11,"ignore","","",1],[11,"should_fail","","",1],[1,"TestDescAndFn","",""],[11,"desc","","",2],[11,"testfn","","",2],[1,"Metric","",""],[1,"MetricMap","",""],[1,"TestOpts","",""],[11,"filter","","",3],[11,"run_ignored","","",3],[11,"run_tests","","",3],[11,"run_benchmarks","","",3],[11,"ratchet_metrics","","",3],[11,"ratchet_noise_percent","","",3],[11,"save_metrics","","",3],[11,"test_shard","","",3],[11,"logfile","","",3],[11,"nocapture","","",3],[11,"color","","",3],[1,"BenchSamples","",""],[2,"TestName","",""],[12,"StaticTestName","","",4],[12,"DynTestName","","",4],[2,"TestFn","",""],[12,"StaticTestFn","","",5],[12,"StaticBenchFn","","",5],[12,"StaticMetricFn","","",5],[12,"DynTestFn","","",5],[12,"DynMetricFn","","",5],[12,"DynBenchFn","","",5],[2,"MetricChange","","Analysis of a single change in metric"],[12,"LikelyNoise","","",6],[12,"MetricAdded","","",6],[12,"MetricRemoved","","",6],[12,"Improvement","","",6],[12,"Regression","","",6],[2,"ColorConfig","",""],[12,"AutoColor","","",7],[12,"AlwaysColor","","",7],[12,"NeverColor","","",7],[2,"TestResult","",""],[12,"TrOk","","",8],[12,"TrFailed","","",8],[12,"TrIgnored","","",8],[12,"TrMetrics","","",8],[12,"TrBench","","",8],[3,"test_main","",""],[3,"test_main_static","",""],[3,"parse_opts","",""],[3,"opt_shard","",""],[3,"fmt_metrics","",""],[3,"fmt_bench_samples","",""],[3,"run_tests_console","",""],[3,"filter_tests","",""],[3,"run_test","",""],[3,"black_box","","A function that is opaque to the optimizer, to allow benchmarks to\npretend to use outputs to assist in avoiding dead-code\nelimination."],[0,"test","",""],[0,"stats","",""],[1,"Summary","test::stats","Extracted collection of all the summary statistics of a sample set."],[11,"sum","","",9],[11,"min","","",9],[11,"max","","",9],[11,"mean","","",9],[11,"median","","",9],[11,"var","","",9],[11,"std_dev","","",9],[11,"std_dev_pct","","",9],[11,"median_abs_dev","","",9],[11,"median_abs_dev_pct","","",9],[11,"quartiles","","",9],[11,"iqr","","",9],[3,"winsorize","","Winsorize a set of samples, replacing values above the `100-pct` percentile and below the `pct`\npercentile with those percentiles themselves. This is a way of minimizing the effect of\noutliers, at the cost of biasing the sample. It differs from trimming in that it does not\nchange the number of samples, just changes the values of those that are outliers."],[3,"write_5_number_summary","","Render writes the min, max and quartiles of the provided `Summary` to the provided `Writer`."],[3,"write_boxplot","","Render a boxplot to the provided writer. The boxplot shows the min, max and quartiles of the\nprovided `Summary` (thus includes the mean) and is scaled to display within the range of the\nnearest multiple-of-a-power-of-ten above and below the min and max of possible values, and\ntarget `width_hint` characters of display (though it will be wider if necessary)."],[3,"freq_count","","Returns a HashMap with the number of occurrences of every element in the\nsequence that the iterator exposes."],[6,"Stats","","Trait that provides simple descriptive statistics on a univariate set of numeric samples."],[9,"sum","","Sum of the samples.",10],[9,"min","","Minimum value of the samples.",10],[9,"max","","Maximum value of the samples.",10],[9,"mean","","Arithmetic mean (average) of the samples: sum divided by sample-count.",10],[9,"median","","Median of the samples: value separating the lower half of the samples from the higher half.\nEqual to `self.percentile(50.0)`.",10],[9,"var","","Variance of the samples: bias-corrected mean of the squares of the differences of each\nsample from the sample mean. Note that this calculates the _sample variance_ rather than the\npopulation variance, which is assumed to be unknown. It therefore corrects the `(n-1)/n`\nbias that would appear if we calculated a population variance, by dividing by `(n-1)` rather\nthan `n`.",10],[9,"std_dev","","Standard deviation: the square root of the sample variance.",10],[9,"std_dev_pct","","Standard deviation as a percent of the mean value. See `std_dev` and `mean`.",10],[9,"median_abs_dev","","Scaled median of the absolute deviations of each sample from the sample median. This is a\nrobust (distribution-agnostic) estimator of sample variability. Use this in preference to\n`std_dev` if you cannot assume your sample is normally distributed. Note that this is scaled\nby the constant `1.4826` to allow its use as a consistent estimator for the standard\ndeviation.",10],[9,"median_abs_dev_pct","","Median absolute deviation as a percent of the median. See `median_abs_dev` and `median`.",10],[9,"percentile","","Percentile: the value below which `pct` percent of the values in `self` fall. For example,\npercentile(95.0) will return the value `v` such that 95% of the samples `s` in `self`\nsatisfy `s <= v`.",10],[9,"quartiles","","Quartiles of the sample: three values that divide the sample into four equal groups, each\nwith 1/4 of the data. The middle value is the median. See `median` and `percentile`. This\nfunction may calculate the 3 quartiles more efficiently than 3 calls to `percentile`, but\nis otherwise equivalent.",10],[9,"iqr","","Inter-quartile range: the difference between the 25th percentile (1st quartile) and the 75th\npercentile (3rd quartile). See `quartiles`.",10],[10,"eq","","",9],[10,"ne","","",9],[10,"clone","","",9],[10,"new","","Construct a new summary of a sample set.",9],[0,"bench","test",""],[3,"benchmark","test::bench",""],[4,"MetricDiff","test",""],[4,"OptRes","","Result of parsing the options."],[4,"MonitorMsg","",""],[6,"TDynBenchFn","","Represents a benchmark function."],[9,"run","","",11],[10,"hash","","",4],[10,"eq","","",4],[10,"ne","","",4],[10,"clone","","",4],[10,"fmt","","",4],[10,"fmt","","",5],[10,"hash","","",1],[10,"eq","","",1],[10,"ne","","",1],[10,"fmt","","",1],[10,"clone","","",1],[10,"fmt","","",2],[10,"fmt","","",12],[10,"eq","","",12],[10,"ne","","",12],[10,"decode","","",12],[10,"encode","","",12],[10,"clone","","",12],[10,"new","","",12],[10,"eq","","",13],[10,"ne","","",13],[10,"clone","","",13],[10,"fmt","","",6],[10,"eq","","",6],[10,"ne","","",6],[10,"eq","","",14],[10,"ne","","",14],[10,"clone","","",14],[10,"eq","","",8],[10,"ne","","",8],[10,"clone","","",8],[10,"to_json","","",12],[10,"new","","",13],[10,"load","","Load MetricDiff from a file.",13],[10,"save","","Write MetricDiff to a file.",13],[10,"compare_to_old","","Compare against another MetricMap. Optionally compare all\nmeasurements in the maps using the provided `noise_pct` as a\npercentage of each value to consider noise. If `None`, each\nmeasurement's noise threshold is independently chosen as the\nmaximum of that measurement's recorded noise quantity in either\nmap.",13],[10,"insert_metric","","Insert a named `value` (+/- `noise`) metric into the map. The value\nmust be non-negative. The `noise` indicates the uncertainty of the\nmetric, which doubles as the \"noise range\" of acceptable\npairwise-regressions on this named value, when comparing from one\nmetric to the next using `compare_to_old`.",13],[10,"ratchet","","Attempt to \"ratchet\" an external metric file. This involves loading\nmetrics from a metric file (if it exists), comparing against\nthe metrics in `self` using `compare_to_old`, and rewriting the\nfile to contain the metrics in `self` if none of the\n`MetricChange`s are `Regression`. Returns the diff as well\nas a boolean indicating whether the ratchet succeeded.",13],[10,"iter","","Callback for benchmark functions to run in their body.",0],[10,"ns_elapsed","","",0],[10,"ns_per_iter","","",0],[10,"bench_n","","",0],[10,"auto_bench","","",0]],"paths":[[1,"Bencher"],[1,"TestDesc"],[1,"TestDescAndFn"],[1,"TestOpts"],[2,"TestName"],[2,"TestFn"],[2,"MetricChange"],[2,"ColorConfig"],[2,"TestResult"],[1,"Summary"],[6,"Stats"],[6,"TDynBenchFn"],[1,"Metric"],[1,"MetricMap"],[1,"BenchSamples"]]};

searchIndex['num'] = {"items":[[0,"","num","Simple numerics."],[0,"bigint","","A Big integer (signed version: `BigInt`, unsigned version: `BigUint`)."],[1,"BigUint","num::bigint","A big unsigned integer type."],[1,"BigInt","","A big signed integer type."],[2,"Sign","","A Sign is a `BigInt`'s composing element."],[12,"Minus","","",0],[12,"NoSign","","",0],[12,"Plus","","",0],[0,"BigDigit","",""],[3,"from_doublebigdigit","num::bigint::BigDigit","Split one `DoubleBigDigit` into two `BigDigit`s."],[3,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`"],[5,"bits","",""],[5,"base","",""],[4,"BigDigit","num::bigint","A `BigDigit` is a `BigUint`'s composing element."],[4,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`."],[5,"ZERO_BIG_DIGIT","",""],[6,"ToBigUint","","A generic trait for converting a value to a `BigUint`."],[9,"to_biguint","","Converts the value of `self` to a `BigUint`.",1],[6,"ToBigInt","","A generic trait for converting a value to a `BigInt`."],[9,"to_bigint","","Converts the value of `self` to a `BigInt`.",2],[6,"RandBigInt","",""],[9,"gen_biguint","","Generate a random `BigUint` of the given bit size.",3],[9,"gen_bigint","","Generate a random BigInt of the given bit size.",3],[9,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",3],[9,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",3],[9,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",3],[10,"clone","","",4],[10,"eq","","",4],[10,"partial_cmp","","",4],[10,"cmp","","",4],[10,"default","","",4],[10,"hash","","",4],[10,"fmt","","",4],[10,"from_str","","",4],[10,"bitand","","",4],[10,"bitor","","",4],[10,"bitxor","","",4],[10,"shl","","",4],[10,"shr","","",4],[10,"zero","","",4],[10,"is_zero","","",4],[10,"one","","",4],[10,"add","","",4],[10,"sub","","",4],[10,"mul","","",4],[10,"div","","",4],[10,"rem","","",4],[10,"neg","","",4],[10,"checked_add","","",4],[10,"checked_sub","","",4],[10,"checked_mul","","",4],[10,"checked_div","","",4],[10,"div_rem","","",4],[10,"div_floor","","",4],[10,"mod_floor","","",4],[10,"div_mod_floor","","",4],[10,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",4],[10,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",4],[10,"divides","","Deprecated, use `is_multiple_of` instead.",4],[10,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",4],[10,"is_even","","Returns `true` if the number is divisible by `2`.",4],[10,"is_odd","","Returns `true` if the number is not divisible by `2`.",4],[10,"to_i64","","",4],[10,"to_u64","","",4],[10,"from_i64","","",4],[10,"from_u64","","",4],[10,"to_biguint","","",5],[10,"to_biguint","","",4],[10,"to_str_radix","","",4],[10,"from_str_radix","","Creates and initializes a `BigUint`.",4],[10,"new","","Creates and initializes a `BigUint`.",4],[10,"from_slice","","Creates and initializes a `BigUint`.",4],[10,"parse_bytes","","Creates and initializes a `BigUint`.",4],[10,"bits","","Determines the fewest bits necessary to express the `BigUint`.",4],[10,"fmt","","",0],[10,"clone","","",0],[10,"cmp","","",0],[10,"partial_cmp","","",0],[10,"lt","","",0],[10,"le","","",0],[10,"gt","","",0],[10,"ge","","",0],[10,"eq","","",0],[10,"ne","","",0],[10,"neg","","Negate Sign value.",0],[10,"clone","","",5],[10,"eq","","",5],[10,"partial_cmp","","",5],[10,"cmp","","",5],[10,"default","","",5],[10,"fmt","","",5],[10,"hash","","",5],[10,"from_str","","",5],[10,"shl","","",5],[10,"shr","","",5],[10,"zero","","",5],[10,"is_zero","","",5],[10,"one","","",5],[10,"abs","","",5],[10,"abs_sub","","",5],[10,"signum","","",5],[10,"is_positive","","",5],[10,"is_negative","","",5],[10,"add","","",5],[10,"sub","","",5],[10,"mul","","",5],[10,"div","","",5],[10,"rem","","",5],[10,"neg","","",5],[10,"checked_add","","",5],[10,"checked_sub","","",5],[10,"checked_mul","","",5],[10,"checked_div","","",5],[10,"div_rem","","",5],[10,"div_floor","","",5],[10,"mod_floor","","",5],[10,"div_mod_floor","","",5],[10,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5],[10,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5],[10,"divides","","Deprecated, use `is_multiple_of` instead.",5],[10,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5],[10,"is_even","","Returns `true` if the number is divisible by `2`.",5],[10,"is_odd","","Returns `true` if the number is not divisible by `2`.",5],[10,"to_i64","","",5],[10,"to_u64","","",5],[10,"from_i64","","",5],[10,"from_u64","","",5],[10,"to_bigint","","",5],[10,"to_bigint","","",4],[10,"to_str_radix","","",5],[10,"from_str_radix","","Creates and initializes a BigInt.",5],[10,"new","","Creates and initializes a BigInt.",5],[10,"from_biguint","","Creates and initializes a `BigInt`.",5],[10,"from_slice","","Creates and initializes a `BigInt`.",5],[10,"parse_bytes","","Creates and initializes a `BigInt`.",5],[10,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",5],[0,"complex","num","Complex numbers."],[1,"Complex","num::complex","A complex number in Cartesian form."],[11,"re","","Real portion of the complex number",6],[11,"im","","Imaginary portion of the complex number",6],[4,"Complex32","",""],[4,"Complex64","",""],[10,"hash","","",6],[10,"clone","","",6],[10,"eq","","",6],[10,"ne","","",6],[10,"new","","Create a new Complex",6],[10,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",6],[10,"conj","","Returns the complex conjugate. i.e. `re - i im`",6],[10,"scale","","Multiplies `self` by the scalar `t`.",6],[10,"unscale","","Divides `self` by the scalar `t`.",6],[10,"inv","","Returns `1/self`",6],[10,"norm","","Calculate |self|",6],[10,"arg","","Calculate the principal Arg of self.",6],[10,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",6],[10,"from_polar","","Convert a polar representation into a complex number.",6],[10,"add","","",6],[10,"sub","","",6],[10,"mul","","",6],[10,"div","","",6],[10,"neg","","",6],[10,"zero","","",6],[10,"is_zero","","",6],[10,"one","","",6],[10,"fmt","","",6],[10,"to_str_radix","","",6],[0,"integer","num","Integer trait and functions."],[3,"div_rem","num::integer","Simultaneous integer division and modulus"],[3,"div_floor","","Floored integer division"],[3,"mod_floor","","Floored integer modulus"],[3,"div_mod_floor","","Simultaneous floored integer division and modulus"],[3,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive."],[3,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`."],[6,"Integer","",""],[9,"div_floor","","Floored integer division.",7],[9,"mod_floor","","Floored integer modulo, satisfying:",7],[9,"gcd","","Greatest Common Divisor (GCD).",7],[9,"lcm","","Lowest Common Multiple (LCM).",7],[9,"divides","","Deprecated, use `is_multiple_of` instead.",7],[9,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",7],[9,"is_even","","Returns `true` if the number is even.",7],[9,"is_odd","","Returns `true` if the number is odd.",7],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",7],[10,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",7],[0,"rational","num","Rational numbers"],[1,"Ratio","num::rational","Represents the ratio between 2 numbers."],[4,"Rational","","Alias for a `Ratio` of machine-sized integers."],[4,"Rational32","",""],[4,"Rational64","",""],[4,"BigRational","","Alias for arbitrary precision rationals."],[10,"hash","","",8],[10,"clone","","",8],[10,"from_integer","","Creates a ratio representing the integer `t`.",8],[10,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",8],[10,"new","","Create a new Ratio. Fails if `denom == 0`.",8],[10,"to_integer","","Converts to an integer.",8],[10,"numer","","Gets an immutable reference to the numerator.",8],[10,"denom","","Gets an immutable reference to the denominator.",8],[10,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",8],[10,"reduced","","Returns a `reduce`d copy of self.",8],[10,"recip","","Returns the reciprocal.",8],[10,"floor","","Rounds towards minus infinity.",8],[10,"ceil","","Rounds towards plus infinity.",8],[10,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",8],[10,"trunc","","Rounds towards zero.",8],[10,"fract","","Returns the fractional part of a number.",8],[10,"from_float","","Converts a float into a rational number.",8],[10,"eq","","",8],[10,"ne","","",8],[10,"lt","","",8],[10,"gt","","",8],[10,"le","","",8],[10,"ge","","",8],[10,"partial_cmp","","",8],[10,"cmp","","",8],[10,"mul","","",8],[10,"div","","",8],[10,"add","","",8],[10,"sub","","",8],[10,"rem","","",8],[10,"neg","","",8],[10,"zero","","",8],[10,"is_zero","","",8],[10,"one","","",8],[10,"abs","","",8],[10,"abs_sub","","",8],[10,"signum","","",8],[10,"is_positive","","",8],[10,"is_negative","","",8],[10,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",8],[10,"to_str_radix","","Renders as `numer/denom` where the numbers are in base `radix`.",8],[10,"from_str","","Parses `numer/denom` or just `numer`.",8],[10,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",8]],"paths":[[2,"Sign"],[6,"ToBigUint"],[6,"ToBigInt"],[6,"RandBigInt"],[1,"BigUint"],[1,"BigInt"],[1,"Complex"],[6,"Integer"],[1,"Ratio"]]};

searchIndex['collections'] = {"items":[[0,"","collections","Collection types."],[0,"bitv","","Collections implemented with bit vectors."],[1,"Bitv","collections::bitv","The bitvector type."],[1,"Bits","","An iterator for `Bitv`."],[1,"BitvSet","","An implementation of a set using a bit vector as an underlying\nrepresentation for holding unsigned numerical elements."],[1,"BitPositions","","An iterator for `BitvSet`."],[1,"TwoBitPositions","","An iterator combining two `BitvSet` iterators."],[3,"from_bytes","","Transforms a byte-vector into a `Bitv`. Each byte becomes eight bits,\nwith the most significant bits of each byte coming first. Each\nbit becomes `true` if equal to 1 or `false` if equal to 0."],[3,"from_fn","","Creates a `Bitv` of the specified length where the value at each\nindex is `f(index)`."],[10,"index","","",0],[10,"new","","Creates an empty `Bitv`.",0],[10,"with_capacity","","Creates a `Bitv` that holds `nbits` elements, setting each element\nto `init`.",0],[10,"get","","Retrieves the value at index `i`.",0],[10,"set","","Sets the value of a bit at a index `i`.",0],[10,"set_all","","Sets all bits to 1.",0],[10,"negate","","Flips all bits.",0],[10,"union","","Calculates the union of two bitvectors. This acts like the bitwise `or`\nfunction.",0],[10,"intersect","","Calculates the intersection of two bitvectors. This acts like the\nbitwise `and` function.",0],[10,"difference","","Calculates the difference between two bitvectors.",0],[10,"all","","Returns `true` if all bits are 1.",0],[10,"iter","","Returns an iterator over the elements of the vector in order.",0],[10,"none","","Returns `true` if all bits are 0.",0],[10,"any","","Returns `true` if any bit is 1.",0],[10,"to_bytes","","Organises the bits into bytes, such that the first bit in the\n`Bitv` becomes the high-order bit of the first byte. If the\nsize of the `Bitv` is not a multiple of eight then trailing bits\nwill be filled-in with `false`.",0],[10,"to_bools","","Transforms `self` into a `Vec<bool>` by turning each bit into a `bool`.",0],[10,"eq_vec","","Compares a `Bitv` to a slice of `bool`s.\nBoth the `Bitv` and slice must have the same length.",0],[10,"truncate","","Shortens a `Bitv`, dropping excess elements.",0],[10,"reserve","","Grows the vector to be able to store `size` bits without resizing.",0],[10,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",0],[10,"grow","","Grows the `Bitv` in-place, adding `n` copies of `value` to the `Bitv`.",0],[10,"pop","","Shortens by one element and returns the removed element.",0],[10,"push","","Pushes a `bool` onto the end.",0],[10,"default","","",0],[10,"len","","",0],[10,"clear","","",0],[10,"from_iter","","",0],[10,"extend","","",0],[10,"clone","","",0],[10,"clone_from","","",0],[10,"partial_cmp","","",0],[10,"cmp","","",0],[10,"fmt","","",0],[10,"hash","","",0],[10,"eq","","",0],[10,"next","","",1],[10,"size_hint","","",1],[10,"next_back","","",1],[10,"indexable","","",1],[10,"idx","","",1],[10,"clone","","",2],[10,"default","","",2],[10,"from_iter","","",2],[10,"extend","","",2],[10,"partial_cmp","","",2],[10,"cmp","","",2],[10,"eq","","",2],[10,"new","","Creates a new bit vector set with initially no contents.",2],[10,"with_capacity","","Creates a new bit vector set with initially no contents, able to\nhold `nbits` elements without resizing.",2],[10,"from_bitv","","Creates a new bit vector set from the given bit vector.",2],[10,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",2],[10,"reserve","","Grows the underlying vector to be able to store `size` bits.",2],[10,"unwrap","","Consumes this set to return the underlying bit vector.",2],[10,"get_ref","","Returns a reference to the underlying bit vector.",2],[10,"get_mut_ref","","Returns a mutable reference to the underlying bit vector.",2],[10,"shrink_to_fit","","Truncates the underlying vector to the least length required.",2],[10,"iter","","Iterator over each uint stored in the `BitvSet`.",2],[10,"union","","Iterator over each uint stored in `self` union `other`.\nSee [union_with](#method.union_with) for an efficient in-place version.",2],[10,"intersection","","Iterator over each uint stored in `self` intersect `other`.\nSee [intersect_with](#method.intersect_with) for an efficient in-place version.",2],[10,"difference","","Iterator over each uint stored in the `self` setminus `other`.\nSee [difference_with](#method.difference_with) for an efficient in-place version.",2],[10,"symmetric_difference","","Iterator over each uint stored in the symmetric difference of `self` and `other`.\nSee [symmetric_difference_with](#method.symmetric_difference_with) for\nan efficient in-place version.",2],[10,"union_with","","Unions in-place with the specified other bit vector.",2],[10,"intersect_with","","Intersects in-place with the specified other bit vector.",2],[10,"difference_with","","Makes this bit vector the difference with the specified other bit vector\nin-place.",2],[10,"symmetric_difference_with","","Makes this bit vector the symmetric difference with the specified other\nbit vector in-place.",2],[10,"fmt","","",2],[10,"hash","","",2],[10,"len","","",2],[10,"clear","","",2],[10,"contains","","",2],[10,"is_disjoint","","",2],[10,"is_subset","","",2],[10,"is_superset","","",2],[10,"insert","","",2],[10,"remove","","",2],[10,"next","","",3],[10,"size_hint","","",3],[10,"next","","",4],[10,"size_hint","","",4],[0,"btree","collections","Starting implementation of a B-tree for Rust.\nStructure inspired by Github user davidhalperin's gist."],[1,"BTree","collections::btree",""],[10,"new","","Returns new `BTree` with root node (leaf) and user-supplied lower bound\nThe lower bound applies to every node except the root node.",5],[10,"get","","Returns the value of a given key, which may not exist in the tree.\nCalls the root node's get method.",5],[10,"insert","","An insert method that uses the `clone` method for support.",5],[10,"clone","","",5],[10,"eq","","",5],[10,"partial_cmp","","",5],[10,"cmp","","Returns an ordering based on the root nodes of each `BTree`.",5],[10,"fmt","","Returns a string representation of the `BTree`.",5],[0,"dlist","collections","A doubly-linked list with owned nodes."],[1,"DList","collections::dlist","A doubly-linked list."],[1,"Items","","An iterator over references to the items of a `DList`."],[1,"MutItems","","An iterator over mutable references to the items of a `DList`."],[1,"MoveItems","","An iterator over mutable references to the items of a `DList`."],[6,"ListInsertion","","Allows mutating a `DList` while iterating."],[9,"insert_next","","Inserts `elt` just after to the element most recently returned by\n`.next()`",6],[9,"peek_next","","Provides a reference to the next element, without changing the iterator",6],[10,"clone","","",7],[10,"clone","","",8],[10,"is_empty","","Returns `true` if the `DList` is empty.",9],[10,"len","","Returns the length of the `DList`.",9],[10,"clear","","Removes all elements from the `DList`.",9],[10,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",9],[10,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",9],[10,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",9],[10,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",9],[10,"push_front","","Adds an element first in the list.",9],[10,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",9],[10,"push","","",9],[10,"pop","","",9],[10,"default","","",9],[10,"new","","Creates an empty `DList`.",9],[10,"rotate_forward","","Moves the last element to the front of the list.",9],[10,"rotate_backward","","Moves the first element to the back of the list.",9],[10,"append","","Adds all elements from `other` to the end of the list.",9],[10,"prepend","","Adds all elements from `other` to the beginning of the list.",9],[10,"insert_when","","Inserts `elt` before the first `x` in the list where `f(x, elt)` is\ntrue, or at the end.",9],[10,"merge","","Merges `other` into this `DList`, using the function `f`.",9],[10,"iter","","Provides a forward iterator.",9],[10,"mut_iter","","Deprecated: use `iter_mut`.",9],[10,"iter_mut","","Provides a forward iterator with mutable references.",9],[10,"move_iter","","Deprecated: use `into_iter`.",9],[10,"into_iter","","Consumes the list into an iterator yielding elements by value.",9],[10,"insert_ordered","","Inserts `elt` sorted in ascending order.",9],[10,"drop","","",9],[10,"next","","",7],[10,"size_hint","","",7],[10,"next_back","","",7],[10,"next","","",10],[10,"size_hint","","",10],[10,"next_back","","",10],[10,"insert_next","","",10],[10,"peek_next","","",10],[10,"next","","",8],[10,"size_hint","","",8],[10,"next_back","","",8],[10,"from_iter","","",9],[10,"extend","","",9],[10,"eq","","",9],[10,"ne","","",9],[10,"partial_cmp","","",9],[10,"cmp","","",9],[10,"clone","","",9],[10,"fmt","","",9],[10,"hash","","",9],[0,"enum_set","collections","A structure for holding a set of enum variants."],[1,"EnumSet","collections::enum_set","A specialized `Set` implementation to use enum types."],[1,"Items","","An iterator over an EnumSet"],[6,"CLike","","An interface for casting C-like enum to uint and back."],[9,"to_uint","","Converts a C-like enum to a `uint`.",11],[9,"from_uint","","Converts a `uint` to a C-like enum.",11],[10,"hash","","",12],[10,"eq","","",12],[10,"ne","","",12],[10,"clone","","",12],[10,"fmt","","",12],[10,"empty","","Returns an empty `EnumSet`.",12],[10,"is_empty","","Returns true if the `EnumSet` is empty.",12],[10,"intersects","","Returns `true` if the `EnumSet` contains any enum of the given `EnumSet`.",12],[10,"intersection","","Returns the intersection of both `EnumSets`.",12],[10,"contains","","Returns `true` if a given `EnumSet` is included in an `EnumSet`.",12],[10,"union","","Returns the union of both `EnumSets`.",12],[10,"add","","Adds an enum to an `EnumSet`.",12],[10,"contains_elem","","Returns `true` if an `EnumSet` contains a given enum.",12],[10,"iter","","Returns an iterator over an `EnumSet`.",12],[10,"sub","","",12],[10,"bitor","","",12],[10,"bitand","","",12],[10,"next","","",13],[10,"size_hint","","",13],[0,"priority_queue","collections","A priority queue implemented with a binary heap."],[1,"PriorityQueue","collections::priority_queue","A priority queue implemented with a binary heap."],[1,"Items","","`PriorityQueue` iterator."],[10,"clone","","",14],[10,"len","","Returns the length of the queue.",14],[10,"clear","","Drops all items from the queue.",14],[10,"default","","",14],[10,"new","","Creates an empty `PriorityQueue` as a max-heap.",14],[10,"with_capacity","","Creates an empty `PriorityQueue` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `PriorityQueue` does not have to be reallocated\nuntil it contains at least that many values.",14],[10,"from_vec","","Creates a `PriorityQueue` from a vector. This is sometimes called\n`heapifying` the vector.",14],[10,"iter","","An iterator visiting all values in underlying vector, in\narbitrary order.",14],[10,"top","","Returns the greatest item in a queue, or `None` if it is empty.",14],[10,"maybe_top","","",14],[10,"capacity","","Returns the number of elements the queue can hold without reallocating.",14],[10,"reserve_exact","","Reserves capacity for exactly `n` elements in the `PriorityQueue`.\nDo nothing if the capacity is already sufficient.",14],[10,"reserve","","Reserves capacity for at least `n` elements in the `PriorityQueue`.\nDo nothing if the capacity is already sufficient.",14],[10,"pop","","Removes the greatest item from a queue and returns it, or `None` if it\nis empty.",14],[10,"maybe_pop","","",14],[10,"push","","Pushes an item onto the queue.",14],[10,"push_pop","","Pushes an item onto a queue then pops the greatest item off the queue in\nan optimized fashion.",14],[10,"replace","","Pops the greatest item off a queue then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the queue\nwas empty.",14],[10,"into_vec","","Consumes the `PriorityQueue` and returns the underlying vector\nin arbitrary order.",14],[10,"into_sorted_vec","","Consumes the `PriorityQueue` and returns a vector in sorted\n(ascending) order.",14],[10,"next","","",15],[10,"size_hint","","",15],[10,"from_iter","","",14],[10,"extend","","",14],[0,"ringbuf","collections","This crate implements a double-ended queue with `O(1)` amortized inserts and removals from both\nends of the container. It also has `O(1)` indexing like a vector. The contained elements are\nnot required to be copyable, and the queue will be sendable if the contained type is sendable.\nIts interface `Deque` is defined in `collections`."],[1,"RingBuf","collections::ringbuf","`RingBuf` is a circular buffer that implements `Deque`."],[1,"Items","","`RingBuf` iterator."],[1,"MutItems","","`RingBuf` mutable iterator."],[10,"clone","","",16],[10,"len","","Returns the number of elements in the `RingBuf`.",16],[10,"clear","","Clears the `RingBuf`, removing all values.",16],[10,"front","","Returns a reference to the first element in the `RingBuf`.",16],[10,"front_mut","","Returns a mutable reference to the first element in the `RingBuf`.",16],[10,"back","","Returns a reference to the last element in the `RingBuf`.",16],[10,"back_mut","","Returns a mutable reference to the last element in the `RingBuf`.",16],[10,"pop_front","","Removes and returns the first element in the `RingBuf`, or `None` if it\nis empty.",16],[10,"push_front","","Prepends an element to the `RingBuf`.",16],[10,"push","","",16],[10,"pop","","",16],[10,"default","","",16],[10,"new","","Creates an empty `RingBuf`.",16],[10,"with_capacity","","Creates an empty `RingBuf` with space for at least `n` elements.",16],[10,"get","","Retrieve an element in the `RingBuf` by index.",16],[10,"get_mut","","Retrieves an element in the `RingBuf` by index.",16],[10,"swap","","Swaps elements at indices `i` and `j`.",16],[10,"reserve_exact","","Reserves capacity for exactly `n` elements in the given `RingBuf`,\ndoing nothing if `self`'s capacity is already equal to or greater\nthan the requested capacity.",16],[10,"reserve","","Reserves capacity for at least `n` elements in the given `RingBuf`,\nover-allocating in case the caller needs to reserve additional\nspace.",16],[10,"iter","","Returns a front-to-back iterator.",16],[10,"mut_iter","","Deprecated: use `iter_mut`",16],[10,"iter_mut","","Returns a front-to-back iterator which returns mutable references.",16],[10,"next","","",17],[10,"size_hint","","",17],[10,"next_back","","",17],[10,"indexable","","",17],[10,"idx","","",17],[10,"next","","",18],[10,"size_hint","","",18],[10,"next_back","","",18],[10,"eq","","",16],[10,"ne","","",16],[10,"partial_cmp","","",16],[10,"cmp","","",16],[10,"hash","","",16],[10,"index","","",16],[10,"from_iter","","",16],[10,"extend","","",16],[10,"fmt","","",16],[0,"smallintmap","collections","A simple map based on a vector for small integer keys. Space requirements\nare O(highest integer key)."],[1,"SmallIntMap","collections::smallintmap","A map optimized for small integer keys."],[1,"Entries","","Forward iterator over a map."],[1,"MutEntries","","Forward iterator over the key-value pairs of a map, with the\nvalues being mutable."],[4,"Keys","","Forward iterator over the keys of a map"],[4,"Values","","Forward iterator over the values of a map"],[10,"eq","","",19],[10,"ne","","",19],[10,"len","","Returns the number of elements in the map.",19],[10,"is_empty","","Returns`true` if there are no elements in the map.",19],[10,"clear","","Clears the map, removing all key-value pairs.",19],[10,"find","","Returns a reference to the value corresponding to the key.",19],[10,"find_mut","","Returns a mutable reference to the value corresponding to the key.",19],[10,"insert","","Inserts a key-value pair into the map. An existing value for a\nkey is replaced by the new value. Returns `true` if the key did\nnot already exist in the map.",19],[10,"remove","","Removes a key-value pair from the map. Returns `true` if the key\nwas present in the map.",19],[10,"swap","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise `None` is returned.",19],[10,"pop","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",19],[10,"default","","",19],[10,"clone","","",19],[10,"clone_from","","",19],[10,"hash","","",19],[10,"new","","Creates an empty `SmallIntMap`.",19],[10,"with_capacity","","Creates an empty `SmallIntMap` with space for at least `capacity`\nelements before resizing.",19],[10,"get","","Retrieves a value for the given key.\nSee [`find`](../trait.Map.html#tymethod.find) for a non-failing alternative.",19],[10,"keys","","Returns an iterator visiting all keys in ascending order by the keys.\nThe iterator's element type is `uint`.",19],[10,"values","","Returns an iterator visiting all values in ascending order by the keys.\nThe iterator's element type is `&'r V`.",19],[10,"iter","","Returns an iterator visiting all key-value pairs in ascending order by the keys.\nThe iterator's element type is `(uint, &'r V)`.",19],[10,"mut_iter","","Deprecated: use `iter_mut`",19],[10,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order by the keys,\nwith mutable references to the values.\nThe iterator's element type is `(uint, &'r mut V)`.",19],[10,"move_iter","","Deprecated: use `into_iter` instead.",19],[10,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order by\nthe keys, emptying (but not consuming) the original `SmallIntMap`.\nThe iterator's element type is `(uint, &'r V)`.",19],[10,"update","","Updates a value in the map. If the key already exists in the map,\nmodifies the value with `ff` taking `oldval, newval`.\nOtherwise, sets the value to `newval`.\nReturns `true` if the key did not already exist in the map.",19],[10,"update_with_key","","Updates a value in the map. If the key already exists in the map,\nmodifies the value with `ff` taking `key, oldval, newval`.\nOtherwise, sets the value to `newval`.\nReturns `true` if the key did not already exist in the map.",19],[10,"partial_cmp","","",19],[10,"cmp","","",19],[10,"fmt","","",19],[10,"from_iter","","",19],[10,"extend","","",19],[10,"index","","",19],[10,"next","","",20],[10,"size_hint","","",20],[10,"next_back","","",20],[10,"next","","",21],[10,"size_hint","","",21],[10,"next_back","","",21],[0,"treemap","collections","Maps are collections of unique keys with corresponding values, and sets are\njust unique keys without a corresponding value. The `Map` and `Set` traits in\n`std::container` define the basic interface."],[1,"TreeMap","collections::treemap","This is implemented as an AA tree, which is a simplified variation of\na red-black tree where red (horizontal) nodes can only be added\nas a right child. The time complexity is the same, and re-balancing\noperations are more frequent but also cheaper."],[1,"Entries","","Lazy forward iterator over a map"],[1,"RevEntries","","Lazy backward iterator over a map"],[1,"MutEntries","","Lazy forward iterator over a map that allows for the mutation of\nthe values."],[1,"RevMutEntries","","Lazy backward iterator over a map"],[1,"MoveEntries","","Lazy forward iterator over a map that consumes the map while iterating"],[1,"TreeSet","","An implementation of the `Set` trait on top of the `TreeMap` container. The\nonly requirement is that the type of the elements contained ascribes to the\n`Ord` trait."],[1,"SetItems","","A lazy forward iterator over a set."],[1,"RevSetItems","","A lazy backward iterator over a set."],[1,"DifferenceItems","","A lazy iterator producing elements in the set difference (in-order)."],[1,"SymDifferenceItems","","A lazy iterator producing elements in the set symmetric difference (in-order)."],[1,"IntersectionItems","","A lazy iterator producing elements in the set intersection (in-order)."],[1,"UnionItems","","A lazy iterator producing elements in the set union (in-order)."],[4,"Keys","","TreeMap keys iterator."],[4,"Values","","TreeMap values iterator."],[4,"MoveSetItems","","A lazy forward iterator over a set that consumes the set while iterating."],[10,"clone","","",22],[10,"eq","","",22],[10,"partial_cmp","","",22],[10,"cmp","","",22],[10,"fmt","","",22],[10,"len","","",22],[10,"clear","","",22],[10,"find","","",22],[10,"find_mut","","",22],[10,"swap","","",22],[10,"pop","","",22],[10,"default","","",22],[10,"index","","",22],[10,"new","","Creates an empty `TreeMap`.",22],[10,"keys","","Gets a lazy iterator over the keys in the map, in ascending order.",22],[10,"values","","Gets a lazy iterator over the values in the map, in ascending order\nwith respect to the corresponding keys.",22],[10,"iter","","Gets a lazy iterator over the key-value pairs in the map, in ascending order.",22],[10,"rev_iter","","Gets a lazy reverse iterator over the key-value pairs in the map, in descending order.",22],[10,"mut_iter","","Deprecated: use `iter_mut`.",22],[10,"iter_mut","","Gets a lazy forward iterator over the key-value pairs in the\nmap, with the values being mutable.",22],[10,"mut_rev_iter","","Deprecated: use `rev_iter_mut`.",22],[10,"rev_iter_mut","","Gets a lazy reverse iterator over the key-value pairs in the\nmap, with the values being mutable.",22],[10,"move_iter","","Deprecated: use `into_iter`.",22],[10,"into_iter","","Gets a lazy iterator that consumes the treemap.",22],[10,"find_with","","Returns the value for which `f(key)` returns `Equal`. `f` is invoked\nwith current key and guides tree navigation. That means `f` should\nbe aware of natural ordering of the tree.",22],[10,"find_mut_with","","Deprecated: use `find_with_mut`.",22],[10,"find_with_mut","","Returns the value for which `f(key)` returns `Equal`. `f` is invoked\nwith current key and guides tree navigation. That means `f` should\nbe aware of natural ordering of the tree.",22],[10,"lower_bound","","Returns a lazy iterator to the first key-value pair whose key is not less than `k`\nIf all keys in map are less than `k` an empty iterator is returned.",22],[10,"upper_bound","","Returns a lazy iterator to the first key-value pair whose key is greater than `k`\nIf all keys in map are less than or equal to `k` an empty iterator is returned.",22],[10,"mut_lower_bound","","Deprecated: use `lower_bound_mut`.",22],[10,"lower_bound_mut","","Returns a lazy value iterator to the first key-value pair (with\nthe value being mutable) whose key is not less than `k`.",22],[10,"mut_upper_bound","","Deprecated: use `upper_bound_mut`.",22],[10,"upper_bound_mut","","Returns a lazy iterator to the first key-value pair (with the\nvalue being mutable) whose key is greater than `k`.",22],[10,"next","","Advances the iterator to the next node (in order) and return a\ntuple with a reference to the key and value. If there are no\nmore nodes, return `None`.",23],[10,"size_hint","","",23],[10,"next","","",24],[10,"size_hint","","",24],[10,"next","","Advances the iterator to the next node (in order) and return a\ntuple with a reference to the key and value. If there are no\nmore nodes, return `None`.",25],[10,"size_hint","","",25],[10,"next","","",26],[10,"size_hint","","",26],[10,"next","","",27],[10,"size_hint","","",27],[10,"next","","",28],[10,"next","","",29],[10,"clone","","",30],[10,"eq","","",30],[10,"partial_cmp","","",30],[10,"cmp","","",30],[10,"fmt","","",30],[10,"len","","",30],[10,"clear","","",30],[10,"contains","","",30],[10,"is_disjoint","","",30],[10,"is_subset","","",30],[10,"insert","","",30],[10,"remove","","",30],[10,"default","","",30],[10,"new","","Creates an empty `TreeSet`.",30],[10,"iter","","Gets a lazy iterator over the values in the set, in ascending order.",30],[10,"rev_iter","","Gets a lazy iterator over the values in the set, in descending order.",30],[10,"move_iter","","Deprecated: use `into_iter`.",30],[10,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the\nset in ascending order. The set cannot be used after calling this.",30],[10,"lower_bound","","Gets a lazy iterator pointing to the first value not less than `v` (greater or equal).\nIf all elements in the set are less than `v` empty iterator is returned.",30],[10,"upper_bound","","Gets a lazy iterator pointing to the first value greater than `v`.\nIf all elements in the set are less than or equal to `v` an\nempty iterator is returned.",30],[10,"difference","","Visits the values representing the difference, in ascending order.",30],[10,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",30],[10,"intersection","","Visits the values representing the intersection, in ascending order.",30],[10,"union","","Visits the values representing the union, in ascending order.",30],[10,"next","","",31],[10,"next","","",32],[10,"next","","",33],[10,"next","","",34],[10,"from_iter","","",22],[10,"extend","","",22],[10,"hash","","",22],[10,"from_iter","","",30],[10,"extend","","",30],[10,"hash","","",30],[0,"trie","collections","Maps are collections of unique keys with corresponding values, and sets are\njust unique keys without a corresponding value. The `Map` and `Set` traits in\n`std::container` define the basic interface."],[1,"TrieMap","collections::trie","A map implemented as a radix trie."],[1,"TrieSet","","A set implemented as a radix trie."],[1,"Entries","","A forward iterator over a map."],[1,"MutEntries","","A forward iterator over the key-value pairs of a map, with the\nvalues being mutable."],[1,"SetItems","","A forward iterator over a set."],[4,"Keys","","A forward iterator over the keys of a map."],[4,"Values","","A forward iterator over the values of a map."],[10,"clone","","",35],[10,"eq","","",35],[10,"partial_cmp","","",35],[10,"cmp","","",35],[10,"fmt","","",35],[10,"len","","Returns the number of elements in the map.",35],[10,"clear","","Clears the map, removing all values.",35],[10,"find","","Returns a reference to the value corresponding to the key.",35],[10,"find_mut","","Returns a mutable reference to the value corresponding to the key.",35],[10,"swap","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",35],[10,"pop","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",35],[10,"default","","",35],[10,"new","","Creates an empty `TrieMap`.",35],[10,"each_reverse","","Visits all key-value pairs in reverse order. Aborts traversal when `f` returns `false`.\nReturns `true` if `f` returns `true` for all elements.",35],[10,"keys","","Gets an iterator visiting all keys in ascending order by the keys.\nThe iterator's element type is `uint`.",35],[10,"values","","Gets an iterator visiting all values in ascending order by the keys.\nThe iterator's element type is `&'r T`.",35],[10,"iter","","Gets an iterator over the key-value pairs in the map, ordered by keys.",35],[10,"mut_iter","","Deprecated: use `iter_mut`.",35],[10,"iter_mut","","Gets an iterator over the key-value pairs in the map, with the\nability to mutate the values.",35],[10,"lower_bound","","Gets an iterator pointing to the first key-value pair whose key is not less than `key`.\nIf all keys in the map are less than `key` an empty iterator is returned.",35],[10,"upper_bound","","Gets an iterator pointing to the first key-value pair whose key is greater than `key`.\nIf all keys in the map are not greater than `key` an empty iterator is returned.",35],[10,"mut_lower_bound","","Deprecated: use `lower_bound_mut`.",35],[10,"lower_bound_mut","","Gets an iterator pointing to the first key-value pair whose key is not less than `key`.\nIf all keys in the map are less than `key` an empty iterator is returned.",35],[10,"mut_upper_bound","","Deprecated: use `upper_bound_mut`.",35],[10,"upper_bound_mut","","Gets an iterator pointing to the first key-value pair whose key is greater than `key`.\nIf all keys in the map are not greater than `key` an empty iterator is returned.",35],[10,"from_iter","","",35],[10,"extend","","",35],[10,"hash","","",35],[10,"index","","",35],[10,"cmp","","",36],[10,"partial_cmp","","",36],[10,"lt","","",36],[10,"le","","",36],[10,"gt","","",36],[10,"ge","","",36],[10,"eq","","",36],[10,"ne","","",36],[10,"hash","","",36],[10,"clone","","",36],[10,"fmt","","",36],[10,"len","","Returns the number of elements in the set.",36],[10,"clear","","Clears the set, removing all values.",36],[10,"contains","","",36],[10,"is_disjoint","","",36],[10,"is_subset","","",36],[10,"is_superset","","",36],[10,"insert","","",36],[10,"remove","","",36],[10,"default","","",36],[10,"new","","Creates an empty TrieSet.",36],[10,"each_reverse","","Visits all values in reverse order. Aborts traversal when `f` returns `false`.\nReturns `true` if `f` returns `true` for all elements.",36],[10,"iter","","Gets an iterator over the values in the set, in sorted order.",36],[10,"lower_bound","","Gets an iterator pointing to the first value that is not less than `val`.\nIf all values in the set are less than `val` an empty iterator is returned.",36],[10,"upper_bound","","Gets an iterator pointing to the first value that key is greater than `val`.\nIf all values in the set are less than or equal to `val` an empty iterator is returned.",36],[10,"from_iter","","",36],[10,"extend","","",36],[10,"next","","",37],[10,"size_hint","","",37],[10,"next","","",38],[10,"size_hint","","",38],[10,"next","","",39],[10,"size_hint","","",39],[0,"slice","collections","Utilities for slice manipulation"],[1,"ElementSwaps","collections::slice","An iterator that yields the element swaps needed to produce\na sequence of all possible permutations for an indexed sequence of\nelements. Each permutation is only a single swap apart."],[1,"Permutations","","An iterator that uses `ElementSwaps` to iterate through\nall possible permutations of a vector."],[0,"raw","","Unsafe operations"],[3,"buf_as_slice","collections::slice::raw","Form a slice from a pointer and length (as a number of units,\nnot bytes)."],[3,"mut_buf_as_slice","","Form a slice from a pointer and length (as a number of units,\nnot bytes)."],[3,"shift_ptr","","Returns a pointer to first element in slice and adjusts\nslice so it no longer contains that element. Returns None\nif the slice is empty. O(1)."],[3,"pop_ptr","","Returns a pointer to last element in slice and adjusts\nslice so it no longer contains that element. Returns None\nif the slice is empty. O(1)."],[6,"VectorVector","collections::slice",""],[9,"concat_vec","","Flattens a vector of vectors of `T` into a single `Vec<T>`.",40],[9,"connect_vec","","Concatenate a vector of vectors, placing a given separator between each.",40],[6,"CloneableVector","","Extension methods for vector slices with cloneable elements"],[9,"to_vec","","Copies `self` into a new `Vec`.",41],[10,"to_owned","","Deprecated. Use `to_vec`.",41],[9,"into_vec","","Converts `self` into an owned vector, not making a copy if possible.",41],[10,"into_owned","","Deprecated. Use `into_vec`",41],[6,"ImmutableCloneableVector","","Extension methods for vectors containing `Clone` elements."],[9,"partitioned","","Partitions the vector into two vectors `(a, b)`, where all\nelements of `a` satisfy `f` and all elements of `b` do not.",42],[9,"permutations","","Creates an iterator that yields every possible permutation of the\nvector in succession.",42],[6,"MutableSliceAllocating","","Extension methods for vectors such that their elements are\nmutable."],[9,"sort_by","","Sorts the slice, in place, using `compare` to compare\nelements.",43],[9,"move_from","","Consumes `src` and moves as many elements as it can into `self`\nfrom the range [start,end).",43],[6,"MutableOrdSlice","","Methods for mutable vectors with orderable elements, such as\nin-place sorting."],[9,"sort","","Sorts the slice, in place.",44],[9,"next_permutation","","Mutates the slice to the next lexicographic permutation.",44],[9,"prev_permutation","","Mutates the slice to the previous lexicographic permutation.",44],[10,"new","","Creates an `ElementSwaps` iterator for a sequence of `length` elements.",45],[10,"next","","",45],[10,"size_hint","","",45],[10,"next","","",46],[10,"size_hint","","",46],[10,"fmt","core::num","",47],[10,"eq","","",47],[10,"ne","","",47],[10,"ne","","",47],[10,"fmt","core::intrinsics","",48],[10,"assert_receiver_is_total_eq","","",48],[10,"eq","","",48],[10,"ne","","",48],[10,"ne","","",48],[10,"of","","Returns the `TypeId` of the type this generic function has been instantiated with",48],[10,"hash","","",48],[10,"clone","core::kinds::marker","",49],[10,"clone_from","","",49],[10,"eq","","",49],[10,"ne","","",49],[10,"ne","","",49],[10,"clone","","",50],[10,"clone_from","","",50],[10,"eq","","",50],[10,"ne","","",50],[10,"ne","","",50],[10,"clone","","",51],[10,"clone_from","","",51],[10,"eq","","",51],[10,"ne","","",51],[10,"ne","","",51],[10,"clone","","",52],[10,"clone_from","","",52],[10,"eq","","",52],[10,"ne","","",52],[10,"ne","","",52],[10,"clone","","",53],[10,"clone_from","","",53],[10,"eq","","",53],[10,"ne","","",53],[10,"ne","","",53],[10,"clone","","",54],[10,"clone_from","","",54],[10,"eq","","",54],[10,"ne","","",54],[10,"ne","","",54],[10,"clone","","",55],[10,"clone_from","","",55],[10,"eq","","",55],[10,"ne","","",55],[10,"ne","","",55],[10,"clone","","",56],[10,"clone_from","","",56],[10,"eq","","",56],[10,"ne","","",56],[10,"ne","","",56],[10,"clone","","",57],[10,"clone_from","","",57],[10,"eq","","",57],[10,"ne","","",57],[10,"ne","","",57],[10,"clone","","",58],[10,"clone_from","","",58],[10,"eq","","",58],[10,"ne","","",58],[10,"ne","","",58],[10,"fmt","core::cmp","",59],[10,"eq","","",59],[10,"ne","","",59],[10,"ne","","",59],[10,"clone","","",59],[10,"clone_from","","",59],[10,"reverse","","Reverse the `Ordering`, so that `Less` becomes `Greater` and\nvice versa.",59],[10,"assert_receiver_is_total_eq","","",59],[10,"cmp","","",59],[10,"partial_cmp","","",59],[10,"lt","","",59],[10,"le","","",59],[10,"gt","","",59],[10,"ge","","",59],[10,"new","core::atomic","Create a new `AtomicBool`",60],[10,"load","","Load the value",60],[10,"store","","Store the value",60],[10,"swap","","Store a value, returning the old value",60],[10,"compare_and_swap","","If the current value is the same as expected, store a new value",60],[10,"fetch_and","","A logical \"and\" operation",60],[10,"fetch_nand","","A logical \"nand\" operation",60],[10,"fetch_or","","A logical \"or\" operation",60],[10,"fetch_xor","","A logical \"xor\" operation",60],[10,"new","","Create a new `AtomicInt`",61],[10,"load","","Load the value",61],[10,"store","","Store the value",61],[10,"swap","","Store a value, returning the old value",61],[10,"compare_and_swap","","If the current value is the same as expected, store a new value",61],[10,"fetch_add","","Add to the current value, returning the previous",61],[10,"fetch_sub","","Subtract from the current value, returning the previous",61],[10,"fetch_and","","Bitwise and with the current value, returning the previous",61],[10,"fetch_or","","Bitwise or with the current value, returning the previous",61],[10,"fetch_xor","","Bitwise xor with the current value, returning the previous",61],[10,"new","","Create a new `AtomicUint`",62],[10,"load","","Load the value",62],[10,"store","","Store the value",62],[10,"swap","","Store a value, returning the old value",62],[10,"compare_and_swap","","If the current value is the same as expected, store a new value",62],[10,"fetch_add","","Add to the current value, returning the previous",62],[10,"fetch_sub","","Subtract from the current value, returning the previous",62],[10,"fetch_and","","Bitwise and with the current value, returning the previous",62],[10,"fetch_or","","Bitwise or with the current value, returning the previous",62],[10,"fetch_xor","","Bitwise xor with the current value, returning the previous",62],[10,"new","","Create a new `AtomicPtr`",63],[10,"load","","Load the value",63],[10,"store","","Store the value",63],[10,"swap","","Store a value, returning the old value",63],[10,"compare_and_swap","","If the current value is the same as expected, store a new value",63],[10,"new","core::cell","Creates a new `Cell` containing the given value.",64],[10,"get","","Returns a copy of the contained value.",64],[10,"set","","Sets the contained value.",64],[10,"clone","","",64],[10,"clone_from","","",64],[10,"eq","","",64],[10,"ne","","",64],[10,"new","","Create a new `RefCell` containing `value`",65],[10,"unwrap","","Consumes the `RefCell`, returning the wrapped value.",65],[10,"try_borrow","","Attempts to immutably borrow the wrapped value.",65],[10,"borrow","","Immutably borrows the wrapped value.",65],[10,"try_borrow_mut","","Mutably borrows the wrapped value.",65],[10,"borrow_mut","","Mutably borrows the wrapped value.",65],[10,"clone","","",65],[10,"clone_from","","",65],[10,"eq","","",65],[10,"ne","","",65],[10,"drop","","",66],[10,"deref","","",66],[10,"drop","","",67],[10,"deref","","",67],[10,"deref_mut","","",67],[10,"new","","Construct a new instance of `UnsafeCell` which will wrap the specified\nvalue.",68],[10,"get","","Gets a mutable pointer to the wrapped value.",68],[10,"unwrap","","Unwraps the value",68],[10,"drop","core::finally","",69],[10,"rposition","core::iter","",70],[10,"len","","",70],[10,"rposition","","",71],[10,"len","","",71],[10,"rposition","","",72],[10,"len","","",72],[10,"rposition","","",73],[10,"len","","",73],[10,"rposition","","",74],[10,"len","","",74],[10,"clone","","",72],[10,"clone_from","","",72],[10,"next","","",72],[10,"size_hint","","",72],[10,"size_hint","","",72],[10,"chain","","",72],[10,"zip","","",72],[10,"map","","",72],[10,"filter","","",72],[10,"filter_map","","",72],[10,"enumerate","","",72],[10,"peekable","","",72],[10,"skip_while","","",72],[10,"take_while","","",72],[10,"skip","","",72],[10,"take","","",72],[10,"scan","","",72],[10,"flat_map","","",72],[10,"fuse","","",72],[10,"inspect","","",72],[10,"by_ref","","",72],[10,"advance","","",72],[10,"collect","","",72],[10,"nth","","",72],[10,"last","","",72],[10,"fold","","",72],[10,"count","","",72],[10,"all","","",72],[10,"any","","",72],[10,"find","","",72],[10,"position","","",72],[10,"max_by","","",72],[10,"min_by","","",72],[10,"next_back","","",72],[10,"rev","","",72],[10,"indexable","","",72],[10,"idx","","",72],[10,"next","","",75],[10,"size_hint","","",75],[10,"size_hint","","",75],[10,"chain","","",75],[10,"zip","","",75],[10,"map","","",75],[10,"filter","","",75],[10,"filter_map","","",75],[10,"enumerate","","",75],[10,"peekable","","",75],[10,"skip_while","","",75],[10,"take_while","","",75],[10,"skip","","",75],[10,"take","","",75],[10,"scan","","",75],[10,"flat_map","","",75],[10,"fuse","","",75],[10,"inspect","","",75],[10,"by_ref","","",75],[10,"advance","","",75],[10,"collect","","",75],[10,"nth","","",75],[10,"last","","",75],[10,"fold","","",75],[10,"count","","",75],[10,"all","","",75],[10,"any","","",75],[10,"find","","",75],[10,"position","","",75],[10,"max_by","","",75],[10,"min_by","","",75],[10,"next_back","","",75],[10,"rev","","",75],[10,"fmt","","",76],[10,"eq","","",76],[10,"ne","","",76],[10,"ne","","",76],[10,"clone","","",76],[10,"clone_from","","",76],[10,"into_option","","`into_option` creates an `Option` of type `(T,T)`. The returned `Option` has variant\n`None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise variant\n`Some(x,y)` is returned where `x <= y`. If `MinMaxResult` has variant `OneElement(x)`,\nperforming this operation will make one clone of `x`.",76],[10,"clone","","",77],[10,"clone_from","","",77],[10,"next","","",77],[10,"size_hint","","",77],[10,"size_hint","","",77],[10,"chain","","",77],[10,"zip","","",77],[10,"map","","",77],[10,"filter","","",77],[10,"filter_map","","",77],[10,"enumerate","","",77],[10,"peekable","","",77],[10,"skip_while","","",77],[10,"take_while","","",77],[10,"skip","","",77],[10,"take","","",77],[10,"scan","","",77],[10,"flat_map","","",77],[10,"fuse","","",77],[10,"inspect","","",77],[10,"by_ref","","",77],[10,"advance","","",77],[10,"collect","","",77],[10,"nth","","",77],[10,"last","","",77],[10,"fold","","",77],[10,"count","","",77],[10,"all","","",77],[10,"any","","",77],[10,"find","","",77],[10,"position","","",77],[10,"max_by","","",77],[10,"min_by","","",77],[10,"indexable","","",77],[10,"idx","","",77],[10,"clone","","",78],[10,"clone_from","","",78],[10,"next","","",78],[10,"size_hint","","",78],[10,"size_hint","","",78],[10,"chain","","",78],[10,"zip","","",78],[10,"map","","",78],[10,"filter","","",78],[10,"filter_map","","",78],[10,"enumerate","","",78],[10,"peekable","","",78],[10,"skip_while","","",78],[10,"take_while","","",78],[10,"skip","","",78],[10,"take","","",78],[10,"scan","","",78],[10,"flat_map","","",78],[10,"fuse","","",78],[10,"inspect","","",78],[10,"by_ref","","",78],[10,"advance","","",78],[10,"collect","","",78],[10,"nth","","",78],[10,"last","","",78],[10,"fold","","",78],[10,"count","","",78],[10,"all","","",78],[10,"any","","",78],[10,"find","","",78],[10,"position","","",78],[10,"max_by","","",78],[10,"min_by","","",78],[10,"next_back","","",78],[10,"rev","","",78],[10,"indexable","","",78],[10,"idx","","",78],[10,"clone","","",74],[10,"clone_from","","",74],[10,"next","","",74],[10,"size_hint","","",74],[10,"size_hint","","",74],[10,"chain","","",74],[10,"zip","","",74],[10,"map","","",74],[10,"filter","","",74],[10,"filter_map","","",74],[10,"enumerate","","",74],[10,"peekable","","",74],[10,"skip_while","","",74],[10,"take_while","","",74],[10,"skip","","",74],[10,"take","","",74],[10,"scan","","",74],[10,"flat_map","","",74],[10,"fuse","","",74],[10,"inspect","","",74],[10,"by_ref","","",74],[10,"advance","","",74],[10,"collect","","",74],[10,"nth","","",74],[10,"last","","",74],[10,"fold","","",74],[10,"count","","",74],[10,"all","","",74],[10,"any","","",74],[10,"find","","",74],[10,"position","","",74],[10,"max_by","","",74],[10,"min_by","","",74],[10,"next_back","","",74],[10,"rev","","",74],[10,"indexable","","",74],[10,"idx","","",74],[10,"next","","",73],[10,"size_hint","","",73],[10,"size_hint","","",73],[10,"chain","","",73],[10,"zip","","",73],[10,"map","","",73],[10,"filter","","",73],[10,"filter_map","","",73],[10,"enumerate","","",73],[10,"peekable","","",73],[10,"skip_while","","",73],[10,"take_while","","",73],[10,"skip","","",73],[10,"take","","",73],[10,"scan","","",73],[10,"flat_map","","",73],[10,"fuse","","",73],[10,"inspect","","",73],[10,"by_ref","","",73],[10,"advance","","",73],[10,"collect","","",73],[10,"nth","","",73],[10,"last","","",73],[10,"fold","","",73],[10,"count","","",73],[10,"all","","",73],[10,"any","","",73],[10,"find","","",73],[10,"position","","",73],[10,"max_by","","",73],[10,"min_by","","",73],[10,"next_back","","",73],[10,"rev","","",73],[10,"indexable","","",73],[10,"idx","","",73],[10,"next","","",79],[10,"size_hint","","",79],[10,"size_hint","","",79],[10,"chain","","",79],[10,"zip","","",79],[10,"map","","",79],[10,"filter","","",79],[10,"filter_map","","",79],[10,"enumerate","","",79],[10,"peekable","","",79],[10,"skip_while","","",79],[10,"take_while","","",79],[10,"skip","","",79],[10,"take","","",79],[10,"scan","","",79],[10,"flat_map","","",79],[10,"fuse","","",79],[10,"inspect","","",79],[10,"by_ref","","",79],[10,"advance","","",79],[10,"collect","","",79],[10,"nth","","",79],[10,"last","","",79],[10,"fold","","",79],[10,"count","","",79],[10,"all","","",79],[10,"any","","",79],[10,"find","","",79],[10,"position","","",79],[10,"max_by","","",79],[10,"min_by","","",79],[10,"next_back","","",79],[10,"rev","","",79],[10,"next","","",80],[10,"size_hint","","",80],[10,"size_hint","","",80],[10,"chain","","",80],[10,"zip","","",80],[10,"map","","",80],[10,"filter","","",80],[10,"filter_map","","",80],[10,"enumerate","","",80],[10,"peekable","","",80],[10,"skip_while","","",80],[10,"take_while","","",80],[10,"skip","","",80],[10,"take","","",80],[10,"scan","","",80],[10,"flat_map","","",80],[10,"fuse","","",80],[10,"inspect","","",80],[10,"by_ref","","",80],[10,"advance","","",80],[10,"collect","","",80],[10,"nth","","",80],[10,"last","","",80],[10,"fold","","",80],[10,"count","","",80],[10,"all","","",80],[10,"any","","",80],[10,"find","","",80],[10,"position","","",80],[10,"max_by","","",80],[10,"min_by","","",80],[10,"next_back","","",80],[10,"rev","","",80],[10,"clone","","",70],[10,"clone_from","","",70],[10,"next","","",70],[10,"size_hint","","",70],[10,"size_hint","","",70],[10,"chain","","",70],[10,"zip","","",70],[10,"map","","",70],[10,"filter","","",70],[10,"filter_map","","",70],[10,"enumerate","","",70],[10,"peekable","","",70],[10,"skip_while","","",70],[10,"take_while","","",70],[10,"skip","","",70],[10,"take","","",70],[10,"scan","","",70],[10,"flat_map","","",70],[10,"fuse","","",70],[10,"inspect","","",70],[10,"by_ref","","",70],[10,"advance","","",70],[10,"collect","","",70],[10,"nth","","",70],[10,"last","","",70],[10,"fold","","",70],[10,"count","","",70],[10,"all","","",70],[10,"any","","",70],[10,"find","","",70],[10,"position","","",70],[10,"max_by","","",70],[10,"min_by","","",70],[10,"next_back","","",70],[10,"rev","","",70],[10,"indexable","","",70],[10,"idx","","",70],[10,"next","","",81],[10,"size_hint","","",81],[10,"size_hint","","",81],[10,"chain","","",81],[10,"zip","","",81],[10,"map","","",81],[10,"filter","","",81],[10,"filter_map","","",81],[10,"enumerate","","",81],[10,"peekable","","",81],[10,"skip_while","","",81],[10,"take_while","","",81],[10,"skip","","",81],[10,"take","","",81],[10,"scan","","",81],[10,"flat_map","","",81],[10,"fuse","","",81],[10,"inspect","","",81],[10,"by_ref","","",81],[10,"advance","","",81],[10,"collect","","",81],[10,"nth","","",81],[10,"last","","",81],[10,"fold","","",81],[10,"count","","",81],[10,"all","","",81],[10,"any","","",81],[10,"find","","",81],[10,"position","","",81],[10,"max_by","","",81],[10,"min_by","","",81],[10,"peek","","Return a reference to the next element of the iterator with out advancing it,\nor None if the iterator is exhausted.",81],[10,"is_empty","","Check whether peekable iterator is empty or not.",81],[10,"next","","",82],[10,"size_hint","","",82],[10,"size_hint","","",82],[10,"chain","","",82],[10,"zip","","",82],[10,"map","","",82],[10,"filter","","",82],[10,"filter_map","","",82],[10,"enumerate","","",82],[10,"peekable","","",82],[10,"skip_while","","",82],[10,"take_while","","",82],[10,"skip","","",82],[10,"take","","",82],[10,"scan","","",82],[10,"flat_map","","",82],[10,"fuse","","",82],[10,"inspect","","",82],[10,"by_ref","","",82],[10,"advance","","",82],[10,"collect","","",82],[10,"nth","","",82],[10,"last","","",82],[10,"fold","","",82],[10,"count","","",82],[10,"all","","",82],[10,"any","","",82],[10,"find","","",82],[10,"position","","",82],[10,"max_by","","",82],[10,"min_by","","",82],[10,"next","","",83],[10,"size_hint","","",83],[10,"size_hint","","",83],[10,"chain","","",83],[10,"zip","","",83],[10,"map","","",83],[10,"filter","","",83],[10,"filter_map","","",83],[10,"enumerate","","",83],[10,"peekable","","",83],[10,"skip_while","","",83],[10,"take_while","","",83],[10,"skip","","",83],[10,"take","","",83],[10,"scan","","",83],[10,"flat_map","","",83],[10,"fuse","","",83],[10,"inspect","","",83],[10,"by_ref","","",83],[10,"advance","","",83],[10,"collect","","",83],[10,"nth","","",83],[10,"last","","",83],[10,"fold","","",83],[10,"count","","",83],[10,"all","","",83],[10,"any","","",83],[10,"find","","",83],[10,"position","","",83],[10,"max_by","","",83],[10,"min_by","","",83],[10,"clone","","",84],[10,"clone_from","","",84],[10,"next","","",84],[10,"size_hint","","",84],[10,"size_hint","","",84],[10,"chain","","",84],[10,"zip","","",84],[10,"map","","",84],[10,"filter","","",84],[10,"filter_map","","",84],[10,"enumerate","","",84],[10,"peekable","","",84],[10,"skip_while","","",84],[10,"take_while","","",84],[10,"skip","","",84],[10,"take","","",84],[10,"scan","","",84],[10,"flat_map","","",84],[10,"fuse","","",84],[10,"inspect","","",84],[10,"by_ref","","",84],[10,"advance","","",84],[10,"collect","","",84],[10,"nth","","",84],[10,"last","","",84],[10,"fold","","",84],[10,"count","","",84],[10,"all","","",84],[10,"any","","",84],[10,"find","","",84],[10,"position","","",84],[10,"max_by","","",84],[10,"min_by","","",84],[10,"indexable","","",84],[10,"idx","","",84],[10,"clone","","",85],[10,"clone_from","","",85],[10,"next","","",85],[10,"size_hint","","",85],[10,"size_hint","","",85],[10,"chain","","",85],[10,"zip","","",85],[10,"map","","",85],[10,"filter","","",85],[10,"filter_map","","",85],[10,"enumerate","","",85],[10,"peekable","","",85],[10,"skip_while","","",85],[10,"take_while","","",85],[10,"skip","","",85],[10,"take","","",85],[10,"scan","","",85],[10,"flat_map","","",85],[10,"fuse","","",85],[10,"inspect","","",85],[10,"by_ref","","",85],[10,"advance","","",85],[10,"collect","","",85],[10,"nth","","",85],[10,"last","","",85],[10,"fold","","",85],[10,"count","","",85],[10,"all","","",85],[10,"any","","",85],[10,"find","","",85],[10,"position","","",85],[10,"max_by","","",85],[10,"min_by","","",85],[10,"indexable","","",85],[10,"idx","","",85],[10,"next","","",86],[10,"size_hint","","",86],[10,"size_hint","","",86],[10,"chain","","",86],[10,"zip","","",86],[10,"map","","",86],[10,"filter","","",86],[10,"filter_map","","",86],[10,"enumerate","","",86],[10,"peekable","","",86],[10,"skip_while","","",86],[10,"take_while","","",86],[10,"skip","","",86],[10,"take","","",86],[10,"scan","","",86],[10,"flat_map","","",86],[10,"fuse","","",86],[10,"inspect","","",86],[10,"by_ref","","",86],[10,"advance","","",86],[10,"collect","","",86],[10,"nth","","",86],[10,"last","","",86],[10,"fold","","",86],[10,"count","","",86],[10,"all","","",86],[10,"any","","",86],[10,"find","","",86],[10,"position","","",86],[10,"max_by","","",86],[10,"min_by","","",86],[10,"next","","",87],[10,"size_hint","","",87],[10,"size_hint","","",87],[10,"chain","","",87],[10,"zip","","",87],[10,"map","","",87],[10,"filter","","",87],[10,"filter_map","","",87],[10,"enumerate","","",87],[10,"peekable","","",87],[10,"skip_while","","",87],[10,"take_while","","",87],[10,"skip","","",87],[10,"take","","",87],[10,"scan","","",87],[10,"flat_map","","",87],[10,"fuse","","",87],[10,"inspect","","",87],[10,"by_ref","","",87],[10,"advance","","",87],[10,"collect","","",87],[10,"nth","","",87],[10,"last","","",87],[10,"fold","","",87],[10,"count","","",87],[10,"all","","",87],[10,"any","","",87],[10,"find","","",87],[10,"position","","",87],[10,"max_by","","",87],[10,"min_by","","",87],[10,"next_back","","",87],[10,"rev","","",87],[10,"clone","","",88],[10,"clone_from","","",88],[10,"next","","",88],[10,"size_hint","","",88],[10,"size_hint","","",88],[10,"chain","","",88],[10,"zip","","",88],[10,"map","","",88],[10,"filter","","",88],[10,"filter_map","","",88],[10,"enumerate","","",88],[10,"peekable","","",88],[10,"skip_while","","",88],[10,"take_while","","",88],[10,"skip","","",88],[10,"take","","",88],[10,"scan","","",88],[10,"flat_map","","",88],[10,"fuse","","",88],[10,"inspect","","",88],[10,"by_ref","","",88],[10,"advance","","",88],[10,"collect","","",88],[10,"nth","","",88],[10,"last","","",88],[10,"fold","","",88],[10,"count","","",88],[10,"all","","",88],[10,"any","","",88],[10,"find","","",88],[10,"position","","",88],[10,"max_by","","",88],[10,"min_by","","",88],[10,"next_back","","",88],[10,"rev","","",88],[10,"indexable","","",88],[10,"idx","","",88],[10,"reset_fuse","","Resets the fuse such that the next call to .next() or .next_back() will\ncall the underlying iterator again even if it previously returned None.",88],[10,"next","","",71],[10,"size_hint","","",71],[10,"size_hint","","",71],[10,"chain","","",71],[10,"zip","","",71],[10,"map","","",71],[10,"filter","","",71],[10,"filter_map","","",71],[10,"enumerate","","",71],[10,"peekable","","",71],[10,"skip_while","","",71],[10,"take_while","","",71],[10,"skip","","",71],[10,"take","","",71],[10,"scan","","",71],[10,"flat_map","","",71],[10,"fuse","","",71],[10,"inspect","","",71],[10,"by_ref","","",71],[10,"advance","","",71],[10,"collect","","",71],[10,"nth","","",71],[10,"last","","",71],[10,"fold","","",71],[10,"count","","",71],[10,"all","","",71],[10,"any","","",71],[10,"find","","",71],[10,"position","","",71],[10,"max_by","","",71],[10,"min_by","","",71],[10,"next_back","","",71],[10,"rev","","",71],[10,"indexable","","",71],[10,"idx","","",71],[10,"new","","Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the iterator",89],[10,"next","","",89],[10,"size_hint","","",89],[10,"size_hint","","",89],[10,"chain","","",89],[10,"zip","","",89],[10,"map","","",89],[10,"filter","","",89],[10,"filter_map","","",89],[10,"enumerate","","",89],[10,"peekable","","",89],[10,"skip_while","","",89],[10,"take_while","","",89],[10,"skip","","",89],[10,"take","","",89],[10,"scan","","",89],[10,"flat_map","","",89],[10,"fuse","","",89],[10,"inspect","","",89],[10,"by_ref","","",89],[10,"advance","","",89],[10,"collect","","",89],[10,"nth","","",89],[10,"last","","",89],[10,"fold","","",89],[10,"count","","",89],[10,"all","","",89],[10,"any","","",89],[10,"find","","",89],[10,"position","","",89],[10,"max_by","","",89],[10,"min_by","","",89],[10,"clone","","",90],[10,"clone_from","","",90],[10,"next","","",90],[10,"size_hint","","",90],[10,"size_hint","","",90],[10,"chain","","",90],[10,"zip","","",90],[10,"map","","",90],[10,"filter","","",90],[10,"filter_map","","",90],[10,"enumerate","","",90],[10,"peekable","","",90],[10,"skip_while","","",90],[10,"take_while","","",90],[10,"skip","","",90],[10,"take","","",90],[10,"scan","","",90],[10,"flat_map","","",90],[10,"fuse","","",90],[10,"inspect","","",90],[10,"by_ref","","",90],[10,"advance","","",90],[10,"collect","","",90],[10,"nth","","",90],[10,"last","","",90],[10,"fold","","",90],[10,"count","","",90],[10,"all","","",90],[10,"any","","",90],[10,"find","","",90],[10,"position","","",90],[10,"max_by","","",90],[10,"min_by","","",90],[10,"clone","","",91],[10,"clone_from","","",91],[10,"next","","",91],[10,"size_hint","","",91],[10,"size_hint","","",91],[10,"chain","","",91],[10,"zip","","",91],[10,"map","","",91],[10,"filter","","",91],[10,"filter_map","","",91],[10,"enumerate","","",91],[10,"peekable","","",91],[10,"skip_while","","",91],[10,"take_while","","",91],[10,"skip","","",91],[10,"take","","",91],[10,"scan","","",91],[10,"flat_map","","",91],[10,"fuse","","",91],[10,"inspect","","",91],[10,"by_ref","","",91],[10,"advance","","",91],[10,"collect","","",91],[10,"nth","","",91],[10,"last","","",91],[10,"fold","","",91],[10,"count","","",91],[10,"all","","",91],[10,"any","","",91],[10,"find","","",91],[10,"position","","",91],[10,"max_by","","",91],[10,"min_by","","",91],[10,"next_back","","",91],[10,"rev","","",91],[10,"clone","","",92],[10,"clone_from","","",92],[10,"next","","",92],[10,"size_hint","","",92],[10,"size_hint","","",92],[10,"chain","","",92],[10,"zip","","",92],[10,"map","","",92],[10,"filter","","",92],[10,"filter_map","","",92],[10,"enumerate","","",92],[10,"peekable","","",92],[10,"skip_while","","",92],[10,"take_while","","",92],[10,"skip","","",92],[10,"take","","",92],[10,"scan","","",92],[10,"flat_map","","",92],[10,"fuse","","",92],[10,"inspect","","",92],[10,"by_ref","","",92],[10,"advance","","",92],[10,"collect","","",92],[10,"nth","","",92],[10,"last","","",92],[10,"fold","","",92],[10,"count","","",92],[10,"all","","",92],[10,"any","","",92],[10,"find","","",92],[10,"position","","",92],[10,"max_by","","",92],[10,"min_by","","",92],[10,"next_back","","",92],[10,"rev","","",92],[10,"clone","","",93],[10,"clone_from","","",93],[10,"next","","",93],[10,"size_hint","","",93],[10,"chain","","",93],[10,"zip","","",93],[10,"map","","",93],[10,"filter","","",93],[10,"filter_map","","",93],[10,"enumerate","","",93],[10,"peekable","","",93],[10,"skip_while","","",93],[10,"take_while","","",93],[10,"skip","","",93],[10,"take","","",93],[10,"scan","","",93],[10,"flat_map","","",93],[10,"fuse","","",93],[10,"inspect","","",93],[10,"by_ref","","",93],[10,"advance","","",93],[10,"collect","","",93],[10,"nth","","",93],[10,"last","","",93],[10,"fold","","",93],[10,"count","","",93],[10,"all","","",93],[10,"any","","",93],[10,"find","","",93],[10,"position","","",93],[10,"max_by","","",93],[10,"min_by","","",93],[10,"clone","","",94],[10,"clone_from","","",94],[10,"next","","",94],[10,"size_hint","","",94],[10,"chain","","",94],[10,"zip","","",94],[10,"map","","",94],[10,"filter","","",94],[10,"filter_map","","",94],[10,"enumerate","","",94],[10,"peekable","","",94],[10,"skip_while","","",94],[10,"take_while","","",94],[10,"skip","","",94],[10,"take","","",94],[10,"scan","","",94],[10,"flat_map","","",94],[10,"fuse","","",94],[10,"inspect","","",94],[10,"by_ref","","",94],[10,"advance","","",94],[10,"collect","","",94],[10,"nth","","",94],[10,"last","","",94],[10,"fold","","",94],[10,"count","","",94],[10,"all","","",94],[10,"any","","",94],[10,"find","","",94],[10,"position","","",94],[10,"max_by","","",94],[10,"min_by","","",94],[10,"clone","","",95],[10,"clone_from","","",95],[10,"new","","Create a new `Repeat` that endlessly repeats the element `elt`.",95],[10,"next","","",95],[10,"size_hint","","",95],[10,"size_hint","","",95],[10,"chain","","",95],[10,"zip","","",95],[10,"map","","",95],[10,"filter","","",95],[10,"filter_map","","",95],[10,"enumerate","","",95],[10,"peekable","","",95],[10,"skip_while","","",95],[10,"take_while","","",95],[10,"skip","","",95],[10,"take","","",95],[10,"scan","","",95],[10,"flat_map","","",95],[10,"fuse","","",95],[10,"inspect","","",95],[10,"by_ref","","",95],[10,"advance","","",95],[10,"collect","","",95],[10,"nth","","",95],[10,"last","","",95],[10,"fold","","",95],[10,"count","","",95],[10,"all","","",95],[10,"any","","",95],[10,"find","","",95],[10,"position","","",95],[10,"max_by","","",95],[10,"min_by","","",95],[10,"next_back","","",95],[10,"rev","","",95],[10,"indexable","","",95],[10,"idx","","",95],[10,"fmt","core::option","",96],[10,"cmp","","",96],[10,"assert_receiver_is_total_eq","","",96],[10,"partial_cmp","","",96],[10,"lt","","",96],[10,"le","","",96],[10,"gt","","",96],[10,"ge","","",96],[10,"lt","","",96],[10,"le","","",96],[10,"gt","","",96],[10,"ge","","",96],[10,"eq","","",96],[10,"ne","","",96],[10,"ne","","",96],[10,"clone","","",96],[10,"clone_from","","",96],[10,"is_some","","Returns `true` if the option is a `Some` value",96],[10,"is_none","","Returns `true` if the option is a `None` value",96],[10,"as_ref","","Convert from `Option<T>` to `Option<&T>`",96],[10,"as_mut","","Convert from `Option<T>` to `Option<&mut T>`",96],[10,"as_mut_slice","","Convert from `Option<T>` to `&mut [T]` (without copying)",96],[10,"expect","","Unwraps an option, yielding the content of a `Some`",96],[10,"unwrap","","Returns the inner `T` of a `Some(T)`.",96],[10,"unwrap_or","","Returns the contained value or a default.",96],[10,"unwrap_or_else","","Returns the contained value or computes it from a closure.",96],[10,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",96],[10,"map_or","","Applies a function to the contained value or returns a default.",96],[10,"map_or_else","","Applies a function to the contained value or computes a default.",96],[10,"mutate","","Deprecated.",96],[10,"mutate_or_set","","Deprecated.",96],[10,"iter","","Returns an iterator over the possibly contained value.",96],[10,"mut_iter","","Deprecated: use `iter_mut`",96],[10,"iter_mut","","Returns a mutable iterator over the possibly contained value.",96],[10,"move_iter","","Deprecated: use `into_iter`.",96],[10,"into_iter","","Returns a consuming iterator over the possibly contained value.",96],[10,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",96],[10,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",96],[10,"or","","Returns the option if it contains a value, otherwise returns `optb`.",96],[10,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",96],[10,"take","","Takes the value out of the option, leaving a `None` in its place.",96],[10,"filtered","","Deprecated.",96],[10,"while_some","","Deprecated.",96],[10,"take_unwrap","","Deprecated: use `take().unwrap()` instead.",96],[10,"get_ref","","Deprecated: use `as_ref().unwrap()` instead.",96],[10,"get_mut_ref","","Deprecated: use `as_mut().unwrap()` instead.",96],[10,"unwrap_or_default","","Returns the contained value or a default",96],[10,"as_slice","","Convert from `Option<T>` to `&[T]` (without copying)",96],[10,"default","","",96],[10,"clone","","",97],[10,"clone_from","","",97],[10,"next","","",97],[10,"size_hint","","",97],[10,"size_hint","","",97],[10,"chain","","",97],[10,"zip","","",97],[10,"map","","",97],[10,"filter","","",97],[10,"filter_map","","",97],[10,"enumerate","","",97],[10,"peekable","","",97],[10,"skip_while","","",97],[10,"take_while","","",97],[10,"skip","","",97],[10,"take","","",97],[10,"scan","","",97],[10,"flat_map","","",97],[10,"fuse","","",97],[10,"inspect","","",97],[10,"by_ref","","",97],[10,"advance","","",97],[10,"collect","","",97],[10,"nth","","",97],[10,"last","","",97],[10,"fold","","",97],[10,"count","","",97],[10,"all","","",97],[10,"any","","",97],[10,"find","","",97],[10,"position","","",97],[10,"max_by","","",97],[10,"min_by","","",97],[10,"next_back","","",97],[10,"rev","","",97],[10,"rposition","","",97],[10,"len","","",97],[10,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",96],[10,"fmt","core::result","",98],[10,"cmp","","",98],[10,"assert_receiver_is_total_eq","","",98],[10,"partial_cmp","","",98],[10,"lt","","",98],[10,"le","","",98],[10,"gt","","",98],[10,"ge","","",98],[10,"lt","","",98],[10,"le","","",98],[10,"gt","","",98],[10,"ge","","",98],[10,"eq","","",98],[10,"ne","","",98],[10,"ne","","",98],[10,"clone","","",98],[10,"clone_from","","",98],[10,"is_ok","","Returns true if the result is `Ok`",98],[10,"is_err","","Returns true if the result is `Err`",98],[10,"ok","","Convert from `Result<T, E>` to `Option<T>`",98],[10,"err","","Convert from `Result<T, E>` to `Option<E>`",98],[10,"as_ref","","Convert from `Result<T, E>` to `Result<&T, &E>`",98],[10,"as_mut","","Convert from `Result<T, E>` to `Result<&mut T, &mut E>`",98],[10,"as_mut_slice","","Convert from `Result<T, E>` to `&mut [T]` (without copying)",98],[10,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",98],[10,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",98],[10,"iter","","Returns an iterator over the possibly contained value.",98],[10,"mut_iter","","Deprecated: use `iter_mut`.",98],[10,"iter_mut","","Returns a mutable iterator over the possibly contained value.",98],[10,"move_iter","","Deprecated: `use into_iter`.",98],[10,"into_iter","","Returns a consuming iterator over the possibly contained value.",98],[10,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",98],[10,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",98],[10,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",98],[10,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",98],[10,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",98],[10,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",98],[10,"unwrap_or_handle","","Deprecated name for `unwrap_or_else()`.",98],[10,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",98],[10,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",98],[10,"as_slice","","Convert from `Result<T, E>` to `&[T]` (without copying)",98],[10,"clone","","",99],[10,"clone_from","","",99],[10,"next","","",99],[10,"size_hint","","",99],[10,"size_hint","","",99],[10,"chain","","",99],[10,"zip","","",99],[10,"map","","",99],[10,"filter","","",99],[10,"filter_map","","",99],[10,"enumerate","","",99],[10,"peekable","","",99],[10,"skip_while","","",99],[10,"take_while","","",99],[10,"skip","","",99],[10,"take","","",99],[10,"scan","","",99],[10,"flat_map","","",99],[10,"fuse","","",99],[10,"inspect","","",99],[10,"by_ref","","",99],[10,"advance","","",99],[10,"collect","","",99],[10,"nth","","",99],[10,"last","","",99],[10,"fold","","",99],[10,"count","","",99],[10,"all","","",99],[10,"any","","",99],[10,"find","","",99],[10,"position","","",99],[10,"max_by","","",99],[10,"min_by","","",99],[10,"next_back","","",99],[10,"rev","","",99],[10,"rposition","","",99],[10,"len","","",99],[10,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",98],[10,"fmt","core::simd","",100],[10,"fmt","","",101],[10,"fmt","","",102],[10,"fmt","","",103],[10,"fmt","","",104],[10,"fmt","","",105],[10,"fmt","","",106],[10,"fmt","","",107],[10,"fmt","","",108],[10,"fmt","","",109],[10,"next","core::slice","",110],[10,"size_hint","","",110],[10,"size_hint","","",110],[10,"chain","","",110],[10,"zip","","",110],[10,"map","","",110],[10,"filter","","",110],[10,"filter_map","","",110],[10,"enumerate","","",110],[10,"peekable","","",110],[10,"skip_while","","",110],[10,"take_while","","",110],[10,"skip","","",110],[10,"take","","",110],[10,"scan","","",110],[10,"flat_map","","",110],[10,"fuse","","",110],[10,"inspect","","",110],[10,"by_ref","","",110],[10,"advance","","",110],[10,"collect","","",110],[10,"nth","","",110],[10,"last","","",110],[10,"fold","","",110],[10,"count","","",110],[10,"all","","",110],[10,"any","","",110],[10,"find","","",110],[10,"position","","",110],[10,"max_by","","",110],[10,"min_by","","",110],[10,"next_back","","",110],[10,"rev","","",110],[10,"rposition","","",110],[10,"len","","",110],[10,"clone","","",110],[10,"clone_from","","",110],[10,"indexable","","",110],[10,"idx","","",110],[10,"next","","",111],[10,"size_hint","","",111],[10,"size_hint","","",111],[10,"chain","","",111],[10,"zip","","",111],[10,"map","","",111],[10,"filter","","",111],[10,"filter_map","","",111],[10,"enumerate","","",111],[10,"peekable","","",111],[10,"skip_while","","",111],[10,"take_while","","",111],[10,"skip","","",111],[10,"take","","",111],[10,"scan","","",111],[10,"flat_map","","",111],[10,"fuse","","",111],[10,"inspect","","",111],[10,"by_ref","","",111],[10,"advance","","",111],[10,"collect","","",111],[10,"nth","","",111],[10,"last","","",111],[10,"fold","","",111],[10,"count","","",111],[10,"all","","",111],[10,"any","","",111],[10,"find","","",111],[10,"position","","",111],[10,"max_by","","",111],[10,"min_by","","",111],[10,"next_back","","",111],[10,"rev","","",111],[10,"rposition","","",111],[10,"len","","",111],[10,"next","","",112],[10,"size_hint","","",112],[10,"size_hint","","",112],[10,"chain","","",112],[10,"zip","","",112],[10,"map","","",112],[10,"filter","","",112],[10,"filter_map","","",112],[10,"enumerate","","",112],[10,"peekable","","",112],[10,"skip_while","","",112],[10,"take_while","","",112],[10,"skip","","",112],[10,"take","","",112],[10,"scan","","",112],[10,"flat_map","","",112],[10,"fuse","","",112],[10,"inspect","","",112],[10,"by_ref","","",112],[10,"advance","","",112],[10,"collect","","",112],[10,"nth","","",112],[10,"last","","",112],[10,"fold","","",112],[10,"count","","",112],[10,"all","","",112],[10,"any","","",112],[10,"find","","",112],[10,"position","","",112],[10,"max_by","","",112],[10,"min_by","","",112],[10,"next_back","","",112],[10,"rev","","",112],[10,"next","","",113],[10,"size_hint","","",113],[10,"size_hint","","",113],[10,"chain","","",113],[10,"zip","","",113],[10,"map","","",113],[10,"filter","","",113],[10,"filter_map","","",113],[10,"enumerate","","",113],[10,"peekable","","",113],[10,"skip_while","","",113],[10,"take_while","","",113],[10,"skip","","",113],[10,"take","","",113],[10,"scan","","",113],[10,"flat_map","","",113],[10,"fuse","","",113],[10,"inspect","","",113],[10,"by_ref","","",113],[10,"advance","","",113],[10,"collect","","",113],[10,"nth","","",113],[10,"last","","",113],[10,"fold","","",113],[10,"count","","",113],[10,"all","","",113],[10,"any","","",113],[10,"find","","",113],[10,"position","","",113],[10,"max_by","","",113],[10,"min_by","","",113],[10,"next_back","","",113],[10,"rev","","",113],[10,"next","","",114],[10,"size_hint","","",114],[10,"size_hint","","",114],[10,"chain","","",114],[10,"zip","","",114],[10,"map","","",114],[10,"filter","","",114],[10,"filter_map","","",114],[10,"enumerate","","",114],[10,"peekable","","",114],[10,"skip_while","","",114],[10,"take_while","","",114],[10,"skip","","",114],[10,"take","","",114],[10,"scan","","",114],[10,"flat_map","","",114],[10,"fuse","","",114],[10,"inspect","","",114],[10,"by_ref","","",114],[10,"advance","","",114],[10,"collect","","",114],[10,"nth","","",114],[10,"last","","",114],[10,"fold","","",114],[10,"count","","",114],[10,"all","","",114],[10,"any","","",114],[10,"find","","",114],[10,"position","","",114],[10,"max_by","","",114],[10,"min_by","","",114],[10,"clone","","",115],[10,"clone_from","","",115],[10,"next","","",115],[10,"size_hint","","",115],[10,"size_hint","","",115],[10,"chain","","",115],[10,"zip","","",115],[10,"map","","",115],[10,"filter","","",115],[10,"filter_map","","",115],[10,"enumerate","","",115],[10,"peekable","","",115],[10,"skip_while","","",115],[10,"take_while","","",115],[10,"skip","","",115],[10,"take","","",115],[10,"scan","","",115],[10,"flat_map","","",115],[10,"fuse","","",115],[10,"inspect","","",115],[10,"by_ref","","",115],[10,"advance","","",115],[10,"collect","","",115],[10,"nth","","",115],[10,"last","","",115],[10,"fold","","",115],[10,"count","","",115],[10,"all","","",115],[10,"any","","",115],[10,"find","","",115],[10,"position","","",115],[10,"max_by","","",115],[10,"min_by","","",115],[10,"clone","","",116],[10,"clone_from","","",116],[10,"next","","",116],[10,"size_hint","","",116],[10,"size_hint","","",116],[10,"chain","","",116],[10,"zip","","",116],[10,"map","","",116],[10,"filter","","",116],[10,"filter_map","","",116],[10,"enumerate","","",116],[10,"peekable","","",116],[10,"skip_while","","",116],[10,"take_while","","",116],[10,"skip","","",116],[10,"take","","",116],[10,"scan","","",116],[10,"flat_map","","",116],[10,"fuse","","",116],[10,"inspect","","",116],[10,"by_ref","","",116],[10,"advance","","",116],[10,"collect","","",116],[10,"nth","","",116],[10,"last","","",116],[10,"fold","","",116],[10,"count","","",116],[10,"all","","",116],[10,"any","","",116],[10,"find","","",116],[10,"position","","",116],[10,"max_by","","",116],[10,"min_by","","",116],[10,"next_back","","",116],[10,"rev","","",116],[10,"indexable","","",116],[10,"idx","","",116],[10,"next","","",117],[10,"size_hint","","",117],[10,"size_hint","","",117],[10,"chain","","",117],[10,"zip","","",117],[10,"map","","",117],[10,"filter","","",117],[10,"filter_map","","",117],[10,"enumerate","","",117],[10,"peekable","","",117],[10,"skip_while","","",117],[10,"take_while","","",117],[10,"skip","","",117],[10,"take","","",117],[10,"scan","","",117],[10,"flat_map","","",117],[10,"fuse","","",117],[10,"inspect","","",117],[10,"by_ref","","",117],[10,"advance","","",117],[10,"collect","","",117],[10,"nth","","",117],[10,"last","","",117],[10,"fold","","",117],[10,"count","","",117],[10,"all","","",117],[10,"any","","",117],[10,"find","","",117],[10,"position","","",117],[10,"max_by","","",117],[10,"min_by","","",117],[10,"next_back","","",117],[10,"rev","","",117],[10,"fmt","","",118],[10,"eq","","",118],[10,"ne","","",118],[10,"ne","","",118],[10,"found","","Converts a `Found` to `Some`, `NotFound` to `None`.\nSimilar to `Result::ok`.",118],[10,"not_found","","Convert a `Found` to `None`, `NotFound` to `Some`.\nSimilar to `Result::err`.",118],[10,"clone","core::str","",119],[10,"clone_from","","",119],[10,"next","","",119],[10,"size_hint","","",119],[10,"size_hint","","",119],[10,"chain","","",119],[10,"zip","","",119],[10,"map","","",119],[10,"filter","","",119],[10,"filter_map","","",119],[10,"enumerate","","",119],[10,"peekable","","",119],[10,"skip_while","","",119],[10,"take_while","","",119],[10,"skip","","",119],[10,"take","","",119],[10,"scan","","",119],[10,"flat_map","","",119],[10,"fuse","","",119],[10,"inspect","","",119],[10,"by_ref","","",119],[10,"advance","","",119],[10,"collect","","",119],[10,"nth","","",119],[10,"last","","",119],[10,"fold","","",119],[10,"count","","",119],[10,"all","","",119],[10,"any","","",119],[10,"find","","",119],[10,"position","","",119],[10,"max_by","","",119],[10,"min_by","","",119],[10,"next_back","","",119],[10,"rev","","",119],[10,"clone","","",120],[10,"clone_from","","",120],[10,"next","","",120],[10,"size_hint","","",120],[10,"size_hint","","",120],[10,"chain","","",120],[10,"zip","","",120],[10,"map","","",120],[10,"filter","","",120],[10,"filter_map","","",120],[10,"enumerate","","",120],[10,"peekable","","",120],[10,"skip_while","","",120],[10,"take_while","","",120],[10,"skip","","",120],[10,"take","","",120],[10,"scan","","",120],[10,"flat_map","","",120],[10,"fuse","","",120],[10,"inspect","","",120],[10,"by_ref","","",120],[10,"advance","","",120],[10,"collect","","",120],[10,"nth","","",120],[10,"last","","",120],[10,"fold","","",120],[10,"count","","",120],[10,"all","","",120],[10,"any","","",120],[10,"find","","",120],[10,"position","","",120],[10,"max_by","","",120],[10,"min_by","","",120],[10,"next_back","","",120],[10,"rev","","",120],[10,"clone","","",121],[10,"clone_from","","",121],[10,"clone","","",122],[10,"clone_from","","",122],[10,"next","","",121],[10,"size_hint","","",121],[10,"chain","","",121],[10,"zip","","",121],[10,"map","","",121],[10,"filter","","",121],[10,"filter_map","","",121],[10,"enumerate","","",121],[10,"peekable","","",121],[10,"skip_while","","",121],[10,"take_while","","",121],[10,"skip","","",121],[10,"take","","",121],[10,"scan","","",121],[10,"flat_map","","",121],[10,"fuse","","",121],[10,"inspect","","",121],[10,"by_ref","","",121],[10,"advance","","",121],[10,"collect","","",121],[10,"nth","","",121],[10,"last","","",121],[10,"fold","","",121],[10,"count","","",121],[10,"all","","",121],[10,"any","","",121],[10,"find","","",121],[10,"position","","",121],[10,"max_by","","",121],[10,"min_by","","",121],[10,"next_back","","",121],[10,"rev","","",121],[10,"next","","",122],[10,"size_hint","","",122],[10,"chain","","",122],[10,"zip","","",122],[10,"map","","",122],[10,"filter","","",122],[10,"filter_map","","",122],[10,"enumerate","","",122],[10,"peekable","","",122],[10,"skip_while","","",122],[10,"take_while","","",122],[10,"skip","","",122],[10,"take","","",122],[10,"scan","","",122],[10,"flat_map","","",122],[10,"fuse","","",122],[10,"inspect","","",122],[10,"by_ref","","",122],[10,"advance","","",122],[10,"collect","","",122],[10,"nth","","",122],[10,"last","","",122],[10,"fold","","",122],[10,"count","","",122],[10,"all","","",122],[10,"any","","",122],[10,"find","","",122],[10,"position","","",122],[10,"max_by","","",122],[10,"min_by","","",122],[10,"clone","","",123],[10,"clone_from","","",123],[10,"clone","","",124],[10,"clone_from","","",124],[10,"clone","","",125],[10,"clone_from","","",125],[10,"clone","","",126],[10,"clone_from","","",126],[10,"clone","","",127],[10,"clone_from","","",127],[10,"next","","",126],[10,"size_hint","","",126],[10,"chain","","",126],[10,"zip","","",126],[10,"map","","",126],[10,"filter","","",126],[10,"filter_map","","",126],[10,"enumerate","","",126],[10,"peekable","","",126],[10,"skip_while","","",126],[10,"take_while","","",126],[10,"skip","","",126],[10,"take","","",126],[10,"scan","","",126],[10,"flat_map","","",126],[10,"fuse","","",126],[10,"inspect","","",126],[10,"by_ref","","",126],[10,"advance","","",126],[10,"collect","","",126],[10,"nth","","",126],[10,"last","","",126],[10,"fold","","",126],[10,"count","","",126],[10,"all","","",126],[10,"any","","",126],[10,"find","","",126],[10,"position","","",126],[10,"max_by","","",126],[10,"min_by","","",126],[10,"next","","",127],[10,"size_hint","","",127],[10,"chain","","",127],[10,"zip","","",127],[10,"map","","",127],[10,"filter","","",127],[10,"filter_map","","",127],[10,"enumerate","","",127],[10,"peekable","","",127],[10,"skip_while","","",127],[10,"take_while","","",127],[10,"skip","","",127],[10,"take","","",127],[10,"scan","","",127],[10,"flat_map","","",127],[10,"fuse","","",127],[10,"inspect","","",127],[10,"by_ref","","",127],[10,"advance","","",127],[10,"collect","","",127],[10,"nth","","",127],[10,"last","","",127],[10,"fold","","",127],[10,"count","","",127],[10,"all","","",127],[10,"any","","",127],[10,"find","","",127],[10,"position","","",127],[10,"max_by","","",127],[10,"min_by","","",127],[10,"clone","","",128],[10,"clone_from","","",128],[10,"next","","",128],[10,"size_hint","","",128],[10,"size_hint","","",128],[10,"chain","","",128],[10,"zip","","",128],[10,"map","","",128],[10,"filter","","",128],[10,"filter_map","","",128],[10,"enumerate","","",128],[10,"peekable","","",128],[10,"skip_while","","",128],[10,"take_while","","",128],[10,"skip","","",128],[10,"take","","",128],[10,"scan","","",128],[10,"flat_map","","",128],[10,"fuse","","",128],[10,"inspect","","",128],[10,"by_ref","","",128],[10,"advance","","",128],[10,"collect","","",128],[10,"nth","","",128],[10,"last","","",128],[10,"fold","","",128],[10,"count","","",128],[10,"all","","",128],[10,"any","","",128],[10,"find","","",128],[10,"position","","",128],[10,"max_by","","",128],[10,"min_by","","",128],[10,"clone","","",129],[10,"clone_from","","",129],[10,"fmt","","",130],[10,"clone","","",130],[10,"clone_from","","",130],[10,"assert_receiver_is_total_eq","","",130],[10,"eq","","",130],[10,"ne","","",130],[10,"ne","","",130],[10,"to_char_lossy","","Convert `self` to a `char`, taking `LoneSurrogate`s to the\nreplacement character (U+FFFD).",130],[10,"next","","",129],[10,"size_hint","","",129],[10,"size_hint","","",129],[10,"chain","","",129],[10,"zip","","",129],[10,"map","","",129],[10,"filter","","",129],[10,"filter_map","","",129],[10,"enumerate","","",129],[10,"peekable","","",129],[10,"skip_while","","",129],[10,"take_while","","",129],[10,"skip","","",129],[10,"take","","",129],[10,"scan","","",129],[10,"flat_map","","",129],[10,"fuse","","",129],[10,"inspect","","",129],[10,"by_ref","","",129],[10,"advance","","",129],[10,"collect","","",129],[10,"nth","","",129],[10,"last","","",129],[10,"fold","","",129],[10,"count","","",129],[10,"all","","",129],[10,"any","","",129],[10,"find","","",129],[10,"position","","",129],[10,"max_by","","",129],[10,"min_by","","",129],[10,"eq","core::fmt::num","",131],[10,"ne","","",131],[10,"ne","","",131],[10,"clone","","",131],[10,"clone_from","","",131],[10,"eq","","",132],[10,"ne","","",132],[10,"ne","","",132],[10,"clone","","",132],[10,"clone_from","","",132],[10,"eq","","",133],[10,"ne","","",133],[10,"ne","","",133],[10,"clone","","",133],[10,"clone_from","","",133],[10,"eq","","",134],[10,"ne","","",134],[10,"ne","","",134],[10,"clone","","",134],[10,"clone_from","","",134],[10,"eq","","",135],[10,"ne","","",135],[10,"ne","","",135],[10,"clone","","",135],[10,"clone_from","","",135],[10,"eq","","",136],[10,"ne","","",136],[10,"ne","","",136],[10,"clone","","",136],[10,"clone_from","","",136],[10,"fmt","","",137],[10,"fmt","","",137],[10,"fmt","","",137],[10,"fmt","","",137],[10,"fmt","","",137],[10,"fmt","","",137],[10,"fmt","","",137],[10,"fmt","","",137],[10,"fmt","","",137],[10,"fmt","","",137],[10,"eq","core::fmt::rt","",138],[10,"ne","","",138],[10,"ne","","",138],[10,"fmt","core::fmt","",139],[10,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a byte-array. The byte-array should *not* contain the sign\nfor the integer, that will be added by this method.",140],[10,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",140],[10,"write","","Writes some data to the underlying buffer contained within this\nformatter.",140],[10,"write_fmt","","Writes some formatted information into this instance",140],[10,"fmt","core::cell","",64],[10,"fmt","","",66],[10,"fmt","","",67],[1,"Chunks","collections::slice","An iterator over a vector in (non-overlapping) chunks (`size`\nelements at a time)."],[6,"Slice","","Any vector that can be represented as a slice."],[9,"as_slice","","Work with `self` as a slice.",141],[6,"ImmutableSlice","","Extension methods for immutable slices."],[9,"slice","","Returns a subslice spanning the interval [`start`, `end`).",142],[9,"slice_from","","Returns a subslice from `start` to the end of the slice.",142],[9,"slice_to","","Returns a subslice from the start of the slice to `end`.",142],[9,"split_at","","Divides one slice into two at an index.",142],[9,"iter","","Returns an iterator over the vector",142],[9,"split","","Returns an iterator over the subslices of the vector which are\nseparated by elements that match `pred`.  The matched element\nis not contained in the subslices.",142],[9,"splitn","","Returns an iterator over the subslices of the vector which are\nseparated by elements that match `pred`, limited to splitting\nat most `n` times.  The matched element is not contained in\nthe subslices.",142],[9,"rsplitn","","Returns an iterator over the subslices of the vector which are\nseparated by elements that match `pred` limited to splitting\nat most `n` times. This starts at the end of the vector and\nworks backwards.  The matched element is not contained in the\nsubslices.",142],[9,"windows","","Returns an iterator over all contiguous windows of length\n`size`. The windows overlap. If the vector is shorter than\n`size`, the iterator returns no values.",142],[9,"chunks","","\nReturns an iterator over `size` elements of the vector at a\ntime. The chunks do not overlap. If `size` does not divide the\nlength of the vector, then the last chunk will not have length\n`size`.",142],[9,"get","","Returns the element of a vector at the given index, or `None` if the\nindex is out of bounds",142],[9,"head","","Returns the first element of a vector, or `None` if it is empty",142],[9,"tail","","Returns all but the first element of a vector",142],[9,"tailn","","Returns all but the first `n' elements of a vector",142],[9,"init","","Returns all but the last element of a vector",142],[9,"initn","","Returns all but the last `n' elements of a vector",142],[9,"last","","Returns the last element of a vector, or `None` if it is empty.",142],[9,"unsafe_ref","","Returns a pointer to the element at the given index, without doing\nbounds checking.",142],[9,"unsafe_get","","Returns a pointer to the element at the given index, without doing\nbounds checking.",142],[9,"as_ptr","","Returns an unsafe pointer to the vector's buffer",142],[9,"bsearch","","Binary search a sorted vector with a comparator function.",142],[9,"binary_search","","Binary search a sorted vector with a comparator function.",142],[9,"shift_ref","","Returns an immutable reference to the first element in this slice\nand adjusts the slice in place so that it no longer contains\nthat element. O(1).",142],[9,"pop_ref","","Returns an immutable reference to the last element in this slice\nand adjusts the slice in place so that it no longer contains\nthat element. O(1).",142],[6,"ImmutablePartialEqSlice","","Extension methods for vectors contain `PartialEq` elements."],[9,"position_elem","","Find the first index containing a matching value",143],[9,"rposition_elem","","Find the last index containing a matching value",143],[9,"contains","","Return true if a vector contains an element with the given value",143],[9,"starts_with","","Returns true if `needle` is a prefix of the vector.",143],[9,"ends_with","","Returns true if `needle` is a suffix of the vector.",143],[6,"ImmutableOrdSlice","","Extension methods for vectors containing `Ord` elements."],[9,"bsearch_elem","","Binary search a sorted vector for a given element.",144],[9,"binary_search_elem","","Binary search a sorted vector for a given element.",144],[6,"MutableSlice","","Extension methods for vectors such that their elements are\nmutable."],[9,"get_mut","","Returns a mutable reference to the element at the given index,\nor `None` if the index is out of bounds",145],[9,"as_mut_slice","","Work with `self` as a mut slice.\nPrimarily intended for getting a &mut [T] from a [T, ..N].",145],[9,"mut_slice","","Deprecated: use `slice_mut`.",145],[9,"slice_mut","","Returns a mutable subslice spanning the interval [`start`, `end`).",145],[9,"mut_slice_from","","Deprecated: use `slice_from_mut`.",145],[9,"slice_from_mut","","Returns a mutable subslice from `start` to the end of the slice.",145],[9,"mut_slice_to","","Deprecated: use `slice_to_mut`.",145],[9,"slice_to_mut","","Returns a mutable subslice from the start of the slice to `end`.",145],[9,"mut_iter","","Deprecated: use `iter_mut`.",145],[9,"iter_mut","","Returns an iterator that allows modifying each value",145],[9,"mut_last","","Deprecated: use `last_mut`.",145],[9,"last_mut","","Returns a mutable pointer to the last item in the vector.",145],[9,"mut_split","","Deprecated: use `split_mut`.",145],[9,"split_mut","","Returns an iterator over the mutable subslices of the vector\nwhich are separated by elements that match `pred`.  The\nmatched element is not contained in the subslices.",145],[9,"mut_chunks","","Deprecated: use `chunks_mut`.",145],[9,"chunks_mut","","Returns an iterator over `chunk_size` elements of the vector at a time.\nThe chunks are mutable and do not overlap. If `chunk_size` does\nnot divide the length of the vector, then the last chunk will not\nhave length `chunk_size`.",145],[9,"mut_shift_ref","","Returns a mutable reference to the first element in this slice\nand adjusts the slice in place so that it no longer contains\nthat element. O(1).",145],[9,"mut_pop_ref","","Returns a mutable reference to the last element in this slice\nand adjusts the slice in place so that it no longer contains\nthat element. O(1).",145],[9,"swap","","Swaps two elements in a vector.",145],[9,"mut_split_at","","Deprecated: use `split_at_mut`.",145],[9,"split_at_mut","","Divides one `&mut` into two at an index.",145],[9,"reverse","","Reverse the order of elements in a vector, in place.",145],[9,"unsafe_mut_ref","","Deprecated: use `unsafe_mut`.",145],[9,"unsafe_mut","","Returns an unsafe mutable pointer to the element in index",145],[9,"as_mut_ptr","","Return an unsafe mutable pointer to the vector's buffer.",145],[9,"unsafe_set","","Unsafely sets the element in index to the value.",145],[9,"init_elem","","Unchecked vector index assignment.  Does not drop the\nold value and hence is only suitable when the vector\nis newly allocated.",145],[9,"copy_memory","","Copies raw bytes from `src` to `self`.",145],[1,"Items","","Immutable slice iterator"],[1,"MutItems","","Mutable slice iterator"],[1,"MutSplits","","An iterator over the subslices of the vector which are separated\nby elements that match `pred`."],[1,"MutChunks","","An iterator over a vector in (non-overlapping) mutable chunks (`size`  elements at a time). When\nthe vector len is not evenly divided by the chunk size, the last slice of the iteration will be\nthe remainder."],[1,"Splits","","An iterator over the slices of a vector separated by elements that\nmatch a predicate function."],[0,"bytes","","Operations on `[u8]`."],[6,"MutableByteVector","collections::slice::bytes","A trait for operations on mutable `[u8]`s."],[9,"set_memory","","Sets all bytes of the receiver to the given value.",146],[3,"copy_memory","","Copies data from `src` to `dst`"],[3,"mut_ref_slice","collections::slice","Converts a pointer to A into a slice of length 1 (without copying)."],[3,"ref_slice","","Converts a pointer to A into a slice of length 1 (without copying)."],[6,"MutableCloneableSlice","","Trait for &[T] where T is Cloneable"],[9,"copy_from","","Copies as many elements from `src` as it can into `self` (the\nshorter of `self.len()` and `src.len()`). Returns the number\nof elements copied.",147],[9,"clone_from_slice","","Copies as many elements from `src` as it can into `self` (the\nshorter of `self.len()` and `src.len()`). Returns the number\nof elements copied.",147],[16,"slice","","Utilities for slice manipulation"],[0,"str","collections","Unicode string manipulation (`str` type)"],[1,"Decompositions","collections::str","External iterator for a string's decomposition's characters.\nUse with the `std::iter` module."],[1,"Recompositions","","External iterator for a string's recomposition's characters.\nUse with the `std::iter` module."],[2,"MaybeOwned","","A string type that can hold either a `String` or a `&str`.\nThis can be useful as an optimization when an allocation is sometimes\nneeded but not always."],[12,"Slice","","A borrowed string.",148],[12,"Owned","","An owned string.",148],[3,"from_utf8_owned","","Deprecated. Replaced by `String::from_utf8`."],[3,"from_byte","","Deprecated. Replaced by `String::from_byte`."],[3,"from_char","","Deprecated. Use `String::from_char` or `char::to_string()` instead."],[3,"from_chars","","Deprecated. Replaced by `String::from_chars`."],[3,"replace","","Replaces all occurrences of one string with another."],[3,"from_utf16","","Deprecated. Use `String::from_utf16`."],[3,"from_utf16_lossy","","Deprecated. Use `String::from_utf16_lossy`."],[3,"from_utf8_lossy","","Deprecated. Use `String::from_utf8_lossy`."],[0,"raw","","Unsafe string operations."],[3,"from_buf_len","collections::str::raw","Deprecated. Replaced by `string::raw::from_buf_len`"],[3,"from_c_str","","Deprecated. Use `string::raw::from_buf`"],[3,"from_utf8_owned","","Deprecated. Replaced by `string::raw::from_utf8`"],[3,"from_byte","","Deprecated. Use `string::raw::from_utf8`"],[3,"from_utf8","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8."],[3,"c_str_to_static_slice","","Form a slice from a C string. Unsafe because the caller must ensure the\nC string has the static lifetime, or else the return value may be\ninvalidated later."],[3,"slice_bytes","","Takes a bytewise (not UTF-8) slice from a string."],[3,"slice_unchecked","","Takes a bytewise (not UTF-8) slice from a string."],[4,"SendStr","collections::str","A specialization of `MaybeOwned` to be sendable."],[6,"StrVector","","Methods for vectors of strings."],[9,"concat","","Concatenates a vector of strings.",149],[9,"connect","","Concatenates a vector of strings, placing a given separator between each.",149],[6,"IntoMaybeOwned","","Trait for moving into a `MaybeOwned`."],[9,"into_maybe_owned","","Moves `self` into a `MaybeOwned`.",150],[6,"StrAllocating","","Any string that can be represented as a slice."],[9,"into_string","","Converts `self` into a `String`, not making a copy if possible.",151],[10,"into_owned","","",151],[10,"escape_default","","Escapes each char in `s` with `char::escape_default`.",151],[10,"escape_unicode","","Escapes each char in `s` with `char::escape_unicode`.",151],[10,"replace","","Replaces all occurrences of one string with another.",151],[10,"to_owned","","",151],[10,"to_utf16","","Converts to a vector of `u16` encoded as UTF-16.",151],[10,"repeat","","Given a string, makes a new string with repeated copies of it.",151],[10,"lev_distance","","Returns the Levenshtein Distance between two strings.",151],[10,"nfd_chars","","Returns an iterator over the string in Unicode Normalization Form D\n(canonical decomposition).",151],[10,"nfkd_chars","","Returns an iterator over the string in Unicode Normalization Form KD\n(compatibility decomposition).",151],[10,"nfc_chars","","An Iterator over the string in Unicode Normalization Form C\n(canonical decomposition followed by canonical composition).",151],[10,"nfkc_chars","","An Iterator over the string in Unicode Normalization Form KC\n(compatibility decomposition followed by canonical composition).",151],[10,"clone","","",152],[10,"next","","",152],[10,"size_hint","","",152],[10,"clone","","",153],[10,"next","","",153],[10,"is_owned","","Returns `true` if this `MaybeOwned` wraps an owned string.",148],[10,"is_slice","","Returns `true` if this `MaybeOwned` wraps a borrowed string.",148],[10,"into_maybe_owned","","# Example",148],[10,"eq","","",148],[10,"partial_cmp","","",148],[10,"cmp","","",148],[10,"equiv","","",148],[10,"as_slice","","",148],[10,"into_string","","",148],[10,"len","","",148],[10,"clone","","",148],[10,"default","","",148],[10,"hash","","",148],[10,"fmt","","",148],[3,"from_utf8","","Converts a vector to a string slice without performing any allocations."],[6,"CharEq","","Something that can be used to compare against a character"],[9,"matches","","Determine if the splitter should split at the given character",154],[9,"only_ascii","","Indicate if this is only concerned about ASCII characters,\nwhich can allow for a faster implementation.",154],[1,"Chars","","Iterator for the char (representing *Unicode Scalar Values*) of a string"],[1,"CharOffsets","","External iterator for a string's characters and their byte offsets.\nUse with the `std::iter` module."],[4,"Bytes","",""],[1,"CharSplits","","An iterator over the substrings of a string, separated by `sep`."],[1,"CharSplitsN","","An iterator over the substrings of a string, separated by `sep`,\nsplitting at most `count` times."],[4,"AnyLines","",""],[1,"MatchIndices","","An iterator over the start and end indices of the matches of a\nsubstring within a larger string"],[1,"StrSplits","","An iterator over the substrings of a string separated by a given\nsearch string"],[3,"eq_slice","","Bytewise slice equality\nNOTE: This function is (ab)used in rustc::middle::trans::_match\nto compare &[u8] byte slices that are not necessarily valid UTF-8."],[3,"is_utf8","","Determines if a vector of bytes contains valid UTF-8."],[3,"is_utf16","","Determines if a vector of `u16` contains valid UTF-16"],[1,"Utf16Items","","An iterator that decodes UTF-16 encoded codepoints from a vector\nof `u16`s."],[2,"Utf16Item","","The possibilities for values decoded from a `u16` stream."],[12,"ScalarValue","","A valid codepoint.",130],[12,"LoneSurrogate","","An invalid surrogate without its pair.",130],[3,"utf16_items","","Create an iterator over the UTF-16 encoded codepoints in `v`,\nreturning invalid surrogates as `LoneSurrogate`s."],[3,"truncate_utf16_at_nul","","Return a slice of `v` ending at (and not including) the first NUL\n(0)."],[3,"utf8_char_width","","Given a first byte, determine how many bytes are in this UTF-8 character"],[1,"CharRange","","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string."],[11,"ch","","Current `char`",155],[11,"next","","Index of the first byte of the next `char`",155],[6,"Str","","Any string that can be represented as a slice"],[9,"as_slice","","Work with `self` as a slice.",156],[6,"StrSlice","","Methods for string slices"],[9,"contains","","Returns true if one string contains another",157],[9,"contains_char","","Returns true if a string contains a char.",157],[9,"chars","","An iterator over the characters of `self`. Note, this iterates\nover Unicode code-points, not Unicode graphemes.",157],[9,"bytes","","An iterator over the bytes of `self`",157],[9,"char_indices","","An iterator over the characters of `self` and their byte offsets.",157],[9,"split","","An iterator over substrings of `self`, separated by characters\nmatched by `sep`.",157],[9,"splitn","","An iterator over substrings of `self`, separated by characters\nmatched by `sep`, restricted to splitting at most `count`\ntimes.",157],[9,"split_terminator","","An iterator over substrings of `self`, separated by characters\nmatched by `sep`.",157],[9,"rsplitn","","An iterator over substrings of `self`, separated by characters\nmatched by `sep`, starting from the end of the string.\nRestricted to splitting at most `count` times.",157],[9,"match_indices","","An iterator over the start and end indices of the disjoint\nmatches of `sep` within `self`.",157],[9,"split_str","","An iterator over the substrings of `self` separated by `sep`.",157],[9,"lines","","An iterator over the lines of a string (subsequences separated\nby `\\n`). This does not include the empty string after a\ntrailing `\\n`.",157],[9,"lines_any","","An iterator over the lines of a string, separated by either\n`\\n` or `\\r\\n`. As with `.lines()`, this does not include an\nempty trailing line.",157],[9,"char_len","","Returns the number of Unicode code points (`char`) that a\nstring holds.",157],[9,"slice","","Returns a slice of the given string from the byte range\n[`begin`..`end`).",157],[9,"slice_from","","Returns a slice of the string from `begin` to its end.",157],[9,"slice_to","","Returns a slice of the string from the beginning to byte\n`end`.",157],[9,"slice_chars","","Returns a slice of the string from the character range\n[`begin`..`end`).",157],[9,"starts_with","","Returns true if `needle` is a prefix of the string.",157],[9,"ends_with","","Returns true if `needle` is a suffix of the string.",157],[9,"trim_chars","","Returns a string with characters that match `to_trim` removed.",157],[9,"trim_left_chars","","Returns a string with leading `chars_to_trim` removed.",157],[9,"trim_right_chars","","Returns a string with trailing `chars_to_trim` removed.",157],[9,"is_char_boundary","","Check that `index`-th byte lies at the start and/or end of a\nUTF-8 code point sequence.",157],[9,"char_range_at","","Pluck a character out of a string and return the index of the next\ncharacter.",157],[9,"char_range_at_reverse","","Given a byte position and a str, return the previous char and its position.",157],[9,"char_at","","Plucks the character starting at the `i`th byte of a string.",157],[9,"char_at_reverse","","Plucks the character ending at the `i`th byte of a string.",157],[9,"as_bytes","","Work with the byte buffer of a string as a byte slice.",157],[9,"find","","Returns the byte index of the first character of `self` that\nmatches `search`.",157],[9,"rfind","","Returns the byte index of the last character of `self` that\nmatches `search`.",157],[9,"find_str","","Returns the byte index of the first matching substring",157],[9,"slice_shift_char","","Retrieves the first character from a string slice and returns\nit. This does not allocate a new string; instead, it returns a\nslice that point one character beyond the character that was\nshifted. If the string does not contain any characters,\na tuple of None and an empty string is returned instead.",157],[9,"subslice_offset","","Returns the byte offset of an inner slice relative to an enclosing outer slice.",157],[9,"as_ptr","","Return an unsafe pointer to the strings buffer.",157],[9,"utf16_units","","Return an iterator of `u16` over the string encoded as UTF-16.",157],[6,"UnicodeStrSlice","","Methods for Unicode string slices"],[9,"graphemes","","Returns an iterator over the\n[grapheme clusters](http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries)\nof the string.",158],[9,"grapheme_indices","","Returns an iterator over the grapheme clusters of self and their byte offsets.\nSee `graphemes()` method for more information.",158],[9,"words","","An iterator over the words of a string (subsequences separated\nby any sequence of whitespace). Sequences of whitespace are\ncollapsed, so empty \"words\" are not included.",158],[9,"is_whitespace","","Returns true if the string contains only whitespace.",158],[9,"is_alphanumeric","","Returns true if the string contains only alphanumeric code\npoints.",158],[9,"width","","Returns a string's displayed width in columns, treating control\ncharacters as zero-width.",158],[9,"trim","","Returns a string with leading and trailing whitespace removed.",158],[9,"trim_left","","Returns a string with leading whitespace removed.",158],[9,"trim_right","","Returns a string with trailing whitespace removed.",158],[10,"clone","unicode::tables::grapheme","",159],[10,"clone_from","","",159],[10,"clone","unicode::u_str","",160],[10,"clone_from","","",160],[10,"next","","",160],[10,"size_hint","","",160],[10,"size_hint","","",160],[10,"chain","","",160],[10,"zip","","",160],[10,"map","","",160],[10,"filter","","",160],[10,"filter_map","","",160],[10,"enumerate","","",160],[10,"peekable","","",160],[10,"skip_while","","",160],[10,"take_while","","",160],[10,"skip","","",160],[10,"take","","",160],[10,"scan","","",160],[10,"flat_map","","",160],[10,"fuse","","",160],[10,"inspect","","",160],[10,"by_ref","","",160],[10,"advance","","",160],[10,"collect","","",160],[10,"nth","","",160],[10,"last","","",160],[10,"fold","","",160],[10,"count","","",160],[10,"all","","",160],[10,"any","","",160],[10,"find","","",160],[10,"position","","",160],[10,"max_by","","",160],[10,"min_by","","",160],[10,"next_back","","",160],[10,"rev","","",160],[10,"clone","","",161],[10,"clone_from","","",161],[10,"assert_receiver_is_total_eq","","",162],[10,"eq","","",162],[10,"ne","","",162],[10,"ne","","",162],[10,"size_hint","","",161],[10,"next","","",161],[10,"size_hint","","",161],[10,"chain","","",161],[10,"zip","","",161],[10,"map","","",161],[10,"filter","","",161],[10,"filter_map","","",161],[10,"enumerate","","",161],[10,"peekable","","",161],[10,"skip_while","","",161],[10,"take_while","","",161],[10,"skip","","",161],[10,"take","","",161],[10,"scan","","",161],[10,"flat_map","","",161],[10,"fuse","","",161],[10,"inspect","","",161],[10,"by_ref","","",161],[10,"advance","","",161],[10,"collect","","",161],[10,"nth","","",161],[10,"last","","",161],[10,"fold","","",161],[10,"count","","",161],[10,"all","","",161],[10,"any","","",161],[10,"find","","",161],[10,"position","","",161],[10,"max_by","","",161],[10,"min_by","","",161],[10,"next_back","","",161],[10,"rev","","",161],[4,"Words","collections::str",""],[1,"Graphemes","","External iterator for a string's\n[grapheme clusters](http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries)."],[1,"GraphemeIndices","","External iterator for grapheme clusters and byte offsets."],[16,"str","","Unicode string manipulation (`str` type)"],[0,"string","collections","An owned, growable string that enforces that its contents are valid UTF-8."],[1,"String","collections::string","A growable string stored as a UTF-8 encoded buffer."],[0,"raw","","Unsafe operations"],[3,"from_parts","collections::string::raw","Creates a new `String` from a length, capacity, and pointer."],[3,"from_buf_len","","Creates a `String` from a `*const u8` buffer of the given length."],[3,"from_buf","","Creates a `String` from a null-terminated `*const u8` buffer."],[3,"from_utf8","","Converts a vector of bytes to a new `String` without checking if\nit contains valid UTF-8. This is unsafe because it assumes that\nthe UTF-8-ness of the vector has already been validated."],[10,"cmp","collections::string","",163],[10,"partial_cmp","","",163],[10,"lt","","",163],[10,"le","","",163],[10,"gt","","",163],[10,"ge","","",163],[10,"eq","","",163],[10,"ne","","",163],[10,"clone","","",163],[10,"new","","Creates a new string buffer initialized with the empty string.",163],[10,"with_capacity","","Creates a new string buffer with the given capacity.\nThe string will be able to hold exactly `capacity` bytes without\nreallocating. If `capacity` is 0, the string will not allocate.",163],[10,"from_str","","Creates a new string buffer from the given string.",163],[10,"from_raw_parts","","Deprecated. Replaced by `string::raw::from_parts`",163],[10,"from_owned_str","","Deprecated.",163],[10,"from_utf8","","Returns the vector as a string buffer, if possible, taking care not to\ncopy it.",163],[10,"from_utf8_lossy","","Converts a vector of bytes to a new UTF-8 string.\nAny invalid UTF-8 sequences are replaced with U+FFFD REPLACEMENT CHARACTER.",163],[10,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",163],[10,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",163],[10,"from_chars","","Convert a vector of `char`s to a `String`.",163],[10,"into_bytes","","Return the underlying byte buffer, encoded as UTF-8.",163],[10,"append","","Pushes the given `String` onto this buffer then returns `self` so that it can be\nused again.",163],[10,"from_char","","Creates a string buffer by repeating a character `length` times.",163],[10,"from_byte","","Converts a byte to a UTF-8 string.",163],[10,"push_str","","Pushes the given string onto this string buffer.",163],[10,"grow","","Pushes `ch` onto the given string `count` times.",163],[10,"byte_capacity","","Returns the number of bytes that this string buffer can hold without reallocating.",163],[10,"reserve_additional","","Reserves capacity for at least `extra` additional bytes in this string buffer.",163],[10,"reserve","","Reserves capacity for at least `capacity` bytes in this string buffer.",163],[10,"reserve_exact","","Reserves capacity for exactly `capacity` bytes in this string buffer.",163],[10,"shrink_to_fit","","Shrinks the capacity of this string buffer to match its length.",163],[10,"push_char","","Adds the given character to the end of the string.",163],[10,"push_bytes","","Pushes the given bytes onto this string buffer.\nThis is unsafe because it does not check\nto ensure that the resulting string will be valid UTF-8.",163],[10,"as_bytes","","Works with the underlying buffer as a byte slice.",163],[10,"as_mut_bytes","","Works with the underlying buffer as a mutable byte slice.",163],[10,"truncate","","Shortens a string to the specified length.",163],[10,"push_byte","","Appends a byte to this string buffer.",163],[10,"pop_byte","","Removes the last byte from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",163],[10,"pop_char","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",163],[10,"shift_byte","","Removes the first byte from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",163],[10,"shift_char","","Removes the first character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",163],[10,"as_mut_vec","","Views the string buffer as a mutable sequence of bytes.",163],[10,"len","","",163],[10,"clear","","",163],[10,"from_iter","","",163],[10,"extend","","",163],[10,"as_slice","","",163],[10,"into_string","","",163],[10,"default","","",163],[10,"fmt","","",163],[10,"hash","","",163],[10,"equiv","","",163],[10,"add","","",163],[0,"vec","collections","A growable list type, written `Vec<T>` but pronounced 'vector.'"],[1,"Vec","collections::vec","An owned, growable vector."],[1,"MoveItems","","An iterator that moves out of a vector."],[3,"unzip","","Converts an iterator of pairs into a pair of vectors."],[0,"raw","","Unsafe vector operations."],[3,"from_buf","collections::vec::raw","Constructs a vector from an unsafe pointer to a buffer."],[10,"new","collections::vec","Constructs a new, empty `Vec`.",164],[10,"with_capacity","","Constructs a new, empty `Vec` with the specified capacity.",164],[10,"from_fn","","Creates and initializes a `Vec`.",164],[10,"from_raw_parts","","Creates a `Vec<T>` directly from the raw constituents.",164],[10,"partition","","Consumes the `Vec`, partitioning it based on a predicate.",164],[10,"append","","Deprecated, call `extend` instead.",164],[10,"from_slice","","Deprecated, call `to_vec()` instead",164],[10,"from_elem","","Constructs a `Vec` with copies of a value.",164],[10,"push_all","","Appends all elements in a slice to the `Vec`.",164],[10,"grow","","Grows the `Vec` in-place.",164],[10,"grow_set","","Sets the value of a vector element at a given index, growing the vector\nas needed.",164],[10,"partitioned","","Partitions a vector based on a predicate.",164],[10,"clone","","",164],[10,"clone_from","","",164],[10,"index","","",164],[10,"as_slice_","","",164],[10,"slice_from_","","",164],[10,"slice_to_","","",164],[10,"slice_","","",164],[10,"as_mut_slice_","","",164],[10,"slice_from_mut_","","",164],[10,"slice_to_mut_","","",164],[10,"slice_mut_","","",164],[10,"from_iter","","",164],[10,"extend","","",164],[10,"eq","","",164],[10,"partial_cmp","","",164],[10,"equiv","","",164],[10,"cmp","","",164],[10,"len","","",164],[10,"to_vec","","",164],[10,"into_vec","","",164],[10,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",164],[10,"reserve_additional","","Reserves capacity for at least `n` additional elements in the given\nvector.",164],[10,"reserve","","Reserves capacity for at least `n` elements in the given vector.",164],[10,"reserve_exact","","Reserves capacity for exactly `capacity` elements in the given vector.",164],[10,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",164],[10,"append_one","","Deprecated, call `push` instead",164],[10,"truncate","","Shorten a vector, dropping excess elements.",164],[10,"as_mut_slice","","Returns a mutable slice of the elements of `self`.",164],[10,"move_iter","","Deprecated: use `into_iter`.",164],[10,"into_iter","","Creates a consuming iterator, that is, one that moves each\nvalue out of the vector (from start to end). The vector cannot\nbe used after calling this.",164],[10,"set_len","","Sets the length of a vector.",164],[10,"get","","Returns a reference to the value at index `index`.",164],[10,"get_mut","","Returns a mutable reference to the value at index `index`.",164],[10,"iter","","Returns an iterator over references to the elements of the vector in\norder.",164],[10,"mut_iter","","Deprecated: use `iter_mut`.",164],[10,"iter_mut","","Returns an iterator over mutable references to the elements of the\nvector in order.",164],[10,"sort_by","","Sorts the vector, in place, using `compare` to compare elements.",164],[10,"slice","","Returns a slice of self spanning the interval [`start`, `end`).",164],[10,"tail","","Returns a slice containing all but the first element of the vector.",164],[10,"tailn","","Returns all but the first `n' elements of a vector.",164],[10,"last","","Returns a reference to the last element of a vector, or `None` if it is\nempty.",164],[10,"mut_last","","Deprecated: use `last_mut`.",164],[10,"last_mut","","Returns a mutable reference to the last element of a vector, or `None`\nif it is empty.",164],[10,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element. This does not preserve ordering, but is O(1).",164],[10,"unshift","","Prepends an element to the vector.",164],[10,"shift","","Removes the first element from a vector and returns it, or `None` if\nthe vector is empty.",164],[10,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",164],[10,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.\nReturns `None` if `i` is out of bounds.",164],[10,"push_all_move","","Takes ownership of the vector `other`, moving all elements into\nthe current vector. This does not copy any elements, and it is\nillegal to use the `other` vector after calling this method\n(because it is moved here).",164],[10,"mut_slice","","Deprecated: use `slice_mut`.",164],[10,"slice_mut","","Returns a mutable slice of `self` between `start` and `end`.",164],[10,"mut_slice_from","","Deprecated: use \"slice_from_mut\".",164],[10,"slice_from_mut","","Returns a mutable slice of `self` from `start` to the end of the `Vec`.",164],[10,"mut_slice_to","","Deprecated: use `slice_to_mut`.",164],[10,"slice_to_mut","","Returns a mutable slice of `self` from the start of the `Vec` to `end`.",164],[10,"mut_split_at","","Deprecated: use `split_at_mut`.",164],[10,"split_at_mut","","Returns a pair of mutable slices that divides the `Vec` at an index.",164],[10,"reverse","","Reverses the order of elements in a vector, in place.",164],[10,"slice_from","","Returns a slice of `self` from `start` to the end of the vec.",164],[10,"slice_to","","Returns a slice of self from the start of the vec to `end`.",164],[10,"init","","Returns a slice containing all but the last element of the vector.",164],[10,"as_ptr","","Returns an unsafe pointer to the vector's buffer.",164],[10,"as_mut_ptr","","Returns a mutable unsafe pointer to the vector's buffer.",164],[10,"retain","","Retains only the elements specified by the predicate.",164],[10,"grow_fn","","Expands a vector in place, initializing the new elements to the result of a function.",164],[10,"sort","","Sorts the vector in place.",164],[10,"clear","","",164],[10,"contains","","Returns true if a vector contains an element equal to the given value.",164],[10,"dedup","","Removes consecutive repeated elements in the vector.",164],[10,"as_slice","","Returns a slice into `self`.",164],[10,"add","","",164],[10,"drop","","",164],[10,"default","","",164],[10,"fmt","","",164],[10,"push","","Appends an element to the back of a collection.",164],[10,"pop","","",164],[10,"unwrap","","Drops all items that have not yet been moved and returns the empty vector.",165],[10,"next","","",165],[10,"size_hint","","",165],[10,"next_back","","",165],[10,"drop","","",165],[10,"map_in_place","","Converts a `Vec<T>` to a `Vec<U>` where `T` and `U` have the same\nnon-zero size and the same minimal alignment.",164],[0,"hash","collections","Generic hashing support."],[0,"sip","collections::hash","An implementation of SipHash 2-4."],[1,"SipState","collections::hash::sip","`SipState` computes a SipHash 2-4 hash over a stream of bytes."],[1,"SipHasher","","`SipHasher` computes the SipHash algorithm from a stream of bytes."],[3,"hash","","Hashes a value using the SipHash algorithm."],[3,"hash_with_keys","","Hashes a value with the SipHash algorithm with the provided keys."],[10,"new","","Creates a `SipState` that is keyed off the provided keys.",166],[10,"new_with_keys","","Creates a `SipState` that is keyed off the provided keys.",166],[10,"reset","","Resets the state to its initial state.",166],[10,"result","","Returns the computed hash.",166],[10,"write","","",166],[10,"clone","","",166],[10,"default","","",166],[10,"clone","","",167],[10,"new","","Creates a `Sip`.",167],[10,"new_with_keys","","Creates a `Sip` that is keyed off the provided keys.",167],[10,"hash","","",167],[10,"default","","",167],[6,"Hash","collections::hash","A hashable type. The `S` type parameter is an abstract hash state that is\nused by the `Hash` to compute the hash. It defaults to\n`std::hash::sip::SipState`."],[9,"hash","","Computes the hash of a value.",168],[6,"Hasher","","A trait that computes a hash for a value. The main users of this trait are\ncontainers like `HashMap`, which need a generic way hash multiple types."],[9,"hash","","Compute the hash of a value.",169],[6,"Writer","",""],[9,"write","","",170],[10,"hash","collections::vec","",164],[10,"hash","alloc::boxed","",171],[10,"hash","alloc::rc","",172],[10,"hash","core::option","",96],[10,"hash","core::intrinsics","",48],[10,"hash","core::result","",98],[6,"Mutable","collections","A mutable container type."],[9,"clear","","Clears the container, removing all values.",173],[6,"Map","","A key-value store where values may be looked up by their keys. This trait\nprovides basic operations to operate on these stores."],[9,"find","","Returns a reference to the value corresponding to the key.",174],[10,"contains_key","","Returns true if the map contains a value for the specified key.",174],[6,"MutableMap","","A key-value store (map) where the values can be modified."],[10,"insert","","Inserts a key-value pair into the map. An existing value for a\nkey is replaced by the new value. Returns `true` if the key did\nnot already exist in the map.",175],[10,"remove","","Removes a key-value pair from the map. Returns `true` if the key\nwas present in the map.",175],[9,"swap","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is\nreturned.",175],[9,"pop","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",175],[9,"find_mut","","Returns a mutable reference to the value corresponding to the key.",175],[6,"Set","","A group of objects which are each distinct from one another. This\ntrait represents actions which can be performed on sets to iterate over\nthem."],[9,"contains","","Returns `true` if the set contains a value.",176],[9,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",176],[9,"is_subset","","Returns `true` if the set is a subset of another.",176],[10,"is_superset","","Returns `true` if the set is a superset of another.",176],[6,"MutableSet","","A mutable collection of values which are distinct from one another that\ncan be mutated."],[9,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",177],[9,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",177],[6,"MutableSeq","",""],[9,"push","","Appends an element to the back of a collection.",178],[9,"pop","","Removes the last element from a collection and returns it, or `None` if\nit is empty.",178],[6,"Deque","","A double-ended sequence that allows querying, insertion and deletion at both\nends."],[9,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",179],[9,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",179],[9,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",179],[9,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",179],[9,"push_front","","Inserts an element first in the sequence.",179],[10,"push_back","","Inserts an element last in the sequence.",179],[10,"pop_back","","Removes the last element and returns it, or `None` if the sequence is\nempty.",179],[9,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",179],[6,"Collection","","A trait to represent the abstract idea of a container. The only concrete\nknowledge known is the number of elements contained within."],[9,"len","","Return the number of elements in the container",180],[9,"is_empty","","Return true if the container contains no elements",180],[16,"slice","",""],[16,"str","",""],[10,"concat","collections::vec","",164],[10,"connect","","",164],[10,"into_maybe_owned","collections::string","# Example",163]],"paths":[[1,"Bitv"],[1,"Bits"],[1,"BitvSet"],[1,"BitPositions"],[1,"TwoBitPositions"],[1,"BTree"],[6,"ListInsertion"],[1,"Items"],[1,"MoveItems"],[1,"DList"],[1,"MutItems"],[6,"CLike"],[1,"EnumSet"],[1,"Items"],[1,"PriorityQueue"],[1,"Items"],[1,"RingBuf"],[1,"Items"],[1,"MutItems"],[1,"SmallIntMap"],[1,"Entries"],[1,"MutEntries"],[1,"TreeMap"],[1,"Entries"],[1,"RevEntries"],[1,"MutEntries"],[1,"RevMutEntries"],[1,"MoveEntries"],[1,"SetItems"],[1,"RevSetItems"],[1,"TreeSet"],[1,"DifferenceItems"],[1,"SymDifferenceItems"],[1,"IntersectionItems"],[1,"UnionItems"],[1,"TrieMap"],[1,"TrieSet"],[1,"Entries"],[1,"MutEntries"],[1,"SetItems"],[6,"VectorVector"],[6,"CloneableVector"],[6,"ImmutableCloneableVector"],[6,"MutableSliceAllocating"],[6,"MutableOrdSlice"],[1,"ElementSwaps"],[1,"Permutations"],[2,"FPCategory"],[1,"TypeId"],[1,"CovariantType"],[1,"ContravariantType"],[1,"InvariantType"],[1,"CovariantLifetime"],[1,"ContravariantLifetime"],[1,"InvariantLifetime"],[1,"NoSend"],[1,"NoCopy"],[1,"NoSync"],[1,"Managed"],[2,"Ordering"],[1,"AtomicBool"],[1,"AtomicInt"],[1,"AtomicUint"],[1,"AtomicPtr"],[1,"Cell"],[1,"RefCell"],[1,"Ref"],[1,"RefMut"],[1,"UnsafeCell"],[1,"Finallyalizer"],[1,"Enumerate"],[1,"Inspect"],[1,"Rev"],[1,"Map"],[1,"Zip"],[1,"ByRef"],[2,"MinMaxResult"],[1,"Cycle"],[1,"Chain"],[1,"Filter"],[1,"FilterMap"],[1,"Peekable"],[1,"SkipWhile"],[1,"TakeWhile"],[1,"Skip"],[1,"Take"],[1,"Scan"],[1,"FlatMap"],[1,"Fuse"],[1,"Unfold"],[1,"Counter"],[1,"Range"],[1,"RangeInclusive"],[1,"RangeStep"],[1,"RangeStepInclusive"],[1,"Repeat"],[2,"Option"],[1,"Item"],[2,"Result"],[1,"Item"],[1,"i8x16"],[1,"i16x8"],[1,"i32x4"],[1,"i64x2"],[1,"u8x16"],[1,"u16x8"],[1,"u32x4"],[1,"u64x2"],[1,"f32x4"],[1,"f64x2"],[1,"Items"],[1,"MutItems"],[1,"Splits"],[1,"MutSplits"],[1,"SplitsN"],[1,"Windows"],[1,"Chunks"],[1,"MutChunks"],[2,"BinarySearchResult"],[1,"Chars"],[1,"CharOffsets"],[1,"CharSplits"],[1,"CharSplitsN"],[1,"NaiveSearcher"],[1,"TwoWaySearcher"],[2,"Searcher"],[1,"MatchIndices"],[1,"StrSplits"],[1,"Utf16CodeUnits"],[1,"Utf16Items"],[2,"Utf16Item"],[1,"Binary"],[1,"Octal"],[1,"Decimal"],[1,"LowerHex"],[1,"UpperHex"],[1,"Radix"],[1,"RadixFmt"],[2,"Alignment"],[1,"Arguments"],[1,"Formatter"],[6,"Slice"],[6,"ImmutableSlice"],[6,"ImmutablePartialEqSlice"],[6,"ImmutableOrdSlice"],[6,"MutableSlice"],[6,"MutableByteVector"],[6,"MutableCloneableSlice"],[2,"MaybeOwned"],[6,"StrVector"],[6,"IntoMaybeOwned"],[6,"StrAllocating"],[1,"Decompositions"],[1,"Recompositions"],[6,"CharEq"],[1,"CharRange"],[6,"Str"],[6,"StrSlice"],[6,"UnicodeStrSlice"],[2,"GraphemeCat"],[1,"GraphemeIndices"],[1,"Graphemes"],[2,"GraphemeState"],[1,"String"],[1,"Vec"],[1,"MoveItems"],[1,"SipState"],[1,"SipHasher"],[6,"Hash"],[6,"Hasher"],[6,"Writer"],[1,"Box"],[1,"Rc"],[6,"Mutable"],[6,"Map"],[6,"MutableMap"],[6,"Set"],[6,"MutableSet"],[6,"MutableSeq"],[6,"Deque"],[6,"Collection"]]};

searchIndex['getopts'] = {"items":[[0,"","getopts","Simple getopt alternative."],[1,"Opt","","A description of a possible option."],[11,"name","","Name of the option",0],[11,"hasarg","","Whether it has an argument",0],[11,"occur","","How often it can occur",0],[11,"aliases","","Which options it aliases",0],[1,"OptGroup","","One group of options, e.g., both -h and --help, along with\ntheir shared description and properties."],[11,"short_name","","Short Name of the `OptGroup`",1],[11,"long_name","","Long Name of the `OptGroup`",1],[11,"hint","","Hint",1],[11,"desc","","Description",1],[11,"hasarg","","Whether it has an argument",1],[11,"occur","","How often it can occur",1],[1,"Matches","","The result of checking command line arguments. Contains a vector\nof matches and a vector of free strings."],[11,"free","","Free string fragments",2],[2,"Name","","Name of an option. Either a string or a single char."],[12,"Long","","A string representing the long name of an option.\nFor example: \"help\"",3],[12,"Short","","A char representing the short name of an option.\nFor example: 'h'",3],[2,"HasArg","","Describes whether an option has an argument."],[12,"Yes","","The option requires an argument.",4],[12,"No","","The option takes no argument.",4],[12,"Maybe","","The option argument is optional.",4],[2,"Occur","","Describes how often an option may occur."],[12,"Req","","The option occurs once.",5],[12,"Optional","","The option occurs at most once.",5],[12,"Multi","","The option occurs zero or more times.",5],[2,"Fail_","","The type returned when the command line does not conform to the\nexpected format. Use the `Show` implementation to output detailed\ninformation."],[12,"ArgumentMissing","","The option requires an argument but none was passed.",6],[12,"UnrecognizedOption","","The passed option is not declared among the possible options.",6],[12,"OptionMissing","","A required option is not present.",6],[12,"OptionDuplicated","","A single occurrence option is being used multiple times.",6],[12,"UnexpectedArgument","","There's an argument being passed to a non-argument option.",6],[2,"FailType","","The type of failure that occurred."],[12,"ArgumentMissing_","","",7],[12,"UnrecognizedOption_","","",7],[12,"OptionMissing_","","",7],[12,"OptionDuplicated_","","",7],[12,"UnexpectedArgument_","","",7],[3,"reqopt","","Create a long option that is required and takes an argument."],[3,"optopt","","Create a long option that is optional and takes an argument."],[3,"optflag","","Create a long option that is optional and does not take an argument."],[3,"optflagmulti","","Create a long option that can occur more than once and does not\ntake an argument."],[3,"optflagopt","","Create a long option that is optional and takes an optional argument."],[3,"optmulti","","Create a long option that is optional, takes an argument, and may occur\nmultiple times."],[3,"opt","","Create a generic option group, stating all parameters explicitly"],[3,"getopts","","Parse command line arguments according to the provided options."],[3,"usage","","Derive a usage message from a set of long options."],[3,"short_usage","","Derive a short one-line usage summary from a set of long options."],[4,"Result","","The result of parsing a command line with a set of options."],[10,"eq","","",3],[10,"ne","","",3],[10,"clone","","",3],[10,"eq","","",4],[10,"ne","","",4],[10,"clone","","",4],[10,"eq","","",5],[10,"ne","","",5],[10,"clone","","",5],[10,"eq","","",0],[10,"ne","","",0],[10,"clone","","",0],[10,"eq","","",1],[10,"ne","","",1],[10,"clone","","",1],[10,"eq","","",2],[10,"ne","","",2],[10,"clone","","",2],[10,"eq","","",6],[10,"ne","","",6],[10,"clone","","",6],[10,"eq","","",7],[10,"ne","","",7],[10,"long_to_short","","Translate OptGroup into Opt.\n(Both short and long names correspond to different Opts).",1],[10,"opt_present","","Returns true if an option was matched.",2],[10,"opt_count","","Returns the number of times an option was matched.",2],[10,"opts_present","","Returns true if any of several options were matched.",2],[10,"opts_str","","Returns the string argument supplied to one of several matching options or `None`.",2],[10,"opt_strs","","Returns a vector of the arguments provided to all matches of the given\noption.",2],[10,"opt_str","","Returns the string argument supplied to a matching option or `None`.",2],[10,"opt_default","","Returns the matching string, a default, or none.",2],[10,"to_err_msg","","Convert a `Fail_` enum into an error string.",6],[10,"fmt","","",6]],"paths":[[1,"Opt"],[1,"OptGroup"],[1,"Matches"],[2,"Name"],[2,"HasArg"],[2,"Occur"],[2,"Fail_"],[2,"FailType"]]};

searchIndex['sync'] = {"items":[[0,"","sync","Core concurrency-enabled mechanisms and primitives."],[1,"Mutex","","A wrapper type which provides synchronized access to the underlying data, of\ntype `T`. A mutex always provides exclusive access, and concurrent requests\nwill block while the mutex is already locked."],[1,"MutexGuard","","An guard which is created by locking a mutex. Through this guard the\nunderlying data can be accessed."],[11,"cond","","Inner condition variable connected to the locked mutex that this guard\nwas created from. This can be used for atomic-unlock-and-deschedule.",0],[1,"Condvar","","A condition variable, a mechanism for unlock-and-descheduling and\nsignaling, for use with the lock types."],[1,"Barrier","","A barrier enables multiple tasks to synchronize the beginning\nof some computation."],[1,"RWLock","","A dual-mode reader-writer lock. The data can be accessed mutably or\nimmutably, and immutably-accessing tasks may run concurrently."],[1,"RWLockReadGuard","","A guard which is created by locking an rwlock in read mode. Through this\nguard the underlying data can be accessed."],[1,"RWLockWriteGuard","","A guard which is created by locking an rwlock in write mode. Through this\nguard the underlying data can be accessed."],[11,"cond","","Inner condition variable that can be used to sleep on the write mode of\nthis rwlock.",1],[0,"atomic","","Atomic types"],[1,"AtomicOption","sync::atomic","An atomic, nullable unique pointer"],[10,"new","","Create a new `AtomicOption`",2],[10,"empty","","Create a new `AtomicOption` that doesn't contain a value",2],[10,"swap","","Store a value, returning the old value",2],[10,"take","","Remove the value, leaving the `AtomicOption` empty.",2],[10,"fill","","Replace an empty value with a non-empty value.",2],[10,"is_empty","","Returns `true` if the `AtomicOption` is empty.",2],[10,"drop","","",2],[10,"new","core::atomic","Create a new `AtomicBool`",3],[10,"load","","Load the value",3],[10,"store","","Store the value",3],[10,"swap","","Store a value, returning the old value",3],[10,"compare_and_swap","","If the current value is the same as expected, store a new value",3],[10,"fetch_and","","A logical \"and\" operation",3],[10,"fetch_nand","","A logical \"nand\" operation",3],[10,"fetch_or","","A logical \"or\" operation",3],[10,"fetch_xor","","A logical \"xor\" operation",3],[10,"fmt","core::num","",4],[10,"eq","","",4],[10,"ne","","",4],[10,"ne","","",4],[10,"fmt","core::intrinsics","",5],[10,"assert_receiver_is_total_eq","","",5],[10,"eq","","",5],[10,"ne","","",5],[10,"ne","","",5],[10,"of","","Returns the `TypeId` of the type this generic function has been instantiated with",5],[10,"hash","","",5],[10,"clone","core::kinds::marker","",6],[10,"clone_from","","",6],[10,"eq","","",6],[10,"ne","","",6],[10,"ne","","",6],[10,"clone","","",7],[10,"clone_from","","",7],[10,"eq","","",7],[10,"ne","","",7],[10,"ne","","",7],[10,"clone","","",8],[10,"clone_from","","",8],[10,"eq","","",8],[10,"ne","","",8],[10,"ne","","",8],[10,"clone","","",9],[10,"clone_from","","",9],[10,"eq","","",9],[10,"ne","","",9],[10,"ne","","",9],[10,"clone","","",10],[10,"clone_from","","",10],[10,"eq","","",10],[10,"ne","","",10],[10,"ne","","",10],[10,"clone","","",11],[10,"clone_from","","",11],[10,"eq","","",11],[10,"ne","","",11],[10,"ne","","",11],[10,"clone","","",12],[10,"clone_from","","",12],[10,"eq","","",12],[10,"ne","","",12],[10,"ne","","",12],[10,"clone","","",13],[10,"clone_from","","",13],[10,"eq","","",13],[10,"ne","","",13],[10,"ne","","",13],[10,"clone","","",14],[10,"clone_from","","",14],[10,"eq","","",14],[10,"ne","","",14],[10,"ne","","",14],[10,"clone","","",15],[10,"clone_from","","",15],[10,"eq","","",15],[10,"ne","","",15],[10,"ne","","",15],[10,"fmt","core::cmp","",16],[10,"eq","","",16],[10,"ne","","",16],[10,"ne","","",16],[10,"clone","","",16],[10,"clone_from","","",16],[10,"reverse","","Reverse the `Ordering`, so that `Less` becomes `Greater` and\nvice versa.",16],[10,"assert_receiver_is_total_eq","","",16],[10,"cmp","","",16],[10,"partial_cmp","","",16],[10,"lt","","",16],[10,"le","","",16],[10,"gt","","",16],[10,"ge","","",16],[10,"new","core::atomic","Create a new `AtomicInt`",17],[10,"load","","Load the value",17],[10,"store","","Store the value",17],[10,"swap","","Store a value, returning the old value",17],[10,"compare_and_swap","","If the current value is the same as expected, store a new value",17],[10,"fetch_add","","Add to the current value, returning the previous",17],[10,"fetch_sub","","Subtract from the current value, returning the previous",17],[10,"fetch_and","","Bitwise and with the current value, returning the previous",17],[10,"fetch_or","","Bitwise or with the current value, returning the previous",17],[10,"fetch_xor","","Bitwise xor with the current value, returning the previous",17],[10,"new","","Create a new `AtomicUint`",18],[10,"load","","Load the value",18],[10,"store","","Store the value",18],[10,"swap","","Store a value, returning the old value",18],[10,"compare_and_swap","","If the current value is the same as expected, store a new value",18],[10,"fetch_add","","Add to the current value, returning the previous",18],[10,"fetch_sub","","Subtract from the current value, returning the previous",18],[10,"fetch_and","","Bitwise and with the current value, returning the previous",18],[10,"fetch_or","","Bitwise or with the current value, returning the previous",18],[10,"fetch_xor","","Bitwise xor with the current value, returning the previous",18],[10,"new","","Create a new `AtomicPtr`",19],[10,"load","","Load the value",19],[10,"store","","Store the value",19],[10,"swap","","Store a value, returning the old value",19],[10,"compare_and_swap","","If the current value is the same as expected, store a new value",19],[10,"new","core::cell","Creates a new `Cell` containing the given value.",20],[10,"get","","Returns a copy of the contained value.",20],[10,"set","","Sets the contained value.",20],[10,"clone","","",20],[10,"clone_from","","",20],[10,"eq","","",20],[10,"ne","","",20],[10,"new","","Create a new `RefCell` containing `value`",21],[10,"unwrap","","Consumes the `RefCell`, returning the wrapped value.",21],[10,"try_borrow","","Attempts to immutably borrow the wrapped value.",21],[10,"borrow","","Immutably borrows the wrapped value.",21],[10,"try_borrow_mut","","Mutably borrows the wrapped value.",21],[10,"borrow_mut","","Mutably borrows the wrapped value.",21],[10,"clone","","",21],[10,"clone_from","","",21],[10,"eq","","",21],[10,"ne","","",21],[10,"drop","","",22],[10,"deref","","",22],[10,"drop","","",23],[10,"deref","","",23],[10,"deref_mut","","",23],[10,"new","","Construct a new instance of `UnsafeCell` which will wrap the specified\nvalue.",24],[10,"get","","Gets a mutable pointer to the wrapped value.",24],[10,"unwrap","","Unwraps the value",24],[10,"drop","core::finally","",25],[10,"rposition","core::iter","",26],[10,"len","","",26],[10,"rposition","","",27],[10,"len","","",27],[10,"rposition","","",28],[10,"len","","",28],[10,"rposition","","",29],[10,"len","","",29],[10,"rposition","","",30],[10,"len","","",30],[10,"clone","","",28],[10,"clone_from","","",28],[10,"next","","",28],[10,"size_hint","","",28],[10,"size_hint","","",28],[10,"chain","","",28],[10,"zip","","",28],[10,"map","","",28],[10,"filter","","",28],[10,"filter_map","","",28],[10,"enumerate","","",28],[10,"peekable","","",28],[10,"skip_while","","",28],[10,"take_while","","",28],[10,"skip","","",28],[10,"take","","",28],[10,"scan","","",28],[10,"flat_map","","",28],[10,"fuse","","",28],[10,"inspect","","",28],[10,"by_ref","","",28],[10,"advance","","",28],[10,"collect","","",28],[10,"nth","","",28],[10,"last","","",28],[10,"fold","","",28],[10,"count","","",28],[10,"all","","",28],[10,"any","","",28],[10,"find","","",28],[10,"position","","",28],[10,"max_by","","",28],[10,"min_by","","",28],[10,"next_back","","",28],[10,"rev","","",28],[10,"indexable","","",28],[10,"idx","","",28],[10,"next","","",31],[10,"size_hint","","",31],[10,"size_hint","","",31],[10,"chain","","",31],[10,"zip","","",31],[10,"map","","",31],[10,"filter","","",31],[10,"filter_map","","",31],[10,"enumerate","","",31],[10,"peekable","","",31],[10,"skip_while","","",31],[10,"take_while","","",31],[10,"skip","","",31],[10,"take","","",31],[10,"scan","","",31],[10,"flat_map","","",31],[10,"fuse","","",31],[10,"inspect","","",31],[10,"by_ref","","",31],[10,"advance","","",31],[10,"collect","","",31],[10,"nth","","",31],[10,"last","","",31],[10,"fold","","",31],[10,"count","","",31],[10,"all","","",31],[10,"any","","",31],[10,"find","","",31],[10,"position","","",31],[10,"max_by","","",31],[10,"min_by","","",31],[10,"next_back","","",31],[10,"rev","","",31],[10,"fmt","","",32],[10,"eq","","",32],[10,"ne","","",32],[10,"ne","","",32],[10,"clone","","",32],[10,"clone_from","","",32],[10,"into_option","","`into_option` creates an `Option` of type `(T,T)`. The returned `Option` has variant\n`None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise variant\n`Some(x,y)` is returned where `x <= y`. If `MinMaxResult` has variant `OneElement(x)`,\nperforming this operation will make one clone of `x`.",32],[10,"clone","","",33],[10,"clone_from","","",33],[10,"next","","",33],[10,"size_hint","","",33],[10,"size_hint","","",33],[10,"chain","","",33],[10,"zip","","",33],[10,"map","","",33],[10,"filter","","",33],[10,"filter_map","","",33],[10,"enumerate","","",33],[10,"peekable","","",33],[10,"skip_while","","",33],[10,"take_while","","",33],[10,"skip","","",33],[10,"take","","",33],[10,"scan","","",33],[10,"flat_map","","",33],[10,"fuse","","",33],[10,"inspect","","",33],[10,"by_ref","","",33],[10,"advance","","",33],[10,"collect","","",33],[10,"nth","","",33],[10,"last","","",33],[10,"fold","","",33],[10,"count","","",33],[10,"all","","",33],[10,"any","","",33],[10,"find","","",33],[10,"position","","",33],[10,"max_by","","",33],[10,"min_by","","",33],[10,"indexable","","",33],[10,"idx","","",33],[10,"clone","","",34],[10,"clone_from","","",34],[10,"next","","",34],[10,"size_hint","","",34],[10,"size_hint","","",34],[10,"chain","","",34],[10,"zip","","",34],[10,"map","","",34],[10,"filter","","",34],[10,"filter_map","","",34],[10,"enumerate","","",34],[10,"peekable","","",34],[10,"skip_while","","",34],[10,"take_while","","",34],[10,"skip","","",34],[10,"take","","",34],[10,"scan","","",34],[10,"flat_map","","",34],[10,"fuse","","",34],[10,"inspect","","",34],[10,"by_ref","","",34],[10,"advance","","",34],[10,"collect","","",34],[10,"nth","","",34],[10,"last","","",34],[10,"fold","","",34],[10,"count","","",34],[10,"all","","",34],[10,"any","","",34],[10,"find","","",34],[10,"position","","",34],[10,"max_by","","",34],[10,"min_by","","",34],[10,"next_back","","",34],[10,"rev","","",34],[10,"indexable","","",34],[10,"idx","","",34],[10,"clone","","",30],[10,"clone_from","","",30],[10,"next","","",30],[10,"size_hint","","",30],[10,"size_hint","","",30],[10,"chain","","",30],[10,"zip","","",30],[10,"map","","",30],[10,"filter","","",30],[10,"filter_map","","",30],[10,"enumerate","","",30],[10,"peekable","","",30],[10,"skip_while","","",30],[10,"take_while","","",30],[10,"skip","","",30],[10,"take","","",30],[10,"scan","","",30],[10,"flat_map","","",30],[10,"fuse","","",30],[10,"inspect","","",30],[10,"by_ref","","",30],[10,"advance","","",30],[10,"collect","","",30],[10,"nth","","",30],[10,"last","","",30],[10,"fold","","",30],[10,"count","","",30],[10,"all","","",30],[10,"any","","",30],[10,"find","","",30],[10,"position","","",30],[10,"max_by","","",30],[10,"min_by","","",30],[10,"next_back","","",30],[10,"rev","","",30],[10,"indexable","","",30],[10,"idx","","",30],[10,"next","","",29],[10,"size_hint","","",29],[10,"size_hint","","",29],[10,"chain","","",29],[10,"zip","","",29],[10,"map","","",29],[10,"filter","","",29],[10,"filter_map","","",29],[10,"enumerate","","",29],[10,"peekable","","",29],[10,"skip_while","","",29],[10,"take_while","","",29],[10,"skip","","",29],[10,"take","","",29],[10,"scan","","",29],[10,"flat_map","","",29],[10,"fuse","","",29],[10,"inspect","","",29],[10,"by_ref","","",29],[10,"advance","","",29],[10,"collect","","",29],[10,"nth","","",29],[10,"last","","",29],[10,"fold","","",29],[10,"count","","",29],[10,"all","","",29],[10,"any","","",29],[10,"find","","",29],[10,"position","","",29],[10,"max_by","","",29],[10,"min_by","","",29],[10,"next_back","","",29],[10,"rev","","",29],[10,"indexable","","",29],[10,"idx","","",29],[10,"next","","",35],[10,"size_hint","","",35],[10,"size_hint","","",35],[10,"chain","","",35],[10,"zip","","",35],[10,"map","","",35],[10,"filter","","",35],[10,"filter_map","","",35],[10,"enumerate","","",35],[10,"peekable","","",35],[10,"skip_while","","",35],[10,"take_while","","",35],[10,"skip","","",35],[10,"take","","",35],[10,"scan","","",35],[10,"flat_map","","",35],[10,"fuse","","",35],[10,"inspect","","",35],[10,"by_ref","","",35],[10,"advance","","",35],[10,"collect","","",35],[10,"nth","","",35],[10,"last","","",35],[10,"fold","","",35],[10,"count","","",35],[10,"all","","",35],[10,"any","","",35],[10,"find","","",35],[10,"position","","",35],[10,"max_by","","",35],[10,"min_by","","",35],[10,"next_back","","",35],[10,"rev","","",35],[10,"next","","",36],[10,"size_hint","","",36],[10,"size_hint","","",36],[10,"chain","","",36],[10,"zip","","",36],[10,"map","","",36],[10,"filter","","",36],[10,"filter_map","","",36],[10,"enumerate","","",36],[10,"peekable","","",36],[10,"skip_while","","",36],[10,"take_while","","",36],[10,"skip","","",36],[10,"take","","",36],[10,"scan","","",36],[10,"flat_map","","",36],[10,"fuse","","",36],[10,"inspect","","",36],[10,"by_ref","","",36],[10,"advance","","",36],[10,"collect","","",36],[10,"nth","","",36],[10,"last","","",36],[10,"fold","","",36],[10,"count","","",36],[10,"all","","",36],[10,"any","","",36],[10,"find","","",36],[10,"position","","",36],[10,"max_by","","",36],[10,"min_by","","",36],[10,"next_back","","",36],[10,"rev","","",36],[10,"clone","","",26],[10,"clone_from","","",26],[10,"next","","",26],[10,"size_hint","","",26],[10,"size_hint","","",26],[10,"chain","","",26],[10,"zip","","",26],[10,"map","","",26],[10,"filter","","",26],[10,"filter_map","","",26],[10,"enumerate","","",26],[10,"peekable","","",26],[10,"skip_while","","",26],[10,"take_while","","",26],[10,"skip","","",26],[10,"take","","",26],[10,"scan","","",26],[10,"flat_map","","",26],[10,"fuse","","",26],[10,"inspect","","",26],[10,"by_ref","","",26],[10,"advance","","",26],[10,"collect","","",26],[10,"nth","","",26],[10,"last","","",26],[10,"fold","","",26],[10,"count","","",26],[10,"all","","",26],[10,"any","","",26],[10,"find","","",26],[10,"position","","",26],[10,"max_by","","",26],[10,"min_by","","",26],[10,"next_back","","",26],[10,"rev","","",26],[10,"indexable","","",26],[10,"idx","","",26],[10,"next","","",37],[10,"size_hint","","",37],[10,"size_hint","","",37],[10,"chain","","",37],[10,"zip","","",37],[10,"map","","",37],[10,"filter","","",37],[10,"filter_map","","",37],[10,"enumerate","","",37],[10,"peekable","","",37],[10,"skip_while","","",37],[10,"take_while","","",37],[10,"skip","","",37],[10,"take","","",37],[10,"scan","","",37],[10,"flat_map","","",37],[10,"fuse","","",37],[10,"inspect","","",37],[10,"by_ref","","",37],[10,"advance","","",37],[10,"collect","","",37],[10,"nth","","",37],[10,"last","","",37],[10,"fold","","",37],[10,"count","","",37],[10,"all","","",37],[10,"any","","",37],[10,"find","","",37],[10,"position","","",37],[10,"max_by","","",37],[10,"min_by","","",37],[10,"peek","","Return a reference to the next element of the iterator with out advancing it,\nor None if the iterator is exhausted.",37],[10,"is_empty","","Check whether peekable iterator is empty or not.",37],[10,"next","","",38],[10,"size_hint","","",38],[10,"size_hint","","",38],[10,"chain","","",38],[10,"zip","","",38],[10,"map","","",38],[10,"filter","","",38],[10,"filter_map","","",38],[10,"enumerate","","",38],[10,"peekable","","",38],[10,"skip_while","","",38],[10,"take_while","","",38],[10,"skip","","",38],[10,"take","","",38],[10,"scan","","",38],[10,"flat_map","","",38],[10,"fuse","","",38],[10,"inspect","","",38],[10,"by_ref","","",38],[10,"advance","","",38],[10,"collect","","",38],[10,"nth","","",38],[10,"last","","",38],[10,"fold","","",38],[10,"count","","",38],[10,"all","","",38],[10,"any","","",38],[10,"find","","",38],[10,"position","","",38],[10,"max_by","","",38],[10,"min_by","","",38],[10,"next","","",39],[10,"size_hint","","",39],[10,"size_hint","","",39],[10,"chain","","",39],[10,"zip","","",39],[10,"map","","",39],[10,"filter","","",39],[10,"filter_map","","",39],[10,"enumerate","","",39],[10,"peekable","","",39],[10,"skip_while","","",39],[10,"take_while","","",39],[10,"skip","","",39],[10,"take","","",39],[10,"scan","","",39],[10,"flat_map","","",39],[10,"fuse","","",39],[10,"inspect","","",39],[10,"by_ref","","",39],[10,"advance","","",39],[10,"collect","","",39],[10,"nth","","",39],[10,"last","","",39],[10,"fold","","",39],[10,"count","","",39],[10,"all","","",39],[10,"any","","",39],[10,"find","","",39],[10,"position","","",39],[10,"max_by","","",39],[10,"min_by","","",39],[10,"clone","","",40],[10,"clone_from","","",40],[10,"next","","",40],[10,"size_hint","","",40],[10,"size_hint","","",40],[10,"chain","","",40],[10,"zip","","",40],[10,"map","","",40],[10,"filter","","",40],[10,"filter_map","","",40],[10,"enumerate","","",40],[10,"peekable","","",40],[10,"skip_while","","",40],[10,"take_while","","",40],[10,"skip","","",40],[10,"take","","",40],[10,"scan","","",40],[10,"flat_map","","",40],[10,"fuse","","",40],[10,"inspect","","",40],[10,"by_ref","","",40],[10,"advance","","",40],[10,"collect","","",40],[10,"nth","","",40],[10,"last","","",40],[10,"fold","","",40],[10,"count","","",40],[10,"all","","",40],[10,"any","","",40],[10,"find","","",40],[10,"position","","",40],[10,"max_by","","",40],[10,"min_by","","",40],[10,"indexable","","",40],[10,"idx","","",40],[10,"clone","","",41],[10,"clone_from","","",41],[10,"next","","",41],[10,"size_hint","","",41],[10,"size_hint","","",41],[10,"chain","","",41],[10,"zip","","",41],[10,"map","","",41],[10,"filter","","",41],[10,"filter_map","","",41],[10,"enumerate","","",41],[10,"peekable","","",41],[10,"skip_while","","",41],[10,"take_while","","",41],[10,"skip","","",41],[10,"take","","",41],[10,"scan","","",41],[10,"flat_map","","",41],[10,"fuse","","",41],[10,"inspect","","",41],[10,"by_ref","","",41],[10,"advance","","",41],[10,"collect","","",41],[10,"nth","","",41],[10,"last","","",41],[10,"fold","","",41],[10,"count","","",41],[10,"all","","",41],[10,"any","","",41],[10,"find","","",41],[10,"position","","",41],[10,"max_by","","",41],[10,"min_by","","",41],[10,"indexable","","",41],[10,"idx","","",41],[10,"next","","",42],[10,"size_hint","","",42],[10,"size_hint","","",42],[10,"chain","","",42],[10,"zip","","",42],[10,"map","","",42],[10,"filter","","",42],[10,"filter_map","","",42],[10,"enumerate","","",42],[10,"peekable","","",42],[10,"skip_while","","",42],[10,"take_while","","",42],[10,"skip","","",42],[10,"take","","",42],[10,"scan","","",42],[10,"flat_map","","",42],[10,"fuse","","",42],[10,"inspect","","",42],[10,"by_ref","","",42],[10,"advance","","",42],[10,"collect","","",42],[10,"nth","","",42],[10,"last","","",42],[10,"fold","","",42],[10,"count","","",42],[10,"all","","",42],[10,"any","","",42],[10,"find","","",42],[10,"position","","",42],[10,"max_by","","",42],[10,"min_by","","",42],[10,"next","","",43],[10,"size_hint","","",43],[10,"size_hint","","",43],[10,"chain","","",43],[10,"zip","","",43],[10,"map","","",43],[10,"filter","","",43],[10,"filter_map","","",43],[10,"enumerate","","",43],[10,"peekable","","",43],[10,"skip_while","","",43],[10,"take_while","","",43],[10,"skip","","",43],[10,"take","","",43],[10,"scan","","",43],[10,"flat_map","","",43],[10,"fuse","","",43],[10,"inspect","","",43],[10,"by_ref","","",43],[10,"advance","","",43],[10,"collect","","",43],[10,"nth","","",43],[10,"last","","",43],[10,"fold","","",43],[10,"count","","",43],[10,"all","","",43],[10,"any","","",43],[10,"find","","",43],[10,"position","","",43],[10,"max_by","","",43],[10,"min_by","","",43],[10,"next_back","","",43],[10,"rev","","",43],[10,"clone","","",44],[10,"clone_from","","",44],[10,"next","","",44],[10,"size_hint","","",44],[10,"size_hint","","",44],[10,"chain","","",44],[10,"zip","","",44],[10,"map","","",44],[10,"filter","","",44],[10,"filter_map","","",44],[10,"enumerate","","",44],[10,"peekable","","",44],[10,"skip_while","","",44],[10,"take_while","","",44],[10,"skip","","",44],[10,"take","","",44],[10,"scan","","",44],[10,"flat_map","","",44],[10,"fuse","","",44],[10,"inspect","","",44],[10,"by_ref","","",44],[10,"advance","","",44],[10,"collect","","",44],[10,"nth","","",44],[10,"last","","",44],[10,"fold","","",44],[10,"count","","",44],[10,"all","","",44],[10,"any","","",44],[10,"find","","",44],[10,"position","","",44],[10,"max_by","","",44],[10,"min_by","","",44],[10,"next_back","","",44],[10,"rev","","",44],[10,"indexable","","",44],[10,"idx","","",44],[10,"reset_fuse","","Resets the fuse such that the next call to .next() or .next_back() will\ncall the underlying iterator again even if it previously returned None.",44],[10,"next","","",27],[10,"size_hint","","",27],[10,"size_hint","","",27],[10,"chain","","",27],[10,"zip","","",27],[10,"map","","",27],[10,"filter","","",27],[10,"filter_map","","",27],[10,"enumerate","","",27],[10,"peekable","","",27],[10,"skip_while","","",27],[10,"take_while","","",27],[10,"skip","","",27],[10,"take","","",27],[10,"scan","","",27],[10,"flat_map","","",27],[10,"fuse","","",27],[10,"inspect","","",27],[10,"by_ref","","",27],[10,"advance","","",27],[10,"collect","","",27],[10,"nth","","",27],[10,"last","","",27],[10,"fold","","",27],[10,"count","","",27],[10,"all","","",27],[10,"any","","",27],[10,"find","","",27],[10,"position","","",27],[10,"max_by","","",27],[10,"min_by","","",27],[10,"next_back","","",27],[10,"rev","","",27],[10,"indexable","","",27],[10,"idx","","",27],[10,"new","","Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the iterator",45],[10,"next","","",45],[10,"size_hint","","",45],[10,"size_hint","","",45],[10,"chain","","",45],[10,"zip","","",45],[10,"map","","",45],[10,"filter","","",45],[10,"filter_map","","",45],[10,"enumerate","","",45],[10,"peekable","","",45],[10,"skip_while","","",45],[10,"take_while","","",45],[10,"skip","","",45],[10,"take","","",45],[10,"scan","","",45],[10,"flat_map","","",45],[10,"fuse","","",45],[10,"inspect","","",45],[10,"by_ref","","",45],[10,"advance","","",45],[10,"collect","","",45],[10,"nth","","",45],[10,"last","","",45],[10,"fold","","",45],[10,"count","","",45],[10,"all","","",45],[10,"any","","",45],[10,"find","","",45],[10,"position","","",45],[10,"max_by","","",45],[10,"min_by","","",45],[10,"clone","","",46],[10,"clone_from","","",46],[10,"next","","",46],[10,"size_hint","","",46],[10,"size_hint","","",46],[10,"chain","","",46],[10,"zip","","",46],[10,"map","","",46],[10,"filter","","",46],[10,"filter_map","","",46],[10,"enumerate","","",46],[10,"peekable","","",46],[10,"skip_while","","",46],[10,"take_while","","",46],[10,"skip","","",46],[10,"take","","",46],[10,"scan","","",46],[10,"flat_map","","",46],[10,"fuse","","",46],[10,"inspect","","",46],[10,"by_ref","","",46],[10,"advance","","",46],[10,"collect","","",46],[10,"nth","","",46],[10,"last","","",46],[10,"fold","","",46],[10,"count","","",46],[10,"all","","",46],[10,"any","","",46],[10,"find","","",46],[10,"position","","",46],[10,"max_by","","",46],[10,"min_by","","",46],[10,"clone","","",47],[10,"clone_from","","",47],[10,"next","","",47],[10,"size_hint","","",47],[10,"size_hint","","",47],[10,"chain","","",47],[10,"zip","","",47],[10,"map","","",47],[10,"filter","","",47],[10,"filter_map","","",47],[10,"enumerate","","",47],[10,"peekable","","",47],[10,"skip_while","","",47],[10,"take_while","","",47],[10,"skip","","",47],[10,"take","","",47],[10,"scan","","",47],[10,"flat_map","","",47],[10,"fuse","","",47],[10,"inspect","","",47],[10,"by_ref","","",47],[10,"advance","","",47],[10,"collect","","",47],[10,"nth","","",47],[10,"last","","",47],[10,"fold","","",47],[10,"count","","",47],[10,"all","","",47],[10,"any","","",47],[10,"find","","",47],[10,"position","","",47],[10,"max_by","","",47],[10,"min_by","","",47],[10,"next_back","","",47],[10,"rev","","",47],[10,"clone","","",48],[10,"clone_from","","",48],[10,"next","","",48],[10,"size_hint","","",48],[10,"size_hint","","",48],[10,"chain","","",48],[10,"zip","","",48],[10,"map","","",48],[10,"filter","","",48],[10,"filter_map","","",48],[10,"enumerate","","",48],[10,"peekable","","",48],[10,"skip_while","","",48],[10,"take_while","","",48],[10,"skip","","",48],[10,"take","","",48],[10,"scan","","",48],[10,"flat_map","","",48],[10,"fuse","","",48],[10,"inspect","","",48],[10,"by_ref","","",48],[10,"advance","","",48],[10,"collect","","",48],[10,"nth","","",48],[10,"last","","",48],[10,"fold","","",48],[10,"count","","",48],[10,"all","","",48],[10,"any","","",48],[10,"find","","",48],[10,"position","","",48],[10,"max_by","","",48],[10,"min_by","","",48],[10,"next_back","","",48],[10,"rev","","",48],[10,"clone","","",49],[10,"clone_from","","",49],[10,"next","","",49],[10,"size_hint","","",49],[10,"chain","","",49],[10,"zip","","",49],[10,"map","","",49],[10,"filter","","",49],[10,"filter_map","","",49],[10,"enumerate","","",49],[10,"peekable","","",49],[10,"skip_while","","",49],[10,"take_while","","",49],[10,"skip","","",49],[10,"take","","",49],[10,"scan","","",49],[10,"flat_map","","",49],[10,"fuse","","",49],[10,"inspect","","",49],[10,"by_ref","","",49],[10,"advance","","",49],[10,"collect","","",49],[10,"nth","","",49],[10,"last","","",49],[10,"fold","","",49],[10,"count","","",49],[10,"all","","",49],[10,"any","","",49],[10,"find","","",49],[10,"position","","",49],[10,"max_by","","",49],[10,"min_by","","",49],[10,"clone","","",50],[10,"clone_from","","",50],[10,"next","","",50],[10,"size_hint","","",50],[10,"chain","","",50],[10,"zip","","",50],[10,"map","","",50],[10,"filter","","",50],[10,"filter_map","","",50],[10,"enumerate","","",50],[10,"peekable","","",50],[10,"skip_while","","",50],[10,"take_while","","",50],[10,"skip","","",50],[10,"take","","",50],[10,"scan","","",50],[10,"flat_map","","",50],[10,"fuse","","",50],[10,"inspect","","",50],[10,"by_ref","","",50],[10,"advance","","",50],[10,"collect","","",50],[10,"nth","","",50],[10,"last","","",50],[10,"fold","","",50],[10,"count","","",50],[10,"all","","",50],[10,"any","","",50],[10,"find","","",50],[10,"position","","",50],[10,"max_by","","",50],[10,"min_by","","",50],[10,"clone","","",51],[10,"clone_from","","",51],[10,"new","","Create a new `Repeat` that endlessly repeats the element `elt`.",51],[10,"next","","",51],[10,"size_hint","","",51],[10,"size_hint","","",51],[10,"chain","","",51],[10,"zip","","",51],[10,"map","","",51],[10,"filter","","",51],[10,"filter_map","","",51],[10,"enumerate","","",51],[10,"peekable","","",51],[10,"skip_while","","",51],[10,"take_while","","",51],[10,"skip","","",51],[10,"take","","",51],[10,"scan","","",51],[10,"flat_map","","",51],[10,"fuse","","",51],[10,"inspect","","",51],[10,"by_ref","","",51],[10,"advance","","",51],[10,"collect","","",51],[10,"nth","","",51],[10,"last","","",51],[10,"fold","","",51],[10,"count","","",51],[10,"all","","",51],[10,"any","","",51],[10,"find","","",51],[10,"position","","",51],[10,"max_by","","",51],[10,"min_by","","",51],[10,"next_back","","",51],[10,"rev","","",51],[10,"indexable","","",51],[10,"idx","","",51],[10,"fmt","core::option","",52],[10,"cmp","","",52],[10,"assert_receiver_is_total_eq","","",52],[10,"partial_cmp","","",52],[10,"lt","","",52],[10,"le","","",52],[10,"gt","","",52],[10,"ge","","",52],[10,"lt","","",52],[10,"le","","",52],[10,"gt","","",52],[10,"ge","","",52],[10,"eq","","",52],[10,"ne","","",52],[10,"ne","","",52],[10,"clone","","",52],[10,"clone_from","","",52],[10,"is_some","","Returns `true` if the option is a `Some` value",52],[10,"is_none","","Returns `true` if the option is a `None` value",52],[10,"as_ref","","Convert from `Option<T>` to `Option<&T>`",52],[10,"as_mut","","Convert from `Option<T>` to `Option<&mut T>`",52],[10,"as_mut_slice","","Convert from `Option<T>` to `&mut [T]` (without copying)",52],[10,"expect","","Unwraps an option, yielding the content of a `Some`",52],[10,"unwrap","","Returns the inner `T` of a `Some(T)`.",52],[10,"unwrap_or","","Returns the contained value or a default.",52],[10,"unwrap_or_else","","Returns the contained value or computes it from a closure.",52],[10,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",52],[10,"map_or","","Applies a function to the contained value or returns a default.",52],[10,"map_or_else","","Applies a function to the contained value or computes a default.",52],[10,"mutate","","Deprecated.",52],[10,"mutate_or_set","","Deprecated.",52],[10,"iter","","Returns an iterator over the possibly contained value.",52],[10,"mut_iter","","Deprecated: use `iter_mut`",52],[10,"iter_mut","","Returns a mutable iterator over the possibly contained value.",52],[10,"move_iter","","Deprecated: use `into_iter`.",52],[10,"into_iter","","Returns a consuming iterator over the possibly contained value.",52],[10,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",52],[10,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",52],[10,"or","","Returns the option if it contains a value, otherwise returns `optb`.",52],[10,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",52],[10,"take","","Takes the value out of the option, leaving a `None` in its place.",52],[10,"filtered","","Deprecated.",52],[10,"while_some","","Deprecated.",52],[10,"take_unwrap","","Deprecated: use `take().unwrap()` instead.",52],[10,"get_ref","","Deprecated: use `as_ref().unwrap()` instead.",52],[10,"get_mut_ref","","Deprecated: use `as_mut().unwrap()` instead.",52],[10,"unwrap_or_default","","Returns the contained value or a default",52],[10,"as_slice","","Convert from `Option<T>` to `&[T]` (without copying)",52],[10,"default","","",52],[10,"clone","","",53],[10,"clone_from","","",53],[10,"next","","",53],[10,"size_hint","","",53],[10,"size_hint","","",53],[10,"chain","","",53],[10,"zip","","",53],[10,"map","","",53],[10,"filter","","",53],[10,"filter_map","","",53],[10,"enumerate","","",53],[10,"peekable","","",53],[10,"skip_while","","",53],[10,"take_while","","",53],[10,"skip","","",53],[10,"take","","",53],[10,"scan","","",53],[10,"flat_map","","",53],[10,"fuse","","",53],[10,"inspect","","",53],[10,"by_ref","","",53],[10,"advance","","",53],[10,"collect","","",53],[10,"nth","","",53],[10,"last","","",53],[10,"fold","","",53],[10,"count","","",53],[10,"all","","",53],[10,"any","","",53],[10,"find","","",53],[10,"position","","",53],[10,"max_by","","",53],[10,"min_by","","",53],[10,"next_back","","",53],[10,"rev","","",53],[10,"rposition","","",53],[10,"len","","",53],[10,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",52],[10,"fmt","core::result","",54],[10,"cmp","","",54],[10,"assert_receiver_is_total_eq","","",54],[10,"partial_cmp","","",54],[10,"lt","","",54],[10,"le","","",54],[10,"gt","","",54],[10,"ge","","",54],[10,"lt","","",54],[10,"le","","",54],[10,"gt","","",54],[10,"ge","","",54],[10,"eq","","",54],[10,"ne","","",54],[10,"ne","","",54],[10,"clone","","",54],[10,"clone_from","","",54],[10,"is_ok","","Returns true if the result is `Ok`",54],[10,"is_err","","Returns true if the result is `Err`",54],[10,"ok","","Convert from `Result<T, E>` to `Option<T>`",54],[10,"err","","Convert from `Result<T, E>` to `Option<E>`",54],[10,"as_ref","","Convert from `Result<T, E>` to `Result<&T, &E>`",54],[10,"as_mut","","Convert from `Result<T, E>` to `Result<&mut T, &mut E>`",54],[10,"as_mut_slice","","Convert from `Result<T, E>` to `&mut [T]` (without copying)",54],[10,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",54],[10,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",54],[10,"iter","","Returns an iterator over the possibly contained value.",54],[10,"mut_iter","","Deprecated: use `iter_mut`.",54],[10,"iter_mut","","Returns a mutable iterator over the possibly contained value.",54],[10,"move_iter","","Deprecated: `use into_iter`.",54],[10,"into_iter","","Returns a consuming iterator over the possibly contained value.",54],[10,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",54],[10,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",54],[10,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",54],[10,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",54],[10,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",54],[10,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",54],[10,"unwrap_or_handle","","Deprecated name for `unwrap_or_else()`.",54],[10,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",54],[10,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",54],[10,"as_slice","","Convert from `Result<T, E>` to `&[T]` (without copying)",54],[10,"clone","","",55],[10,"clone_from","","",55],[10,"next","","",55],[10,"size_hint","","",55],[10,"size_hint","","",55],[10,"chain","","",55],[10,"zip","","",55],[10,"map","","",55],[10,"filter","","",55],[10,"filter_map","","",55],[10,"enumerate","","",55],[10,"peekable","","",55],[10,"skip_while","","",55],[10,"take_while","","",55],[10,"skip","","",55],[10,"take","","",55],[10,"scan","","",55],[10,"flat_map","","",55],[10,"fuse","","",55],[10,"inspect","","",55],[10,"by_ref","","",55],[10,"advance","","",55],[10,"collect","","",55],[10,"nth","","",55],[10,"last","","",55],[10,"fold","","",55],[10,"count","","",55],[10,"all","","",55],[10,"any","","",55],[10,"find","","",55],[10,"position","","",55],[10,"max_by","","",55],[10,"min_by","","",55],[10,"next_back","","",55],[10,"rev","","",55],[10,"rposition","","",55],[10,"len","","",55],[10,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",54],[10,"fmt","core::simd","",56],[10,"fmt","","",57],[10,"fmt","","",58],[10,"fmt","","",59],[10,"fmt","","",60],[10,"fmt","","",61],[10,"fmt","","",62],[10,"fmt","","",63],[10,"fmt","","",64],[10,"fmt","","",65],[10,"next","core::slice","",66],[10,"size_hint","","",66],[10,"size_hint","","",66],[10,"chain","","",66],[10,"zip","","",66],[10,"map","","",66],[10,"filter","","",66],[10,"filter_map","","",66],[10,"enumerate","","",66],[10,"peekable","","",66],[10,"skip_while","","",66],[10,"take_while","","",66],[10,"skip","","",66],[10,"take","","",66],[10,"scan","","",66],[10,"flat_map","","",66],[10,"fuse","","",66],[10,"inspect","","",66],[10,"by_ref","","",66],[10,"advance","","",66],[10,"collect","","",66],[10,"nth","","",66],[10,"last","","",66],[10,"fold","","",66],[10,"count","","",66],[10,"all","","",66],[10,"any","","",66],[10,"find","","",66],[10,"position","","",66],[10,"max_by","","",66],[10,"min_by","","",66],[10,"next_back","","",66],[10,"rev","","",66],[10,"rposition","","",66],[10,"len","","",66],[10,"clone","","",66],[10,"clone_from","","",66],[10,"indexable","","",66],[10,"idx","","",66],[10,"next","","",67],[10,"size_hint","","",67],[10,"size_hint","","",67],[10,"chain","","",67],[10,"zip","","",67],[10,"map","","",67],[10,"filter","","",67],[10,"filter_map","","",67],[10,"enumerate","","",67],[10,"peekable","","",67],[10,"skip_while","","",67],[10,"take_while","","",67],[10,"skip","","",67],[10,"take","","",67],[10,"scan","","",67],[10,"flat_map","","",67],[10,"fuse","","",67],[10,"inspect","","",67],[10,"by_ref","","",67],[10,"advance","","",67],[10,"collect","","",67],[10,"nth","","",67],[10,"last","","",67],[10,"fold","","",67],[10,"count","","",67],[10,"all","","",67],[10,"any","","",67],[10,"find","","",67],[10,"position","","",67],[10,"max_by","","",67],[10,"min_by","","",67],[10,"next_back","","",67],[10,"rev","","",67],[10,"rposition","","",67],[10,"len","","",67],[10,"next","","",68],[10,"size_hint","","",68],[10,"size_hint","","",68],[10,"chain","","",68],[10,"zip","","",68],[10,"map","","",68],[10,"filter","","",68],[10,"filter_map","","",68],[10,"enumerate","","",68],[10,"peekable","","",68],[10,"skip_while","","",68],[10,"take_while","","",68],[10,"skip","","",68],[10,"take","","",68],[10,"scan","","",68],[10,"flat_map","","",68],[10,"fuse","","",68],[10,"inspect","","",68],[10,"by_ref","","",68],[10,"advance","","",68],[10,"collect","","",68],[10,"nth","","",68],[10,"last","","",68],[10,"fold","","",68],[10,"count","","",68],[10,"all","","",68],[10,"any","","",68],[10,"find","","",68],[10,"position","","",68],[10,"max_by","","",68],[10,"min_by","","",68],[10,"next_back","","",68],[10,"rev","","",68],[10,"next","","",69],[10,"size_hint","","",69],[10,"size_hint","","",69],[10,"chain","","",69],[10,"zip","","",69],[10,"map","","",69],[10,"filter","","",69],[10,"filter_map","","",69],[10,"enumerate","","",69],[10,"peekable","","",69],[10,"skip_while","","",69],[10,"take_while","","",69],[10,"skip","","",69],[10,"take","","",69],[10,"scan","","",69],[10,"flat_map","","",69],[10,"fuse","","",69],[10,"inspect","","",69],[10,"by_ref","","",69],[10,"advance","","",69],[10,"collect","","",69],[10,"nth","","",69],[10,"last","","",69],[10,"fold","","",69],[10,"count","","",69],[10,"all","","",69],[10,"any","","",69],[10,"find","","",69],[10,"position","","",69],[10,"max_by","","",69],[10,"min_by","","",69],[10,"next_back","","",69],[10,"rev","","",69],[10,"next","","",70],[10,"size_hint","","",70],[10,"size_hint","","",70],[10,"chain","","",70],[10,"zip","","",70],[10,"map","","",70],[10,"filter","","",70],[10,"filter_map","","",70],[10,"enumerate","","",70],[10,"peekable","","",70],[10,"skip_while","","",70],[10,"take_while","","",70],[10,"skip","","",70],[10,"take","","",70],[10,"scan","","",70],[10,"flat_map","","",70],[10,"fuse","","",70],[10,"inspect","","",70],[10,"by_ref","","",70],[10,"advance","","",70],[10,"collect","","",70],[10,"nth","","",70],[10,"last","","",70],[10,"fold","","",70],[10,"count","","",70],[10,"all","","",70],[10,"any","","",70],[10,"find","","",70],[10,"position","","",70],[10,"max_by","","",70],[10,"min_by","","",70],[10,"clone","","",71],[10,"clone_from","","",71],[10,"next","","",71],[10,"size_hint","","",71],[10,"size_hint","","",71],[10,"chain","","",71],[10,"zip","","",71],[10,"map","","",71],[10,"filter","","",71],[10,"filter_map","","",71],[10,"enumerate","","",71],[10,"peekable","","",71],[10,"skip_while","","",71],[10,"take_while","","",71],[10,"skip","","",71],[10,"take","","",71],[10,"scan","","",71],[10,"flat_map","","",71],[10,"fuse","","",71],[10,"inspect","","",71],[10,"by_ref","","",71],[10,"advance","","",71],[10,"collect","","",71],[10,"nth","","",71],[10,"last","","",71],[10,"fold","","",71],[10,"count","","",71],[10,"all","","",71],[10,"any","","",71],[10,"find","","",71],[10,"position","","",71],[10,"max_by","","",71],[10,"min_by","","",71],[10,"clone","","",72],[10,"clone_from","","",72],[10,"next","","",72],[10,"size_hint","","",72],[10,"size_hint","","",72],[10,"chain","","",72],[10,"zip","","",72],[10,"map","","",72],[10,"filter","","",72],[10,"filter_map","","",72],[10,"enumerate","","",72],[10,"peekable","","",72],[10,"skip_while","","",72],[10,"take_while","","",72],[10,"skip","","",72],[10,"take","","",72],[10,"scan","","",72],[10,"flat_map","","",72],[10,"fuse","","",72],[10,"inspect","","",72],[10,"by_ref","","",72],[10,"advance","","",72],[10,"collect","","",72],[10,"nth","","",72],[10,"last","","",72],[10,"fold","","",72],[10,"count","","",72],[10,"all","","",72],[10,"any","","",72],[10,"find","","",72],[10,"position","","",72],[10,"max_by","","",72],[10,"min_by","","",72],[10,"next_back","","",72],[10,"rev","","",72],[10,"indexable","","",72],[10,"idx","","",72],[10,"next","","",73],[10,"size_hint","","",73],[10,"size_hint","","",73],[10,"chain","","",73],[10,"zip","","",73],[10,"map","","",73],[10,"filter","","",73],[10,"filter_map","","",73],[10,"enumerate","","",73],[10,"peekable","","",73],[10,"skip_while","","",73],[10,"take_while","","",73],[10,"skip","","",73],[10,"take","","",73],[10,"scan","","",73],[10,"flat_map","","",73],[10,"fuse","","",73],[10,"inspect","","",73],[10,"by_ref","","",73],[10,"advance","","",73],[10,"collect","","",73],[10,"nth","","",73],[10,"last","","",73],[10,"fold","","",73],[10,"count","","",73],[10,"all","","",73],[10,"any","","",73],[10,"find","","",73],[10,"position","","",73],[10,"max_by","","",73],[10,"min_by","","",73],[10,"next_back","","",73],[10,"rev","","",73],[10,"fmt","","",74],[10,"eq","","",74],[10,"ne","","",74],[10,"ne","","",74],[10,"found","","Converts a `Found` to `Some`, `NotFound` to `None`.\nSimilar to `Result::ok`.",74],[10,"not_found","","Convert a `Found` to `None`, `NotFound` to `Some`.\nSimilar to `Result::err`.",74],[10,"clone","core::str","",75],[10,"clone_from","","",75],[10,"next","","",75],[10,"size_hint","","",75],[10,"size_hint","","",75],[10,"chain","","",75],[10,"zip","","",75],[10,"map","","",75],[10,"filter","","",75],[10,"filter_map","","",75],[10,"enumerate","","",75],[10,"peekable","","",75],[10,"skip_while","","",75],[10,"take_while","","",75],[10,"skip","","",75],[10,"take","","",75],[10,"scan","","",75],[10,"flat_map","","",75],[10,"fuse","","",75],[10,"inspect","","",75],[10,"by_ref","","",75],[10,"advance","","",75],[10,"collect","","",75],[10,"nth","","",75],[10,"last","","",75],[10,"fold","","",75],[10,"count","","",75],[10,"all","","",75],[10,"any","","",75],[10,"find","","",75],[10,"position","","",75],[10,"max_by","","",75],[10,"min_by","","",75],[10,"next_back","","",75],[10,"rev","","",75],[10,"clone","","",76],[10,"clone_from","","",76],[10,"next","","",76],[10,"size_hint","","",76],[10,"size_hint","","",76],[10,"chain","","",76],[10,"zip","","",76],[10,"map","","",76],[10,"filter","","",76],[10,"filter_map","","",76],[10,"enumerate","","",76],[10,"peekable","","",76],[10,"skip_while","","",76],[10,"take_while","","",76],[10,"skip","","",76],[10,"take","","",76],[10,"scan","","",76],[10,"flat_map","","",76],[10,"fuse","","",76],[10,"inspect","","",76],[10,"by_ref","","",76],[10,"advance","","",76],[10,"collect","","",76],[10,"nth","","",76],[10,"last","","",76],[10,"fold","","",76],[10,"count","","",76],[10,"all","","",76],[10,"any","","",76],[10,"find","","",76],[10,"position","","",76],[10,"max_by","","",76],[10,"min_by","","",76],[10,"next_back","","",76],[10,"rev","","",76],[10,"clone","","",77],[10,"clone_from","","",77],[10,"clone","","",78],[10,"clone_from","","",78],[10,"next","","",77],[10,"size_hint","","",77],[10,"chain","","",77],[10,"zip","","",77],[10,"map","","",77],[10,"filter","","",77],[10,"filter_map","","",77],[10,"enumerate","","",77],[10,"peekable","","",77],[10,"skip_while","","",77],[10,"take_while","","",77],[10,"skip","","",77],[10,"take","","",77],[10,"scan","","",77],[10,"flat_map","","",77],[10,"fuse","","",77],[10,"inspect","","",77],[10,"by_ref","","",77],[10,"advance","","",77],[10,"collect","","",77],[10,"nth","","",77],[10,"last","","",77],[10,"fold","","",77],[10,"count","","",77],[10,"all","","",77],[10,"any","","",77],[10,"find","","",77],[10,"position","","",77],[10,"max_by","","",77],[10,"min_by","","",77],[10,"next_back","","",77],[10,"rev","","",77],[10,"next","","",78],[10,"size_hint","","",78],[10,"chain","","",78],[10,"zip","","",78],[10,"map","","",78],[10,"filter","","",78],[10,"filter_map","","",78],[10,"enumerate","","",78],[10,"peekable","","",78],[10,"skip_while","","",78],[10,"take_while","","",78],[10,"skip","","",78],[10,"take","","",78],[10,"scan","","",78],[10,"flat_map","","",78],[10,"fuse","","",78],[10,"inspect","","",78],[10,"by_ref","","",78],[10,"advance","","",78],[10,"collect","","",78],[10,"nth","","",78],[10,"last","","",78],[10,"fold","","",78],[10,"count","","",78],[10,"all","","",78],[10,"any","","",78],[10,"find","","",78],[10,"position","","",78],[10,"max_by","","",78],[10,"min_by","","",78],[10,"clone","","",79],[10,"clone_from","","",79],[10,"clone","","",80],[10,"clone_from","","",80],[10,"clone","","",81],[10,"clone_from","","",81],[10,"clone","","",82],[10,"clone_from","","",82],[10,"clone","","",83],[10,"clone_from","","",83],[10,"next","","",82],[10,"size_hint","","",82],[10,"chain","","",82],[10,"zip","","",82],[10,"map","","",82],[10,"filter","","",82],[10,"filter_map","","",82],[10,"enumerate","","",82],[10,"peekable","","",82],[10,"skip_while","","",82],[10,"take_while","","",82],[10,"skip","","",82],[10,"take","","",82],[10,"scan","","",82],[10,"flat_map","","",82],[10,"fuse","","",82],[10,"inspect","","",82],[10,"by_ref","","",82],[10,"advance","","",82],[10,"collect","","",82],[10,"nth","","",82],[10,"last","","",82],[10,"fold","","",82],[10,"count","","",82],[10,"all","","",82],[10,"any","","",82],[10,"find","","",82],[10,"position","","",82],[10,"max_by","","",82],[10,"min_by","","",82],[10,"next","","",83],[10,"size_hint","","",83],[10,"chain","","",83],[10,"zip","","",83],[10,"map","","",83],[10,"filter","","",83],[10,"filter_map","","",83],[10,"enumerate","","",83],[10,"peekable","","",83],[10,"skip_while","","",83],[10,"take_while","","",83],[10,"skip","","",83],[10,"take","","",83],[10,"scan","","",83],[10,"flat_map","","",83],[10,"fuse","","",83],[10,"inspect","","",83],[10,"by_ref","","",83],[10,"advance","","",83],[10,"collect","","",83],[10,"nth","","",83],[10,"last","","",83],[10,"fold","","",83],[10,"count","","",83],[10,"all","","",83],[10,"any","","",83],[10,"find","","",83],[10,"position","","",83],[10,"max_by","","",83],[10,"min_by","","",83],[10,"clone","","",84],[10,"clone_from","","",84],[10,"next","","",84],[10,"size_hint","","",84],[10,"size_hint","","",84],[10,"chain","","",84],[10,"zip","","",84],[10,"map","","",84],[10,"filter","","",84],[10,"filter_map","","",84],[10,"enumerate","","",84],[10,"peekable","","",84],[10,"skip_while","","",84],[10,"take_while","","",84],[10,"skip","","",84],[10,"take","","",84],[10,"scan","","",84],[10,"flat_map","","",84],[10,"fuse","","",84],[10,"inspect","","",84],[10,"by_ref","","",84],[10,"advance","","",84],[10,"collect","","",84],[10,"nth","","",84],[10,"last","","",84],[10,"fold","","",84],[10,"count","","",84],[10,"all","","",84],[10,"any","","",84],[10,"find","","",84],[10,"position","","",84],[10,"max_by","","",84],[10,"min_by","","",84],[10,"clone","","",85],[10,"clone_from","","",85],[10,"fmt","","",86],[10,"clone","","",86],[10,"clone_from","","",86],[10,"assert_receiver_is_total_eq","","",86],[10,"eq","","",86],[10,"ne","","",86],[10,"ne","","",86],[10,"to_char_lossy","","Convert `self` to a `char`, taking `LoneSurrogate`s to the\nreplacement character (U+FFFD).",86],[10,"next","","",85],[10,"size_hint","","",85],[10,"size_hint","","",85],[10,"chain","","",85],[10,"zip","","",85],[10,"map","","",85],[10,"filter","","",85],[10,"filter_map","","",85],[10,"enumerate","","",85],[10,"peekable","","",85],[10,"skip_while","","",85],[10,"take_while","","",85],[10,"skip","","",85],[10,"take","","",85],[10,"scan","","",85],[10,"flat_map","","",85],[10,"fuse","","",85],[10,"inspect","","",85],[10,"by_ref","","",85],[10,"advance","","",85],[10,"collect","","",85],[10,"nth","","",85],[10,"last","","",85],[10,"fold","","",85],[10,"count","","",85],[10,"all","","",85],[10,"any","","",85],[10,"find","","",85],[10,"position","","",85],[10,"max_by","","",85],[10,"min_by","","",85],[10,"eq","core::fmt::num","",87],[10,"ne","","",87],[10,"ne","","",87],[10,"clone","","",87],[10,"clone_from","","",87],[10,"eq","","",88],[10,"ne","","",88],[10,"ne","","",88],[10,"clone","","",88],[10,"clone_from","","",88],[10,"eq","","",89],[10,"ne","","",89],[10,"ne","","",89],[10,"clone","","",89],[10,"clone_from","","",89],[10,"eq","","",90],[10,"ne","","",90],[10,"ne","","",90],[10,"clone","","",90],[10,"clone_from","","",90],[10,"eq","","",91],[10,"ne","","",91],[10,"ne","","",91],[10,"clone","","",91],[10,"clone_from","","",91],[10,"eq","","",92],[10,"ne","","",92],[10,"ne","","",92],[10,"clone","","",92],[10,"clone_from","","",92],[10,"fmt","","",93],[10,"fmt","","",93],[10,"fmt","","",93],[10,"fmt","","",93],[10,"fmt","","",93],[10,"fmt","","",93],[10,"fmt","","",93],[10,"fmt","","",93],[10,"fmt","","",93],[10,"fmt","","",93],[10,"eq","core::fmt::rt","",94],[10,"ne","","",94],[10,"ne","","",94],[10,"fmt","core::fmt","",95],[10,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a byte-array. The byte-array should *not* contain the sign\nfor the integer, that will be added by this method.",96],[10,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",96],[10,"write","","Writes some data to the underlying buffer contained within this\nformatter.",96],[10,"write_fmt","","Writes some formatted information into this instance",96],[10,"fmt","core::cell","",20],[10,"fmt","","",22],[10,"fmt","","",23],[1,"AtomicBool","sync::atomic","An atomic boolean type."],[1,"AtomicInt","","A signed atomic integer type, supporting basic atomic arithmetic operations"],[1,"AtomicUint","","An unsigned atomic integer type, supporting basic atomic arithmetic operations"],[1,"AtomicPtr","","An unsafe atomic pointer. Only supports basic atomic operations"],[2,"Ordering","","Atomic memory orderings"],[12,"Relaxed","","No ordering constraints, only atomic operations",97],[12,"Release","","When coupled with a store, all previous writes become visible\nto another thread that performs a load with `Acquire` ordering\non the same value",97],[12,"Acquire","","When coupled with a load, all subsequent loads will see data\nwritten before a store with `Release` ordering on the same value\nin another thread",97],[12,"AcqRel","","When coupled with a load, uses `Acquire` ordering, and with a store\n`Release` ordering",97],[12,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all\nsequentially consistent operations in the same order.",97],[5,"INIT_ATOMIC_BOOL","",""],[5,"INIT_ATOMIC_INT","",""],[5,"INIT_ATOMIC_UINT","",""],[3,"fence","","An atomic fence."],[0,"spsc_queue","sync","A single-producer single-consumer concurrent queue"],[1,"Queue","sync::spsc_queue","The single-producer single-consumer queue. This structure is not cloneable,\nbut it can be safely shared in an Arc if it is guaranteed that there\nis only one popper and one pusher touching the queue at any one point in\ntime."],[1,"Consumer","","A safe abstraction for the consumer in a single-producer single-consumer\nqueue."],[1,"Producer","","A safe abstraction for the producer in a single-producer single-consumer\nqueue."],[3,"queue","","Creates a new queue with a consumer-producer pair."],[10,"pop","","Attempts to pop the value from the head of the queue, returning `None`\nif the queue is empty.",98],[10,"peek","","Attempts to peek at the head of the queue, returning `None` if the queue\nis empty.",98],[10,"push","","Pushes a new value onto the queue.",99],[10,"new","","Creates a new queue.",100],[10,"push","","Pushes a new value onto this queue. Note that to use this function\nsafely, it must be externally guaranteed that there is only one pusher.",100],[10,"pop","","Attempts to pop a value from this queue. Remember that to use this type\nsafely you must ensure that there is only one popper at a time.",100],[10,"peek","","Attempts to peek at the head of the queue, returning `None` if the queue\nhas no data currently",100],[10,"drop","","",100],[0,"mpsc_queue","sync","A mostly lock-free multi-producer, single consumer queue."],[1,"Queue","sync::mpsc_queue","The multi-producer single-consumer structure. This is not cloneable, but it\nmay be safely shared so long as it is guaranteed that there is only one\npopper at a time (many pushers are allowed)."],[2,"PopResult","","A result of the `pop` function."],[12,"Data","","Some data has been popped",101],[12,"Empty","","The queue is empty",101],[12,"Inconsistent","","The queue is in an inconsistent state. Popping data should succeed, but\nsome pushers have yet to make enough progress in order allow a pop to\nsucceed. It is recommended that a pop() occur \"in the near future\" in\norder to see if the sender has made progress or not",101],[10,"new","","Creates a new queue that is safe to share among multiple producers and\none consumer.",102],[10,"push","","Pushes a new value onto this queue.",102],[10,"pop","","Pops some data from this queue.",102],[10,"casual_pop","","Attempts to pop data from this queue, but doesn't attempt too hard. This\nwill canonicalize inconsistent states to a `None` value.",102],[10,"drop","","",102],[0,"mpmc_bounded_queue","sync",""],[1,"Queue","sync::mpmc_bounded_queue",""],[10,"with_capacity","","",103],[10,"push","","",103],[10,"pop","","",103],[10,"clone","","",103],[0,"deque","sync","A (mostly) lock-free concurrent work-stealing deque"],[1,"Worker","sync::deque","Worker half of the work-stealing deque. This worker has exclusive access to\none side of the deque, and uses `push` and `pop` method to manipulate it."],[1,"Stealer","","The stealing half of the work-stealing deque. Stealers have access to the\nopposite end of the deque from the worker, and they only have access to the\n`steal` method."],[1,"BufferPool","","The allocation pool for buffers used by work-stealing deques. Right now this\nstructure is used for reclamation of memory after it is no longer in use by\ndeques."],[2,"Stolen","","When stealing some data, this is an enumeration of the possible outcomes."],[12,"Empty","","The deque was empty at the time of stealing",104],[12,"Abort","","The stealer lost the race for stealing data, and a retry may return more\ndata.",104],[12,"Data","","The stealer has successfully stolen some data.",104],[10,"fmt","","",104],[10,"eq","","",104],[10,"ne","","",104],[10,"new","","Allocates a new buffer pool which in turn can be used to allocate new\ndeques.",105],[10,"deque","","Allocates a new work-stealing deque which will send/receiving memory to\nand from this buffer pool.",105],[10,"clone","","",105],[10,"push","","Pushes data onto the front of this work queue.",106],[10,"pop","","Pops data off the front of the work queue, returning `None` on an empty\nqueue.",106],[10,"pool","","Gets access to the buffer pool that this worker is attached to. This can\nbe used to create more deques which share the same buffer pool as this\ndeque.",106],[10,"steal","","Steals work off the end of the queue (opposite of the worker's end)",107],[10,"pool","","Gets access to the buffer pool that this stealer is attached to. This\ncan be used to create more deques which share the same buffer pool as\nthis deque.",107],[10,"clone","","",107],[0,"raw","sync","Raw concurrency primitives you know and love."],[1,"Condvar","sync::raw","A mechanism for atomic-unlock-and-deschedule blocking and signalling."],[1,"Semaphore","","A counting, blocking, bounded-waiting semaphore."],[1,"SemaphoreGuard","","An RAII guard used to represent an acquired resource to a semaphore. When\ndropped, this value will release the resource back to the semaphore."],[1,"Mutex","","A blocking, bounded-waiting, mutual exclusion lock with an associated\nFIFO condition variable."],[1,"MutexGuard","","An RAII structure which is used to gain access to a mutex's condition\nvariable. Additionally, when a value of this type is dropped, the\ncorresponding mutex is also unlocked."],[11,"cond","","Inner condition variable which is connected to the outer mutex, and can\nbe used for atomic-unlock-and-deschedule.",108],[1,"RWLock","","A blocking, no-starvation, reader-writer lock with an associated condvar."],[1,"RWLockReadGuard","","An RAII helper which is created by acquiring a read lock on an RWLock. When\ndropped, this will unlock the RWLock."],[1,"RWLockWriteGuard","","An RAII helper which is created by acquiring a write lock on an RWLock. When\ndropped, this will unlock the RWLock."],[11,"cond","","Inner condition variable that is connected to the write-mode of the\nouter rwlock.",109],[10,"wait","","Atomically drop the associated lock, and block until a signal is sent.",110],[10,"wait_on","","As wait(), but can specify which of multiple condition variables to\nwait on. Only a signal_on() or broadcast_on() with the same condvar_id\nwill wake this thread.",110],[10,"signal","","Wake up a blocked task. Returns false if there was no blocked task.",110],[10,"signal_on","","As signal, but with a specified condvar_id. See wait_on.",110],[10,"broadcast","","Wake up all blocked tasks. Returns the number of tasks woken.",110],[10,"broadcast_on","","As broadcast, but with a specified condvar_id. See wait_on.",110],[10,"new","","Create a new semaphore with the specified count.",111],[10,"acquire","","Acquire a resource represented by the semaphore. Blocks if necessary\nuntil resource(s) become available.",111],[10,"release","","Release a held resource represented by the semaphore. Wakes a blocked\ncontending task, if any exist. Won't block the caller.",111],[10,"access","","Acquire a resource of this semaphore, returning an RAII guard which will\nrelease the resource when dropped.",111],[10,"new","","Create a new mutex, with one associated condvar.",112],[10,"new_with_condvars","","Create a new mutex, with a specified number of associated condvars. This\nwill allow calling wait_on/signal_on/broadcast_on with condvar IDs\nbetween 0 and num_condvars-1. (If num_condvars is 0, lock_cond will be\nallowed but any operations on the condvar will fail.)",112],[10,"lock","","Acquires ownership of this mutex, returning an RAII guard which will\nunlock the mutex when dropped. The associated condition variable can\nalso be accessed through the returned guard.",112],[10,"new","","Create a new rwlock, with one associated condvar.",113],[10,"new_with_condvars","","Create a new rwlock, with a specified number of associated condvars.\nSimilar to mutex_with_condvars.",113],[10,"read","","Acquires a read-lock, returning an RAII guard that will unlock the lock\nwhen dropped. Calls to 'read' from other tasks may run concurrently with\nthis one.",113],[10,"write","","Acquire a write-lock, returning an RAII guard that will unlock the lock\nwhen dropped. No calls to 'read' or 'write' from other tasks will run\nconcurrently with this one.",113],[10,"downgrade","","Consumes this write lock and converts it into a read lock.",109],[10,"drop","","",109],[10,"drop","","",114],[0,"mutex","sync","A proper mutex implementation regardless of the \"flavor of task\" which is\nacquiring the lock."],[1,"Mutex","sync::mutex","A mutual exclusion primitive useful for protecting shared data"],[1,"StaticMutex","","The static mutex type is provided to allow for static allocation of mutexes."],[1,"Guard","","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked."],[5,"LOCKED","",""],[5,"GREEN_BLOCKED","",""],[5,"NATIVE_BLOCKED","",""],[5,"MUTEX_INIT","","Static initialization of a mutex. This constant can be used to initialize\nother mutex constants."],[10,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",115],[10,"lock","","Acquires this lock, see `Mutex::lock`",115],[10,"destroy","","Deallocates resources associated with this static mutex.",115],[10,"new","","Creates a new mutex in an unlocked state ready for use.",116],[10,"try_lock","","Attempts to acquire this lock.",116],[10,"lock","","Acquires a mutex, blocking the current task until it is able to do so.",116],[10,"drop","","",117],[10,"drop","","",116],[0,"one","sync","A \"once initialization\" primitive"],[1,"Once","sync::one","A synchronization primitive which can be used to run a one-time global\ninitialization. Useful for one-time initialization for FFI or related\nfunctionality. This type can only be constructed with the `ONCE_INIT`\nvalue."],[5,"ONCE_INIT","","Initialization value for static `Once` values."],[10,"doit","","Perform an initialization routine once and only once. The given closure\nwill be executed if this is the first time `doit` has been called, and\notherwise the routine will *not* be invoked.",118],[0,"comm","sync","Communication primitives for concurrent tasks"],[1,"Select","sync::comm","The \"receiver set\" of the select interface. This structure is used to manage\na set of receivers which are being selected over."],[1,"Handle","","A handle to a receiver which is currently a member of a `Select` set of\nreceivers.  This handle is used to keep the receiver in the set as well as\ninteract with the underlying receiver."],[1,"DuplexStream","","An extension of `pipes::stream` that allows both sending and receiving."],[1,"Receiver","","The receiving-half of Rust's channel type. This half can only be owned by\none task"],[1,"Messages","","An iterator over messages on a receiver, this iterator will block\nwhenever `next` is called, waiting for a new message, and `None` will be\nreturned when the corresponding channel has hung up."],[1,"Sender","","The sending-half of Rust's asynchronous channel type. This half can only be\nowned by one task, but it can be cloned to send to other tasks."],[1,"SyncSender","","The sending-half of Rust's synchronous channel type. This half can only be\nowned by one task, but it can be cloned to send to other tasks."],[2,"TryRecvError","","This enumeration is the list of the possible reasons that try_recv could not\nreturn data when called."],[12,"Empty","","This channel is currently empty, but the sender(s) have not yet\ndisconnected, so data may yet become available.",119],[12,"Disconnected","","This channel's sending half has become disconnected, and there will\nnever be any more data received on this channel",119],[2,"TrySendError","","This enumeration is the list of the possible error outcomes for the\n`SyncSender::try_send` method."],[12,"Full","","The data could not be sent on the channel because it would require that\nthe callee block to send the data.",120],[12,"RecvDisconnected","","This channel's receiving half has disconnected, so the data could not be\nsent. The data is returned back to the callee in this case.",120],[3,"duplex","","Creates a bidirectional stream."],[3,"channel","","Creates a new asynchronous channel, returning the sender/receiver halves."],[3,"sync_channel","","Creates a new synchronous, bounded channel."],[10,"send","","",121],[10,"send_opt","","",121],[10,"recv","","",121],[10,"try_recv","","",121],[10,"recv_opt","","",121],[10,"new","","Creates a new selection structure. This set is initially empty and\n`wait` will fail!() if called.",122],[10,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",122],[10,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",122],[10,"id","","Retrieve the id of this handle.",123],[10,"recv","","Receive a value on the underlying receiver. Has the same semantics as\n`Receiver.recv`",123],[10,"recv_opt","","Block to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv_opt`",123],[10,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",123],[10,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",123],[10,"drop","","",122],[10,"drop","","",123],[10,"fmt","","",119],[10,"clone","","",119],[10,"eq","","",119],[10,"ne","","",119],[10,"fmt","","",120],[10,"clone","","",120],[10,"eq","","",120],[10,"ne","","",120],[10,"send","","Sends a value along this channel to be received by the corresponding\nreceiver.",124],[10,"send_opt","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",124],[10,"clone","","",124],[10,"drop","","",124],[10,"send","","Sends a value on this synchronous channel.",125],[10,"send_opt","","Send a value on a channel, returning it back if the receiver\ndisconnected",125],[10,"try_send","","Attempts to send a value on this channel without blocking.",125],[10,"clone","","",125],[10,"drop","","",125],[10,"recv","","Blocks waiting for a value on this receiver",126],[10,"try_recv","","Attempts to return a pending value on this receiver without blocking",126],[10,"recv_opt","","Attempt to wait for a value on this receiver, but does not fail if the\ncorresponding channel has hung up.",126],[10,"iter","","Returns an iterator which will block waiting for messages, but never\n`fail!`. It will return `None` when the channel has hung up.",126],[10,"next","","",127],[10,"drop","","",126],[10,"wait","sync","Atomically exit the associated lock and block until a signal is sent.",128],[10,"wait_on","","Atomically exit the associated lock and block on a specified condvar\nuntil a signal is sent on that same condvar.",128],[10,"signal","","Wake up a blocked task. Returns false if there was no blocked task.",128],[10,"signal_on","","Wake up a blocked task on a specified condvar (as\nsync::cond.signal_on). Returns false if there was no blocked task.",128],[10,"broadcast","","Wake up all blocked tasks. Returns the number of tasks woken.",128],[10,"broadcast_on","","Wake up all blocked tasks on a specified condvar (as\nsync::cond.broadcast_on). Returns the number of tasks woken.",128],[10,"new","","Creates a new mutex to protect the user-supplied data.",129],[10,"new_with_condvars","","Create a new mutex, with a specified number of associated condvars.",129],[10,"lock","","Access the underlying mutable data with mutual exclusion from other\ntasks. The returned value is an RAII guard which will unlock the mutex\nwhen dropped. All concurrent tasks attempting to lock the mutex will\nblock while the returned value is still alive.",129],[10,"deref","","",0],[10,"deref_mut","","",0],[10,"new","","Create a reader/writer lock with the supplied data.",130],[10,"new_with_condvars","","Create a reader/writer lock with the supplied data and a specified number\nof condvars (as sync::RWLock::new_with_condvars).",130],[10,"write","","Access the underlying data mutably. Locks the rwlock in write mode;\nother readers and writers will block.",130],[10,"read","","Access the underlying data immutably. May run concurrently with other\nreading tasks.",130],[10,"downgrade","","Consumes this write lock token, returning a new read lock token.",1],[10,"deref","","",131],[10,"deref","","",1],[10,"deref_mut","","",1],[10,"new","","Create a new barrier that can block a given number of tasks.",132],[10,"wait","","Block the current task until a certain number of tasks is waiting.",132],[10,"new","alloc::arc","Creates an atomically reference counted wrapper.",133],[10,"downgrade","","Downgrades a strong pointer to a weak pointer.",133],[10,"make_unique","","Acquires a mutable pointer to the inner contents by guaranteeing that\nthe reference count is one (no sharing is possible).",133],[10,"default","alloc::boxed","",134],[10,"clone","","Returns a copy of the owned box.",134],[10,"clone_from","","Performs copy-assignment from `source` by reusing the existing allocation.",134],[10,"clone_from","","",134],[10,"eq","","",134],[10,"ne","","",134],[10,"ne","","",134],[10,"partial_cmp","","",134],[10,"lt","","",134],[10,"le","","",134],[10,"ge","","",134],[10,"gt","","",134],[10,"lt","","",134],[10,"le","","",134],[10,"gt","","",134],[10,"ge","","",134],[10,"cmp","","",134],[10,"assert_receiver_is_total_eq","","",134],[10,"downcast","","",134],[10,"move","","",134],[10,"fmt","","",134],[10,"fmt","","",134],[10,"clone","alloc::arc","Duplicate an atomically reference counted wrapper.",133],[10,"clone_from","","",133],[10,"deref","","",133],[10,"drop","","",133],[10,"upgrade","","Attempts to upgrade this weak reference to a strong reference.",135],[10,"clone","","",135],[10,"clone_from","","",135],[10,"drop","","",135],[10,"new","alloc::rc","Constructs a new reference-counted pointer.",136],[10,"downgrade","","Downgrades the reference-counted pointer to a weak reference.",136],[10,"make_unique","","Acquires a mutable pointer to the inner contents by guaranteeing that\nthe reference count is one (no sharing is possible).",136],[10,"deref","","Borrows the value contained in the reference-counted pointer.",136],[10,"drop","","",136],[10,"clone","","",136],[10,"clone_from","","",136],[10,"default","","",136],[10,"eq","","",136],[10,"ne","","",136],[10,"ne","","",136],[10,"assert_receiver_is_total_eq","","",136],[10,"partial_cmp","","",136],[10,"lt","","",136],[10,"le","","",136],[10,"gt","","",136],[10,"ge","","",136],[10,"lt","","",136],[10,"le","","",136],[10,"gt","","",136],[10,"ge","","",136],[10,"cmp","","",136],[10,"fmt","","",136],[10,"upgrade","","Upgrades a weak reference to a strong reference.",137],[10,"drop","","",137],[10,"clone","","",137],[10,"clone_from","","",137],[1,"Arc","sync","An atomically reference counted wrapper for shared state."],[1,"Weak","","A weak pointer to an `Arc`."]],"paths":[[1,"MutexGuard"],[1,"RWLockWriteGuard"],[1,"AtomicOption"],[1,"AtomicBool"],[2,"FPCategory"],[1,"TypeId"],[1,"CovariantType"],[1,"ContravariantType"],[1,"InvariantType"],[1,"CovariantLifetime"],[1,"ContravariantLifetime"],[1,"InvariantLifetime"],[1,"NoSend"],[1,"NoCopy"],[1,"NoSync"],[1,"Managed"],[2,"Ordering"],[1,"AtomicInt"],[1,"AtomicUint"],[1,"AtomicPtr"],[1,"Cell"],[1,"RefCell"],[1,"Ref"],[1,"RefMut"],[1,"UnsafeCell"],[1,"Finallyalizer"],[1,"Enumerate"],[1,"Inspect"],[1,"Rev"],[1,"Map"],[1,"Zip"],[1,"ByRef"],[2,"MinMaxResult"],[1,"Cycle"],[1,"Chain"],[1,"Filter"],[1,"FilterMap"],[1,"Peekable"],[1,"SkipWhile"],[1,"TakeWhile"],[1,"Skip"],[1,"Take"],[1,"Scan"],[1,"FlatMap"],[1,"Fuse"],[1,"Unfold"],[1,"Counter"],[1,"Range"],[1,"RangeInclusive"],[1,"RangeStep"],[1,"RangeStepInclusive"],[1,"Repeat"],[2,"Option"],[1,"Item"],[2,"Result"],[1,"Item"],[1,"i8x16"],[1,"i16x8"],[1,"i32x4"],[1,"i64x2"],[1,"u8x16"],[1,"u16x8"],[1,"u32x4"],[1,"u64x2"],[1,"f32x4"],[1,"f64x2"],[1,"Items"],[1,"MutItems"],[1,"Splits"],[1,"MutSplits"],[1,"SplitsN"],[1,"Windows"],[1,"Chunks"],[1,"MutChunks"],[2,"BinarySearchResult"],[1,"Chars"],[1,"CharOffsets"],[1,"CharSplits"],[1,"CharSplitsN"],[1,"NaiveSearcher"],[1,"TwoWaySearcher"],[2,"Searcher"],[1,"MatchIndices"],[1,"StrSplits"],[1,"Utf16CodeUnits"],[1,"Utf16Items"],[2,"Utf16Item"],[1,"Binary"],[1,"Octal"],[1,"Decimal"],[1,"LowerHex"],[1,"UpperHex"],[1,"Radix"],[1,"RadixFmt"],[2,"Alignment"],[1,"Arguments"],[1,"Formatter"],[2,"Ordering"],[1,"Consumer"],[1,"Producer"],[1,"Queue"],[2,"PopResult"],[1,"Queue"],[1,"Queue"],[2,"Stolen"],[1,"BufferPool"],[1,"Worker"],[1,"Stealer"],[1,"MutexGuard"],[1,"RWLockWriteGuard"],[1,"Condvar"],[1,"Semaphore"],[1,"Mutex"],[1,"RWLock"],[1,"RWLockReadGuard"],[1,"StaticMutex"],[1,"Mutex"],[1,"Guard"],[1,"Once"],[2,"TryRecvError"],[2,"TrySendError"],[1,"DuplexStream"],[1,"Select"],[1,"Handle"],[1,"Sender"],[1,"SyncSender"],[1,"Receiver"],[1,"Messages"],[1,"Condvar"],[1,"Mutex"],[1,"RWLock"],[1,"RWLockReadGuard"],[1,"Barrier"],[1,"Arc"],[1,"Box"],[1,"Weak"],[1,"Rc"],[1,"Weak"]]};

searchIndex['serialize'] = {"items":[[0,"","serialize","Support code for encoding and decoding types."],[10,"encode","collections::string","",0],[10,"decode","","",0],[10,"encode","alloc::boxed","",1],[10,"decode","","",1],[10,"encode","std::gc","",2],[10,"encode","alloc::rc","",3],[10,"decode","","",3],[10,"decode","std::gc","",2],[10,"encode","collections::vec","",4],[10,"decode","","",4],[10,"encode","core::option","",5],[10,"decode","","",5],[10,"encode","std::path::posix","",6],[10,"decode","","",6],[10,"encode","std::path::windows","",7],[10,"decode","","",7],[10,"encode","core::cell","",8],[10,"decode","","",8],[10,"encode","","",9],[10,"decode","","",9],[10,"encode","collections::dlist","",10],[10,"decode","","",10],[10,"encode","collections::ringbuf","",11],[10,"decode","","",11],[10,"encode","collections::treemap","",12],[10,"decode","","",12],[10,"encode","","",13],[10,"decode","","",13],[10,"encode","collections::enum_set","",14],[10,"decode","","",14],[10,"encode","std::collections::hashmap::map","",15],[10,"decode","","",15],[10,"encode","std::collections::hashmap::set","",16],[10,"decode","","",16],[10,"encode","collections::trie","",17],[10,"decode","","",17],[10,"encode","","",18],[10,"decode","","",18],[0,"base64","serialize","Base64 binary-to-text encoding"],[1,"Config","serialize::base64","Contains configuration parameters for `to_base64`."],[11,"char_set","","Character set to use",19],[11,"pad","","True to pad output with `=` characters",19],[11,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",19],[2,"CharacterSet","","Available encoding character sets"],[12,"Standard","","The standard character set (uses `+` and `/`)",20],[12,"UrlSafe","","The URL safe character set (uses `-` and `_`)",20],[2,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string"],[12,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21],[12,"InvalidBase64Length","","The input had an invalid length",21],[5,"STANDARD","","Configuration for RFC 4648 standard base64 encoding"],[5,"URL_SAFE","","Configuration for RFC 4648 base64url encoding"],[5,"MIME","","Configuration for RFC 2045 MIME base64 encoding"],[6,"ToBase64","","A trait for converting a value to base64 encoding."],[9,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22],[6,"FromBase64","","A trait for converting from base64 encoded values."],[9,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23],[10,"fmt","","",21],[0,"hex","serialize","Hex binary-to-text encoding"],[2,"FromHexError","serialize::hex","Errors that can occur when decoding a hex encoded string"],[12,"InvalidHexCharacter","","The input contained a character not part of the hex format",24],[12,"InvalidHexLength","","The input had an invalid length",24],[6,"ToHex","","A trait for converting a value to hexadecimal encoding"],[9,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25],[6,"FromHex","","A trait for converting hexadecimal encoded values"],[9,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26],[10,"fmt","","",24],[0,"json","serialize","JSON parsing and serialization"],[1,"Encoder","serialize::json","A structure for implementing serialization to JSON."],[1,"PrettyEncoder","","Another encoder for JSON, but prints out human-readable JSON instead of\ncompact data"],[1,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x"],[1,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char."],[1,"Builder","","A Builder consumes a json::Parser to create a generic Json structure."],[1,"Decoder","","A structure to decode JSON to values in rust."],[2,"Json","","Represents a json value"],[12,"I64","","",27],[12,"U64","","",27],[12,"F64","","",27],[12,"String","","",27],[12,"Boolean","","",27],[12,"List","","",27],[12,"Object","","",27],[12,"Null","","",27],[2,"ErrorCode","","The errors that can arise while parsing a JSON stream."],[12,"InvalidSyntax","","",28],[12,"InvalidNumber","","",28],[12,"EOFWhileParsingObject","","",28],[12,"EOFWhileParsingList","","",28],[12,"EOFWhileParsingValue","","",28],[12,"EOFWhileParsingString","","",28],[12,"KeyMustBeAString","","",28],[12,"ExpectedColon","","",28],[12,"TrailingCharacters","","",28],[12,"TrailingComma","","",28],[12,"InvalidEscape","","",28],[12,"InvalidUnicodeCodePoint","","",28],[12,"LoneLeadingSurrogateInHexEscape","","",28],[12,"UnexpectedEndOfHexEscape","","",28],[12,"UnrecognizedHex","","",28],[12,"NotFourDigit","","",28],[12,"NotUtf8","","",28],[2,"ParserError","",""],[12,"SyntaxError","","msg, line, col",29],[12,"IoError","","",29],[2,"DecoderError","",""],[12,"ParseError","","",30],[12,"ExpectedError","","",30],[12,"MissingFieldError","","",30],[12,"UnknownVariantError","","",30],[12,"ApplicationError","","",30],[2,"JsonEvent","","The output of the streaming parser."],[12,"ObjectStart","","",31],[12,"ObjectEnd","","",31],[12,"ListStart","","",31],[12,"ListEnd","","",31],[12,"BooleanValue","","",31],[12,"I64Value","","",31],[12,"U64Value","","",31],[12,"F64Value","","",31],[12,"StringValue","","",31],[12,"NullValue","","",31],[12,"Error","","",31],[2,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x"],[12,"Index","","",32],[12,"Key","","",32],[3,"error_str","","Returns a readable error string for a given error code."],[3,"decode","","Shortcut function to decode a JSON `&str` into an object"],[3,"encode","","Shortcut function to encode a `T` into a JSON `String`"],[3,"escape_bytes","",""],[3,"from_reader","","Decodes a json value from an `&mut io::Reader`"],[3,"from_str","","Decodes a json value from a string"],[4,"JsonList","",""],[4,"JsonObject","",""],[4,"BuilderError","",""],[4,"EncodeResult","",""],[4,"DecodeResult","",""],[6,"ToJson","","A trait for converting values to JSON"],[9,"to_json","","Converts the value of `self` to an instance of JSON",33],[10,"partial_cmp","","",27],[10,"lt","","",27],[10,"le","","",27],[10,"gt","","",27],[10,"ge","","",27],[10,"eq","","",27],[10,"ne","","",27],[10,"clone","","",27],[10,"eq","","",28],[10,"ne","","",28],[10,"clone","","",28],[10,"fmt","","",29],[10,"eq","","",29],[10,"ne","","",29],[10,"clone","","",29],[10,"fmt","","",30],[10,"eq","","",30],[10,"ne","","",30],[10,"clone","","",30],[10,"fmt","","",28],[10,"new","","Creates a new JSON encoder whose output will be written to the writer\nspecified.",34],[10,"buffer_encode","","Encode the specified struct into a json [u8]",34],[10,"str_encode","","Encode the specified struct into a json str",34],[10,"emit_nil","","",34],[10,"emit_uint","","",34],[10,"emit_u64","","",34],[10,"emit_u32","","",34],[10,"emit_u16","","",34],[10,"emit_u8","","",34],[10,"emit_int","","",34],[10,"emit_i64","","",34],[10,"emit_i32","","",34],[10,"emit_i16","","",34],[10,"emit_i8","","",34],[10,"emit_bool","","",34],[10,"emit_f64","","",34],[10,"emit_f32","","",34],[10,"emit_char","","",34],[10,"emit_str","","",34],[10,"emit_enum","","",34],[10,"emit_enum_variant","","",34],[10,"emit_enum_variant_arg","","",34],[10,"emit_enum_struct_variant","","",34],[10,"emit_enum_struct_variant_field","","",34],[10,"emit_struct","","",34],[10,"emit_struct_field","","",34],[10,"emit_tuple","","",34],[10,"emit_tuple_arg","","",34],[10,"emit_tuple_struct","","",34],[10,"emit_tuple_struct_arg","","",34],[10,"emit_option","","",34],[10,"emit_option_none","","",34],[10,"emit_option_some","","",34],[10,"emit_seq","","",34],[10,"emit_seq_elt","","",34],[10,"emit_map","","",34],[10,"emit_map_elt_key","","",34],[10,"emit_map_elt_val","","",34],[10,"new","","Creates a new encoder whose output will be written to the specified writer",35],[10,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35],[10,"emit_nil","","",35],[10,"emit_uint","","",35],[10,"emit_u64","","",35],[10,"emit_u32","","",35],[10,"emit_u16","","",35],[10,"emit_u8","","",35],[10,"emit_int","","",35],[10,"emit_i64","","",35],[10,"emit_i32","","",35],[10,"emit_i16","","",35],[10,"emit_i8","","",35],[10,"emit_bool","","",35],[10,"emit_f64","","",35],[10,"emit_f32","","",35],[10,"emit_char","","",35],[10,"emit_str","","",35],[10,"emit_enum","","",35],[10,"emit_enum_variant","","",35],[10,"emit_enum_variant_arg","","",35],[10,"emit_enum_struct_variant","","",35],[10,"emit_enum_struct_variant_field","","",35],[10,"emit_struct","","",35],[10,"emit_struct_field","","",35],[10,"emit_tuple","","",35],[10,"emit_tuple_arg","","",35],[10,"emit_tuple_struct","","",35],[10,"emit_tuple_struct_arg","","",35],[10,"emit_option","","",35],[10,"emit_option_none","","",35],[10,"emit_option_some","","",35],[10,"emit_seq","","",35],[10,"emit_seq_elt","","",35],[10,"emit_map","","",35],[10,"emit_map_elt_key","","",35],[10,"emit_map_elt_val","","",35],[10,"encode","","",27],[10,"to_writer","","Encodes a json value into an io::writer. Uses a single line.",27],[10,"to_pretty_writer","","Encodes a json value into an io::writer.\nPretty-prints in a more readable format.",27],[10,"to_pretty_str","","Encodes a json value into a string",27],[10,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27],[10,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27],[10,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27],[10,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27],[10,"as_object","","If the Json value is an Object, returns the associated TreeMap.\nReturns None otherwise.",27],[10,"is_list","","Returns true if the Json value is a List. Returns false otherwise.",27],[10,"as_list","","If the Json value is a List, returns the associated vector.\nReturns None otherwise.",27],[10,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27],[10,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27],[10,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27],[10,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27],[10,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27],[10,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27],[10,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27],[10,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27],[10,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27],[10,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27],[10,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27],[10,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27],[10,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27],[10,"fmt","","",31],[10,"clone","","",31],[10,"eq","","",31],[10,"ne","","",31],[10,"fmt","","",32],[10,"clone","","",32],[10,"eq","","",32],[10,"ne","","",32],[10,"new","","",36],[10,"len","","Returns The number of elements in the Stack.",36],[10,"is_empty","","Returns true if the stack is empty.",36],[10,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36],[10,"is_equal_to","","Compares this stack with an array of StackElements.",36],[10,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36],[10,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36],[10,"top","","Returns the top-most element (if any).",36],[10,"next","","",37],[10,"new","","Creates the JSON parser.",37],[10,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37],[10,"new","","Create a JSON Builder.",38],[10,"build","","",38],[10,"new","","Creates a new decoder instance for decoding the specified JSON value.",39],[10,"read_nil","","",39],[10,"read_uint","","",39],[10,"read_u8","","",39],[10,"read_u16","","",39],[10,"read_u32","","",39],[10,"read_u64","","",39],[10,"read_int","","",39],[10,"read_i8","","",39],[10,"read_i16","","",39],[10,"read_i32","","",39],[10,"read_i64","","",39],[10,"read_f32","","",39],[10,"read_f64","","",39],[10,"read_bool","","",39],[10,"read_char","","",39],[10,"read_str","","",39],[10,"read_enum","","",39],[10,"read_enum_variant","","",39],[10,"read_enum_variant_arg","","",39],[10,"read_enum_struct_variant","","",39],[10,"read_enum_struct_variant_field","","",39],[10,"read_struct","","",39],[10,"read_struct_field","","",39],[10,"read_tuple","","",39],[10,"read_tuple_arg","","",39],[10,"read_tuple_struct","","",39],[10,"read_tuple_struct_arg","","",39],[10,"read_option","","",39],[10,"read_seq","","",39],[10,"read_seq_elt","","",39],[10,"read_map","","",39],[10,"read_map_elt_key","","",39],[10,"read_map_elt_val","","",39],[10,"error","","",39],[10,"to_json","","",27],[10,"to_json","collections::string","",0],[10,"to_json","collections::vec","",4],[10,"to_json","collections::treemap","",12],[10,"to_json","std::collections::hashmap::map","",15],[10,"to_json","core::option","",5],[10,"fmt","serialize::json","Encodes a json value into a string",27],[10,"from_str","","",27],[6,"Decoder","serialize",""],[9,"read_nil","","",40],[9,"read_uint","","",40],[9,"read_u64","","",40],[9,"read_u32","","",40],[9,"read_u16","","",40],[9,"read_u8","","",40],[9,"read_int","","",40],[9,"read_i64","","",40],[9,"read_i32","","",40],[9,"read_i16","","",40],[9,"read_i8","","",40],[9,"read_bool","","",40],[9,"read_f64","","",40],[9,"read_f32","","",40],[9,"read_char","","",40],[9,"read_str","","",40],[9,"read_enum","","",40],[9,"read_enum_variant","","",40],[9,"read_enum_variant_arg","","",40],[9,"read_enum_struct_variant","","",40],[9,"read_enum_struct_variant_field","","",40],[9,"read_struct","","",40],[9,"read_struct_field","","",40],[9,"read_tuple","","",40],[9,"read_tuple_arg","","",40],[9,"read_tuple_struct","","",40],[9,"read_tuple_struct_arg","","",40],[9,"read_option","","",40],[9,"read_seq","","",40],[9,"read_seq_elt","","",40],[9,"read_map","","",40],[9,"read_map_elt_key","","",40],[9,"read_map_elt_val","","",40],[9,"error","","",40],[6,"Encoder","",""],[9,"emit_nil","","",41],[9,"emit_uint","","",41],[9,"emit_u64","","",41],[9,"emit_u32","","",41],[9,"emit_u16","","",41],[9,"emit_u8","","",41],[9,"emit_int","","",41],[9,"emit_i64","","",41],[9,"emit_i32","","",41],[9,"emit_i16","","",41],[9,"emit_i8","","",41],[9,"emit_bool","","",41],[9,"emit_f64","","",41],[9,"emit_f32","","",41],[9,"emit_char","","",41],[9,"emit_str","","",41],[9,"emit_enum","","",41],[9,"emit_enum_variant","","",41],[9,"emit_enum_variant_arg","","",41],[9,"emit_enum_struct_variant","","",41],[9,"emit_enum_struct_variant_field","","",41],[9,"emit_struct","","",41],[9,"emit_struct_field","","",41],[9,"emit_tuple","","",41],[9,"emit_tuple_arg","","",41],[9,"emit_tuple_struct","","",41],[9,"emit_tuple_struct_arg","","",41],[9,"emit_option","","",41],[9,"emit_option_none","","",41],[9,"emit_option_some","","",41],[9,"emit_seq","","",41],[9,"emit_seq_elt","","",41],[9,"emit_map","","",41],[9,"emit_map_elt_key","","",41],[9,"emit_map_elt_val","","",41],[6,"Decodable","",""],[9,"decode","","",42],[6,"Encodable","",""],[9,"encode","","",43],[6,"DecoderHelpers","",""],[9,"read_to_vec","","",44],[6,"EncoderHelpers","",""],[9,"emit_from_vec","","",45]],"paths":[[1,"String"],[1,"Box"],[1,"Gc"],[1,"Rc"],[1,"Vec"],[2,"Option"],[1,"Path"],[1,"Path"],[1,"Cell"],[1,"RefCell"],[1,"DList"],[1,"RingBuf"],[1,"TreeMap"],[1,"TreeSet"],[1,"EnumSet"],[1,"HashMap"],[1,"HashSet"],[1,"TrieMap"],[1,"TrieSet"],[1,"Config"],[2,"CharacterSet"],[2,"FromBase64Error"],[6,"ToBase64"],[6,"FromBase64"],[2,"FromHexError"],[6,"ToHex"],[6,"FromHex"],[2,"Json"],[2,"ErrorCode"],[2,"ParserError"],[2,"DecoderError"],[2,"JsonEvent"],[2,"StackElement"],[6,"ToJson"],[1,"Encoder"],[1,"PrettyEncoder"],[1,"Stack"],[1,"Parser"],[1,"Builder"],[1,"Decoder"],[6,"Decoder"],[6,"Encoder"],[6,"Decodable"],[6,"Encodable"],[6,"DecoderHelpers"],[6,"EncoderHelpers"]]};

searchIndex['uuid'] = {"items":[[0,"","uuid","Generate and parse UUIDs"],[1,"Uuid","","A Universally Unique Identifier (UUID)"],[2,"UuidVersion","","The version of the UUID, denoting the generating algorithm"],[12,"Version1Mac","","Version 1: MAC address",0],[12,"Version2Dce","","Version 2: DCE Security",0],[12,"Version3Md5","","Version 3: MD5 hash",0],[12,"Version4Random","","Version 4: Random",0],[12,"Version5Sha1","","Version 5: SHA-1 hash",0],[2,"UuidVariant","","The reserved variants of UUIDs"],[12,"VariantNCS","","Reserved by the NCS for backward compatibility",1],[12,"VariantRFC4122","","As described in the RFC4122 Specification (default)",1],[12,"VariantMicrosoft","","Reserved by Microsoft for backward compatibility",1],[12,"VariantFuture","","Reserved for future expansion",1],[2,"ParseError","","Error details for string parsing failures"],[12,"ErrorInvalidLength","","",2],[12,"ErrorInvalidCharacter","","",2],[12,"ErrorInvalidGroups","","",2],[12,"ErrorInvalidGroupLength","","",2],[4,"UuidBytes","","A 128-bit (16 byte) buffer containing the ID"],[10,"eq","","",0],[10,"ne","","",0],[10,"eq","","",1],[10,"ne","","",1],[10,"hash","","",3],[10,"fmt","","",2],[10,"nil","","Returns a nil or empty UUID (containing all zeroes)",3],[10,"new","","Create a new UUID of the specified version",3],[10,"new_v4","","Creates a new random UUID",3],[10,"from_fields","","Creates a UUID using the supplied field values",3],[10,"from_bytes","","Creates a UUID using the supplied bytes",3],[10,"get_variant","","Returns the variant of the UUID structure",3],[10,"get_version_num","","Returns the version number of the UUID",3],[10,"get_version","","Returns the version of the UUID",3],[10,"as_bytes","","Return an array of 16 octets containing the UUID data",3],[10,"to_simple_str","","Returns the UUID as a string of 16 hexadecimal digits",3],[10,"to_hyphenated_str","","Returns a string of hexadecimal digits, separated into groups with a hyphen.",3],[10,"to_urn_str","","Returns the UUID formatted as a full URN string",3],[10,"parse_string","","Parses a UUID from a string of hexadecimal digits with optional hyphens",3],[10,"is_nil","","Tests if the UUID is nil",3],[10,"default","","Returns the nil UUID, which is all zeroes",3],[10,"clone","","Returns a copy of the UUID",3],[10,"from_str","","Parse a hex string and interpret as a UUID",3],[10,"fmt","","",3],[10,"eq","","",3],[10,"encode","","Encode a UUID as a hyphenated string",3],[10,"decode","","Decode a UUID from a string",3],[10,"rand","","",3]],"paths":[[2,"UuidVersion"],[2,"UuidVariant"],[2,"ParseError"],[1,"Uuid"]]};

searchIndex['semver'] = {"items":[[0,"","semver","Semantic version parsing and comparison."],[1,"Version","","Represents a version number conforming to the semantic versioning scheme."],[11,"major","","The major version, to be incremented on incompatible changes.",0],[11,"minor","","The minor version, to be incremented when functionality is added in a\nbackwards-compatible manner.",0],[11,"patch","","The patch version, to be incremented when backwards-compatible bug\nfixes are made.",0],[11,"pre","","The pre-release version identifier, if one exists.",0],[11,"build","","The build metadata, ignored when determining version precedence.",0],[2,"Identifier","","An identifier in the pre-release or build metadata. If the identifier can\nbe parsed as a decimal value, it will be represented with `Numeric`."],[12,"Numeric","","",1],[12,"AlphaNumeric","","",1],[3,"parse","","Parse a string into a semver object."],[10,"hash","","",1],[10,"cmp","","",1],[10,"partial_cmp","","",1],[10,"lt","","",1],[10,"le","","",1],[10,"gt","","",1],[10,"ge","","",1],[10,"eq","","",1],[10,"ne","","",1],[10,"clone","","",1],[10,"fmt","","",1],[10,"clone","","",0],[10,"fmt","","",0],[10,"eq","","",0],[10,"partial_cmp","","",0],[10,"cmp","","",0],[10,"hash","","",0]],"paths":[[1,"Version"],[2,"Identifier"]]};

searchIndex['term'] = {"items":[[0,"","term","Terminal formatting library."],[1,"WriterWrapper","","A hack to work around the fact that `Box<Writer + Send>` does not\ncurrently implement `Writer`."],[3,"stdout","","Return a Terminal wrapping stdout, or None if a terminal couldn't be\nopened."],[3,"stderr","","Return a Terminal wrapping stderr, or None if a terminal couldn't be\nopened."],[0,"terminfo","","Terminfo database interface."],[1,"TermInfo","term::terminfo","A parsed terminfo database entry."],[11,"names","","Names for the terminal",0],[11,"bools","","Map of capability name to boolean value",0],[11,"numbers","","Map of capability name to numeric value",0],[11,"strings","","Map of capability name to raw (unexpanded) string",0],[1,"TerminfoTerminal","","A Terminal that knows how many colors it supports, with a reference to its\nparsed Terminfo database record."],[0,"searcher","","ncurses-compatible database discovery"],[3,"get_dbpath_for_term","term::terminfo::searcher","Return path to database entry for `term`"],[3,"open","","Return open file for `term`"],[0,"parser","term::terminfo","TermInfo format parsing.\nncurses-compatible compiled terminfo format parsing (term(5))"],[0,"compiled","term::terminfo::parser","ncurses-compatible compiled terminfo format parsing (term(5))"],[3,"parse","term::terminfo::parser::compiled","Parse a compiled terminfo entry, using long capability names if `longnames` is true"],[3,"msys_terminfo","","Create a dummy TermInfo struct for msys terminals"],[5,"boolfnames","",""],[5,"boolnames","",""],[5,"numfnames","",""],[5,"numnames","",""],[5,"stringfnames","",""],[5,"stringnames","",""],[0,"parm","term::terminfo","Parameterized string expansion"],[1,"Variables","term::terminfo::parm","Container for static and dynamic variable arrays"],[2,"Param","","Types of parameters a capability can use"],[12,"Words","","",1],[12,"Number","","",1],[3,"expand","","Expand a parameterized capability"],[10,"clone","","",1],[10,"new","","Return a new zero-initialized Variables",2],[10,"fmt","term::terminfo","",0],[10,"new","","",3],[10,"fg","","",3],[10,"bg","","",3],[10,"attr","","",3],[10,"supports_attr","","",3],[10,"reset","","",3],[10,"unwrap","","",3],[10,"get_ref","","",3],[10,"get_mut","","",3],[10,"write","","",3],[10,"flush","","",3],[0,"color","term","Terminal color definitions"],[4,"Color","term::color","Number for a terminal color"],[5,"BLACK","",""],[5,"RED","",""],[5,"GREEN","",""],[5,"YELLOW","",""],[5,"BLUE","",""],[5,"MAGENTA","",""],[5,"CYAN","",""],[5,"WHITE","",""],[5,"BRIGHT_BLACK","",""],[5,"BRIGHT_RED","",""],[5,"BRIGHT_GREEN","",""],[5,"BRIGHT_YELLOW","",""],[5,"BRIGHT_BLUE","",""],[5,"BRIGHT_MAGENTA","",""],[5,"BRIGHT_CYAN","",""],[5,"BRIGHT_WHITE","",""],[0,"attr","term","Terminal attributes"],[2,"Attr","term::attr","Terminal attributes for use with term.attr()."],[12,"Bold","","Bold (or possibly bright) mode",4],[12,"Dim","","Dim mode, also called faint or half-bright. Often not supported",4],[12,"Italic","","Italics mode. Often not supported",4],[12,"Underline","","Underline mode",4],[12,"Blink","","Blink mode",4],[12,"Standout","","Standout mode. Often implemented as Reverse, sometimes coupled with Bold",4],[12,"Reverse","","Reverse mode, inverts the foreground and background colors",4],[12,"Secure","","Secure mode, also called invis mode. Hides the printed text",4],[12,"ForegroundColor","","Convenience attribute to set the foreground color",4],[12,"BackgroundColor","","Convenience attribute to set the background color",4],[6,"Terminal","term","A terminal with similar capabilities to an ANSI Terminal\n(foreground/background colors etc)."],[9,"new","","Returns `None` whenever the terminal cannot be created for some\nreason.",5],[9,"fg","","Sets the foreground color to the given color.",5],[9,"bg","","Sets the background color to the given color.",5],[9,"attr","","Sets the given terminal attribute, if supported.  Returns `Ok(true)`\nif the attribute was supported, `Ok(false)` otherwise, and `Err(e)` if\nthere was an I/O error.",5],[9,"supports_attr","","Returns whether the given terminal attribute is supported.",5],[9,"reset","","Resets all terminal attributes and color to the default.\nReturns `Ok()`.",5],[9,"unwrap","","Returns the contained stream, destroying the `Terminal`",5],[9,"get_ref","","Gets an immutable reference to the stream inside",5],[9,"get_mut","","Gets a mutable reference to the stream inside",5],[10,"write","","",6],[10,"flush","","",6]],"paths":[[1,"TermInfo"],[2,"Param"],[1,"Variables"],[1,"TerminfoTerminal"],[2,"Attr"],[6,"Terminal"],[1,"WriterWrapper"]]};

searchIndex['glob'] = {"items":[[0,"","glob","Support for matching file paths against Unix shell style patterns."],[1,"Paths","","An iterator that yields Paths from the filesystem that match a particular\npattern - see the `glob` function for more details."],[1,"Pattern","","A compiled Unix shell style pattern."],[1,"MatchOptions","","Configuration options to modify the behaviour of `Pattern::matches_with(..)`"],[11,"case_sensitive","","Whether or not patterns should be matched in a case-sensitive manner. This\ncurrently only considers upper/lower case relationships between ASCII characters,\nbut in future this might be extended to work with Unicode.",0],[11,"require_literal_separator","","If this is true then path-component separator characters (e.g. `/` on Posix)\nmust be matched by a literal `/`, rather than by `*` or `?` or `[...]`",0],[11,"require_literal_leading_dot","","If this is true then paths that contain components that start with a `.` will\nnot match unless the `.` appears literally in the pattern: `*`, `?` or `[...]`\nwill not match. This is useful because such files are conventionally considered\nhidden on Unix systems and it might be desirable to skip them when listing files.",0],[3,"glob","","\nReturn an iterator that produces all the Paths that match the given pattern,\nwhich may be absolute or relative to the current working directory."],[3,"glob_with","","Return an iterator that produces all the Paths that match the given pattern,\nwhich may be absolute or relative to the current working directory."],[10,"next","","",1],[10,"default","","",2],[10,"hash","","",2],[10,"cmp","","",2],[10,"partial_cmp","","",2],[10,"lt","","",2],[10,"le","","",2],[10,"gt","","",2],[10,"ge","","",2],[10,"eq","","",2],[10,"ne","","",2],[10,"clone","","",2],[10,"new","","This function compiles Unix shell style patterns: `?` matches any single\ncharacter, `*` matches any (possibly empty) sequence of characters and\n`[...]` matches any character inside the brackets, unless the first\ncharacter is `!` in which case it matches any character except those\nbetween the `!` and the `]`. Character sequences can also specify ranges\nof characters, as ordered by Unicode, so e.g. `[0-9]` specifies any\ncharacter between 0 and 9 inclusive.",2],[10,"escape","","Escape metacharacters within the given string by surrounding them in\nbrackets. The resulting string will, when compiled into a `Pattern`,\nmatch the input string and nothing else.",2],[10,"matches","","Return if the given `str` matches this `Pattern` using the default\nmatch options (i.e. `MatchOptions::new()`).",2],[10,"matches_path","","Return if the given `Path`, when converted to a `str`, matches this `Pattern`\nusing the default match options (i.e. `MatchOptions::new()`).",2],[10,"matches_with","","Return if the given `str` matches this `Pattern` using the specified match options.",2],[10,"matches_path_with","","Return if the given `Path`, when converted to a `str`, matches this `Pattern`\nusing the specified match options.",2],[10,"default","","",0],[10,"hash","","",0],[10,"cmp","","",0],[10,"partial_cmp","","",0],[10,"lt","","",0],[10,"le","","",0],[10,"gt","","",0],[10,"ge","","",0],[10,"eq","","",0],[10,"ne","","",0],[10,"clone","","",0],[10,"new","","Constructs a new `MatchOptions` with default field values. This is used\nwhen calling functions that do not take an explicit `MatchOptions` parameter.",0]],"paths":[[1,"MatchOptions"],[1,"Paths"],[1,"Pattern"]]};

searchIndex['arena'] = {"items":[[0,"","arena","The arena, a fast but limited type of allocator."],[1,"Arena","","A slower reflection-based arena that can allocate objects of any type."],[1,"TypedArena","","A faster arena that can hold objects of only one type."],[10,"new","","Allocates a new Arena with 32 bytes preallocated.",0],[10,"new_with_size","","Allocates a new Arena with `initial_size` bytes preallocated.",0],[10,"drop","","",0],[10,"alloc","","Allocates a new item in the arena, using `op` to initialize the value,\nand returns a reference to it.",0],[10,"new","","Creates a new `TypedArena` with preallocated space for eight objects.",1],[10,"with_capacity","","Creates a new `TypedArena` with preallocated space for the given number of\nobjects.",1],[10,"alloc","","Allocates an object in the `TypedArena`, returning a reference to it.",1],[10,"drop","","",1]],"paths":[[1,"Arena"],[1,"TypedArena"]]};

searchIndex['flate'] = {"items":[[0,"","flate","Simple [DEFLATE][def]-based compression. This is a wrapper around the\n[`miniz`][mz] library, which is a one-file pure-C implementation of zlib."],[3,"deflate_bytes","","Compress a buffer, without writing any sort of header on the output."],[3,"deflate_bytes_zlib","","Compress a buffer, using a header that zlib can understand."],[3,"inflate_bytes","","Decompress a buffer, without parsing any sort of header on the input."],[3,"inflate_bytes_zlib","","Decompress a buffer that starts with a zlib header."]],"paths":[]};

searchIndex['native'] = {"items":[[0,"","native","The native I/O and threading crate"],[3,"lang_start","",""],[3,"start","","Executes the given procedure after initializing the runtime with the given\nargc/argv."],[3,"run","","Executes a procedure on the current thread in a Rust task context."],[0,"io","","Native thread-blocking I/O implementation"],[1,"IoFactory","native::io","Implementation of rt::rtio's IoFactory trait to generate handles to the\nnative I/O functionality."],[0,"addrinfo","",""],[1,"GetAddrInfoRequest","native::io::addrinfo",""],[10,"run","","",0],[0,"net","native::io",""],[1,"TcpStream","native::io::net",""],[1,"Guard","",""],[11,"fd","","",1],[11,"guard","","",1],[1,"TcpListener","",""],[1,"TcpAcceptor","",""],[1,"UdpSocket","",""],[3,"init","",""],[3,"last_error","",""],[3,"htons","",""],[3,"ntohs","",""],[3,"getsockopt","",""],[3,"sockaddr_to_addr","",""],[3,"read","",""],[3,"write","",""],[4,"sock_t","",""],[10,"connect","","",2],[10,"fd","","",2],[10,"read","","",2],[10,"write","","",2],[10,"peer_name","","",2],[10,"control_congestion","","",2],[10,"nodelay","","",2],[10,"keepalive","","",2],[10,"letdie","","",2],[10,"clone","","",2],[10,"close_write","","",2],[10,"close_read","","",2],[10,"set_timeout","","",2],[10,"set_read_timeout","","",2],[10,"set_write_timeout","","",2],[10,"socket_name","","",2],[10,"drop","","",1],[10,"bind","","",3],[10,"fd","","",3],[10,"native_listen","","",3],[10,"listen","","",3],[10,"socket_name","","",3],[10,"fd","","",4],[10,"native_accept","","",4],[10,"socket_name","","",4],[10,"accept","","",4],[10,"accept_simultaneously","","",4],[10,"dont_accept_simultaneously","","",4],[10,"set_timeout","","",4],[10,"clone","","",4],[10,"close_accept","","",4],[10,"bind","","",5],[10,"fd","","",5],[10,"set_broadcast","","",5],[10,"set_multicast_loop","","",5],[10,"set_membership","","",5],[10,"socket_name","","",5],[10,"recv_from","","",5],[10,"send_to","","",5],[10,"join_multicast","","",5],[10,"leave_multicast","","",5],[10,"loop_multicast_locally","","",5],[10,"dont_loop_multicast_locally","","",5],[10,"multicast_time_to_live","","",5],[10,"time_to_live","","",5],[10,"hear_broadcasts","","",5],[10,"ignore_broadcasts","","",5],[10,"clone","","",5],[10,"set_timeout","","",5],[10,"set_read_timeout","","",5],[10,"set_write_timeout","","",5],[0,"process","native::io",""],[1,"Process","native::io::process","A value representing a child process."],[3,"pipe","",""],[10,"spawn","","Creates a new process using native process-spawning abilities provided\nby the OS. Operations on this process will be blocking instead of using\nthe runtime for sleeping just this current task.",6],[10,"kill","","",6],[10,"id","","",6],[10,"set_timeout","","",6],[10,"wait","","",6],[10,"kill","","",6],[10,"drop","","",6],[0,"file","native::io","Blocking posix-based file I/O"],[1,"FileDesc","native::io::file",""],[1,"CFile","",""],[3,"open","",""],[3,"mkdir","",""],[3,"readdir","",""],[3,"unlink","",""],[3,"rename","",""],[3,"chmod","",""],[3,"rmdir","",""],[3,"chown","",""],[3,"readlink","",""],[3,"symlink","",""],[3,"link","",""],[3,"stat","",""],[3,"lstat","",""],[3,"utime","",""],[4,"fd_t","",""],[10,"new","","Create a `FileDesc` from an open C file descriptor.",7],[10,"inner_read","","",7],[10,"inner_write","","",7],[10,"fd","","",7],[10,"read","","",7],[10,"write","","",7],[10,"pread","","",7],[10,"pwrite","","",7],[10,"seek","","",7],[10,"tell","","",7],[10,"fsync","","",7],[10,"datasync","","",7],[10,"truncate","","",7],[10,"fstat","","",7],[10,"read","","",7],[10,"write","","",7],[10,"clone","","",7],[10,"close_read","","",7],[10,"close_write","","",7],[10,"set_timeout","","",7],[10,"set_read_timeout","","",7],[10,"set_write_timeout","","",7],[10,"read","","",7],[10,"write","","",7],[10,"set_raw","","",7],[10,"get_winsize","","",7],[10,"isatty","","",7],[10,"new","","Create a `CFile` from an open `FILE` pointer.",8],[10,"flush","","",8],[10,"read","","",8],[10,"write","","",8],[10,"pread","","",8],[10,"pwrite","","",8],[10,"seek","","",8],[10,"tell","","",8],[10,"fsync","","",8],[10,"datasync","","",8],[10,"truncate","","",8],[10,"fstat","","",8],[10,"drop","","",8],[0,"timer","native::io","Timers for non-Linux/non-Windows OSes"],[1,"Timer","native::io::timer",""],[2,"Req","",""],[12,"NewTimer","","",9],[12,"RemoveTimer","","",9],[3,"now","",""],[10,"new","","",10],[10,"sleep","","",10],[10,"sleep","","",10],[10,"oneshot","","",10],[10,"period","","",10],[10,"drop","","",10],[0,"pipe","native::io",""],[1,"UnixStream","native::io::pipe",""],[1,"UnixListener","",""],[1,"UnixAcceptor","",""],[10,"connect","","",11],[10,"read","","",11],[10,"write","","",11],[10,"clone","","",11],[10,"close_write","","",11],[10,"close_read","","",11],[10,"set_timeout","","",11],[10,"set_read_timeout","","",11],[10,"set_write_timeout","","",11],[10,"bind","","",12],[10,"native_listen","","",12],[10,"listen","","",12],[10,"native_accept","","",13],[10,"accept","","",13],[10,"set_timeout","","",13],[10,"clone","","",13],[10,"close_accept","","",13],[10,"drop","","",12],[10,"new","native::io","",14],[10,"tcp_connect","","",14],[10,"tcp_bind","","",14],[10,"udp_bind","","",14],[10,"unix_bind","","",14],[10,"unix_connect","","",14],[10,"get_host_addresses","","",14],[10,"fs_from_raw_fd","","",14],[10,"fs_open","","",14],[10,"fs_unlink","","",14],[10,"fs_stat","","",14],[10,"fs_mkdir","","",14],[10,"fs_chmod","","",14],[10,"fs_rmdir","","",14],[10,"fs_rename","","",14],[10,"fs_readdir","","",14],[10,"fs_lstat","","",14],[10,"fs_chown","","",14],[10,"fs_readlink","","",14],[10,"fs_symlink","","",14],[10,"fs_link","","",14],[10,"fs_utime","","",14],[10,"timer_init","","",14],[10,"spawn","","",14],[10,"kill","","",14],[10,"pipe_open","","",14],[10,"tty_open","","",14],[10,"signal","","",14],[0,"task","native","Tasks implemented on top of OS threads"],[1,"NativeSpawner","native::task","A spawner for native tasks"],[3,"new","","Creates a new Task which is ready to execute as a 1:1 task."],[3,"spawn","","Spawns a function with the default configuration"],[3,"spawn_opts","","Spawns a new task given the configuration options and a procedure to run\ninside the task."],[6,"NativeTaskBuilder","","An extension trait adding a `native` configuration method to `TaskBuilder`."],[9,"native","","",15],[10,"spawn","","",16],[10,"native","std::task","",17]],"paths":[[1,"GetAddrInfoRequest"],[1,"Guard"],[1,"TcpStream"],[1,"TcpListener"],[1,"TcpAcceptor"],[1,"UdpSocket"],[1,"Process"],[1,"FileDesc"],[1,"CFile"],[2,"Req"],[1,"Timer"],[1,"UnixStream"],[1,"UnixListener"],[1,"UnixAcceptor"],[1,"IoFactory"],[6,"NativeTaskBuilder"],[1,"NativeSpawner"],[1,"TaskBuilder"]]};

searchIndex['rustuv'] = {"items":[[0,"","rustuv","Bindings to libuv, along with the default implementation of `std::rt::rtio`."],[1,"ForbidSwitch","",""],[1,"ForbidUnwind","",""],[1,"Request","",""],[11,"handle","","",0],[1,"Loop","","FIXME: Loop(*handle) is buggy with destructors. Normal structs\nwith dtors may not be destructured, but tuple structs can,\nbut the results are not correct."],[1,"UvError","",""],[3,"event_loop","","Creates a new event loop which is powered by libuv"],[3,"uv_error_to_io_error","",""],[3,"status_to_maybe_uv_error","","Given a uv error code, convert a callback status to a UvError"],[3,"status_to_io_result","",""],[3,"empty_buf","",""],[3,"slice_to_uv_buf","","Borrow a slice to a Buf"],[0,"uvio","","The implementation of `rtio` for libuv"],[1,"UvEventLoop","rustuv::uvio",""],[1,"UvIoFactory","",""],[11,"loop_","","",1],[10,"new","","",2],[10,"drop","","",2],[10,"run","","",2],[10,"callback","","",2],[10,"pausable_idle_callback","","",2],[10,"remote_callback","","",2],[10,"io","","",2],[10,"has_active_io","","",2],[10,"uv_loop","","",1],[10,"make_handle","","",1],[10,"tcp_connect","","",1],[10,"tcp_bind","","",1],[10,"udp_bind","","",1],[10,"timer_init","","",1],[10,"get_host_addresses","","",1],[10,"fs_from_raw_fd","","",1],[10,"fs_open","","",1],[10,"fs_unlink","","",1],[10,"fs_lstat","","",1],[10,"fs_stat","","",1],[10,"fs_mkdir","","",1],[10,"fs_rmdir","","",1],[10,"fs_rename","","",1],[10,"fs_chmod","","",1],[10,"fs_readdir","","",1],[10,"fs_link","","",1],[10,"fs_symlink","","",1],[10,"fs_chown","","",1],[10,"fs_readlink","","",1],[10,"fs_utime","","",1],[10,"spawn","","",1],[10,"kill","","",1],[10,"unix_bind","","",1],[10,"unix_connect","","",1],[10,"tty_open","","",1],[10,"pipe_open","","",1],[10,"signal","","",1],[0,"uvll","rustuv","Low-level bindings to the libuv library."],[1,"uv_buf_t","rustuv::uvll",""],[11,"base","","",3],[11,"len","","",3],[1,"uv_process_options_t","",""],[11,"exit_cb","","",4],[11,"file","","",4],[11,"args","","",4],[11,"env","","",4],[11,"cwd","","",4],[11,"flags","","",4],[11,"stdio_count","","",4],[11,"stdio","","",4],[11,"uid","","",4],[11,"gid","","",4],[1,"uv_stdio_container_t","",""],[1,"uv_timespec_t","",""],[11,"tv_sec","","",5],[11,"tv_nsec","","",5],[1,"uv_stat_t","",""],[11,"st_dev","","",6],[11,"st_mode","","",6],[11,"st_nlink","","",6],[11,"st_uid","","",6],[11,"st_gid","","",6],[11,"st_rdev","","",6],[11,"st_ino","","",6],[11,"st_size","","",6],[11,"st_blksize","","",6],[11,"st_blocks","","",6],[11,"st_flags","","",6],[11,"st_gen","","",6],[11,"st_atim","","",6],[11,"st_mtim","","",6],[11,"st_ctim","","",6],[11,"st_birthtim","","",6],[2,"uv_run_mode","",""],[12,"RUN_DEFAULT","","",7],[12,"RUN_ONCE","","",7],[12,"RUN_NOWAIT","","",7],[2,"uv_poll_event","",""],[12,"UV_READABLE","","",8],[12,"UV_WRITABLE","","",8],[2,"uv_handle_type","",""],[12,"UV_UNKNOWN_HANDLE","","",9],[12,"UV_ASYNC","","",9],[12,"UV_CHECK","","",9],[12,"UV_FS_EVENT","","",9],[12,"UV_FS_POLL","","",9],[12,"UV_HANDLE","","",9],[12,"UV_IDLE","","",9],[12,"UV_NAMED_PIPE","","",9],[12,"UV_POLL","","",9],[12,"UV_PREPARE","","",9],[12,"UV_PROCESS","","",9],[12,"UV_STREAM","","",9],[12,"UV_TCP","","",9],[12,"UV_TIMER","","",9],[12,"UV_TTY","","",9],[12,"UV_UDP","","",9],[12,"UV_SIGNAL","","",9],[12,"UV_FILE","","",9],[12,"UV_HANDLE_TYPE_MAX","","",9],[2,"uv_req_type","",""],[12,"UV_UNKNOWN_REQ","","",10],[12,"UV_REQ","","",10],[12,"UV_CONNECT","","",10],[12,"UV_WRITE","","",10],[12,"UV_SHUTDOWN","","",10],[12,"UV_UDP_SEND","","",10],[12,"UV_FS","","",10],[12,"UV_WORK","","",10],[12,"UV_GETADDRINFO","","",10],[12,"UV_GETNAMEINFO","","",10],[12,"UV_REQ_TYPE_MAX","","",10],[2,"uv_membership","",""],[12,"UV_LEAVE_GROUP","","",11],[12,"UV_JOIN_GROUP","","",11],[3,"malloc_handle","",""],[3,"free_handle","",""],[3,"malloc_req","",""],[3,"free_req","",""],[3,"loop_new","",""],[3,"uv_write","",""],[3,"uv_udp_send","",""],[3,"get_udp_handle_from_send_req","",""],[3,"process_pid","",""],[3,"set_stdio_container_flags","",""],[3,"set_stdio_container_fd","",""],[3,"set_stdio_container_stream","",""],[3,"get_result_from_fs_req","",""],[3,"get_ptr_from_fs_req","",""],[3,"get_path_from_fs_req","",""],[3,"get_loop_from_fs_req","",""],[3,"get_loop_from_getaddrinfo_req","",""],[3,"get_loop_for_uv_handle","",""],[3,"get_stream_handle_from_connect_req","",""],[3,"get_stream_handle_from_write_req","",""],[3,"get_data_for_uv_loop","",""],[3,"set_data_for_uv_loop","",""],[3,"get_data_for_uv_handle","",""],[3,"set_data_for_uv_handle","",""],[3,"get_data_for_req","",""],[3,"set_data_for_req","",""],[3,"populate_stat","",""],[3,"guess_handle","",""],[13,"uv_loop_delete","",""],[13,"uv_ref","",""],[13,"uv_unref","",""],[13,"uv_handle_size","",""],[13,"uv_req_size","",""],[13,"uv_run","",""],[13,"uv_close","",""],[13,"uv_walk","",""],[13,"uv_buf_init","",""],[13,"uv_strerror","",""],[13,"uv_err_name","",""],[13,"uv_listen","",""],[13,"uv_accept","",""],[13,"uv_read_start","",""],[13,"uv_read_stop","",""],[13,"uv_shutdown","",""],[13,"uv_idle_init","",""],[13,"uv_idle_start","",""],[13,"uv_idle_stop","",""],[13,"uv_async_init","",""],[13,"uv_async_send","",""],[13,"uv_tcp_init","",""],[13,"uv_tcp_connect","",""],[13,"uv_tcp_bind","",""],[13,"uv_tcp_nodelay","",""],[13,"uv_tcp_keepalive","",""],[13,"uv_tcp_simultaneous_accepts","",""],[13,"uv_tcp_getsockname","",""],[13,"uv_tcp_getpeername","",""],[13,"uv_udp_init","",""],[13,"uv_udp_bind","",""],[13,"uv_udp_recv_start","",""],[13,"uv_udp_set_membership","",""],[13,"uv_udp_recv_stop","",""],[13,"uv_udp_set_multicast_loop","",""],[13,"uv_udp_set_multicast_ttl","",""],[13,"uv_udp_set_ttl","",""],[13,"uv_udp_set_broadcast","",""],[13,"uv_udp_getsockname","",""],[13,"uv_timer_init","",""],[13,"uv_timer_start","",""],[13,"uv_timer_stop","",""],[13,"uv_fs_open","",""],[13,"uv_fs_unlink","",""],[13,"uv_fs_write","",""],[13,"uv_fs_read","",""],[13,"uv_fs_close","",""],[13,"uv_fs_stat","",""],[13,"uv_fs_fstat","",""],[13,"uv_fs_mkdir","",""],[13,"uv_fs_rmdir","",""],[13,"uv_fs_readdir","",""],[13,"uv_fs_req_cleanup","",""],[13,"uv_fs_fsync","",""],[13,"uv_fs_fdatasync","",""],[13,"uv_fs_ftruncate","",""],[13,"uv_fs_readlink","",""],[13,"uv_fs_symlink","",""],[13,"uv_fs_rename","",""],[13,"uv_fs_utime","",""],[13,"uv_fs_link","",""],[13,"uv_fs_chown","",""],[13,"uv_fs_chmod","",""],[13,"uv_fs_lstat","",""],[13,"uv_poll_init_socket","",""],[13,"uv_poll_start","",""],[13,"uv_poll_stop","",""],[13,"uv_getaddrinfo","",""],[13,"uv_freeaddrinfo","",""],[13,"uv_spawn","",""],[13,"uv_process_kill","",""],[13,"uv_kill","",""],[13,"uv_pipe_init","",""],[13,"uv_pipe_open","",""],[13,"uv_pipe_bind","",""],[13,"uv_pipe_connect","",""],[13,"uv_tty_init","",""],[13,"uv_tty_set_mode","",""],[13,"uv_tty_get_winsize","",""],[13,"uv_signal_init","",""],[13,"uv_signal_start","",""],[13,"uv_signal_stop","",""],[0,"errors","",""],[5,"EACCES","rustuv::uvll::errors",""],[5,"ECONNREFUSED","",""],[5,"ECONNRESET","",""],[5,"ENOENT","",""],[5,"ENOTCONN","",""],[5,"EPIPE","",""],[5,"ECONNABORTED","",""],[5,"ECANCELED","",""],[5,"EBADF","",""],[5,"EADDRNOTAVAIL","",""],[5,"EADDRINUSE","",""],[5,"EPERM","",""],[4,"uv_buf_len_t","rustuv::uvll",""],[4,"uv_os_socket_t","",""],[4,"uv_handle_t","",""],[4,"uv_req_t","",""],[4,"uv_loop_t","",""],[4,"uv_idle_t","",""],[4,"uv_tcp_t","",""],[4,"uv_udp_t","",""],[4,"uv_poll_t","",""],[4,"uv_connect_t","",""],[4,"uv_connection_t","",""],[4,"uv_write_t","",""],[4,"uv_async_t","",""],[4,"uv_timer_t","",""],[4,"uv_stream_t","",""],[4,"uv_fs_t","",""],[4,"uv_udp_send_t","",""],[4,"uv_getaddrinfo_t","",""],[4,"uv_process_t","",""],[4,"uv_pipe_t","",""],[4,"uv_tty_t","",""],[4,"uv_signal_t","",""],[4,"uv_shutdown_t","",""],[4,"uv_idle_cb","",""],[4,"uv_alloc_cb","",""],[4,"uv_read_cb","",""],[4,"uv_udp_send_cb","",""],[4,"uv_udp_recv_cb","",""],[4,"uv_close_cb","",""],[4,"uv_poll_cb","",""],[4,"uv_walk_cb","",""],[4,"uv_async_cb","",""],[4,"uv_connect_cb","",""],[4,"uv_connection_cb","",""],[4,"uv_timer_cb","",""],[4,"uv_write_cb","",""],[4,"uv_getaddrinfo_cb","",""],[4,"uv_exit_cb","",""],[4,"uv_signal_cb","",""],[4,"uv_fs_cb","",""],[4,"uv_shutdown_cb","",""],[4,"uv_uid_t","",""],[4,"uv_gid_t","",""],[5,"OK","",""],[5,"EOF","",""],[5,"UNKNOWN","",""],[5,"PROCESS_SETUID","",""],[5,"PROCESS_SETGID","",""],[5,"PROCESS_WINDOWS_VERBATIM_ARGUMENTS","",""],[5,"PROCESS_DETACHED","",""],[5,"PROCESS_WINDOWS_HIDE","",""],[5,"STDIO_IGNORE","",""],[5,"STDIO_CREATE_PIPE","",""],[5,"STDIO_INHERIT_FD","",""],[5,"STDIO_INHERIT_STREAM","",""],[5,"STDIO_READABLE_PIPE","",""],[5,"STDIO_WRITABLE_PIPE","",""],[10,"new","","",6],[10,"is_file","","",6],[10,"is_dir","","",6],[10,"eq","","",9],[10,"ne","","",9],[10,"eq","","",10],[10,"ne","","",10],[10,"eq","","",11],[10,"ne","","",11],[0,"file","rustuv",""],[1,"FsRequest","rustuv::file",""],[1,"FileWatcher","",""],[10,"open","","",12],[10,"unlink","","",12],[10,"lstat","","",12],[10,"stat","","",12],[10,"fstat","","",12],[10,"write","","",12],[10,"read","","",12],[10,"mkdir","","",12],[10,"rmdir","","",12],[10,"rename","","",12],[10,"chmod","","",12],[10,"readdir","","",12],[10,"readlink","","",12],[10,"chown","","",12],[10,"truncate","","",12],[10,"link","","",12],[10,"symlink","","",12],[10,"fsync","","",12],[10,"datasync","","",12],[10,"utime","","",12],[10,"get_result","","",12],[10,"get_stat","","",12],[10,"get_ptr","","",12],[10,"mkstat","","",12],[10,"drop","","",12],[10,"new","","",13],[10,"drop","","",13],[10,"read","","",13],[10,"write","","",13],[10,"pread","","",13],[10,"pwrite","","",13],[10,"seek","","",13],[10,"tell","","",13],[10,"fsync","","",13],[10,"datasync","","",13],[10,"truncate","","",13],[10,"fstat","","",13],[0,"net","rustuv",""],[1,"TcpWatcher","rustuv::net","TCP implementation"],[1,"TcpListener","",""],[1,"TcpAcceptor","",""],[1,"UdpWatcher","","UDP implementation"],[3,"htons","","Generic functions related to dealing with sockaddr things"],[3,"ntohs","",""],[3,"sockaddr_to_addr","",""],[3,"shutdown","",""],[10,"new","","",14],[10,"connect","","",14],[10,"socket_name","","",14],[10,"read","","",14],[10,"write","","",14],[10,"peer_name","","",14],[10,"control_congestion","","",14],[10,"nodelay","","",14],[10,"keepalive","","",14],[10,"letdie","","",14],[10,"clone","","",14],[10,"close_read","","",14],[10,"close_write","","",14],[10,"set_timeout","","",14],[10,"set_read_timeout","","",14],[10,"set_write_timeout","","",14],[10,"uv_handle","","",14],[10,"drop","","",14],[10,"bind","","",15],[10,"uv_handle","","",15],[10,"socket_name","","",15],[10,"listen","","",15],[10,"drop","","",15],[10,"socket_name","","",16],[10,"uv_handle","","",16],[10,"accept","","",16],[10,"accept_simultaneously","","",16],[10,"dont_accept_simultaneously","","",16],[10,"set_timeout","","",16],[10,"clone","","",16],[10,"close_accept","","",16],[10,"drop","","",16],[10,"bind","","",17],[10,"uv_handle","","",17],[10,"socket_name","","",17],[10,"recv_from","","",17],[10,"send_to","","",17],[10,"join_multicast","","",17],[10,"leave_multicast","","",17],[10,"loop_multicast_locally","","",17],[10,"dont_loop_multicast_locally","","",17],[10,"multicast_time_to_live","","",17],[10,"time_to_live","","",17],[10,"hear_broadcasts","","",17],[10,"ignore_broadcasts","","",17],[10,"clone","","",17],[10,"set_timeout","","",17],[10,"set_read_timeout","","",17],[10,"set_write_timeout","","",17],[10,"drop","","",17],[0,"idle","rustuv",""],[1,"IdleWatcher","rustuv::idle",""],[10,"new","","",18],[10,"onetime","","",18],[10,"pause","","",18],[10,"resume","","",18],[10,"uv_handle","","",18],[10,"drop","","",18],[0,"timer","rustuv",""],[1,"TimerWatcher","rustuv::timer",""],[11,"handle","","",19],[2,"NextAction","",""],[12,"WakeTask","","",20],[12,"CallOnce","","",20],[12,"CallMany","","",20],[10,"new","","",19],[10,"new_home","","",19],[10,"start","","",19],[10,"stop","","",19],[10,"set_data","","",19],[10,"uv_handle","","",19],[10,"sleep","","",19],[10,"oneshot","","",19],[10,"period","","",19],[10,"drop","","",19],[0,"async","rustuv",""],[1,"AsyncWatcher","rustuv::async",""],[10,"new","","",21],[10,"uv_handle","","",21],[10,"from_uv_handle","","",21],[10,"fire","","",21],[10,"drop","","",21],[0,"addrinfo","rustuv",""],[1,"GetAddrInfoRequest","rustuv::addrinfo",""],[3,"accum_addrinfo","",""],[10,"run","","",22],[0,"process","rustuv",""],[1,"Process","rustuv::process",""],[10,"spawn","","Spawn a new process inside the specified event loop.",23],[10,"kill","","",23],[10,"uv_handle","","",23],[10,"id","","",23],[10,"kill","","",23],[10,"wait","","",23],[10,"set_timeout","","",23],[10,"drop","","",23],[0,"pipe","rustuv",""],[1,"PipeWatcher","rustuv::pipe",""],[1,"PipeListener","",""],[1,"PipeAcceptor","",""],[10,"new","","",24],[10,"new_home","","",24],[10,"open","","",24],[10,"connect","","",24],[10,"handle","","",24],[10,"read","","",24],[10,"write","","",24],[10,"clone","","",24],[10,"close_read","","",24],[10,"close_write","","",24],[10,"set_timeout","","",24],[10,"set_read_timeout","","",24],[10,"set_write_timeout","","",24],[10,"uv_handle","","",24],[10,"drop","","",24],[10,"bind","","",25],[10,"listen","","",25],[10,"uv_handle","","",25],[10,"drop","","",25],[10,"accept","","",26],[10,"set_timeout","","",26],[10,"clone","","",26],[10,"close_accept","","",26],[10,"uv_handle","","",26],[10,"drop","","",26],[0,"tty","rustuv",""],[1,"TtyWatcher","rustuv::tty",""],[10,"new","","",27],[10,"read","","",27],[10,"write","","",27],[10,"set_raw","","",27],[10,"get_winsize","","",27],[10,"isatty","","",27],[10,"uv_handle","","",27],[10,"drop","","",27],[0,"signal","rustuv",""],[1,"SignalWatcher","rustuv::signal",""],[10,"new","","",28],[10,"uv_handle","","",28],[10,"drop","","",28],[0,"stream","rustuv",""],[1,"StreamWatcher","rustuv::stream",""],[11,"handle","","",29],[10,"new","","",29],[10,"read","","",29],[10,"cancel_read","","",29],[10,"write","","",29],[10,"cancel_write","","",29],[4,"Buf","rustuv","The uv buffer type"],[6,"UvHandle","","A type that wraps a uv handle"],[9,"uv_handle","","",30],[10,"uv_loop","","",30],[10,"alloc","","",30],[10,"from_uv_handle","","",30],[10,"install","","",30],[10,"close_async_","","",30],[10,"close","","",30],[10,"drop","","",31],[10,"drop","","",32],[10,"new","","",0],[10,"wrap","","",0],[10,"set_data","","",0],[10,"get_data","","",0],[10,"defuse","","",0],[10,"drop","","",0],[10,"new","","",33],[10,"wrap","","",33],[10,"run","","",33],[10,"close","","",33],[10,"name","","",34],[10,"desc","","",34],[10,"is_eof","","",34],[10,"fmt","","",34]],"paths":[[1,"Request"],[1,"UvIoFactory"],[1,"UvEventLoop"],[1,"uv_buf_t"],[1,"uv_process_options_t"],[1,"uv_timespec_t"],[1,"uv_stat_t"],[2,"uv_run_mode"],[2,"uv_poll_event"],[2,"uv_handle_type"],[2,"uv_req_type"],[2,"uv_membership"],[1,"FsRequest"],[1,"FileWatcher"],[1,"TcpWatcher"],[1,"TcpListener"],[1,"TcpAcceptor"],[1,"UdpWatcher"],[1,"IdleWatcher"],[1,"TimerWatcher"],[2,"NextAction"],[1,"AsyncWatcher"],[1,"GetAddrInfoRequest"],[1,"Process"],[1,"PipeWatcher"],[1,"PipeListener"],[1,"PipeAcceptor"],[1,"TtyWatcher"],[1,"SignalWatcher"],[1,"StreamWatcher"],[6,"UvHandle"],[1,"ForbidSwitch"],[1,"ForbidUnwind"],[1,"Loop"],[1,"UvError"]]};

searchIndex['green'] = {"items":[[0,"","green","The \"green scheduling\" library"],[1,"PoolConfig","","Configuration of how an M:N pool of schedulers is spawned."],[11,"threads","","The number of schedulers (OS threads) to spawn into this M:N pool.",0],[11,"event_loop_factory","","A factory function used to create new event loops. If this is not\nspecified then the default event loop factory is used.",0],[1,"SchedPool","","A structure representing a handle to a pool of schedulers. This handle is\nused to keep the pool alive and also reap the status from the pool."],[1,"GreenSpawner","","A spawner for green tasks"],[3,"start","","Set up a default runtime configuration, given compiler-supplied arguments."],[3,"run","","Execute the main function in a pool of M:N schedulers."],[0,"basic","","This is a basic event loop implementation not meant for any \"real purposes\"\nother than testing the scheduler and proving that it's possible to have a\npluggable event loop."],[3,"event_loop","green::basic","This is the only exported function from this module."],[0,"context","green",""],[1,"Context","green::context",""],[3,"mut_offset","",""],[4,"InitFn","",""],[10,"empty","","",1],[10,"new","","Create a new context that will resume execution by running proc()",1],[10,"swap","","",1],[0,"coroutine","green",""],[1,"Coroutine","green::coroutine","A coroutine is nothing more than a (register context, stack) pair."],[11,"current_stack_segment","","The segment of stack on which the task is currently running or\nif the task is blocked, on which the task will resume\nexecution.",2],[11,"saved_context","","Always valid if the task is alive and not running.",2],[10,"empty","","",2],[10,"recycle","","Destroy coroutine and try to reuse std::stack segment.",2],[0,"sched","green",""],[1,"Scheduler","green::sched","A scheduler is responsible for coordinating the execution of Tasks\non a single thread. The scheduler runs inside a slightly modified\nRust Task. When not running this task is stored in the scheduler\nstruct. The scheduler struct acts like a baton, all scheduling\nactions are transfers of the baton."],[11,"pool_id","","ID number of the pool that this scheduler is a member of. When\nreawakening green tasks, this is used to ensure that tasks aren't\nreawoken on the wrong pool of schedulers.",3],[11,"stack_pool","","The pool of stacks that this scheduler has cached",3],[11,"task_state","","Bookkeeping for the number of tasks which are currently running around\ninside this pool of schedulers",3],[11,"event_loop","","The event loop used to drive the scheduler and perform I/O",3],[1,"SchedHandle","",""],[11,"sched_id","","",4],[2,"SchedMessage","",""],[12,"Wake","","",5],[12,"Shutdown","","",5],[12,"NewNeighbor","","",5],[12,"PinnedTask","","",5],[12,"TaskFromFriend","","",5],[12,"RunOnce","","",5],[6,"ClosureConverter","",""],[9,"from_fn","","",6],[9,"to_fn","","",6],[10,"new","","",3],[10,"new_special","","",3],[10,"bootstrap","","",3],[10,"run","","",3],[10,"enqueue_task","","Schedule a task to be executed later.",3],[10,"change_task_context","","",3],[10,"get_contexts","","",3],[10,"resume_task_immediately","","",3],[10,"deschedule_running_task_and_then","","Block a running task, context switch to the scheduler, then pass the\nblocked task to a closure.",3],[10,"switch_running_tasks_and_then","","",3],[10,"terminate_current_task","","Called by a running task to end execution, after which it will\nbe recycled by the scheduler for reuse in a new task.",3],[10,"run_task","","",3],[10,"run_task_later","","",3],[10,"yield_now","","Yield control to the scheduler, executing another task. This is guaranteed\nto introduce some amount of randomness to the scheduler. Currently the\nrandomness is a result of performing a round of work stealing (which\nmay end up stealing from the current scheduler).",3],[10,"maybe_yield","","",3],[10,"sched_id","","",3],[10,"run_cleanup_job","","",3],[10,"make_handle","","",3],[10,"send","","",4],[0,"sleeper_list","green","Maintains a shared list of sleeping schedulers. Schedulers\nuse this to wake each other up."],[1,"SleeperList","green::sleeper_list",""],[10,"new","","",7],[10,"push","","",7],[10,"pop","","",7],[10,"casual_pop","","",7],[10,"clone","","",7],[0,"stack","green",""],[1,"Stack","green::stack","A task's stack. The name \"Stack\" is a vestige of segmented stacks."],[1,"StackPool","",""],[10,"new","","Allocate a new stack of `size`. If size = 0, this will fail. Use\n`dummy_stack` if you want a zero-sized stack.",8],[10,"dummy_stack","","Create a 0-length stack which starts (and ends) at 0.",8],[10,"start","","Point to the low end of the allocated stack",8],[10,"end","","Point one uint beyond the high end of the allocated stack",8],[10,"drop","","",8],[10,"new","","",9],[10,"take_stack","","",9],[10,"give_stack","","",9],[0,"task","green","The Green Task implementation"],[1,"GreenTask","green::task","The necessary fields needed to keep track of a green task (as opposed to a\n1:1 task)."],[11,"coroutine","","Coroutine that this task is running on, otherwise known as the register\ncontext and the stack that this task owns. This field is optional to\nrelinquish ownership back to a scheduler to recycle stacks at a later\ndate.",10],[11,"handle","","Optional handle back into the home sched pool of this task. This field\nis lazily initialized.",10],[11,"sched","","Slot for maintaining ownership of a scheduler. If a task is running,\nthis value will be Some(sched) where the task is running on \"sched\".",10],[11,"task","","Temporary ownership slot of a std::rt::task::Task object. This is used\nto squirrel that libstd task away while we're performing green task\noperations.",10],[11,"task_type","","Dictates whether this is a sched task or a normal green task",10],[11,"pool_id","","Home pool that this task was spawned into. This field is lazily\ninitialized until when the task is initially scheduled, and is used to\nmake sure that tasks are always woken up in the correct pool of\nschedulers.",10],[11,"nasty_deschedule_lock","","",10],[2,"TaskType","",""],[12,"TypeGreen","","",11],[12,"TypeSched","","",11],[2,"Home","",""],[12,"AnySched","","",12],[12,"HomeSched","","",12],[10,"new","","Creates a new green task which is not homed to any particular scheduler\nand will not have any contained Task structure.",10],[10,"new_homed","","Creates a new task (like `new`), but specifies the home for new task.",10],[10,"new_typed","","Creates a new green task with the specified coroutine and type, this is\nuseful when creating scheduler tasks.",10],[10,"configure","","Creates a new green task with the given configuration options for the\ncontained Task object. The given stack pool is also used to allocate a\nnew stack for this task.",10],[10,"convert","","Just like the `maybe_take_runtime` function, this function should *not*\nexist. Usage of this function is _strongly_ discouraged. This is an\nabsolute last resort necessary for converting a libstd task to a green\ntask.",10],[10,"give_home","","",10],[10,"take_unwrap_home","","",10],[10,"is_home_no_tls","","",10],[10,"homed","","",10],[10,"is_sched","","",10],[10,"as_uint","","",10],[10,"from_uint","","",10],[10,"put_with_sched","","",10],[10,"put_task","","",10],[10,"swap","","",10],[10,"put","","",10],[10,"yield_now","","",10],[10,"maybe_yield","","",10],[10,"deschedule","","",10],[10,"reawaken","","",10],[10,"spawn_sibling","","",10],[10,"local_io","","",10],[10,"stack_bounds","","",10],[10,"can_block","","",10],[10,"wrap","","",10],[6,"GreenTaskBuilder","green","An extension trait adding `green` configuration methods to `TaskBuilder`."],[9,"green","","",13],[9,"green_pinned","","",13],[10,"new","","Returns the default configuration, as determined the environment\nvariables of this process.",0],[10,"new","","Execute the main function in a pool of M:N schedulers.",14],[10,"task","","Creates a new task configured to run inside of this pool of schedulers.\nThis is useful to create a task which can then be sent to a specific\nscheduler created by `spawn_sched` (and possibly pin it to that\nscheduler).",14],[10,"spawn","","Spawns a new task into this pool of schedulers, using the specified\noptions to configure the new task which is spawned.",14],[10,"spawn_sched","","Spawns a new scheduler into this M:N pool. A handle is returned to the\nscheduler for use. The scheduler will not exit as long as this handle is\nactive.",14],[10,"shutdown","","Consumes the pool of schedulers, waiting for all tasks to exit and all\nschedulers to shut down.",14],[10,"drop","","",14],[10,"spawn","","",15],[10,"green","std::task","",16],[10,"green_pinned","","",16],[15,"green_start!","green","A helper macro for booting a program with libgreen"]],"paths":[[1,"PoolConfig"],[1,"Context"],[1,"Coroutine"],[1,"Scheduler"],[1,"SchedHandle"],[2,"SchedMessage"],[6,"ClosureConverter"],[1,"SleeperList"],[1,"Stack"],[1,"StackPool"],[1,"GreenTask"],[2,"TaskType"],[2,"Home"],[6,"GreenTaskBuilder"],[1,"SchedPool"],[1,"GreenSpawner"],[1,"TaskBuilder"]]};

searchIndex['std'] = {"items":[[0,"","std","The Rust Standard Library"],[0,"macros","","Standard library macros"],[0,"builtin","std::macros","Built-in macros to the compiler itself."],[0,"bitflags","std","A typesafe bitmask flag generator."],[0,"prelude","","The Rust prelude"],[0,"int","","Operations and constants for architecture-sized signed integers (`int` type)"],[3,"parse_bytes","std::int","Parse a byte slice as a number in the given base"],[3,"to_str_bytes","","Convert to a string as a byte slice in a given base."],[5,"BITS","",""],[5,"BYTES","",""],[5,"MIN","",""],[5,"MAX","",""],[16,"int","","Operations and constants for architecture-sized signed integers (`int` type)"],[0,"i8","std","Operations and constants for signed 8-bits integers (`i8` type)"],[3,"parse_bytes","std::i8","Parse a byte slice as a number in the given base"],[3,"to_str_bytes","","Convert to a string as a byte slice in a given base."],[5,"BITS","",""],[5,"BYTES","",""],[5,"MIN","",""],[5,"MAX","",""],[16,"i8","","Operations and constants for signed 8-bits integers (`i8` type)"],[0,"i16","std","Operations and constants for signed 16-bits integers (`i16` type)"],[3,"parse_bytes","std::i16","Parse a byte slice as a number in the given base"],[3,"to_str_bytes","","Convert to a string as a byte slice in a given base."],[5,"BITS","",""],[5,"BYTES","",""],[5,"MIN","",""],[5,"MAX","",""],[16,"i16","","Operations and constants for signed 16-bits integers (`i16` type)"],[0,"i32","std","Operations and constants for signed 32-bits integers (`i32` type)"],[3,"parse_bytes","std::i32","Parse a byte slice as a number in the given base"],[3,"to_str_bytes","","Convert to a string as a byte slice in a given base."],[5,"BITS","",""],[5,"BYTES","",""],[5,"MIN","",""],[5,"MAX","",""],[16,"i32","","Operations and constants for signed 32-bits integers (`i32` type)"],[0,"i64","std","Operations and constants for signed 64-bits integers (`i64` type)"],[3,"parse_bytes","std::i64","Parse a byte slice as a number in the given base"],[3,"to_str_bytes","","Convert to a string as a byte slice in a given base."],[5,"BITS","",""],[5,"BYTES","",""],[5,"MIN","",""],[5,"MAX","",""],[16,"i64","","Operations and constants for signed 64-bits integers (`i64` type)"],[0,"uint","std","Operations and constants for architecture-sized unsigned integers (`uint` type)"],[3,"parse_bytes","std::uint","Parse a byte slice as a number in the given base"],[3,"to_str_bytes","","Convert to a string as a byte slice in a given base."],[5,"BITS","",""],[5,"BYTES","",""],[5,"MIN","",""],[5,"MAX","",""],[16,"uint","","Operations and constants for architecture-sized unsigned integers (`uint` type)"],[0,"u8","std","Operations and constants for unsigned 8-bits integers (`u8` type)"],[3,"parse_bytes","std::u8","Parse a byte slice as a number in the given base"],[3,"to_str_bytes","","Convert to a string as a byte slice in a given base."],[5,"BITS","",""],[5,"BYTES","",""],[5,"MIN","",""],[5,"MAX","",""],[16,"u8","","Operations and constants for unsigned 8-bits integers (`u8` type)"],[0,"u16","std","Operations and constants for unsigned 16-bits integers (`u16` type)"],[3,"parse_bytes","std::u16","Parse a byte slice as a number in the given base"],[3,"to_str_bytes","","Convert to a string as a byte slice in a given base."],[5,"BITS","",""],[5,"BYTES","",""],[5,"MIN","",""],[5,"MAX","",""],[16,"u16","","Operations and constants for unsigned 16-bits integers (`u16` type)"],[0,"u32","std","Operations and constants for unsigned 32-bits integers (`u32` type)"],[3,"parse_bytes","std::u32","Parse a byte slice as a number in the given base"],[3,"to_str_bytes","","Convert to a string as a byte slice in a given base."],[5,"BITS","",""],[5,"BYTES","",""],[5,"MIN","",""],[5,"MAX","",""],[16,"u32","","Operations and constants for unsigned 32-bits integers (`u32` type)"],[0,"u64","std","Operations and constants for unsigned 64-bits integer (`u64` type)"],[3,"parse_bytes","std::u64","Parse a byte slice as a number in the given base"],[3,"to_str_bytes","","Convert to a string as a byte slice in a given base."],[5,"BITS","",""],[5,"BYTES","",""],[5,"MIN","",""],[5,"MAX","",""],[16,"u64","","Operations and constants for unsigned 64-bits integer (`u64` type)"],[0,"f32","std","Operations and constants for 32-bits floats (`f32` type)"],[3,"to_string","std::f32","Converts a float to a string"],[3,"to_str_hex","","Converts a float to a string in hexadecimal format"],[3,"to_str_radix_special","","Converts a float to a string in a given radix, and a flag indicating\nwhether it's a special value"],[3,"to_str_exact","","Converts a float to a string with exactly the number of\nprovided significant digits"],[3,"to_str_digits","","Converts a float to a string with a maximum number of\nsignificant digits"],[3,"to_str_exp_exact","","Converts a float to a string using the exponential notation with exactly the number of\nprovided digits after the decimal point in the significand"],[3,"to_str_exp_digits","","Converts a float to a string using the exponential notation with the maximum number of\ndigits after the decimal point in the significand"],[3,"from_str_hex","","Convert a string in base 16 to a float.\nAccepts an optional binary exponent."],[5,"RADIX","",""],[5,"MANTISSA_DIGITS","",""],[5,"DIGITS","",""],[5,"EPSILON","",""],[5,"MIN_VALUE","",""],[5,"MIN_POS_VALUE","",""],[5,"MAX_VALUE","",""],[5,"MIN_EXP","",""],[5,"MAX_EXP","",""],[5,"MIN_10_EXP","",""],[5,"MAX_10_EXP","",""],[5,"NAN","",""],[5,"INFINITY","",""],[5,"NEG_INFINITY","",""],[0,"consts","","Various useful constants."],[5,"PI","std::f32::consts",""],[5,"PI_2","",""],[5,"FRAC_PI_2","",""],[5,"FRAC_PI_3","",""],[5,"FRAC_PI_4","",""],[5,"FRAC_PI_6","",""],[5,"FRAC_PI_8","",""],[5,"FRAC_1_PI","",""],[5,"FRAC_2_PI","",""],[5,"FRAC_2_SQRTPI","",""],[5,"SQRT2","",""],[5,"FRAC_1_SQRT2","",""],[5,"E","",""],[5,"LOG2_E","",""],[5,"LOG10_E","",""],[5,"LN_2","",""],[5,"LN_10","",""],[16,"f32","std::f32","Operations and constants for 32-bits floats (`f32` type)"],[0,"f64","std","Operations and constants for 64-bits floats (`f64` type)"],[3,"to_string","std::f64","Converts a float to a string"],[3,"to_str_hex","","Converts a float to a string in hexadecimal format"],[3,"to_str_radix_special","","Converts a float to a string in a given radix, and a flag indicating\nwhether it's a special value"],[3,"to_str_exact","","Converts a float to a string with exactly the number of\nprovided significant digits"],[3,"to_str_digits","","Converts a float to a string with a maximum number of\nsignificant digits"],[3,"to_str_exp_exact","","Converts a float to a string using the exponential notation with exactly the number of\nprovided digits after the decimal point in the significand"],[3,"to_str_exp_digits","","Converts a float to a string using the exponential notation with the maximum number of\ndigits after the decimal point in the significand"],[3,"from_str_hex","","Convert a string in base 16 to a float.\nAccepts an optional binary exponent."],[5,"RADIX","",""],[5,"MANTISSA_DIGITS","",""],[5,"DIGITS","",""],[5,"EPSILON","",""],[5,"MIN_VALUE","",""],[5,"MIN_POS_VALUE","",""],[5,"MAX_VALUE","",""],[5,"MIN_EXP","",""],[5,"MAX_EXP","",""],[5,"MIN_10_EXP","",""],[5,"MAX_10_EXP","",""],[5,"NAN","",""],[5,"INFINITY","",""],[5,"NEG_INFINITY","",""],[0,"consts","","Various useful constants."],[5,"PI","std::f64::consts",""],[5,"PI_2","",""],[5,"FRAC_PI_2","",""],[5,"FRAC_PI_3","",""],[5,"FRAC_PI_4","",""],[5,"FRAC_PI_6","",""],[5,"FRAC_PI_8","",""],[5,"FRAC_1_PI","",""],[5,"FRAC_2_PI","",""],[5,"FRAC_2_SQRTPI","",""],[5,"SQRT2","",""],[5,"FRAC_1_SQRT2","",""],[5,"E","",""],[5,"LOG2_E","",""],[5,"LOG10_E","",""],[5,"LN_2","",""],[5,"LN_10","",""],[16,"f64","std::f64","Operations and constants for 64-bits floats (`f64` type)"],[0,"rand","std","Utilities for random number generation"],[1,"OsRng","std::rand","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:"],[1,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform."],[1,"TaskRng","","The task-local RNG."],[3,"weak_rng","","Create a weak random number generator with a default algorithm and seed."],[3,"task_rng","","Retrieve the lazily-initialized task-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `task_rng().gen::<int>()`."],[3,"random","","Generates a random value using the task-local random number generator."],[3,"sample","","Randomly sample up to `amount` elements from an iterator."],[0,"os","","Interfaces to the operating system provided random number\ngenerators."],[1,"OsRng","std::rand::os","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:"],[10,"new","std::rand","Create a new `OsRng`.",0],[10,"next_u32","","",0],[10,"next_u64","","",0],[10,"fill_bytes","","",0],[0,"reader","","A wrapper around any Reader to treat it as an RNG."],[1,"ReaderRng","std::rand::reader","An RNG that reads random bytes straight from a `Reader`. This will\nwork best with an infinite reader, but this is not required."],[10,"new","","Create a new `ReaderRng` from a `Reader`.",1],[10,"next_u32","","",1],[10,"next_u64","","",1],[10,"fill_bytes","","",1],[10,"new","std::rand","Create a randomly seeded instance of `StdRng`.",2],[10,"next_u32","","",2],[10,"next_u64","","",2],[10,"reseed","","",2],[10,"from_seed","","",2],[10,"next_u32","","",3],[10,"next_u64","","",3],[10,"fill_bytes","","",3],[6,"Rand","","A type that can be randomly generated using an `Rng`."],[9,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",4],[6,"Rng","","A random number generator."],[9,"next_u32","","Return the next random u32.",5],[9,"next_u64","","Return the next random u64.",5],[9,"fill_bytes","","Fill `dest` with random data.",5],[9,"gen","","Return a random value of a `Rand` type.",5],[9,"gen_iter","","Return an iterator which will yield an infinite number of randomly\ngenerated items.",5],[9,"gen_range","","Generate a random value in the range [`low`, `high`). Fails if\n`low >= high`.",5],[9,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",5],[9,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",5],[9,"choose","","Return a random element from `values`.",5],[9,"choose_option","","Deprecated name for `choose()`.",5],[9,"shuffle","","Shuffle a mutable slice in place.",5],[6,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times."],[9,"reseed","","Reseed an RNG with the given seed.",6],[9,"from_seed","","Create a new RNG with the given seed.",6],[10,"new","rand::distributions::range","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Fails if `low >= high`.",7],[10,"sample","","",7],[10,"ind_sample","","",7],[10,"new","rand::distributions::gamma","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",8],[10,"sample","","",8],[10,"sample","","",9],[10,"sample","","",10],[10,"ind_sample","","",8],[10,"ind_sample","","",9],[10,"ind_sample","","",10],[10,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Fails if `k < 0`.",11],[10,"sample","","",11],[10,"ind_sample","","",11],[10,"new","","Create a new `FisherF` distribution, with the given\nparameter. Fails if either `m` or `n` are not positive.",12],[10,"sample","","",12],[10,"ind_sample","","",12],[10,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Fails if `n <= 0`.",13],[10,"sample","","",13],[10,"ind_sample","","",13],[10,"rand","rand::distributions::normal","",14],[10,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation. Fails if `std_dev < 0`.",15],[10,"sample","","",15],[10,"ind_sample","","",15],[10,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation. Fails if `std_dev < 0`.",16],[10,"sample","","",16],[10,"ind_sample","","",16],[10,"rand","rand::distributions::exponential","",17],[10,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Fails if `lambda <= 0`.",18],[10,"sample","","",18],[10,"ind_sample","","",18],[10,"sample","rand::distributions","",19],[10,"ind_sample","","",19],[10,"new","","Create a new `WeightedChoice`.",20],[10,"sample","","",20],[10,"ind_sample","","",20],[10,"new_unseeded","rand::isaac","Create an ISAAC random number generator using the default\nfixed seed.",21],[10,"next_u32","","",21],[10,"next_u64","","",21],[10,"fill_bytes","","",21],[10,"gen","","",21],[10,"gen_iter","","",21],[10,"gen_range","","",21],[10,"gen_weighted_bool","","",21],[10,"gen_ascii_chars","","",21],[10,"choose","","",21],[10,"choose_option","","",21],[10,"shuffle","","",21],[10,"reseed","","",21],[10,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",21],[10,"rand","","",21],[10,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",22],[10,"next_u32","","",22],[10,"next_u64","","",22],[10,"next_u64","","",22],[10,"fill_bytes","","",22],[10,"gen","","",22],[10,"gen_iter","","",22],[10,"gen_range","","",22],[10,"gen_weighted_bool","","",22],[10,"gen_ascii_chars","","",22],[10,"choose","","",22],[10,"choose_option","","",22],[10,"shuffle","","",22],[10,"reseed","","",22],[10,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",22],[10,"rand","","",22],[10,"new","rand::reseeding","Create a new `ReseedingRng` with the given parameters.",23],[10,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",23],[10,"next_u32","","",23],[10,"next_u64","","",23],[10,"fill_bytes","","",23],[10,"next_u64","","",23],[10,"fill_bytes","","",23],[10,"gen","","",23],[10,"gen_iter","","",23],[10,"gen_range","","",23],[10,"gen_weighted_bool","","",23],[10,"gen_ascii_chars","","",23],[10,"choose","","",23],[10,"choose_option","","",23],[10,"shuffle","","",23],[10,"reseed","","",23],[10,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",23],[10,"reseed","","",24],[10,"default","","",24],[10,"rand","rand","",25],[10,"rand","","",26],[10,"rand","","",25],[10,"rand","","",26],[10,"rand","core::option","",27],[10,"next","rand","",28],[10,"size_hint","","",28],[10,"chain","","",28],[10,"zip","","",28],[10,"map","","",28],[10,"filter","","",28],[10,"filter_map","","",28],[10,"enumerate","","",28],[10,"peekable","","",28],[10,"skip_while","","",28],[10,"take_while","","",28],[10,"skip","","",28],[10,"take","","",28],[10,"scan","","",28],[10,"flat_map","","",28],[10,"fuse","","",28],[10,"inspect","","",28],[10,"by_ref","","",28],[10,"advance","","",28],[10,"collect","","",28],[10,"nth","","",28],[10,"last","","",28],[10,"fold","","",28],[10,"count","","",28],[10,"all","","",28],[10,"any","","",28],[10,"find","","",28],[10,"position","","",28],[10,"max_by","","",28],[10,"min_by","","",28],[10,"next","","",29],[10,"size_hint","","",29],[10,"chain","","",29],[10,"zip","","",29],[10,"map","","",29],[10,"filter","","",29],[10,"filter_map","","",29],[10,"enumerate","","",29],[10,"peekable","","",29],[10,"skip_while","","",29],[10,"take_while","","",29],[10,"skip","","",29],[10,"take","","",29],[10,"scan","","",29],[10,"flat_map","","",29],[10,"fuse","","",29],[10,"inspect","","",29],[10,"by_ref","","",29],[10,"advance","","",29],[10,"collect","","",29],[10,"nth","","",29],[10,"last","","",29],[10,"fold","","",29],[10,"count","","",29],[10,"all","","",29],[10,"any","","",29],[10,"find","","",29],[10,"position","","",29],[10,"max_by","","",29],[10,"min_by","","",29],[10,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",30],[10,"next_u32","","",30],[10,"next_u64","","",30],[10,"fill_bytes","","",30],[10,"gen","","",30],[10,"gen_iter","","",30],[10,"gen_range","","",30],[10,"gen_weighted_bool","","",30],[10,"gen_ascii_chars","","",30],[10,"choose","","",30],[10,"choose_option","","",30],[10,"shuffle","","",30],[10,"reseed","","Reseed an XorShiftRng. This will fail if `seed` is entirely 0.",30],[10,"from_seed","","Create a new XorShiftRng. This will fail if `seed` is entirely 0.",30],[10,"rand","","",30],[1,"Open01","std::rand","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint)."],[1,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints)."],[1,"XorShiftRng","","An [Xorshift] random number generator"],[1,"IsaacRng","","A random number generator that uses the [ISAAC] algorithm."],[1,"Isaac64Rng","","A random number generator that uses [ISAAC-64], the 64-bit\nvariant of the ISAAC algorithm."],[0,"distributions","","Sampling from random distributions."],[0,"range","std::rand::distributions","Generating numbers between two others."],[1,"Range","std::rand::distributions::range","Sample values uniformly between two bounds."],[6,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`."],[9,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low < high`, so this\nfunction doesn't have to repeat the check.",31],[9,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",31],[0,"gamma","std::rand::distributions","The Gamma and derived distributions."],[1,"Gamma","std::rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution."],[1,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom."],[1,"FisherF","","The Fisher F distribution `F(m, n)`."],[1,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom."],[0,"normal","std::rand::distributions","The normal and derived distributions."],[1,"StandardNormal","std::rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian)."],[1,"Normal","","The normal distribution `N(mean, std_dev**2)`."],[1,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`."],[0,"exponential","std::rand::distributions","The exponential distribution."],[1,"Exp1","std::rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers."],[1,"Exp","","The exponential distribution `Exp(lambda)`."],[6,"Sample","std::rand::distributions","Types that can be used to create a random instance of `Support`."],[9,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",32],[6,"IndependentSample","","`Sample`s that do not require keeping track of state."],[9,"ind_sample","","Generate a random value.",33],[1,"RandSample","","A wrapper for generating types that implement `Rand` via the\n`Sample` & `IndependentSample` traits."],[1,"Weighted","","A value with a particular weight for use with `WeightedChoice`."],[11,"weight","","The numerical weight of this item",34],[11,"item","","The actual item which is being weighted",34],[1,"WeightedChoice","","A distribution that selects from a finite collection of weighted items."],[1,"FisherF","","The Fisher F distribution `F(m, n)`."],[1,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom."],[1,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom."],[1,"Exp","","The exponential distribution `Exp(lambda)`."],[1,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`."],[1,"Normal","","The normal distribution `N(mean, std_dev**2)`."],[1,"Gamma","","The Gamma distribution `Gamma(shape, scale)` distribution."],[1,"Range","","Sample values uniformly between two bounds."],[0,"reseeding","std::rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes."],[1,"ReseedingRng","std::rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes."],[11,"reseeder","","Controls the behaviour when reseeding the RNG.",23],[6,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`."],[9,"reseed","","Reseed the given RNG.",35],[1,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call."],[0,"ascii","std","Operations on ASCII strings and characters"],[1,"Ascii","std::ascii","Datatype to hold one ascii character. It wraps a `u8`, with the highest bit always zero."],[5,"ASCII_LOWER_MAP","",""],[5,"ASCII_UPPER_MAP","",""],[6,"AsciiCast","","Trait for converting into an ascii type."],[10,"to_ascii","","Convert to an ascii type, fail on non-ASCII input.",36],[10,"to_ascii_opt","","Convert to an ascii type, return None on non-ASCII input.",36],[9,"to_ascii_nocheck","","Convert to an ascii type, not doing any range asserts",36],[9,"is_ascii","","Check if convertible to ascii",36],[6,"OwnedAsciiCast","","Trait for copyless casting to an ascii vector."],[9,"is_ascii","","Check if convertible to ascii",37],[10,"into_ascii","","Take ownership and cast to an ascii vector. Fail on non-ASCII input.",37],[10,"into_ascii_opt","","Take ownership and cast to an ascii vector. Return None on non-ASCII input.",37],[9,"into_ascii_nocheck","","Take ownership and cast to an ascii vector.\nDoes not perform validation checks.",37],[6,"AsciiStr","","Trait for converting an ascii type to a string. Needed to convert\n`&[Ascii]` to `&str`."],[9,"as_str_ascii","","Convert to a string.",38],[9,"to_lower","","Convert to vector representing a lower cased ascii string.",38],[9,"to_upper","","Convert to vector representing a upper cased ascii string.",38],[9,"eq_ignore_case","","Compares two Ascii strings ignoring case.",38],[6,"IntoBytes","","Trait to convert to an owned byte vector by consuming self"],[9,"into_bytes","","Converts to an owned byte vector by consuming self",39],[6,"OwnedAsciiExt","","Extension methods for ASCII-subset only operations on owned strings"],[9,"into_ascii_upper","","Convert the string to ASCII upper case:\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.",40],[9,"into_ascii_lower","","Convert the string to ASCII lower case:\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.",40],[6,"AsciiExt","","Extension methods for ASCII-subset only operations on string slices"],[9,"to_ascii_upper","","Makes a copy of the string in ASCII upper case:\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.",41],[9,"to_ascii_lower","","Makes a copy of the string in ASCII lower case:\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.",41],[9,"eq_ignore_ascii_case","","Check that two strings are an ASCII case-insensitive match.\nSame as `to_ascii_lower(a) == to_ascii_lower(b)`,\nbut without allocating and copying temporary strings.",41],[10,"hash","","",42],[10,"cmp","","",42],[10,"partial_cmp","","",42],[10,"lt","","",42],[10,"le","","",42],[10,"gt","","",42],[10,"ge","","",42],[10,"eq","","",42],[10,"ne","","",42],[10,"clone","","",42],[10,"to_byte","","Converts an ascii character into a `u8`.",42],[10,"to_char","","Converts an ascii character into a `char`.",42],[10,"to_lower","","",42],[10,"to_lowercase","","Convert to lowercase.",42],[10,"to_upper","","",42],[10,"to_uppercase","","Convert to uppercase.",42],[10,"eq_ignore_case","","Compares two ascii characters of equality, ignoring case.",42],[10,"is_alpha","","",42],[10,"is_alphabetic","","Check if the character is a letter (a-z, A-Z)",42],[10,"is_digit","","Check if the character is a number (0-9)",42],[10,"is_alnum","","",42],[10,"is_alphanumeric","","Check if the character is a letter or number",42],[10,"is_blank","","Check if the character is a space or horizontal tab",42],[10,"is_control","","Check if the character is a control character",42],[10,"is_graph","","Checks if the character is printable (except space)",42],[10,"is_print","","Checks if the character is printable (including space)",42],[10,"is_lower","","",42],[10,"is_lowercase","","Checks if the character is lowercase",42],[10,"is_upper","","",42],[10,"is_uppercase","","Checks if the character is uppercase",42],[10,"is_punctuation","","Checks if the character is punctuation",42],[10,"is_hex","","Checks if the character is a valid hex digit",42],[10,"fmt","","",42],[10,"is_ascii","collections::string","",43],[10,"into_ascii_nocheck","","",43],[10,"is_ascii","collections::vec","",44],[10,"into_ascii_nocheck","","",44],[10,"into_string","","",44],[10,"into_bytes","","",44],[10,"into_ascii_upper","collections::string","",43],[10,"into_ascii_lower","","",43],[10,"into_ascii_upper","collections::vec","",44],[10,"into_ascii_lower","","",44],[0,"gc","std","Task-local garbage-collected boxes"],[1,"Gc","std::gc","Immutable garbage-collected pointer type"],[5,"GC","","An value that represents the task-local managed heap."],[10,"clone","","Clone the pointer only",45],[10,"eq","","",45],[10,"ne","","",45],[10,"partial_cmp","","",45],[10,"lt","","",45],[10,"le","","",45],[10,"ge","","",45],[10,"gt","","",45],[10,"cmp","","",45],[10,"deref","","",45],[10,"default","","",45],[10,"hash","","",45],[10,"fmt","","",45],[0,"time","std","Temporal quantification."],[0,"duration","std::time","Temporal quantification"],[1,"Duration","std::time::duration","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details."],[5,"MIN","","The minimum possible `Duration`: `i64::MIN` milliseconds."],[5,"MAX","","The maximum possible `Duration`: `i64::MAX` milliseconds."],[10,"cmp","","",46],[10,"partial_cmp","","",46],[10,"lt","","",46],[10,"le","","",46],[10,"gt","","",46],[10,"ge","","",46],[10,"eq","","",46],[10,"ne","","",46],[10,"clone","","",46],[10,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60), with overflow checks.\nFails when the duration is out of bounds.",46],[10,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nFails when the duration is out of bounds.",46],[10,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nFails when the duration is out of bounds.",46],[10,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nFails when the duration is out of bounds.",46],[10,"seconds","","Makes a new `Duration` with given number of seconds.\nFails when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",46],[10,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",46],[10,"microseconds","","Makes a new `Duration` with given number of microseconds.",46],[10,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",46],[10,"num_weeks","","Returns the total number of whole weeks in the duration.",46],[10,"num_days","","Returns the total number of whole days in the duration.",46],[10,"num_hours","","Returns the total number of whole hours in the duration.",46],[10,"num_minutes","","Returns the total number of whole minutes in the duration.",46],[10,"num_seconds","","Returns the total number of whole seconds in the duration.",46],[10,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",46],[10,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",46],[10,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",46],[10,"min_value","","",46],[10,"max_value","","",46],[10,"zero","","",46],[10,"is_zero","","",46],[10,"neg","","",46],[10,"add","","",46],[10,"checked_add","","",46],[10,"sub","","",46],[10,"checked_sub","","",46],[10,"mul","","",46],[10,"div","","",46],[10,"fmt","","",46],[0,"from_str","std","The `FromStr` trait for types that can be created from strings"],[3,"from_str","std::from_str","A utility function that just calls FromStr::from_str"],[6,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a\nstring."],[9,"from_str","","Parses a string `s` to return an optional value of this type. If the\nstring is ill-formatted, the None is returned.",47],[10,"from_str","collections::string","",43],[0,"num","std","Numeric traits and functions for generic mathematics"],[3,"from_str_radix","std::num","A utility function that just calls FromStrRadix::from_str_radix."],[0,"strconv","",""],[2,"ExponentFormat","std::num::strconv","A flag that specifies whether to use exponential (scientific) notation."],[12,"ExpNone","","Do not use exponential notation.",48],[12,"ExpDec","","Use exponential notation with the exponent having a base of 10 and the\nexponent sign being `e` or `E`. For example, 1000 would be printed\n1e3.",48],[12,"ExpBin","","Use exponential notation with the exponent having a base of 2 and the\nexponent sign being `p` or `P`. For example, 8 would be printed 1p3.",48],[2,"SignificantDigits","","The number of digits used for emitting the fractional part of a number, if\nany."],[12,"DigAll","","All calculable digits will be printed.",49],[12,"DigMax","","At most the given number of digits will be printed, truncating any\ntrailing zeroes.",49],[12,"DigExact","","Precisely the given number of digits will be printed.",49],[2,"SignFormat","","How to emit the sign of a number."],[12,"SignNone","","No sign will be printed. The exponent sign will also be emitted.",50],[12,"SignNeg","","`-` will be printed for negative values, but no sign will be emitted\nfor positive numbers.",50],[12,"SignAll","","`+` will be printed for positive values, and `-` will be printed for\nnegative values.",50],[3,"int_to_str_bytes_common","","Converts an integral number to its string representation as a byte vector.\nThis is meant to be a common base implementation for all integral string\nconversion functions like `to_string()` or `to_str_radix()`."],[3,"float_to_str_bytes_common","","Converts a number to its string representation as a byte vector.\nThis is meant to be a common base implementation for all numeric string\nconversion functions like `to_string()` or `to_str_radix()`."],[3,"float_to_str_common","","Converts a number to its string representation. This is a wrapper for\n`to_str_bytes_common()`, for details see there."],[3,"from_str_bytes_common","","Parses a byte slice as a number. This is meant to\nbe a common base implementation for all numeric string conversion\nfunctions like `from_str()` or `from_str_radix()`."],[3,"from_str_common","","Parses a string as a number. This is a wrapper for\n`from_str_bytes_common()`, for details see there."],[6,"NumStrConv","","Encompasses functions used by the string converter."],[9,"nan","","Returns the NaN value.",51],[9,"inf","","Returns the infinite value.",51],[9,"neg_inf","","Returns the negative infinite value.",51],[9,"neg_zero","","Returns -0.0.",51],[9,"round_to_zero","","Rounds the number toward zero.",51],[9,"fractional_part","","Returns the fractional part of the number.",51],[6,"FloatMath","std::num","Mathematical operations on primitive floating point numbers."],[9,"ldexp","","Constructs a floating point number created by multiplying `x` by 2\nraised to the power of `exp`.",52],[9,"frexp","","Breaks the number into a normalized fraction and a base-2 exponent,\nsatisfying:",52],[9,"next_after","","Returns the next representable floating-point value in the direction of\n`other`.",52],[9,"max","","Returns the maximum of the two numbers.",52],[9,"min","","Returns the minimum of the two numbers.",52],[9,"cbrt","","Take the cubic root of a number.",52],[9,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",52],[9,"sin","","Computes the sine of a number (in radians).",52],[9,"cos","","Computes the cosine of a number (in radians).",52],[9,"tan","","Computes the tangent of a number (in radians).",52],[9,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",52],[9,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",52],[9,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",52],[9,"atan2","","Computes the four quadrant arctangent of a number, `y`, and another\nnumber `x`. Return value is in radians in the range [-pi, pi].",52],[9,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",52],[9,"exp_m1","","Returns the exponential of the number, minus 1, in a way that is\naccurate even if the number is close to zero.",52],[9,"ln_1p","","Returns the natural logarithm of the number plus 1 (`ln(1+n)`) more\naccurately than if the operations were performed separately.",52],[9,"sinh","","Hyperbolic sine function.",52],[9,"cosh","","Hyperbolic cosine function.",52],[9,"tanh","","Hyperbolic tangent function.",52],[9,"asinh","","Inverse hyperbolic sine function.",52],[9,"acosh","","Inverse hyperbolic cosine function.",52],[9,"atanh","","Inverse hyperbolic tangent function.",52],[6,"ToStrRadix","","A generic trait for converting a value to a string with a radix (base)"],[9,"to_str_radix","","",53],[6,"FromStrRadix","","A generic trait for converting a string with a radix (base) to a value"],[9,"from_str_radix","","",54],[6,"Num","","The base trait for numeric types"],[3,"div_rem","","Simultaneous division and remainder"],[6,"Zero","","Defines an additive identity element for `Self`."],[9,"zero","","Returns the additive identity element of `Self`, `0`.",55],[9,"is_zero","","Returns `true` if `self` is equal to the additive identity.",55],[3,"zero","","Returns the additive identity, `0`."],[6,"One","","Defines a multiplicative identity element for `Self`."],[9,"one","","Returns the multiplicative identity element of `Self`, `1`.",56],[3,"one","","Returns the multiplicative identity, `1`."],[6,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative)."],[9,"abs","","Computes the absolute value.",57],[9,"abs_sub","","The positive difference of two numbers.",57],[9,"signum","","Returns the sign of the number.",57],[9,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",57],[9,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",57],[3,"abs","","Computes the absolute value."],[3,"abs_sub","","The positive difference of two numbers."],[3,"signum","","Returns the sign of the number."],[6,"Unsigned","","A trait for values which cannot be negative"],[3,"pow","","Raises a value to the power of exp, using exponentiation by squaring."],[6,"Bounded","","Numbers which have upper and lower bounds"],[9,"min_value","","returns the smallest finite number this type can represent",58],[9,"max_value","","returns the largest finite number this type can represent",58],[6,"Primitive","","Specifies the available operations common to all of Rust's core numeric primitives.\nThese may not always make sense from a purely mathematical point of view, but\nmay be useful for systems programming."],[6,"Int","","A primitive signed or unsigned integer equipped with various bitwise\noperators, bit counting methods, and endian conversion functions."],[9,"count_ones","","Returns the number of ones in the binary representation of the integer.",59],[9,"count_zeros","","Returns the number of zeros in the binary representation of the integer.",59],[9,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof the integer.",59],[9,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof the integer.",59],[9,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",59],[9,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",59],[9,"swap_bytes","","Reverses the byte order of the integer.",59],[9,"from_be","","Convert a integer from big endian to the target's endianness.",59],[9,"from_le","","Convert a integer from little endian to the target's endianness.",59],[9,"to_be","","Convert the integer to big endian from the target's endianness.",59],[9,"to_le","","Convert the integer to little endian from the target's endianness.",59],[6,"Saturating","","Saturating math operations"],[9,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",60],[9,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",60],[6,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow."],[9,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",61],[6,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow."],[9,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",62],[6,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow."],[9,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow\nhappens, `None` is returned.",63],[6,"CheckedDiv","","Performs division that returns `None` instead of failing on division by zero and instead of\nwrapping around on underflow and overflow."],[9,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that\nhappens, / `None` is returned.",64],[3,"cast","","Cast from one machine scalar to another."],[6,"FromPrimitive","","A generic trait for converting a number to a value."],[9,"from_int","","Convert an `int` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",65],[9,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",65],[9,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",65],[9,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",65],[9,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",65],[9,"from_uint","","Convert an `uint` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",65],[9,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",65],[9,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",65],[9,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",65],[9,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",65],[9,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",65],[9,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",65],[6,"NumCast","","An interface for casting between machine scalars."],[9,"from","","Creates a number from another value that can be converted into a primitive via the\n`ToPrimitive` trait.",66],[6,"ToPrimitive","","A generic trait for converting a value to a number."],[9,"to_int","","Converts the value of `self` to an `int`.",67],[9,"to_i8","","Converts the value of `self` to an `i8`.",67],[9,"to_i16","","Converts the value of `self` to an `i16`.",67],[9,"to_i32","","Converts the value of `self` to an `i32`.",67],[9,"to_i64","","Converts the value of `self` to an `i64`.",67],[9,"to_uint","","Converts the value of `self` to an `uint`.",67],[9,"to_u8","","Converts the value of `self` to an `u8`.",67],[9,"to_u16","","Converts the value of `self` to an `u16`.",67],[9,"to_u32","","Converts the value of `self` to an `u32`.",67],[9,"to_u64","","Converts the value of `self` to an `u64`.",67],[9,"to_f32","","Converts the value of `self` to an `f32`.",67],[9,"to_f64","","Converts the value of `self` to an `f64`.",67],[3,"next_power_of_two","","Returns the smallest power of 2 greater than or equal to `n`."],[3,"is_power_of_two","",""],[3,"checked_next_power_of_two","","Returns the smallest power of 2 greater than or equal to `n`. If the next\npower of two is greater than the type's maximum value, `None` is returned,\notherwise the power of 2 is wrapped in `Some`."],[3,"from_int","","A utility function that just calls `FromPrimitive::from_int`."],[3,"from_i8","","A utility function that just calls `FromPrimitive::from_i8`."],[3,"from_i16","","A utility function that just calls `FromPrimitive::from_i16`."],[3,"from_i32","","A utility function that just calls `FromPrimitive::from_i32`."],[3,"from_i64","","A utility function that just calls `FromPrimitive::from_i64`."],[3,"from_uint","","A utility function that just calls `FromPrimitive::from_uint`."],[3,"from_u8","","A utility function that just calls `FromPrimitive::from_u8`."],[3,"from_u16","","A utility function that just calls `FromPrimitive::from_u16`."],[3,"from_u32","","A utility function that just calls `FromPrimitive::from_u32`."],[3,"from_u64","","A utility function that just calls `FromPrimitive::from_u64`."],[3,"from_f32","","A utility function that just calls `FromPrimitive::from_f32`."],[3,"from_f64","","A utility function that just calls `FromPrimitive::from_f64`."],[10,"fmt","core::num","",68],[10,"eq","","",68],[10,"ne","","",68],[10,"ne","","",68],[10,"fmt","core::intrinsics","",69],[10,"assert_receiver_is_total_eq","","",69],[10,"eq","","",69],[10,"ne","","",69],[10,"ne","","",69],[10,"of","","Returns the `TypeId` of the type this generic function has been instantiated with",69],[10,"hash","","",69],[10,"clone","core::kinds::marker","",70],[10,"clone_from","","",70],[10,"eq","","",70],[10,"ne","","",70],[10,"ne","","",70],[10,"clone","","",71],[10,"clone_from","","",71],[10,"eq","","",71],[10,"ne","","",71],[10,"ne","","",71],[10,"clone","","",72],[10,"clone_from","","",72],[10,"eq","","",72],[10,"ne","","",72],[10,"ne","","",72],[10,"clone","","",73],[10,"clone_from","","",73],[10,"eq","","",73],[10,"ne","","",73],[10,"ne","","",73],[10,"clone","","",74],[10,"clone_from","","",74],[10,"eq","","",74],[10,"ne","","",74],[10,"ne","","",74],[10,"clone","","",75],[10,"clone_from","","",75],[10,"eq","","",75],[10,"ne","","",75],[10,"ne","","",75],[10,"clone","","",76],[10,"clone_from","","",76],[10,"eq","","",76],[10,"ne","","",76],[10,"ne","","",76],[10,"clone","","",77],[10,"clone_from","","",77],[10,"eq","","",77],[10,"ne","","",77],[10,"ne","","",77],[10,"clone","","",78],[10,"clone_from","","",78],[10,"eq","","",78],[10,"ne","","",78],[10,"ne","","",78],[10,"clone","","",79],[10,"clone_from","","",79],[10,"eq","","",79],[10,"ne","","",79],[10,"ne","","",79],[10,"fmt","core::cmp","",80],[10,"eq","","",80],[10,"ne","","",80],[10,"ne","","",80],[10,"clone","","",80],[10,"clone_from","","",80],[10,"reverse","","Reverse the `Ordering`, so that `Less` becomes `Greater` and\nvice versa.",80],[10,"assert_receiver_is_total_eq","","",80],[10,"cmp","","",80],[10,"partial_cmp","","",80],[10,"lt","","",80],[10,"le","","",80],[10,"gt","","",80],[10,"ge","","",80],[10,"new","core::atomic","Create a new `AtomicBool`",81],[10,"load","","Load the value",81],[10,"store","","Store the value",81],[10,"swap","","Store a value, returning the old value",81],[10,"compare_and_swap","","If the current value is the same as expected, store a new value",81],[10,"fetch_and","","A logical \"and\" operation",81],[10,"fetch_nand","","A logical \"nand\" operation",81],[10,"fetch_or","","A logical \"or\" operation",81],[10,"fetch_xor","","A logical \"xor\" operation",81],[10,"new","","Create a new `AtomicInt`",82],[10,"load","","Load the value",82],[10,"store","","Store the value",82],[10,"swap","","Store a value, returning the old value",82],[10,"compare_and_swap","","If the current value is the same as expected, store a new value",82],[10,"fetch_add","","Add to the current value, returning the previous",82],[10,"fetch_sub","","Subtract from the current value, returning the previous",82],[10,"fetch_and","","Bitwise and with the current value, returning the previous",82],[10,"fetch_or","","Bitwise or with the current value, returning the previous",82],[10,"fetch_xor","","Bitwise xor with the current value, returning the previous",82],[10,"new","","Create a new `AtomicUint`",83],[10,"load","","Load the value",83],[10,"store","","Store the value",83],[10,"swap","","Store a value, returning the old value",83],[10,"compare_and_swap","","If the current value is the same as expected, store a new value",83],[10,"fetch_add","","Add to the current value, returning the previous",83],[10,"fetch_sub","","Subtract from the current value, returning the previous",83],[10,"fetch_and","","Bitwise and with the current value, returning the previous",83],[10,"fetch_or","","Bitwise or with the current value, returning the previous",83],[10,"fetch_xor","","Bitwise xor with the current value, returning the previous",83],[10,"new","","Create a new `AtomicPtr`",84],[10,"load","","Load the value",84],[10,"store","","Store the value",84],[10,"swap","","Store a value, returning the old value",84],[10,"compare_and_swap","","If the current value is the same as expected, store a new value",84],[10,"new","core::cell","Creates a new `Cell` containing the given value.",85],[10,"get","","Returns a copy of the contained value.",85],[10,"set","","Sets the contained value.",85],[10,"clone","","",85],[10,"clone_from","","",85],[10,"eq","","",85],[10,"ne","","",85],[10,"new","","Create a new `RefCell` containing `value`",86],[10,"unwrap","","Consumes the `RefCell`, returning the wrapped value.",86],[10,"try_borrow","","Attempts to immutably borrow the wrapped value.",86],[10,"borrow","","Immutably borrows the wrapped value.",86],[10,"try_borrow_mut","","Mutably borrows the wrapped value.",86],[10,"borrow_mut","","Mutably borrows the wrapped value.",86],[10,"clone","","",86],[10,"clone_from","","",86],[10,"eq","","",86],[10,"ne","","",86],[10,"drop","","",87],[10,"deref","","",87],[10,"drop","","",88],[10,"deref","","",88],[10,"deref_mut","","",88],[10,"new","","Construct a new instance of `UnsafeCell` which will wrap the specified\nvalue.",89],[10,"get","","Gets a mutable pointer to the wrapped value.",89],[10,"unwrap","","Unwraps the value",89],[10,"drop","core::finally","",90],[10,"rposition","core::iter","",91],[10,"len","","",91],[10,"rposition","","",92],[10,"len","","",92],[10,"rposition","","",93],[10,"len","","",93],[10,"rposition","","",94],[10,"len","","",94],[10,"rposition","","",95],[10,"len","","",95],[10,"clone","","",93],[10,"clone_from","","",93],[10,"next","","",93],[10,"size_hint","","",93],[10,"size_hint","","",93],[10,"chain","","",93],[10,"zip","","",93],[10,"map","","",93],[10,"filter","","",93],[10,"filter_map","","",93],[10,"enumerate","","",93],[10,"peekable","","",93],[10,"skip_while","","",93],[10,"take_while","","",93],[10,"skip","","",93],[10,"take","","",93],[10,"scan","","",93],[10,"flat_map","","",93],[10,"fuse","","",93],[10,"inspect","","",93],[10,"by_ref","","",93],[10,"advance","","",93],[10,"collect","","",93],[10,"nth","","",93],[10,"last","","",93],[10,"fold","","",93],[10,"count","","",93],[10,"all","","",93],[10,"any","","",93],[10,"find","","",93],[10,"position","","",93],[10,"max_by","","",93],[10,"min_by","","",93],[10,"next_back","","",93],[10,"rev","","",93],[10,"indexable","","",93],[10,"idx","","",93],[10,"next","","",96],[10,"size_hint","","",96],[10,"size_hint","","",96],[10,"chain","","",96],[10,"zip","","",96],[10,"map","","",96],[10,"filter","","",96],[10,"filter_map","","",96],[10,"enumerate","","",96],[10,"peekable","","",96],[10,"skip_while","","",96],[10,"take_while","","",96],[10,"skip","","",96],[10,"take","","",96],[10,"scan","","",96],[10,"flat_map","","",96],[10,"fuse","","",96],[10,"inspect","","",96],[10,"by_ref","","",96],[10,"advance","","",96],[10,"collect","","",96],[10,"nth","","",96],[10,"last","","",96],[10,"fold","","",96],[10,"count","","",96],[10,"all","","",96],[10,"any","","",96],[10,"find","","",96],[10,"position","","",96],[10,"max_by","","",96],[10,"min_by","","",96],[10,"next_back","","",96],[10,"rev","","",96],[10,"fmt","","",97],[10,"eq","","",97],[10,"ne","","",97],[10,"ne","","",97],[10,"clone","","",97],[10,"clone_from","","",97],[10,"into_option","","`into_option` creates an `Option` of type `(T,T)`. The returned `Option` has variant\n`None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise variant\n`Some(x,y)` is returned where `x <= y`. If `MinMaxResult` has variant `OneElement(x)`,\nperforming this operation will make one clone of `x`.",97],[10,"clone","","",98],[10,"clone_from","","",98],[10,"next","","",98],[10,"size_hint","","",98],[10,"size_hint","","",98],[10,"chain","","",98],[10,"zip","","",98],[10,"map","","",98],[10,"filter","","",98],[10,"filter_map","","",98],[10,"enumerate","","",98],[10,"peekable","","",98],[10,"skip_while","","",98],[10,"take_while","","",98],[10,"skip","","",98],[10,"take","","",98],[10,"scan","","",98],[10,"flat_map","","",98],[10,"fuse","","",98],[10,"inspect","","",98],[10,"by_ref","","",98],[10,"advance","","",98],[10,"collect","","",98],[10,"nth","","",98],[10,"last","","",98],[10,"fold","","",98],[10,"count","","",98],[10,"all","","",98],[10,"any","","",98],[10,"find","","",98],[10,"position","","",98],[10,"max_by","","",98],[10,"min_by","","",98],[10,"indexable","","",98],[10,"idx","","",98],[10,"clone","","",99],[10,"clone_from","","",99],[10,"next","","",99],[10,"size_hint","","",99],[10,"size_hint","","",99],[10,"chain","","",99],[10,"zip","","",99],[10,"map","","",99],[10,"filter","","",99],[10,"filter_map","","",99],[10,"enumerate","","",99],[10,"peekable","","",99],[10,"skip_while","","",99],[10,"take_while","","",99],[10,"skip","","",99],[10,"take","","",99],[10,"scan","","",99],[10,"flat_map","","",99],[10,"fuse","","",99],[10,"inspect","","",99],[10,"by_ref","","",99],[10,"advance","","",99],[10,"collect","","",99],[10,"nth","","",99],[10,"last","","",99],[10,"fold","","",99],[10,"count","","",99],[10,"all","","",99],[10,"any","","",99],[10,"find","","",99],[10,"position","","",99],[10,"max_by","","",99],[10,"min_by","","",99],[10,"next_back","","",99],[10,"rev","","",99],[10,"indexable","","",99],[10,"idx","","",99],[10,"clone","","",95],[10,"clone_from","","",95],[10,"next","","",95],[10,"size_hint","","",95],[10,"size_hint","","",95],[10,"chain","","",95],[10,"zip","","",95],[10,"map","","",95],[10,"filter","","",95],[10,"filter_map","","",95],[10,"enumerate","","",95],[10,"peekable","","",95],[10,"skip_while","","",95],[10,"take_while","","",95],[10,"skip","","",95],[10,"take","","",95],[10,"scan","","",95],[10,"flat_map","","",95],[10,"fuse","","",95],[10,"inspect","","",95],[10,"by_ref","","",95],[10,"advance","","",95],[10,"collect","","",95],[10,"nth","","",95],[10,"last","","",95],[10,"fold","","",95],[10,"count","","",95],[10,"all","","",95],[10,"any","","",95],[10,"find","","",95],[10,"position","","",95],[10,"max_by","","",95],[10,"min_by","","",95],[10,"next_back","","",95],[10,"rev","","",95],[10,"indexable","","",95],[10,"idx","","",95],[10,"next","","",94],[10,"size_hint","","",94],[10,"size_hint","","",94],[10,"chain","","",94],[10,"zip","","",94],[10,"map","","",94],[10,"filter","","",94],[10,"filter_map","","",94],[10,"enumerate","","",94],[10,"peekable","","",94],[10,"skip_while","","",94],[10,"take_while","","",94],[10,"skip","","",94],[10,"take","","",94],[10,"scan","","",94],[10,"flat_map","","",94],[10,"fuse","","",94],[10,"inspect","","",94],[10,"by_ref","","",94],[10,"advance","","",94],[10,"collect","","",94],[10,"nth","","",94],[10,"last","","",94],[10,"fold","","",94],[10,"count","","",94],[10,"all","","",94],[10,"any","","",94],[10,"find","","",94],[10,"position","","",94],[10,"max_by","","",94],[10,"min_by","","",94],[10,"next_back","","",94],[10,"rev","","",94],[10,"indexable","","",94],[10,"idx","","",94],[10,"next","","",100],[10,"size_hint","","",100],[10,"size_hint","","",100],[10,"chain","","",100],[10,"zip","","",100],[10,"map","","",100],[10,"filter","","",100],[10,"filter_map","","",100],[10,"enumerate","","",100],[10,"peekable","","",100],[10,"skip_while","","",100],[10,"take_while","","",100],[10,"skip","","",100],[10,"take","","",100],[10,"scan","","",100],[10,"flat_map","","",100],[10,"fuse","","",100],[10,"inspect","","",100],[10,"by_ref","","",100],[10,"advance","","",100],[10,"collect","","",100],[10,"nth","","",100],[10,"last","","",100],[10,"fold","","",100],[10,"count","","",100],[10,"all","","",100],[10,"any","","",100],[10,"find","","",100],[10,"position","","",100],[10,"max_by","","",100],[10,"min_by","","",100],[10,"next_back","","",100],[10,"rev","","",100],[10,"next","","",101],[10,"size_hint","","",101],[10,"size_hint","","",101],[10,"chain","","",101],[10,"zip","","",101],[10,"map","","",101],[10,"filter","","",101],[10,"filter_map","","",101],[10,"enumerate","","",101],[10,"peekable","","",101],[10,"skip_while","","",101],[10,"take_while","","",101],[10,"skip","","",101],[10,"take","","",101],[10,"scan","","",101],[10,"flat_map","","",101],[10,"fuse","","",101],[10,"inspect","","",101],[10,"by_ref","","",101],[10,"advance","","",101],[10,"collect","","",101],[10,"nth","","",101],[10,"last","","",101],[10,"fold","","",101],[10,"count","","",101],[10,"all","","",101],[10,"any","","",101],[10,"find","","",101],[10,"position","","",101],[10,"max_by","","",101],[10,"min_by","","",101],[10,"next_back","","",101],[10,"rev","","",101],[10,"clone","","",91],[10,"clone_from","","",91],[10,"next","","",91],[10,"size_hint","","",91],[10,"size_hint","","",91],[10,"chain","","",91],[10,"zip","","",91],[10,"map","","",91],[10,"filter","","",91],[10,"filter_map","","",91],[10,"enumerate","","",91],[10,"peekable","","",91],[10,"skip_while","","",91],[10,"take_while","","",91],[10,"skip","","",91],[10,"take","","",91],[10,"scan","","",91],[10,"flat_map","","",91],[10,"fuse","","",91],[10,"inspect","","",91],[10,"by_ref","","",91],[10,"advance","","",91],[10,"collect","","",91],[10,"nth","","",91],[10,"last","","",91],[10,"fold","","",91],[10,"count","","",91],[10,"all","","",91],[10,"any","","",91],[10,"find","","",91],[10,"position","","",91],[10,"max_by","","",91],[10,"min_by","","",91],[10,"next_back","","",91],[10,"rev","","",91],[10,"indexable","","",91],[10,"idx","","",91],[10,"next","","",102],[10,"size_hint","","",102],[10,"size_hint","","",102],[10,"chain","","",102],[10,"zip","","",102],[10,"map","","",102],[10,"filter","","",102],[10,"filter_map","","",102],[10,"enumerate","","",102],[10,"peekable","","",102],[10,"skip_while","","",102],[10,"take_while","","",102],[10,"skip","","",102],[10,"take","","",102],[10,"scan","","",102],[10,"flat_map","","",102],[10,"fuse","","",102],[10,"inspect","","",102],[10,"by_ref","","",102],[10,"advance","","",102],[10,"collect","","",102],[10,"nth","","",102],[10,"last","","",102],[10,"fold","","",102],[10,"count","","",102],[10,"all","","",102],[10,"any","","",102],[10,"find","","",102],[10,"position","","",102],[10,"max_by","","",102],[10,"min_by","","",102],[10,"peek","","Return a reference to the next element of the iterator with out advancing it,\nor None if the iterator is exhausted.",102],[10,"is_empty","","Check whether peekable iterator is empty or not.",102],[10,"next","","",103],[10,"size_hint","","",103],[10,"size_hint","","",103],[10,"chain","","",103],[10,"zip","","",103],[10,"map","","",103],[10,"filter","","",103],[10,"filter_map","","",103],[10,"enumerate","","",103],[10,"peekable","","",103],[10,"skip_while","","",103],[10,"take_while","","",103],[10,"skip","","",103],[10,"take","","",103],[10,"scan","","",103],[10,"flat_map","","",103],[10,"fuse","","",103],[10,"inspect","","",103],[10,"by_ref","","",103],[10,"advance","","",103],[10,"collect","","",103],[10,"nth","","",103],[10,"last","","",103],[10,"fold","","",103],[10,"count","","",103],[10,"all","","",103],[10,"any","","",103],[10,"find","","",103],[10,"position","","",103],[10,"max_by","","",103],[10,"min_by","","",103],[10,"next","","",104],[10,"size_hint","","",104],[10,"size_hint","","",104],[10,"chain","","",104],[10,"zip","","",104],[10,"map","","",104],[10,"filter","","",104],[10,"filter_map","","",104],[10,"enumerate","","",104],[10,"peekable","","",104],[10,"skip_while","","",104],[10,"take_while","","",104],[10,"skip","","",104],[10,"take","","",104],[10,"scan","","",104],[10,"flat_map","","",104],[10,"fuse","","",104],[10,"inspect","","",104],[10,"by_ref","","",104],[10,"advance","","",104],[10,"collect","","",104],[10,"nth","","",104],[10,"last","","",104],[10,"fold","","",104],[10,"count","","",104],[10,"all","","",104],[10,"any","","",104],[10,"find","","",104],[10,"position","","",104],[10,"max_by","","",104],[10,"min_by","","",104],[10,"clone","","",105],[10,"clone_from","","",105],[10,"next","","",105],[10,"size_hint","","",105],[10,"size_hint","","",105],[10,"chain","","",105],[10,"zip","","",105],[10,"map","","",105],[10,"filter","","",105],[10,"filter_map","","",105],[10,"enumerate","","",105],[10,"peekable","","",105],[10,"skip_while","","",105],[10,"take_while","","",105],[10,"skip","","",105],[10,"take","","",105],[10,"scan","","",105],[10,"flat_map","","",105],[10,"fuse","","",105],[10,"inspect","","",105],[10,"by_ref","","",105],[10,"advance","","",105],[10,"collect","","",105],[10,"nth","","",105],[10,"last","","",105],[10,"fold","","",105],[10,"count","","",105],[10,"all","","",105],[10,"any","","",105],[10,"find","","",105],[10,"position","","",105],[10,"max_by","","",105],[10,"min_by","","",105],[10,"indexable","","",105],[10,"idx","","",105],[10,"clone","","",106],[10,"clone_from","","",106],[10,"next","","",106],[10,"size_hint","","",106],[10,"size_hint","","",106],[10,"chain","","",106],[10,"zip","","",106],[10,"map","","",106],[10,"filter","","",106],[10,"filter_map","","",106],[10,"enumerate","","",106],[10,"peekable","","",106],[10,"skip_while","","",106],[10,"take_while","","",106],[10,"skip","","",106],[10,"take","","",106],[10,"scan","","",106],[10,"flat_map","","",106],[10,"fuse","","",106],[10,"inspect","","",106],[10,"by_ref","","",106],[10,"advance","","",106],[10,"collect","","",106],[10,"nth","","",106],[10,"last","","",106],[10,"fold","","",106],[10,"count","","",106],[10,"all","","",106],[10,"any","","",106],[10,"find","","",106],[10,"position","","",106],[10,"max_by","","",106],[10,"min_by","","",106],[10,"indexable","","",106],[10,"idx","","",106],[10,"next","","",107],[10,"size_hint","","",107],[10,"size_hint","","",107],[10,"chain","","",107],[10,"zip","","",107],[10,"map","","",107],[10,"filter","","",107],[10,"filter_map","","",107],[10,"enumerate","","",107],[10,"peekable","","",107],[10,"skip_while","","",107],[10,"take_while","","",107],[10,"skip","","",107],[10,"take","","",107],[10,"scan","","",107],[10,"flat_map","","",107],[10,"fuse","","",107],[10,"inspect","","",107],[10,"by_ref","","",107],[10,"advance","","",107],[10,"collect","","",107],[10,"nth","","",107],[10,"last","","",107],[10,"fold","","",107],[10,"count","","",107],[10,"all","","",107],[10,"any","","",107],[10,"find","","",107],[10,"position","","",107],[10,"max_by","","",107],[10,"min_by","","",107],[10,"next","","",108],[10,"size_hint","","",108],[10,"size_hint","","",108],[10,"chain","","",108],[10,"zip","","",108],[10,"map","","",108],[10,"filter","","",108],[10,"filter_map","","",108],[10,"enumerate","","",108],[10,"peekable","","",108],[10,"skip_while","","",108],[10,"take_while","","",108],[10,"skip","","",108],[10,"take","","",108],[10,"scan","","",108],[10,"flat_map","","",108],[10,"fuse","","",108],[10,"inspect","","",108],[10,"by_ref","","",108],[10,"advance","","",108],[10,"collect","","",108],[10,"nth","","",108],[10,"last","","",108],[10,"fold","","",108],[10,"count","","",108],[10,"all","","",108],[10,"any","","",108],[10,"find","","",108],[10,"position","","",108],[10,"max_by","","",108],[10,"min_by","","",108],[10,"next_back","","",108],[10,"rev","","",108],[10,"clone","","",109],[10,"clone_from","","",109],[10,"next","","",109],[10,"size_hint","","",109],[10,"size_hint","","",109],[10,"chain","","",109],[10,"zip","","",109],[10,"map","","",109],[10,"filter","","",109],[10,"filter_map","","",109],[10,"enumerate","","",109],[10,"peekable","","",109],[10,"skip_while","","",109],[10,"take_while","","",109],[10,"skip","","",109],[10,"take","","",109],[10,"scan","","",109],[10,"flat_map","","",109],[10,"fuse","","",109],[10,"inspect","","",109],[10,"by_ref","","",109],[10,"advance","","",109],[10,"collect","","",109],[10,"nth","","",109],[10,"last","","",109],[10,"fold","","",109],[10,"count","","",109],[10,"all","","",109],[10,"any","","",109],[10,"find","","",109],[10,"position","","",109],[10,"max_by","","",109],[10,"min_by","","",109],[10,"next_back","","",109],[10,"rev","","",109],[10,"indexable","","",109],[10,"idx","","",109],[10,"reset_fuse","","Resets the fuse such that the next call to .next() or .next_back() will\ncall the underlying iterator again even if it previously returned None.",109],[10,"next","","",92],[10,"size_hint","","",92],[10,"size_hint","","",92],[10,"chain","","",92],[10,"zip","","",92],[10,"map","","",92],[10,"filter","","",92],[10,"filter_map","","",92],[10,"enumerate","","",92],[10,"peekable","","",92],[10,"skip_while","","",92],[10,"take_while","","",92],[10,"skip","","",92],[10,"take","","",92],[10,"scan","","",92],[10,"flat_map","","",92],[10,"fuse","","",92],[10,"inspect","","",92],[10,"by_ref","","",92],[10,"advance","","",92],[10,"collect","","",92],[10,"nth","","",92],[10,"last","","",92],[10,"fold","","",92],[10,"count","","",92],[10,"all","","",92],[10,"any","","",92],[10,"find","","",92],[10,"position","","",92],[10,"max_by","","",92],[10,"min_by","","",92],[10,"next_back","","",92],[10,"rev","","",92],[10,"indexable","","",92],[10,"idx","","",92],[10,"new","","Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the iterator",110],[10,"next","","",110],[10,"size_hint","","",110],[10,"size_hint","","",110],[10,"chain","","",110],[10,"zip","","",110],[10,"map","","",110],[10,"filter","","",110],[10,"filter_map","","",110],[10,"enumerate","","",110],[10,"peekable","","",110],[10,"skip_while","","",110],[10,"take_while","","",110],[10,"skip","","",110],[10,"take","","",110],[10,"scan","","",110],[10,"flat_map","","",110],[10,"fuse","","",110],[10,"inspect","","",110],[10,"by_ref","","",110],[10,"advance","","",110],[10,"collect","","",110],[10,"nth","","",110],[10,"last","","",110],[10,"fold","","",110],[10,"count","","",110],[10,"all","","",110],[10,"any","","",110],[10,"find","","",110],[10,"position","","",110],[10,"max_by","","",110],[10,"min_by","","",110],[10,"clone","","",111],[10,"clone_from","","",111],[10,"next","","",111],[10,"size_hint","","",111],[10,"size_hint","","",111],[10,"chain","","",111],[10,"zip","","",111],[10,"map","","",111],[10,"filter","","",111],[10,"filter_map","","",111],[10,"enumerate","","",111],[10,"peekable","","",111],[10,"skip_while","","",111],[10,"take_while","","",111],[10,"skip","","",111],[10,"take","","",111],[10,"scan","","",111],[10,"flat_map","","",111],[10,"fuse","","",111],[10,"inspect","","",111],[10,"by_ref","","",111],[10,"advance","","",111],[10,"collect","","",111],[10,"nth","","",111],[10,"last","","",111],[10,"fold","","",111],[10,"count","","",111],[10,"all","","",111],[10,"any","","",111],[10,"find","","",111],[10,"position","","",111],[10,"max_by","","",111],[10,"min_by","","",111],[10,"clone","","",112],[10,"clone_from","","",112],[10,"next","","",112],[10,"size_hint","","",112],[10,"size_hint","","",112],[10,"chain","","",112],[10,"zip","","",112],[10,"map","","",112],[10,"filter","","",112],[10,"filter_map","","",112],[10,"enumerate","","",112],[10,"peekable","","",112],[10,"skip_while","","",112],[10,"take_while","","",112],[10,"skip","","",112],[10,"take","","",112],[10,"scan","","",112],[10,"flat_map","","",112],[10,"fuse","","",112],[10,"inspect","","",112],[10,"by_ref","","",112],[10,"advance","","",112],[10,"collect","","",112],[10,"nth","","",112],[10,"last","","",112],[10,"fold","","",112],[10,"count","","",112],[10,"all","","",112],[10,"any","","",112],[10,"find","","",112],[10,"position","","",112],[10,"max_by","","",112],[10,"min_by","","",112],[10,"next_back","","",112],[10,"rev","","",112],[10,"clone","","",113],[10,"clone_from","","",113],[10,"next","","",113],[10,"size_hint","","",113],[10,"size_hint","","",113],[10,"chain","","",113],[10,"zip","","",113],[10,"map","","",113],[10,"filter","","",113],[10,"filter_map","","",113],[10,"enumerate","","",113],[10,"peekable","","",113],[10,"skip_while","","",113],[10,"take_while","","",113],[10,"skip","","",113],[10,"take","","",113],[10,"scan","","",113],[10,"flat_map","","",113],[10,"fuse","","",113],[10,"inspect","","",113],[10,"by_ref","","",113],[10,"advance","","",113],[10,"collect","","",113],[10,"nth","","",113],[10,"last","","",113],[10,"fold","","",113],[10,"count","","",113],[10,"all","","",113],[10,"any","","",113],[10,"find","","",113],[10,"position","","",113],[10,"max_by","","",113],[10,"min_by","","",113],[10,"next_back","","",113],[10,"rev","","",113],[10,"clone","","",114],[10,"clone_from","","",114],[10,"next","","",114],[10,"size_hint","","",114],[10,"chain","","",114],[10,"zip","","",114],[10,"map","","",114],[10,"filter","","",114],[10,"filter_map","","",114],[10,"enumerate","","",114],[10,"peekable","","",114],[10,"skip_while","","",114],[10,"take_while","","",114],[10,"skip","","",114],[10,"take","","",114],[10,"scan","","",114],[10,"flat_map","","",114],[10,"fuse","","",114],[10,"inspect","","",114],[10,"by_ref","","",114],[10,"advance","","",114],[10,"collect","","",114],[10,"nth","","",114],[10,"last","","",114],[10,"fold","","",114],[10,"count","","",114],[10,"all","","",114],[10,"any","","",114],[10,"find","","",114],[10,"position","","",114],[10,"max_by","","",114],[10,"min_by","","",114],[10,"clone","","",115],[10,"clone_from","","",115],[10,"next","","",115],[10,"size_hint","","",115],[10,"chain","","",115],[10,"zip","","",115],[10,"map","","",115],[10,"filter","","",115],[10,"filter_map","","",115],[10,"enumerate","","",115],[10,"peekable","","",115],[10,"skip_while","","",115],[10,"take_while","","",115],[10,"skip","","",115],[10,"take","","",115],[10,"scan","","",115],[10,"flat_map","","",115],[10,"fuse","","",115],[10,"inspect","","",115],[10,"by_ref","","",115],[10,"advance","","",115],[10,"collect","","",115],[10,"nth","","",115],[10,"last","","",115],[10,"fold","","",115],[10,"count","","",115],[10,"all","","",115],[10,"any","","",115],[10,"find","","",115],[10,"position","","",115],[10,"max_by","","",115],[10,"min_by","","",115],[10,"clone","","",116],[10,"clone_from","","",116],[10,"new","","Create a new `Repeat` that endlessly repeats the element `elt`.",116],[10,"next","","",116],[10,"size_hint","","",116],[10,"size_hint","","",116],[10,"chain","","",116],[10,"zip","","",116],[10,"map","","",116],[10,"filter","","",116],[10,"filter_map","","",116],[10,"enumerate","","",116],[10,"peekable","","",116],[10,"skip_while","","",116],[10,"take_while","","",116],[10,"skip","","",116],[10,"take","","",116],[10,"scan","","",116],[10,"flat_map","","",116],[10,"fuse","","",116],[10,"inspect","","",116],[10,"by_ref","","",116],[10,"advance","","",116],[10,"collect","","",116],[10,"nth","","",116],[10,"last","","",116],[10,"fold","","",116],[10,"count","","",116],[10,"all","","",116],[10,"any","","",116],[10,"find","","",116],[10,"position","","",116],[10,"max_by","","",116],[10,"min_by","","",116],[10,"next_back","","",116],[10,"rev","","",116],[10,"indexable","","",116],[10,"idx","","",116],[10,"fmt","core::option","",27],[10,"cmp","","",27],[10,"assert_receiver_is_total_eq","","",27],[10,"partial_cmp","","",27],[10,"lt","","",27],[10,"le","","",27],[10,"gt","","",27],[10,"ge","","",27],[10,"lt","","",27],[10,"le","","",27],[10,"gt","","",27],[10,"ge","","",27],[10,"eq","","",27],[10,"ne","","",27],[10,"ne","","",27],[10,"clone","","",27],[10,"clone_from","","",27],[10,"is_some","","Returns `true` if the option is a `Some` value",27],[10,"is_none","","Returns `true` if the option is a `None` value",27],[10,"as_ref","","Convert from `Option<T>` to `Option<&T>`",27],[10,"as_mut","","Convert from `Option<T>` to `Option<&mut T>`",27],[10,"as_mut_slice","","Convert from `Option<T>` to `&mut [T]` (without copying)",27],[10,"expect","","Unwraps an option, yielding the content of a `Some`",27],[10,"unwrap","","Returns the inner `T` of a `Some(T)`.",27],[10,"unwrap_or","","Returns the contained value or a default.",27],[10,"unwrap_or_else","","Returns the contained value or computes it from a closure.",27],[10,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",27],[10,"map_or","","Applies a function to the contained value or returns a default.",27],[10,"map_or_else","","Applies a function to the contained value or computes a default.",27],[10,"mutate","","Deprecated.",27],[10,"mutate_or_set","","Deprecated.",27],[10,"iter","","Returns an iterator over the possibly contained value.",27],[10,"mut_iter","","Deprecated: use `iter_mut`",27],[10,"iter_mut","","Returns a mutable iterator over the possibly contained value.",27],[10,"move_iter","","Deprecated: use `into_iter`.",27],[10,"into_iter","","Returns a consuming iterator over the possibly contained value.",27],[10,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",27],[10,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",27],[10,"or","","Returns the option if it contains a value, otherwise returns `optb`.",27],[10,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",27],[10,"take","","Takes the value out of the option, leaving a `None` in its place.",27],[10,"filtered","","Deprecated.",27],[10,"while_some","","Deprecated.",27],[10,"take_unwrap","","Deprecated: use `take().unwrap()` instead.",27],[10,"get_ref","","Deprecated: use `as_ref().unwrap()` instead.",27],[10,"get_mut_ref","","Deprecated: use `as_mut().unwrap()` instead.",27],[10,"unwrap_or_default","","Returns the contained value or a default",27],[10,"as_slice","","Convert from `Option<T>` to `&[T]` (without copying)",27],[10,"default","","",27],[10,"clone","","",117],[10,"clone_from","","",117],[10,"next","","",117],[10,"size_hint","","",117],[10,"size_hint","","",117],[10,"chain","","",117],[10,"zip","","",117],[10,"map","","",117],[10,"filter","","",117],[10,"filter_map","","",117],[10,"enumerate","","",117],[10,"peekable","","",117],[10,"skip_while","","",117],[10,"take_while","","",117],[10,"skip","","",117],[10,"take","","",117],[10,"scan","","",117],[10,"flat_map","","",117],[10,"fuse","","",117],[10,"inspect","","",117],[10,"by_ref","","",117],[10,"advance","","",117],[10,"collect","","",117],[10,"nth","","",117],[10,"last","","",117],[10,"fold","","",117],[10,"count","","",117],[10,"all","","",117],[10,"any","","",117],[10,"find","","",117],[10,"position","","",117],[10,"max_by","","",117],[10,"min_by","","",117],[10,"next_back","","",117],[10,"rev","","",117],[10,"rposition","","",117],[10,"len","","",117],[10,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",27],[10,"fmt","core::result","",118],[10,"cmp","","",118],[10,"assert_receiver_is_total_eq","","",118],[10,"partial_cmp","","",118],[10,"lt","","",118],[10,"le","","",118],[10,"gt","","",118],[10,"ge","","",118],[10,"lt","","",118],[10,"le","","",118],[10,"gt","","",118],[10,"ge","","",118],[10,"eq","","",118],[10,"ne","","",118],[10,"ne","","",118],[10,"clone","","",118],[10,"clone_from","","",118],[10,"is_ok","","Returns true if the result is `Ok`",118],[10,"is_err","","Returns true if the result is `Err`",118],[10,"ok","","Convert from `Result<T, E>` to `Option<T>`",118],[10,"err","","Convert from `Result<T, E>` to `Option<E>`",118],[10,"as_ref","","Convert from `Result<T, E>` to `Result<&T, &E>`",118],[10,"as_mut","","Convert from `Result<T, E>` to `Result<&mut T, &mut E>`",118],[10,"as_mut_slice","","Convert from `Result<T, E>` to `&mut [T]` (without copying)",118],[10,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",118],[10,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",118],[10,"iter","","Returns an iterator over the possibly contained value.",118],[10,"mut_iter","","Deprecated: use `iter_mut`.",118],[10,"iter_mut","","Returns a mutable iterator over the possibly contained value.",118],[10,"move_iter","","Deprecated: `use into_iter`.",118],[10,"into_iter","","Returns a consuming iterator over the possibly contained value.",118],[10,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",118],[10,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",118],[10,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",118],[10,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",118],[10,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",118],[10,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",118],[10,"unwrap_or_handle","","Deprecated name for `unwrap_or_else()`.",118],[10,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",118],[10,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",118],[10,"as_slice","","Convert from `Result<T, E>` to `&[T]` (without copying)",118],[10,"clone","","",119],[10,"clone_from","","",119],[10,"next","","",119],[10,"size_hint","","",119],[10,"size_hint","","",119],[10,"chain","","",119],[10,"zip","","",119],[10,"map","","",119],[10,"filter","","",119],[10,"filter_map","","",119],[10,"enumerate","","",119],[10,"peekable","","",119],[10,"skip_while","","",119],[10,"take_while","","",119],[10,"skip","","",119],[10,"take","","",119],[10,"scan","","",119],[10,"flat_map","","",119],[10,"fuse","","",119],[10,"inspect","","",119],[10,"by_ref","","",119],[10,"advance","","",119],[10,"collect","","",119],[10,"nth","","",119],[10,"last","","",119],[10,"fold","","",119],[10,"count","","",119],[10,"all","","",119],[10,"any","","",119],[10,"find","","",119],[10,"position","","",119],[10,"max_by","","",119],[10,"min_by","","",119],[10,"next_back","","",119],[10,"rev","","",119],[10,"rposition","","",119],[10,"len","","",119],[10,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",118],[10,"fmt","core::simd","",120],[10,"fmt","","",121],[10,"fmt","","",122],[10,"fmt","","",123],[10,"fmt","","",124],[10,"fmt","","",125],[10,"fmt","","",126],[10,"fmt","","",127],[10,"fmt","","",128],[10,"fmt","","",129],[10,"next","core::slice","",130],[10,"size_hint","","",130],[10,"size_hint","","",130],[10,"chain","","",130],[10,"zip","","",130],[10,"map","","",130],[10,"filter","","",130],[10,"filter_map","","",130],[10,"enumerate","","",130],[10,"peekable","","",130],[10,"skip_while","","",130],[10,"take_while","","",130],[10,"skip","","",130],[10,"take","","",130],[10,"scan","","",130],[10,"flat_map","","",130],[10,"fuse","","",130],[10,"inspect","","",130],[10,"by_ref","","",130],[10,"advance","","",130],[10,"collect","","",130],[10,"nth","","",130],[10,"last","","",130],[10,"fold","","",130],[10,"count","","",130],[10,"all","","",130],[10,"any","","",130],[10,"find","","",130],[10,"position","","",130],[10,"max_by","","",130],[10,"min_by","","",130],[10,"next_back","","",130],[10,"rev","","",130],[10,"rposition","","",130],[10,"len","","",130],[10,"clone","","",130],[10,"clone_from","","",130],[10,"indexable","","",130],[10,"idx","","",130],[10,"next","","",131],[10,"size_hint","","",131],[10,"size_hint","","",131],[10,"chain","","",131],[10,"zip","","",131],[10,"map","","",131],[10,"filter","","",131],[10,"filter_map","","",131],[10,"enumerate","","",131],[10,"peekable","","",131],[10,"skip_while","","",131],[10,"take_while","","",131],[10,"skip","","",131],[10,"take","","",131],[10,"scan","","",131],[10,"flat_map","","",131],[10,"fuse","","",131],[10,"inspect","","",131],[10,"by_ref","","",131],[10,"advance","","",131],[10,"collect","","",131],[10,"nth","","",131],[10,"last","","",131],[10,"fold","","",131],[10,"count","","",131],[10,"all","","",131],[10,"any","","",131],[10,"find","","",131],[10,"position","","",131],[10,"max_by","","",131],[10,"min_by","","",131],[10,"next_back","","",131],[10,"rev","","",131],[10,"rposition","","",131],[10,"len","","",131],[10,"next","","",132],[10,"size_hint","","",132],[10,"size_hint","","",132],[10,"chain","","",132],[10,"zip","","",132],[10,"map","","",132],[10,"filter","","",132],[10,"filter_map","","",132],[10,"enumerate","","",132],[10,"peekable","","",132],[10,"skip_while","","",132],[10,"take_while","","",132],[10,"skip","","",132],[10,"take","","",132],[10,"scan","","",132],[10,"flat_map","","",132],[10,"fuse","","",132],[10,"inspect","","",132],[10,"by_ref","","",132],[10,"advance","","",132],[10,"collect","","",132],[10,"nth","","",132],[10,"last","","",132],[10,"fold","","",132],[10,"count","","",132],[10,"all","","",132],[10,"any","","",132],[10,"find","","",132],[10,"position","","",132],[10,"max_by","","",132],[10,"min_by","","",132],[10,"next_back","","",132],[10,"rev","","",132],[10,"next","","",133],[10,"size_hint","","",133],[10,"size_hint","","",133],[10,"chain","","",133],[10,"zip","","",133],[10,"map","","",133],[10,"filter","","",133],[10,"filter_map","","",133],[10,"enumerate","","",133],[10,"peekable","","",133],[10,"skip_while","","",133],[10,"take_while","","",133],[10,"skip","","",133],[10,"take","","",133],[10,"scan","","",133],[10,"flat_map","","",133],[10,"fuse","","",133],[10,"inspect","","",133],[10,"by_ref","","",133],[10,"advance","","",133],[10,"collect","","",133],[10,"nth","","",133],[10,"last","","",133],[10,"fold","","",133],[10,"count","","",133],[10,"all","","",133],[10,"any","","",133],[10,"find","","",133],[10,"position","","",133],[10,"max_by","","",133],[10,"min_by","","",133],[10,"next_back","","",133],[10,"rev","","",133],[10,"next","","",134],[10,"size_hint","","",134],[10,"size_hint","","",134],[10,"chain","","",134],[10,"zip","","",134],[10,"map","","",134],[10,"filter","","",134],[10,"filter_map","","",134],[10,"enumerate","","",134],[10,"peekable","","",134],[10,"skip_while","","",134],[10,"take_while","","",134],[10,"skip","","",134],[10,"take","","",134],[10,"scan","","",134],[10,"flat_map","","",134],[10,"fuse","","",134],[10,"inspect","","",134],[10,"by_ref","","",134],[10,"advance","","",134],[10,"collect","","",134],[10,"nth","","",134],[10,"last","","",134],[10,"fold","","",134],[10,"count","","",134],[10,"all","","",134],[10,"any","","",134],[10,"find","","",134],[10,"position","","",134],[10,"max_by","","",134],[10,"min_by","","",134],[10,"clone","","",135],[10,"clone_from","","",135],[10,"next","","",135],[10,"size_hint","","",135],[10,"size_hint","","",135],[10,"chain","","",135],[10,"zip","","",135],[10,"map","","",135],[10,"filter","","",135],[10,"filter_map","","",135],[10,"enumerate","","",135],[10,"peekable","","",135],[10,"skip_while","","",135],[10,"take_while","","",135],[10,"skip","","",135],[10,"take","","",135],[10,"scan","","",135],[10,"flat_map","","",135],[10,"fuse","","",135],[10,"inspect","","",135],[10,"by_ref","","",135],[10,"advance","","",135],[10,"collect","","",135],[10,"nth","","",135],[10,"last","","",135],[10,"fold","","",135],[10,"count","","",135],[10,"all","","",135],[10,"any","","",135],[10,"find","","",135],[10,"position","","",135],[10,"max_by","","",135],[10,"min_by","","",135],[10,"clone","","",136],[10,"clone_from","","",136],[10,"next","","",136],[10,"size_hint","","",136],[10,"size_hint","","",136],[10,"chain","","",136],[10,"zip","","",136],[10,"map","","",136],[10,"filter","","",136],[10,"filter_map","","",136],[10,"enumerate","","",136],[10,"peekable","","",136],[10,"skip_while","","",136],[10,"take_while","","",136],[10,"skip","","",136],[10,"take","","",136],[10,"scan","","",136],[10,"flat_map","","",136],[10,"fuse","","",136],[10,"inspect","","",136],[10,"by_ref","","",136],[10,"advance","","",136],[10,"collect","","",136],[10,"nth","","",136],[10,"last","","",136],[10,"fold","","",136],[10,"count","","",136],[10,"all","","",136],[10,"any","","",136],[10,"find","","",136],[10,"position","","",136],[10,"max_by","","",136],[10,"min_by","","",136],[10,"next_back","","",136],[10,"rev","","",136],[10,"indexable","","",136],[10,"idx","","",136],[10,"next","","",137],[10,"size_hint","","",137],[10,"size_hint","","",137],[10,"chain","","",137],[10,"zip","","",137],[10,"map","","",137],[10,"filter","","",137],[10,"filter_map","","",137],[10,"enumerate","","",137],[10,"peekable","","",137],[10,"skip_while","","",137],[10,"take_while","","",137],[10,"skip","","",137],[10,"take","","",137],[10,"scan","","",137],[10,"flat_map","","",137],[10,"fuse","","",137],[10,"inspect","","",137],[10,"by_ref","","",137],[10,"advance","","",137],[10,"collect","","",137],[10,"nth","","",137],[10,"last","","",137],[10,"fold","","",137],[10,"count","","",137],[10,"all","","",137],[10,"any","","",137],[10,"find","","",137],[10,"position","","",137],[10,"max_by","","",137],[10,"min_by","","",137],[10,"next_back","","",137],[10,"rev","","",137],[10,"fmt","","",138],[10,"eq","","",138],[10,"ne","","",138],[10,"ne","","",138],[10,"found","","Converts a `Found` to `Some`, `NotFound` to `None`.\nSimilar to `Result::ok`.",138],[10,"not_found","","Convert a `Found` to `None`, `NotFound` to `Some`.\nSimilar to `Result::err`.",138],[10,"clone","core::str","",139],[10,"clone_from","","",139],[10,"next","","",139],[10,"size_hint","","",139],[10,"size_hint","","",139],[10,"chain","","",139],[10,"zip","","",139],[10,"map","","",139],[10,"filter","","",139],[10,"filter_map","","",139],[10,"enumerate","","",139],[10,"peekable","","",139],[10,"skip_while","","",139],[10,"take_while","","",139],[10,"skip","","",139],[10,"take","","",139],[10,"scan","","",139],[10,"flat_map","","",139],[10,"fuse","","",139],[10,"inspect","","",139],[10,"by_ref","","",139],[10,"advance","","",139],[10,"collect","","",139],[10,"nth","","",139],[10,"last","","",139],[10,"fold","","",139],[10,"count","","",139],[10,"all","","",139],[10,"any","","",139],[10,"find","","",139],[10,"position","","",139],[10,"max_by","","",139],[10,"min_by","","",139],[10,"next_back","","",139],[10,"rev","","",139],[10,"clone","","",140],[10,"clone_from","","",140],[10,"next","","",140],[10,"size_hint","","",140],[10,"size_hint","","",140],[10,"chain","","",140],[10,"zip","","",140],[10,"map","","",140],[10,"filter","","",140],[10,"filter_map","","",140],[10,"enumerate","","",140],[10,"peekable","","",140],[10,"skip_while","","",140],[10,"take_while","","",140],[10,"skip","","",140],[10,"take","","",140],[10,"scan","","",140],[10,"flat_map","","",140],[10,"fuse","","",140],[10,"inspect","","",140],[10,"by_ref","","",140],[10,"advance","","",140],[10,"collect","","",140],[10,"nth","","",140],[10,"last","","",140],[10,"fold","","",140],[10,"count","","",140],[10,"all","","",140],[10,"any","","",140],[10,"find","","",140],[10,"position","","",140],[10,"max_by","","",140],[10,"min_by","","",140],[10,"next_back","","",140],[10,"rev","","",140],[10,"clone","","",141],[10,"clone_from","","",141],[10,"clone","","",142],[10,"clone_from","","",142],[10,"next","","",141],[10,"size_hint","","",141],[10,"chain","","",141],[10,"zip","","",141],[10,"map","","",141],[10,"filter","","",141],[10,"filter_map","","",141],[10,"enumerate","","",141],[10,"peekable","","",141],[10,"skip_while","","",141],[10,"take_while","","",141],[10,"skip","","",141],[10,"take","","",141],[10,"scan","","",141],[10,"flat_map","","",141],[10,"fuse","","",141],[10,"inspect","","",141],[10,"by_ref","","",141],[10,"advance","","",141],[10,"collect","","",141],[10,"nth","","",141],[10,"last","","",141],[10,"fold","","",141],[10,"count","","",141],[10,"all","","",141],[10,"any","","",141],[10,"find","","",141],[10,"position","","",141],[10,"max_by","","",141],[10,"min_by","","",141],[10,"next_back","","",141],[10,"rev","","",141],[10,"next","","",142],[10,"size_hint","","",142],[10,"chain","","",142],[10,"zip","","",142],[10,"map","","",142],[10,"filter","","",142],[10,"filter_map","","",142],[10,"enumerate","","",142],[10,"peekable","","",142],[10,"skip_while","","",142],[10,"take_while","","",142],[10,"skip","","",142],[10,"take","","",142],[10,"scan","","",142],[10,"flat_map","","",142],[10,"fuse","","",142],[10,"inspect","","",142],[10,"by_ref","","",142],[10,"advance","","",142],[10,"collect","","",142],[10,"nth","","",142],[10,"last","","",142],[10,"fold","","",142],[10,"count","","",142],[10,"all","","",142],[10,"any","","",142],[10,"find","","",142],[10,"position","","",142],[10,"max_by","","",142],[10,"min_by","","",142],[10,"clone","","",143],[10,"clone_from","","",143],[10,"clone","","",144],[10,"clone_from","","",144],[10,"clone","","",145],[10,"clone_from","","",145],[10,"clone","","",146],[10,"clone_from","","",146],[10,"clone","","",147],[10,"clone_from","","",147],[10,"next","","",146],[10,"size_hint","","",146],[10,"chain","","",146],[10,"zip","","",146],[10,"map","","",146],[10,"filter","","",146],[10,"filter_map","","",146],[10,"enumerate","","",146],[10,"peekable","","",146],[10,"skip_while","","",146],[10,"take_while","","",146],[10,"skip","","",146],[10,"take","","",146],[10,"scan","","",146],[10,"flat_map","","",146],[10,"fuse","","",146],[10,"inspect","","",146],[10,"by_ref","","",146],[10,"advance","","",146],[10,"collect","","",146],[10,"nth","","",146],[10,"last","","",146],[10,"fold","","",146],[10,"count","","",146],[10,"all","","",146],[10,"any","","",146],[10,"find","","",146],[10,"position","","",146],[10,"max_by","","",146],[10,"min_by","","",146],[10,"next","","",147],[10,"size_hint","","",147],[10,"chain","","",147],[10,"zip","","",147],[10,"map","","",147],[10,"filter","","",147],[10,"filter_map","","",147],[10,"enumerate","","",147],[10,"peekable","","",147],[10,"skip_while","","",147],[10,"take_while","","",147],[10,"skip","","",147],[10,"take","","",147],[10,"scan","","",147],[10,"flat_map","","",147],[10,"fuse","","",147],[10,"inspect","","",147],[10,"by_ref","","",147],[10,"advance","","",147],[10,"collect","","",147],[10,"nth","","",147],[10,"last","","",147],[10,"fold","","",147],[10,"count","","",147],[10,"all","","",147],[10,"any","","",147],[10,"find","","",147],[10,"position","","",147],[10,"max_by","","",147],[10,"min_by","","",147],[10,"clone","","",148],[10,"clone_from","","",148],[10,"next","","",148],[10,"size_hint","","",148],[10,"size_hint","","",148],[10,"chain","","",148],[10,"zip","","",148],[10,"map","","",148],[10,"filter","","",148],[10,"filter_map","","",148],[10,"enumerate","","",148],[10,"peekable","","",148],[10,"skip_while","","",148],[10,"take_while","","",148],[10,"skip","","",148],[10,"take","","",148],[10,"scan","","",148],[10,"flat_map","","",148],[10,"fuse","","",148],[10,"inspect","","",148],[10,"by_ref","","",148],[10,"advance","","",148],[10,"collect","","",148],[10,"nth","","",148],[10,"last","","",148],[10,"fold","","",148],[10,"count","","",148],[10,"all","","",148],[10,"any","","",148],[10,"find","","",148],[10,"position","","",148],[10,"max_by","","",148],[10,"min_by","","",148],[10,"clone","","",149],[10,"clone_from","","",149],[10,"fmt","","",150],[10,"clone","","",150],[10,"clone_from","","",150],[10,"assert_receiver_is_total_eq","","",150],[10,"eq","","",150],[10,"ne","","",150],[10,"ne","","",150],[10,"to_char_lossy","","Convert `self` to a `char`, taking `LoneSurrogate`s to the\nreplacement character (U+FFFD).",150],[10,"next","","",149],[10,"size_hint","","",149],[10,"size_hint","","",149],[10,"chain","","",149],[10,"zip","","",149],[10,"map","","",149],[10,"filter","","",149],[10,"filter_map","","",149],[10,"enumerate","","",149],[10,"peekable","","",149],[10,"skip_while","","",149],[10,"take_while","","",149],[10,"skip","","",149],[10,"take","","",149],[10,"scan","","",149],[10,"flat_map","","",149],[10,"fuse","","",149],[10,"inspect","","",149],[10,"by_ref","","",149],[10,"advance","","",149],[10,"collect","","",149],[10,"nth","","",149],[10,"last","","",149],[10,"fold","","",149],[10,"count","","",149],[10,"all","","",149],[10,"any","","",149],[10,"find","","",149],[10,"position","","",149],[10,"max_by","","",149],[10,"min_by","","",149],[10,"eq","core::fmt::num","",151],[10,"ne","","",151],[10,"ne","","",151],[10,"clone","","",151],[10,"clone_from","","",151],[10,"eq","","",152],[10,"ne","","",152],[10,"ne","","",152],[10,"clone","","",152],[10,"clone_from","","",152],[10,"eq","","",153],[10,"ne","","",153],[10,"ne","","",153],[10,"clone","","",153],[10,"clone_from","","",153],[10,"eq","","",154],[10,"ne","","",154],[10,"ne","","",154],[10,"clone","","",154],[10,"clone_from","","",154],[10,"eq","","",155],[10,"ne","","",155],[10,"ne","","",155],[10,"clone","","",155],[10,"clone_from","","",155],[10,"eq","","",156],[10,"ne","","",156],[10,"ne","","",156],[10,"clone","","",156],[10,"clone_from","","",156],[10,"fmt","","",157],[10,"fmt","","",157],[10,"fmt","","",157],[10,"fmt","","",157],[10,"fmt","","",157],[10,"fmt","","",157],[10,"fmt","","",157],[10,"fmt","","",157],[10,"fmt","","",157],[10,"fmt","","",157],[10,"eq","core::fmt::rt","",158],[10,"ne","","",158],[10,"ne","","",158],[10,"fmt","core::fmt","",159],[10,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a byte-array. The byte-array should *not* contain the sign\nfor the integer, that will be added by this method.",160],[10,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",160],[10,"write","","Writes some data to the underlying buffer contained within this\nformatter.",160],[10,"write_fmt","","Writes some formatted information into this instance",160],[10,"fmt","core::cell","",85],[10,"fmt","","",87],[10,"fmt","","",88],[2,"FPCategory","std::num","Used for representing the classification of floating point numbers"],[12,"FPNaN","","\"Not a Number\", often obtained by dividing by zero",68],[12,"FPInfinite","","Positive or negative infinity",68],[12,"FPZero","","Positive or negative zero",68],[12,"FPSubnormal","","De-normalized floating point representation (less precise than `FPNormal`)",68],[12,"FPNormal","","A regular floating point number",68],[6,"Float","","Operations on primitive floating point numbers."],[9,"nan","","Returns the NaN value.",161],[9,"infinity","","Returns the infinite value.",161],[9,"neg_infinity","","Returns the negative infinite value.",161],[9,"neg_zero","","Returns -0.0.",161],[9,"is_nan","","Returns true if this value is NaN and false otherwise.",161],[9,"is_infinite","","Returns true if this value is positive infinity or negative infinity and\nfalse otherwise.",161],[9,"is_finite","","Returns true if this number is neither infinite nor NaN.",161],[9,"is_normal","","Returns true if this number is neither zero, infinite, denormal, or NaN.",161],[9,"classify","","Returns the category that this number falls into.",161],[9,"mantissa_digits","","Returns the number of binary digits of mantissa that this type supports.",161],[9,"digits","","Returns the number of base-10 digits of precision that this type supports.",161],[9,"epsilon","","Returns the difference between 1.0 and the smallest representable number larger than 1.0.",161],[9,"min_exp","","Returns the minimum binary exponent that this type can represent.",161],[9,"max_exp","","Returns the maximum binary exponent that this type can represent.",161],[9,"min_10_exp","","Returns the minimum base-10 exponent that this type can represent.",161],[9,"max_10_exp","","Returns the maximum base-10 exponent that this type can represent.",161],[9,"min_pos_value","","Returns the smallest normalized positive number that this type can represent.",161],[9,"integer_decode","","Returns the mantissa, exponent and sign as integers, respectively.",161],[9,"floor","","Return the largest integer less than or equal to a number.",161],[9,"ceil","","Return the smallest integer greater than or equal to a number.",161],[9,"round","","Return the nearest integer to a number. Round half-way cases away from\n`0.0`.",161],[9,"trunc","","Return the integer part of a number.",161],[9,"fract","","Return the fractional part of a number.",161],[9,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",161],[9,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",161],[9,"powi","","Raise a number to an integer power.",161],[9,"powf","","Raise a number to a floating point power.",161],[9,"sqrt2","","sqrt(2.0).",161],[9,"frac_1_sqrt2","","1.0 / sqrt(2.0).",161],[9,"sqrt","","Take the square root of a number.",161],[9,"rsqrt","","Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.",161],[9,"pi","","Archimedes' constant.",161],[9,"two_pi","","2.0 * pi.",161],[9,"frac_pi_2","","pi / 2.0.",161],[9,"frac_pi_3","","pi / 3.0.",161],[9,"frac_pi_4","","pi / 4.0.",161],[9,"frac_pi_6","","pi / 6.0.",161],[9,"frac_pi_8","","pi / 8.0.",161],[9,"frac_1_pi","","1.0 / pi.",161],[9,"frac_2_pi","","2.0 / pi.",161],[9,"frac_2_sqrtpi","","2.0 / sqrt(pi).",161],[9,"e","","Euler's number.",161],[9,"log2_e","","log2(e).",161],[9,"log10_e","","log10(e).",161],[9,"ln_2","","ln(2.0).",161],[9,"ln_10","","ln(10.0).",161],[9,"exp","","Returns `e^(self)`, (the exponential function).",161],[9,"exp2","","Returns 2 raised to the power of the number, `2^(self)`.",161],[9,"ln","","Returns the natural logarithm of the number.",161],[9,"log","","Returns the logarithm of the number with respect to an arbitrary base.",161],[9,"log2","","Returns the base 2 logarithm of the number.",161],[9,"log10","","Returns the base 10 logarithm of the number.",161],[9,"to_degrees","","Convert radians to degrees.",161],[9,"to_radians","","Convert degrees to radians.",161],[0,"to_string","std","The `ToString` trait for converting to strings"],[6,"ToString","std::to_string","A generic trait for converting a value to a string"],[9,"to_string","","Converts the value of `self` to an owned string",162],[6,"IntoStr","","Trait for converting a type to a string, consuming it in the process."],[9,"into_string","","Consume and convert to a string.",163],[0,"collections","std","Collection types."],[1,"HashMap","std::collections","A hash map implementation which uses linear probing with Robin\nHood bucket stealing."],[1,"HashSet","","An implementation of a hash set using the underlying representation of a\nHashMap where the value is (). As with the `HashMap` type, a `HashSet`\nrequires that the elements implement the `Eq` and `Hash` traits."],[0,"hashmap","","Unordered containers, implemented as hash-tables"],[1,"HashMap","std::collections::hashmap","A hash map implementation which uses linear probing with Robin\nHood bucket stealing."],[1,"Entries","","HashMap iterator"],[1,"MutEntries","","HashMap mutable values iterator"],[1,"MoveEntries","","HashMap move iterator"],[1,"HashSet","","An implementation of a hash set using the underlying representation of a\nHashMap where the value is (). As with the `HashMap` type, a `HashSet`\nrequires that the elements implement the `Eq` and `Hash` traits."],[10,"clone","std::collections","",164],[10,"len","","Return the number of elements in the map.",164],[10,"clear","","Clear the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",164],[10,"find","","",164],[10,"contains_key","","",164],[10,"find_mut","","",164],[10,"swap","","",164],[10,"pop","","",164],[10,"new","","Create an empty HashMap.",164],[10,"with_capacity","","Creates an empty hash map with the given initial capacity.",164],[10,"with_hasher","","Creates an empty hashmap which will use the given hasher to hash keys.",164],[10,"with_capacity_and_hasher","","Create an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",164],[10,"reserve","","The hashtable will never try to shrink below this size. You can use\nthis function to reduce reallocations if your hashtable frequently\ngrows and shrinks by large amounts.",164],[10,"find_or_insert","","Return the value corresponding to the key in the map, or insert\nand return the value if it doesn't exist.",164],[10,"find_or_insert_with","","Return the value corresponding to the key in the map, or create,\ninsert, and return a new value if it doesn't exist.",164],[10,"insert_or_update_with","","Insert a key-value pair into the map if the key is not already present.\nOtherwise, modify the existing value for the key.\nReturns the new or modified value for the key.",164],[10,"find_with_or_insert_with","","Modify and return the value corresponding to the key in the map, or\ninsert and return a new value if it doesn't exist.",164],[10,"get","","Retrieves a value for the given key.\nSee [`find`](../trait.Map.html#tymethod.find) for a non-failing alternative.",164],[10,"get_mut","","Retrieves a mutable value for the given key.\nSee [`find_mut`](../trait.MutableMap.html#tymethod.find_mut) for a non-failing alternative.",164],[10,"contains_key_equiv","","Return true if the map contains a value for the specified key,\nusing equivalence.",164],[10,"find_equiv","","Return the value corresponding to the key in the map, using\nequivalence.",164],[10,"pop_equiv","","Remove an equivalent key from the map, returning the value at the\nkey if the key was previously in the map.",164],[10,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&'a K`.",164],[10,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&'a V`.",164],[10,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&'a K, &'a V)`.",164],[10,"mut_iter","","Deprecated: use `iter_mut`.",164],[10,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&'a K, &'a mut V)`.",164],[10,"move_iter","","Deprecated: use `into_iter`.",164],[10,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",164],[10,"find_copy","","Return a copy of the value corresponding to the key.",164],[10,"get_copy","","Return a copy of the value corresponding to the key.",164],[10,"eq","","",164],[10,"fmt","","",164],[10,"default","","",164],[10,"index","","",164],[10,"next","std::collections::hashmap","",165],[10,"size_hint","","",165],[10,"next","","",166],[10,"size_hint","","",166],[10,"next","","",167],[10,"size_hint","","",167],[10,"from_iter","std::collections","",164],[10,"extend","","",164],[10,"clone","","",168],[10,"new","","Create an empty HashSet.",168],[10,"with_capacity","","Create an empty HashSet with space for at least `n` elements in\nthe hash table.",168],[10,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",168],[10,"with_capacity_and_hasher","","Create an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",168],[10,"reserve","","Reserve space for at least `n` elements in the hash table.",168],[10,"contains_equiv","","Returns true if the hash set contains a value equivalent to the\ngiven query value.",168],[10,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &'a T.",168],[10,"move_iter","","Deprecated: use `into_iter`.",168],[10,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",168],[10,"difference","","Visit the values representing the difference.",168],[10,"symmetric_difference","","Visit the values representing the symmetric difference.",168],[10,"intersection","","Visit the values representing the intersection.",168],[10,"union","","Visit the values representing the union.",168],[10,"eq","","",168],[10,"len","","",168],[10,"clear","","",168],[10,"contains","","",168],[10,"is_disjoint","","",168],[10,"is_subset","","",168],[10,"insert","","",168],[10,"remove","","",168],[10,"fmt","","",168],[10,"from_iter","","",168],[10,"extend","","",168],[10,"default","","",168],[4,"Keys","std::collections::hashmap","HashMap keys iterator"],[4,"Values","","HashMap values iterator"],[4,"SetItems","","HashSet iterator"],[4,"SetMoveItems","","HashSet move iterator"],[4,"SetAlgebraItems","","Set operations iterator"],[5,"INITIAL_CAPACITY","",""],[0,"lru_cache","std::collections","A cache that holds a limited number of key-value pairs. When the\ncapacity of the cache is exceeded, the least-recently-used\n(where \"used\" means a look-up or putting the pair into the cache)\npair is automatically removed."],[1,"LruCache","std::collections::lru_cache","An LRU Cache."],[10,"new","","Create an LRU Cache that holds at most `capacity` items.",169],[10,"put","","Put a key-value pair into cache.",169],[10,"get","","Return a value corresponding to the key in the cache.",169],[10,"pop","","Remove and return a value corresponding to the key from the cache.",169],[10,"capacity","","Return the maximum number of key-value pairs the cache can hold.",169],[10,"change_capacity","","Change the number of key-value pairs the cache can hold. Remove\nleast-recently-used key-value pairs if necessary.",169],[10,"fmt","","Return a string that lists the key-value pairs from most-recently\nused to least-recently used.",169],[10,"len","","Return the number of key-value pairs in the cache.",169],[10,"clear","","Clear the cache of all key-value pairs.",169],[10,"drop","","",169],[6,"Collection","std::collections","A trait to represent the abstract idea of a container. The only concrete\nknowledge known is the number of elements contained within."],[9,"len","","Return the number of elements in the container",170],[9,"is_empty","","Return true if the container contains no elements",170],[6,"Mutable","","A mutable container type."],[9,"clear","","Clears the container, removing all values.",171],[6,"Map","","A key-value store where values may be looked up by their keys. This trait\nprovides basic operations to operate on these stores."],[9,"find","","Returns a reference to the value corresponding to the key.",172],[9,"contains_key","","Returns true if the map contains a value for the specified key.",172],[6,"MutableMap","","A key-value store (map) where the values can be modified."],[9,"insert","","Inserts a key-value pair into the map. An existing value for a\nkey is replaced by the new value. Returns `true` if the key did\nnot already exist in the map.",173],[9,"remove","","Removes a key-value pair from the map. Returns `true` if the key\nwas present in the map.",173],[9,"swap","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is\nreturned.",173],[9,"pop","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",173],[9,"find_mut","","Returns a mutable reference to the value corresponding to the key.",173],[6,"Set","","A group of objects which are each distinct from one another. This\ntrait represents actions which can be performed on sets to iterate over\nthem."],[9,"contains","","Returns `true` if the set contains a value.",174],[9,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",174],[9,"is_subset","","Returns `true` if the set is a subset of another.",174],[9,"is_superset","","Returns `true` if the set is a superset of another.",174],[6,"MutableSet","","A mutable collection of values which are distinct from one another that\ncan be mutated."],[9,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",175],[9,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",175],[6,"Deque","","A double-ended sequence that allows querying, insertion and deletion at both\nends."],[9,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",176],[9,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",176],[9,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",176],[9,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",176],[9,"push_front","","Inserts an element first in the sequence.",176],[9,"push_back","","Inserts an element last in the sequence.",176],[9,"pop_back","","Removes the last element and returns it, or `None` if the sequence is\nempty.",176],[9,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",176],[6,"MutableSeq","",""],[9,"push","","Appends an element to the back of a collection.",177],[9,"pop","","Removes the last element from a collection and returns it, or `None` if\nit is empty.",177],[10,"new","collections::bitv","Creates an empty `Bitv`.",178],[10,"with_capacity","","Creates a `Bitv` that holds `nbits` elements, setting each element\nto `init`.",178],[10,"get","","Retrieves the value at index `i`.",178],[10,"set","","Sets the value of a bit at a index `i`.",178],[10,"set_all","","Sets all bits to 1.",178],[10,"negate","","Flips all bits.",178],[10,"union","","Calculates the union of two bitvectors. This acts like the bitwise `or`\nfunction.",178],[10,"intersect","","Calculates the intersection of two bitvectors. This acts like the\nbitwise `and` function.",178],[10,"difference","","Calculates the difference between two bitvectors.",178],[10,"all","","Returns `true` if all bits are 1.",178],[10,"iter","","Returns an iterator over the elements of the vector in order.",178],[10,"none","","Returns `true` if all bits are 0.",178],[10,"any","","Returns `true` if any bit is 1.",178],[10,"to_bytes","","Organises the bits into bytes, such that the first bit in the\n`Bitv` becomes the high-order bit of the first byte. If the\nsize of the `Bitv` is not a multiple of eight then trailing bits\nwill be filled-in with `false`.",178],[10,"to_bools","","Transforms `self` into a `Vec<bool>` by turning each bit into a `bool`.",178],[10,"eq_vec","","Compares a `Bitv` to a slice of `bool`s.\nBoth the `Bitv` and slice must have the same length.",178],[10,"truncate","","Shortens a `Bitv`, dropping excess elements.",178],[10,"reserve","","Grows the vector to be able to store `size` bits without resizing.",178],[10,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",178],[10,"grow","","Grows the `Bitv` in-place, adding `n` copies of `value` to the `Bitv`.",178],[10,"pop","","Shortens by one element and returns the removed element.",178],[10,"push","","Pushes a `bool` onto the end.",178],[10,"index","","",178],[10,"default","","",178],[10,"len","","",178],[10,"is_empty","","",178],[10,"clear","","",178],[10,"from_iter","","",178],[10,"extend","","",178],[10,"clone","","",178],[10,"clone_from","","",178],[10,"clone_from","","",178],[10,"partial_cmp","","",178],[10,"lt","","",178],[10,"le","","",178],[10,"gt","","",178],[10,"ge","","",178],[10,"cmp","","",178],[10,"fmt","","",178],[10,"hash","","",178],[10,"eq","","",178],[10,"ne","","",178],[10,"assert_receiver_is_total_eq","","",178],[10,"next","","",179],[10,"size_hint","","",179],[10,"size_hint","","",179],[10,"chain","","",179],[10,"zip","","",179],[10,"map","","",179],[10,"filter","","",179],[10,"filter_map","","",179],[10,"enumerate","","",179],[10,"peekable","","",179],[10,"skip_while","","",179],[10,"take_while","","",179],[10,"skip","","",179],[10,"take","","",179],[10,"scan","","",179],[10,"flat_map","","",179],[10,"fuse","","",179],[10,"inspect","","",179],[10,"by_ref","","",179],[10,"advance","","",179],[10,"collect","","",179],[10,"nth","","",179],[10,"last","","",179],[10,"fold","","",179],[10,"count","","",179],[10,"all","","",179],[10,"any","","",179],[10,"find","","",179],[10,"position","","",179],[10,"max_by","","",179],[10,"min_by","","",179],[10,"next_back","","",179],[10,"rev","","",179],[10,"rposition","","",179],[10,"len","","",179],[10,"indexable","","",179],[10,"idx","","",179],[10,"clone","","",180],[10,"clone_from","","",180],[10,"default","","",180],[10,"from_iter","","",180],[10,"extend","","",180],[10,"partial_cmp","","",180],[10,"lt","","",180],[10,"le","","",180],[10,"gt","","",180],[10,"ge","","",180],[10,"cmp","","",180],[10,"eq","","",180],[10,"ne","","",180],[10,"assert_receiver_is_total_eq","","",180],[10,"new","","Creates a new bit vector set with initially no contents.",180],[10,"with_capacity","","Creates a new bit vector set with initially no contents, able to\nhold `nbits` elements without resizing.",180],[10,"from_bitv","","Creates a new bit vector set from the given bit vector.",180],[10,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",180],[10,"reserve","","Grows the underlying vector to be able to store `size` bits.",180],[10,"unwrap","","Consumes this set to return the underlying bit vector.",180],[10,"get_ref","","Returns a reference to the underlying bit vector.",180],[10,"get_mut_ref","","Returns a mutable reference to the underlying bit vector.",180],[10,"shrink_to_fit","","Truncates the underlying vector to the least length required.",180],[10,"iter","","Iterator over each uint stored in the `BitvSet`.",180],[10,"union","","Iterator over each uint stored in `self` union `other`.\nSee [union_with](#method.union_with) for an efficient in-place version.",180],[10,"intersection","","Iterator over each uint stored in `self` intersect `other`.\nSee [intersect_with](#method.intersect_with) for an efficient in-place version.",180],[10,"difference","","Iterator over each uint stored in the `self` setminus `other`.\nSee [difference_with](#method.difference_with) for an efficient in-place version.",180],[10,"symmetric_difference","","Iterator over each uint stored in the symmetric difference of `self` and `other`.\nSee [symmetric_difference_with](#method.symmetric_difference_with) for\nan efficient in-place version.",180],[10,"union_with","","Unions in-place with the specified other bit vector.",180],[10,"intersect_with","","Intersects in-place with the specified other bit vector.",180],[10,"difference_with","","Makes this bit vector the difference with the specified other bit vector\nin-place.",180],[10,"symmetric_difference_with","","Makes this bit vector the symmetric difference with the specified other\nbit vector in-place.",180],[10,"fmt","","",180],[10,"hash","","",180],[10,"len","","",180],[10,"is_empty","","",180],[10,"clear","","",180],[10,"contains","","",180],[10,"is_disjoint","","",180],[10,"is_subset","","",180],[10,"is_superset","","",180],[10,"is_superset","","",180],[10,"insert","","",180],[10,"remove","","",180],[10,"next","","",181],[10,"size_hint","","",181],[10,"size_hint","","",181],[10,"chain","","",181],[10,"zip","","",181],[10,"map","","",181],[10,"filter","","",181],[10,"filter_map","","",181],[10,"enumerate","","",181],[10,"peekable","","",181],[10,"skip_while","","",181],[10,"take_while","","",181],[10,"skip","","",181],[10,"take","","",181],[10,"scan","","",181],[10,"flat_map","","",181],[10,"fuse","","",181],[10,"inspect","","",181],[10,"by_ref","","",181],[10,"advance","","",181],[10,"collect","","",181],[10,"nth","","",181],[10,"last","","",181],[10,"fold","","",181],[10,"count","","",181],[10,"all","","",181],[10,"any","","",181],[10,"find","","",181],[10,"position","","",181],[10,"max_by","","",181],[10,"min_by","","",181],[10,"next","","",182],[10,"size_hint","","",182],[10,"size_hint","","",182],[10,"chain","","",182],[10,"zip","","",182],[10,"map","","",182],[10,"filter","","",182],[10,"filter_map","","",182],[10,"enumerate","","",182],[10,"peekable","","",182],[10,"skip_while","","",182],[10,"take_while","","",182],[10,"skip","","",182],[10,"take","","",182],[10,"scan","","",182],[10,"flat_map","","",182],[10,"fuse","","",182],[10,"inspect","","",182],[10,"by_ref","","",182],[10,"advance","","",182],[10,"collect","","",182],[10,"nth","","",182],[10,"last","","",182],[10,"fold","","",182],[10,"count","","",182],[10,"all","","",182],[10,"any","","",182],[10,"find","","",182],[10,"position","","",182],[10,"max_by","","",182],[10,"min_by","","",182],[10,"new","collections::btree","Returns new `BTree` with root node (leaf) and user-supplied lower bound\nThe lower bound applies to every node except the root node.",183],[10,"get","","Returns the value of a given key, which may not exist in the tree.\nCalls the root node's get method.",183],[10,"insert","","An insert method that uses the `clone` method for support.",183],[10,"clone","","",183],[10,"clone_from","","",183],[10,"eq","","",183],[10,"ne","","",183],[10,"assert_receiver_is_total_eq","","",183],[10,"partial_cmp","","",183],[10,"lt","","",183],[10,"le","","",183],[10,"gt","","",183],[10,"ge","","",183],[10,"cmp","","Returns an ordering based on the root nodes of each `BTree`.",183],[10,"fmt","","Returns a string representation of the `BTree`.",183],[10,"clone","","Returns a new `Node` based on whether or not it is a branch or a leaf.",184],[10,"clone_from","","",184],[10,"eq","","",184],[10,"ne","","",184],[10,"assert_receiver_is_total_eq","","",184],[10,"partial_cmp","","",184],[10,"lt","","",184],[10,"le","","",184],[10,"gt","","",184],[10,"ge","","",184],[10,"cmp","","Implementation of `Ord` for `Node`s.",184],[10,"fmt","","Returns a string representation of a `Node`.\nWill iterate over the Node and show `Key: x, value: y, child: ()`\nfor all elements in the `Node`. `child` only exists if the `Node` contains\na branch.",184],[10,"clone","","Returns a new `Leaf` with the same elts.",185],[10,"clone_from","","",185],[10,"eq","","",185],[10,"ne","","",185],[10,"assert_receiver_is_total_eq","","",185],[10,"partial_cmp","","",185],[10,"lt","","",185],[10,"le","","",185],[10,"gt","","",185],[10,"ge","","",185],[10,"cmp","","Returns an ordering based on the first element of each `Leaf`.",185],[10,"fmt","","Returns a string representation of a `Leaf`.",185],[10,"clone","","Returns a new branch using the clone methods of the `Branch`'s internal variables.",186],[10,"clone_from","","",186],[10,"eq","","",186],[10,"ne","","",186],[10,"assert_receiver_is_total_eq","","",186],[10,"partial_cmp","","",186],[10,"lt","","",186],[10,"le","","",186],[10,"gt","","",186],[10,"ge","","",186],[10,"cmp","","Compares the first elements of two `Branch`es to determine an\n`Ordering`.",186],[10,"fmt","","Returns a string representation of a `Branch`.",186],[10,"clone","","Returns a new `LeafElt` by cloning the key and value.",187],[10,"clone_from","","",187],[10,"eq","","",187],[10,"ne","","",187],[10,"assert_receiver_is_total_eq","","",187],[10,"partial_cmp","","",187],[10,"lt","","",187],[10,"le","","",187],[10,"gt","","",187],[10,"ge","","",187],[10,"cmp","","Returns an ordering based on the keys of the `LeafElt`s.",187],[10,"fmt","","Returns a string representation of a `LeafElt`.",187],[10,"clone","","Returns a new `BranchElt` by cloning the key, value, and left child.",188],[10,"clone_from","","",188],[10,"eq","","",188],[10,"ne","","",188],[10,"assert_receiver_is_total_eq","","",188],[10,"partial_cmp","","",188],[10,"lt","","",188],[10,"le","","",188],[10,"gt","","",188],[10,"ge","","",188],[10,"cmp","","Fulfills `Ord` for `BranchElts`.",188],[10,"fmt","","Formats as a string containing the key, value, and child (which should recur to a\nleaf). Consider changing in future to be more readable.",188],[10,"clone","collections::dlist","",189],[10,"clone_from","","",189],[10,"clone","","",190],[10,"clone_from","","",190],[10,"clone","","",191],[10,"clone_from","","",191],[10,"is_empty","","Returns `true` if the `DList` is empty.",192],[10,"len","","Returns the length of the `DList`.",192],[10,"is_empty","","",192],[10,"clear","","Removes all elements from the `DList`.",192],[10,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",192],[10,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",192],[10,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",192],[10,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",192],[10,"push_front","","Adds an element first in the list.",192],[10,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",192],[10,"push_back","","",192],[10,"pop_back","","",192],[10,"push","","",192],[10,"pop","","",192],[10,"default","","",192],[10,"new","","Creates an empty `DList`.",192],[10,"rotate_forward","","Moves the last element to the front of the list.",192],[10,"rotate_backward","","Moves the first element to the back of the list.",192],[10,"append","","Adds all elements from `other` to the end of the list.",192],[10,"prepend","","Adds all elements from `other` to the beginning of the list.",192],[10,"insert_when","","Inserts `elt` before the first `x` in the list where `f(x, elt)` is\ntrue, or at the end.",192],[10,"merge","","Merges `other` into this `DList`, using the function `f`.",192],[10,"iter","","Provides a forward iterator.",192],[10,"mut_iter","","Deprecated: use `iter_mut`.",192],[10,"iter_mut","","Provides a forward iterator with mutable references.",192],[10,"move_iter","","Deprecated: use `into_iter`.",192],[10,"into_iter","","Consumes the list into an iterator yielding elements by value.",192],[10,"insert_ordered","","Inserts `elt` sorted in ascending order.",192],[10,"drop","","",192],[10,"next","","",189],[10,"size_hint","","",189],[10,"size_hint","","",189],[10,"chain","","",189],[10,"zip","","",189],[10,"map","","",189],[10,"filter","","",189],[10,"filter_map","","",189],[10,"enumerate","","",189],[10,"peekable","","",189],[10,"skip_while","","",189],[10,"take_while","","",189],[10,"skip","","",189],[10,"take","","",189],[10,"scan","","",189],[10,"flat_map","","",189],[10,"fuse","","",189],[10,"inspect","","",189],[10,"by_ref","","",189],[10,"advance","","",189],[10,"collect","","",189],[10,"nth","","",189],[10,"last","","",189],[10,"fold","","",189],[10,"count","","",189],[10,"all","","",189],[10,"any","","",189],[10,"find","","",189],[10,"position","","",189],[10,"max_by","","",189],[10,"min_by","","",189],[10,"next_back","","",189],[10,"rev","","",189],[10,"rposition","","",189],[10,"len","","",189],[10,"next","","",193],[10,"size_hint","","",193],[10,"size_hint","","",193],[10,"chain","","",193],[10,"zip","","",193],[10,"map","","",193],[10,"filter","","",193],[10,"filter_map","","",193],[10,"enumerate","","",193],[10,"peekable","","",193],[10,"skip_while","","",193],[10,"take_while","","",193],[10,"skip","","",193],[10,"take","","",193],[10,"scan","","",193],[10,"flat_map","","",193],[10,"fuse","","",193],[10,"inspect","","",193],[10,"by_ref","","",193],[10,"advance","","",193],[10,"collect","","",193],[10,"nth","","",193],[10,"last","","",193],[10,"fold","","",193],[10,"count","","",193],[10,"all","","",193],[10,"any","","",193],[10,"find","","",193],[10,"position","","",193],[10,"max_by","","",193],[10,"min_by","","",193],[10,"next_back","","",193],[10,"rev","","",193],[10,"rposition","","",193],[10,"len","","",193],[10,"insert_next","","",193],[10,"peek_next","","",193],[10,"next","","",190],[10,"size_hint","","",190],[10,"size_hint","","",190],[10,"chain","","",190],[10,"zip","","",190],[10,"map","","",190],[10,"filter","","",190],[10,"filter_map","","",190],[10,"enumerate","","",190],[10,"peekable","","",190],[10,"skip_while","","",190],[10,"take_while","","",190],[10,"skip","","",190],[10,"take","","",190],[10,"scan","","",190],[10,"flat_map","","",190],[10,"fuse","","",190],[10,"inspect","","",190],[10,"by_ref","","",190],[10,"advance","","",190],[10,"collect","","",190],[10,"nth","","",190],[10,"last","","",190],[10,"fold","","",190],[10,"count","","",190],[10,"all","","",190],[10,"any","","",190],[10,"find","","",190],[10,"position","","",190],[10,"max_by","","",190],[10,"min_by","","",190],[10,"next_back","","",190],[10,"rev","","",190],[10,"from_iter","","",192],[10,"extend","","",192],[10,"eq","","",192],[10,"ne","","",192],[10,"ne","","",192],[10,"assert_receiver_is_total_eq","","",192],[10,"partial_cmp","","",192],[10,"lt","","",192],[10,"le","","",192],[10,"gt","","",192],[10,"ge","","",192],[10,"cmp","","",192],[10,"clone","","",192],[10,"clone_from","","",192],[10,"fmt","","",192],[10,"hash","","",192],[10,"hash","collections::enum_set","",194],[10,"assert_receiver_is_total_eq","","",194],[10,"eq","","",194],[10,"ne","","",194],[10,"ne","","",194],[10,"clone","","",194],[10,"clone_from","","",194],[10,"fmt","","",194],[10,"empty","","Returns an empty `EnumSet`.",194],[10,"is_empty","","Returns true if the `EnumSet` is empty.",194],[10,"intersects","","Returns `true` if the `EnumSet` contains any enum of the given `EnumSet`.",194],[10,"intersection","","Returns the intersection of both `EnumSets`.",194],[10,"contains","","Returns `true` if a given `EnumSet` is included in an `EnumSet`.",194],[10,"union","","Returns the union of both `EnumSets`.",194],[10,"add","","Adds an enum to an `EnumSet`.",194],[10,"contains_elem","","Returns `true` if an `EnumSet` contains a given enum.",194],[10,"iter","","Returns an iterator over an `EnumSet`.",194],[10,"sub","","",194],[10,"bitor","","",194],[10,"bitand","","",194],[10,"next","","",195],[10,"size_hint","","",195],[10,"size_hint","","",195],[10,"chain","","",195],[10,"zip","","",195],[10,"map","","",195],[10,"filter","","",195],[10,"filter_map","","",195],[10,"enumerate","","",195],[10,"peekable","","",195],[10,"skip_while","","",195],[10,"take_while","","",195],[10,"skip","","",195],[10,"take","","",195],[10,"scan","","",195],[10,"flat_map","","",195],[10,"fuse","","",195],[10,"inspect","","",195],[10,"by_ref","","",195],[10,"advance","","",195],[10,"collect","","",195],[10,"nth","","",195],[10,"last","","",195],[10,"fold","","",195],[10,"count","","",195],[10,"all","","",195],[10,"any","","",195],[10,"find","","",195],[10,"position","","",195],[10,"max_by","","",195],[10,"min_by","","",195],[10,"clone","collections::priority_queue","",196],[10,"clone_from","","",196],[10,"len","","Returns the length of the queue.",196],[10,"is_empty","","",196],[10,"clear","","Drops all items from the queue.",196],[10,"default","","",196],[10,"new","","Creates an empty `PriorityQueue` as a max-heap.",196],[10,"with_capacity","","Creates an empty `PriorityQueue` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `PriorityQueue` does not have to be reallocated\nuntil it contains at least that many values.",196],[10,"from_vec","","Creates a `PriorityQueue` from a vector. This is sometimes called\n`heapifying` the vector.",196],[10,"iter","","An iterator visiting all values in underlying vector, in\narbitrary order.",196],[10,"top","","Returns the greatest item in a queue, or `None` if it is empty.",196],[10,"maybe_top","","",196],[10,"capacity","","Returns the number of elements the queue can hold without reallocating.",196],[10,"reserve_exact","","Reserves capacity for exactly `n` elements in the `PriorityQueue`.\nDo nothing if the capacity is already sufficient.",196],[10,"reserve","","Reserves capacity for at least `n` elements in the `PriorityQueue`.\nDo nothing if the capacity is already sufficient.",196],[10,"pop","","Removes the greatest item from a queue and returns it, or `None` if it\nis empty.",196],[10,"maybe_pop","","",196],[10,"push","","Pushes an item onto the queue.",196],[10,"push_pop","","Pushes an item onto a queue then pops the greatest item off the queue in\nan optimized fashion.",196],[10,"replace","","Pops the greatest item off a queue then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the queue\nwas empty.",196],[10,"into_vec","","Consumes the `PriorityQueue` and returns the underlying vector\nin arbitrary order.",196],[10,"into_sorted_vec","","Consumes the `PriorityQueue` and returns a vector in sorted\n(ascending) order.",196],[10,"next","","",197],[10,"size_hint","","",197],[10,"size_hint","","",197],[10,"chain","","",197],[10,"zip","","",197],[10,"map","","",197],[10,"filter","","",197],[10,"filter_map","","",197],[10,"enumerate","","",197],[10,"peekable","","",197],[10,"skip_while","","",197],[10,"take_while","","",197],[10,"skip","","",197],[10,"take","","",197],[10,"scan","","",197],[10,"flat_map","","",197],[10,"fuse","","",197],[10,"inspect","","",197],[10,"by_ref","","",197],[10,"advance","","",197],[10,"collect","","",197],[10,"nth","","",197],[10,"last","","",197],[10,"fold","","",197],[10,"count","","",197],[10,"all","","",197],[10,"any","","",197],[10,"find","","",197],[10,"position","","",197],[10,"max_by","","",197],[10,"min_by","","",197],[10,"from_iter","","",196],[10,"extend","","",196],[10,"clone","collections::ringbuf","",198],[10,"clone_from","","",198],[10,"len","","Returns the number of elements in the `RingBuf`.",198],[10,"is_empty","","",198],[10,"clear","","Clears the `RingBuf`, removing all values.",198],[10,"front","","Returns a reference to the first element in the `RingBuf`.",198],[10,"front_mut","","Returns a mutable reference to the first element in the `RingBuf`.",198],[10,"back","","Returns a reference to the last element in the `RingBuf`.",198],[10,"back_mut","","Returns a mutable reference to the last element in the `RingBuf`.",198],[10,"pop_front","","Removes and returns the first element in the `RingBuf`, or `None` if it\nis empty.",198],[10,"push_front","","Prepends an element to the `RingBuf`.",198],[10,"push_back","","",198],[10,"pop_back","","",198],[10,"push","","",198],[10,"pop","","",198],[10,"default","","",198],[10,"new","","Creates an empty `RingBuf`.",198],[10,"with_capacity","","Creates an empty `RingBuf` with space for at least `n` elements.",198],[10,"get","","Retrieve an element in the `RingBuf` by index.",198],[10,"get_mut","","Retrieves an element in the `RingBuf` by index.",198],[10,"swap","","Swaps elements at indices `i` and `j`.",198],[10,"reserve_exact","","Reserves capacity for exactly `n` elements in the given `RingBuf`,\ndoing nothing if `self`'s capacity is already equal to or greater\nthan the requested capacity.",198],[10,"reserve","","Reserves capacity for at least `n` elements in the given `RingBuf`,\nover-allocating in case the caller needs to reserve additional\nspace.",198],[10,"iter","","Returns a front-to-back iterator.",198],[10,"mut_iter","","Deprecated: use `iter_mut`",198],[10,"iter_mut","","Returns a front-to-back iterator which returns mutable references.",198],[10,"next","","",199],[10,"size_hint","","",199],[10,"size_hint","","",199],[10,"chain","","",199],[10,"zip","","",199],[10,"map","","",199],[10,"filter","","",199],[10,"filter_map","","",199],[10,"enumerate","","",199],[10,"peekable","","",199],[10,"skip_while","","",199],[10,"take_while","","",199],[10,"skip","","",199],[10,"take","","",199],[10,"scan","","",199],[10,"flat_map","","",199],[10,"fuse","","",199],[10,"inspect","","",199],[10,"by_ref","","",199],[10,"advance","","",199],[10,"collect","","",199],[10,"nth","","",199],[10,"last","","",199],[10,"fold","","",199],[10,"count","","",199],[10,"all","","",199],[10,"any","","",199],[10,"find","","",199],[10,"position","","",199],[10,"max_by","","",199],[10,"min_by","","",199],[10,"next_back","","",199],[10,"rev","","",199],[10,"rposition","","",199],[10,"len","","",199],[10,"indexable","","",199],[10,"idx","","",199],[10,"next","","",200],[10,"size_hint","","",200],[10,"size_hint","","",200],[10,"chain","","",200],[10,"zip","","",200],[10,"map","","",200],[10,"filter","","",200],[10,"filter_map","","",200],[10,"enumerate","","",200],[10,"peekable","","",200],[10,"skip_while","","",200],[10,"take_while","","",200],[10,"skip","","",200],[10,"take","","",200],[10,"scan","","",200],[10,"flat_map","","",200],[10,"fuse","","",200],[10,"inspect","","",200],[10,"by_ref","","",200],[10,"advance","","",200],[10,"collect","","",200],[10,"nth","","",200],[10,"last","","",200],[10,"fold","","",200],[10,"count","","",200],[10,"all","","",200],[10,"any","","",200],[10,"find","","",200],[10,"position","","",200],[10,"max_by","","",200],[10,"min_by","","",200],[10,"next_back","","",200],[10,"rev","","",200],[10,"rposition","","",200],[10,"len","","",200],[10,"eq","","",198],[10,"ne","","",198],[10,"ne","","",198],[10,"assert_receiver_is_total_eq","","",198],[10,"partial_cmp","","",198],[10,"lt","","",198],[10,"le","","",198],[10,"gt","","",198],[10,"ge","","",198],[10,"cmp","","",198],[10,"hash","","",198],[10,"index","","",198],[10,"from_iter","","",198],[10,"extend","","",198],[10,"fmt","","",198],[10,"assert_receiver_is_total_eq","collections::smallintmap","",201],[10,"eq","","",201],[10,"ne","","",201],[10,"ne","","",201],[10,"len","","Returns the number of elements in the map.",201],[10,"is_empty","","Returns`true` if there are no elements in the map.",201],[10,"is_empty","","",201],[10,"clear","","Clears the map, removing all key-value pairs.",201],[10,"find","","Returns a reference to the value corresponding to the key.",201],[10,"contains_key","","",201],[10,"find_mut","","Returns a mutable reference to the value corresponding to the key.",201],[10,"insert","","Inserts a key-value pair into the map. An existing value for a\nkey is replaced by the new value. Returns `true` if the key did\nnot already exist in the map.",201],[10,"remove","","Removes a key-value pair from the map. Returns `true` if the key\nwas present in the map.",201],[10,"swap","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise `None` is returned.",201],[10,"pop","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",201],[10,"insert","","",201],[10,"remove","","",201],[10,"default","","",201],[10,"clone","","",201],[10,"clone_from","","",201],[10,"clone_from","","",201],[10,"hash","","",201],[10,"new","","Creates an empty `SmallIntMap`.",201],[10,"with_capacity","","Creates an empty `SmallIntMap` with space for at least `capacity`\nelements before resizing.",201],[10,"get","","Retrieves a value for the given key.\nSee [`find`](../trait.Map.html#tymethod.find) for a non-failing alternative.",201],[10,"keys","","Returns an iterator visiting all keys in ascending order by the keys.\nThe iterator's element type is `uint`.",201],[10,"values","","Returns an iterator visiting all values in ascending order by the keys.\nThe iterator's element type is `&'r V`.",201],[10,"iter","","Returns an iterator visiting all key-value pairs in ascending order by the keys.\nThe iterator's element type is `(uint, &'r V)`.",201],[10,"mut_iter","","Deprecated: use `iter_mut`",201],[10,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order by the keys,\nwith mutable references to the values.\nThe iterator's element type is `(uint, &'r mut V)`.",201],[10,"move_iter","","Deprecated: use `into_iter` instead.",201],[10,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order by\nthe keys, emptying (but not consuming) the original `SmallIntMap`.\nThe iterator's element type is `(uint, &'r V)`.",201],[10,"update","","Updates a value in the map. If the key already exists in the map,\nmodifies the value with `ff` taking `oldval, newval`.\nOtherwise, sets the value to `newval`.\nReturns `true` if the key did not already exist in the map.",201],[10,"update_with_key","","Updates a value in the map. If the key already exists in the map,\nmodifies the value with `ff` taking `key, oldval, newval`.\nOtherwise, sets the value to `newval`.\nReturns `true` if the key did not already exist in the map.",201],[10,"partial_cmp","","",201],[10,"lt","","",201],[10,"le","","",201],[10,"gt","","",201],[10,"ge","","",201],[10,"cmp","","",201],[10,"fmt","","",201],[10,"from_iter","","",201],[10,"extend","","",201],[10,"index","","",201],[10,"next","","",202],[10,"size_hint","","",202],[10,"size_hint","","",202],[10,"chain","","",202],[10,"zip","","",202],[10,"map","","",202],[10,"filter","","",202],[10,"filter_map","","",202],[10,"enumerate","","",202],[10,"peekable","","",202],[10,"skip_while","","",202],[10,"take_while","","",202],[10,"skip","","",202],[10,"take","","",202],[10,"scan","","",202],[10,"flat_map","","",202],[10,"fuse","","",202],[10,"inspect","","",202],[10,"by_ref","","",202],[10,"advance","","",202],[10,"collect","","",202],[10,"nth","","",202],[10,"last","","",202],[10,"fold","","",202],[10,"count","","",202],[10,"all","","",202],[10,"any","","",202],[10,"find","","",202],[10,"position","","",202],[10,"max_by","","",202],[10,"min_by","","",202],[10,"next_back","","",202],[10,"rev","","",202],[10,"next","","",203],[10,"size_hint","","",203],[10,"size_hint","","",203],[10,"chain","","",203],[10,"zip","","",203],[10,"map","","",203],[10,"filter","","",203],[10,"filter_map","","",203],[10,"enumerate","","",203],[10,"peekable","","",203],[10,"skip_while","","",203],[10,"take_while","","",203],[10,"skip","","",203],[10,"take","","",203],[10,"scan","","",203],[10,"flat_map","","",203],[10,"fuse","","",203],[10,"inspect","","",203],[10,"by_ref","","",203],[10,"advance","","",203],[10,"collect","","",203],[10,"nth","","",203],[10,"last","","",203],[10,"fold","","",203],[10,"count","","",203],[10,"all","","",203],[10,"any","","",203],[10,"find","","",203],[10,"position","","",203],[10,"max_by","","",203],[10,"min_by","","",203],[10,"next_back","","",203],[10,"rev","","",203],[10,"clone","collections::treemap","",204],[10,"clone_from","","",204],[10,"eq","","",204],[10,"ne","","",204],[10,"assert_receiver_is_total_eq","","",204],[10,"partial_cmp","","",204],[10,"lt","","",204],[10,"le","","",204],[10,"gt","","",204],[10,"ge","","",204],[10,"cmp","","",204],[10,"fmt","","",204],[10,"len","","",204],[10,"is_empty","","",204],[10,"clear","","",204],[10,"find","","",204],[10,"contains_key","","",204],[10,"find_mut","","",204],[10,"swap","","",204],[10,"pop","","",204],[10,"insert","","",204],[10,"remove","","",204],[10,"default","","",204],[10,"index","","",204],[10,"new","","Creates an empty `TreeMap`.",204],[10,"keys","","Gets a lazy iterator over the keys in the map, in ascending order.",204],[10,"values","","Gets a lazy iterator over the values in the map, in ascending order\nwith respect to the corresponding keys.",204],[10,"iter","","Gets a lazy iterator over the key-value pairs in the map, in ascending order.",204],[10,"rev_iter","","Gets a lazy reverse iterator over the key-value pairs in the map, in descending order.",204],[10,"mut_iter","","Deprecated: use `iter_mut`.",204],[10,"iter_mut","","Gets a lazy forward iterator over the key-value pairs in the\nmap, with the values being mutable.",204],[10,"mut_rev_iter","","Deprecated: use `rev_iter_mut`.",204],[10,"rev_iter_mut","","Gets a lazy reverse iterator over the key-value pairs in the\nmap, with the values being mutable.",204],[10,"move_iter","","Deprecated: use `into_iter`.",204],[10,"into_iter","","Gets a lazy iterator that consumes the treemap.",204],[10,"find_with","","Returns the value for which `f(key)` returns `Equal`. `f` is invoked\nwith current key and guides tree navigation. That means `f` should\nbe aware of natural ordering of the tree.",204],[10,"find_mut_with","","Deprecated: use `find_with_mut`.",204],[10,"find_with_mut","","Returns the value for which `f(key)` returns `Equal`. `f` is invoked\nwith current key and guides tree navigation. That means `f` should\nbe aware of natural ordering of the tree.",204],[10,"lower_bound","","Returns a lazy iterator to the first key-value pair whose key is not less than `k`\nIf all keys in map are less than `k` an empty iterator is returned.",204],[10,"upper_bound","","Returns a lazy iterator to the first key-value pair whose key is greater than `k`\nIf all keys in map are less than or equal to `k` an empty iterator is returned.",204],[10,"mut_lower_bound","","Deprecated: use `lower_bound_mut`.",204],[10,"lower_bound_mut","","Returns a lazy value iterator to the first key-value pair (with\nthe value being mutable) whose key is not less than `k`.",204],[10,"mut_upper_bound","","Deprecated: use `upper_bound_mut`.",204],[10,"upper_bound_mut","","Returns a lazy iterator to the first key-value pair (with the\nvalue being mutable) whose key is greater than `k`.",204],[10,"next","","Advances the iterator to the next node (in order) and return a\ntuple with a reference to the key and value. If there are no\nmore nodes, return `None`.",205],[10,"size_hint","","",205],[10,"size_hint","","",205],[10,"chain","","",205],[10,"zip","","",205],[10,"map","","",205],[10,"filter","","",205],[10,"filter_map","","",205],[10,"enumerate","","",205],[10,"peekable","","",205],[10,"skip_while","","",205],[10,"take_while","","",205],[10,"skip","","",205],[10,"take","","",205],[10,"scan","","",205],[10,"flat_map","","",205],[10,"fuse","","",205],[10,"inspect","","",205],[10,"by_ref","","",205],[10,"advance","","",205],[10,"collect","","",205],[10,"nth","","",205],[10,"last","","",205],[10,"fold","","",205],[10,"count","","",205],[10,"all","","",205],[10,"any","","",205],[10,"find","","",205],[10,"position","","",205],[10,"max_by","","",205],[10,"min_by","","",205],[10,"next","","",206],[10,"size_hint","","",206],[10,"size_hint","","",206],[10,"chain","","",206],[10,"zip","","",206],[10,"map","","",206],[10,"filter","","",206],[10,"filter_map","","",206],[10,"enumerate","","",206],[10,"peekable","","",206],[10,"skip_while","","",206],[10,"take_while","","",206],[10,"skip","","",206],[10,"take","","",206],[10,"scan","","",206],[10,"flat_map","","",206],[10,"fuse","","",206],[10,"inspect","","",206],[10,"by_ref","","",206],[10,"advance","","",206],[10,"collect","","",206],[10,"nth","","",206],[10,"last","","",206],[10,"fold","","",206],[10,"count","","",206],[10,"all","","",206],[10,"any","","",206],[10,"find","","",206],[10,"position","","",206],[10,"max_by","","",206],[10,"min_by","","",206],[10,"next","","Advances the iterator to the next node (in order) and return a\ntuple with a reference to the key and value. If there are no\nmore nodes, return `None`.",207],[10,"size_hint","","",207],[10,"size_hint","","",207],[10,"chain","","",207],[10,"zip","","",207],[10,"map","","",207],[10,"filter","","",207],[10,"filter_map","","",207],[10,"enumerate","","",207],[10,"peekable","","",207],[10,"skip_while","","",207],[10,"take_while","","",207],[10,"skip","","",207],[10,"take","","",207],[10,"scan","","",207],[10,"flat_map","","",207],[10,"fuse","","",207],[10,"inspect","","",207],[10,"by_ref","","",207],[10,"advance","","",207],[10,"collect","","",207],[10,"nth","","",207],[10,"last","","",207],[10,"fold","","",207],[10,"count","","",207],[10,"all","","",207],[10,"any","","",207],[10,"find","","",207],[10,"position","","",207],[10,"max_by","","",207],[10,"min_by","","",207],[10,"next","","",208],[10,"size_hint","","",208],[10,"size_hint","","",208],[10,"chain","","",208],[10,"zip","","",208],[10,"map","","",208],[10,"filter","","",208],[10,"filter_map","","",208],[10,"enumerate","","",208],[10,"peekable","","",208],[10,"skip_while","","",208],[10,"take_while","","",208],[10,"skip","","",208],[10,"take","","",208],[10,"scan","","",208],[10,"flat_map","","",208],[10,"fuse","","",208],[10,"inspect","","",208],[10,"by_ref","","",208],[10,"advance","","",208],[10,"collect","","",208],[10,"nth","","",208],[10,"last","","",208],[10,"fold","","",208],[10,"count","","",208],[10,"all","","",208],[10,"any","","",208],[10,"find","","",208],[10,"position","","",208],[10,"max_by","","",208],[10,"min_by","","",208],[10,"next","","",209],[10,"size_hint","","",209],[10,"size_hint","","",209],[10,"chain","","",209],[10,"zip","","",209],[10,"map","","",209],[10,"filter","","",209],[10,"filter_map","","",209],[10,"enumerate","","",209],[10,"peekable","","",209],[10,"skip_while","","",209],[10,"take_while","","",209],[10,"skip","","",209],[10,"take","","",209],[10,"scan","","",209],[10,"flat_map","","",209],[10,"fuse","","",209],[10,"inspect","","",209],[10,"by_ref","","",209],[10,"advance","","",209],[10,"collect","","",209],[10,"nth","","",209],[10,"last","","",209],[10,"fold","","",209],[10,"count","","",209],[10,"all","","",209],[10,"any","","",209],[10,"find","","",209],[10,"position","","",209],[10,"max_by","","",209],[10,"min_by","","",209],[10,"next","","",210],[10,"size_hint","","",210],[10,"chain","","",210],[10,"zip","","",210],[10,"map","","",210],[10,"filter","","",210],[10,"filter_map","","",210],[10,"enumerate","","",210],[10,"peekable","","",210],[10,"skip_while","","",210],[10,"take_while","","",210],[10,"skip","","",210],[10,"take","","",210],[10,"scan","","",210],[10,"flat_map","","",210],[10,"fuse","","",210],[10,"inspect","","",210],[10,"by_ref","","",210],[10,"advance","","",210],[10,"collect","","",210],[10,"nth","","",210],[10,"last","","",210],[10,"fold","","",210],[10,"count","","",210],[10,"all","","",210],[10,"any","","",210],[10,"find","","",210],[10,"position","","",210],[10,"max_by","","",210],[10,"min_by","","",210],[10,"next","","",211],[10,"size_hint","","",211],[10,"chain","","",211],[10,"zip","","",211],[10,"map","","",211],[10,"filter","","",211],[10,"filter_map","","",211],[10,"enumerate","","",211],[10,"peekable","","",211],[10,"skip_while","","",211],[10,"take_while","","",211],[10,"skip","","",211],[10,"take","","",211],[10,"scan","","",211],[10,"flat_map","","",211],[10,"fuse","","",211],[10,"inspect","","",211],[10,"by_ref","","",211],[10,"advance","","",211],[10,"collect","","",211],[10,"nth","","",211],[10,"last","","",211],[10,"fold","","",211],[10,"count","","",211],[10,"all","","",211],[10,"any","","",211],[10,"find","","",211],[10,"position","","",211],[10,"max_by","","",211],[10,"min_by","","",211],[10,"clone","","",212],[10,"clone_from","","",212],[10,"eq","","",212],[10,"ne","","",212],[10,"assert_receiver_is_total_eq","","",212],[10,"partial_cmp","","",212],[10,"lt","","",212],[10,"le","","",212],[10,"gt","","",212],[10,"ge","","",212],[10,"cmp","","",212],[10,"fmt","","",212],[10,"len","","",212],[10,"is_empty","","",212],[10,"clear","","",212],[10,"contains","","",212],[10,"is_disjoint","","",212],[10,"is_subset","","",212],[10,"is_superset","","",212],[10,"insert","","",212],[10,"remove","","",212],[10,"default","","",212],[10,"new","","Creates an empty `TreeSet`.",212],[10,"iter","","Gets a lazy iterator over the values in the set, in ascending order.",212],[10,"rev_iter","","Gets a lazy iterator over the values in the set, in descending order.",212],[10,"move_iter","","Deprecated: use `into_iter`.",212],[10,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the\nset in ascending order. The set cannot be used after calling this.",212],[10,"lower_bound","","Gets a lazy iterator pointing to the first value not less than `v` (greater or equal).\nIf all elements in the set are less than `v` empty iterator is returned.",212],[10,"upper_bound","","Gets a lazy iterator pointing to the first value greater than `v`.\nIf all elements in the set are less than or equal to `v` an\nempty iterator is returned.",212],[10,"difference","","Visits the values representing the difference, in ascending order.",212],[10,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",212],[10,"intersection","","Visits the values representing the intersection, in ascending order.",212],[10,"union","","Visits the values representing the union, in ascending order.",212],[10,"next","","",213],[10,"size_hint","","",213],[10,"chain","","",213],[10,"zip","","",213],[10,"map","","",213],[10,"filter","","",213],[10,"filter_map","","",213],[10,"enumerate","","",213],[10,"peekable","","",213],[10,"skip_while","","",213],[10,"take_while","","",213],[10,"skip","","",213],[10,"take","","",213],[10,"scan","","",213],[10,"flat_map","","",213],[10,"fuse","","",213],[10,"inspect","","",213],[10,"by_ref","","",213],[10,"advance","","",213],[10,"collect","","",213],[10,"nth","","",213],[10,"last","","",213],[10,"fold","","",213],[10,"count","","",213],[10,"all","","",213],[10,"any","","",213],[10,"find","","",213],[10,"position","","",213],[10,"max_by","","",213],[10,"min_by","","",213],[10,"next","","",214],[10,"size_hint","","",214],[10,"chain","","",214],[10,"zip","","",214],[10,"map","","",214],[10,"filter","","",214],[10,"filter_map","","",214],[10,"enumerate","","",214],[10,"peekable","","",214],[10,"skip_while","","",214],[10,"take_while","","",214],[10,"skip","","",214],[10,"take","","",214],[10,"scan","","",214],[10,"flat_map","","",214],[10,"fuse","","",214],[10,"inspect","","",214],[10,"by_ref","","",214],[10,"advance","","",214],[10,"collect","","",214],[10,"nth","","",214],[10,"last","","",214],[10,"fold","","",214],[10,"count","","",214],[10,"all","","",214],[10,"any","","",214],[10,"find","","",214],[10,"position","","",214],[10,"max_by","","",214],[10,"min_by","","",214],[10,"next","","",215],[10,"size_hint","","",215],[10,"chain","","",215],[10,"zip","","",215],[10,"map","","",215],[10,"filter","","",215],[10,"filter_map","","",215],[10,"enumerate","","",215],[10,"peekable","","",215],[10,"skip_while","","",215],[10,"take_while","","",215],[10,"skip","","",215],[10,"take","","",215],[10,"scan","","",215],[10,"flat_map","","",215],[10,"fuse","","",215],[10,"inspect","","",215],[10,"by_ref","","",215],[10,"advance","","",215],[10,"collect","","",215],[10,"nth","","",215],[10,"last","","",215],[10,"fold","","",215],[10,"count","","",215],[10,"all","","",215],[10,"any","","",215],[10,"find","","",215],[10,"position","","",215],[10,"max_by","","",215],[10,"min_by","","",215],[10,"next","","",216],[10,"size_hint","","",216],[10,"chain","","",216],[10,"zip","","",216],[10,"map","","",216],[10,"filter","","",216],[10,"filter_map","","",216],[10,"enumerate","","",216],[10,"peekable","","",216],[10,"skip_while","","",216],[10,"take_while","","",216],[10,"skip","","",216],[10,"take","","",216],[10,"scan","","",216],[10,"flat_map","","",216],[10,"fuse","","",216],[10,"inspect","","",216],[10,"by_ref","","",216],[10,"advance","","",216],[10,"collect","","",216],[10,"nth","","",216],[10,"last","","",216],[10,"fold","","",216],[10,"count","","",216],[10,"all","","",216],[10,"any","","",216],[10,"find","","",216],[10,"position","","",216],[10,"max_by","","",216],[10,"min_by","","",216],[10,"clone","","",217],[10,"clone_from","","",217],[10,"new","","Creates a new tree node.",217],[10,"from_iter","","",204],[10,"extend","","",204],[10,"hash","","",204],[10,"from_iter","","",212],[10,"extend","","",212],[10,"hash","","",212],[10,"clone","collections::trie","",218],[10,"clone_from","","",218],[10,"clone","","",219],[10,"clone_from","","",219],[10,"eq","","",219],[10,"ne","","",219],[10,"assert_receiver_is_total_eq","","",219],[10,"partial_cmp","","",219],[10,"lt","","",219],[10,"le","","",219],[10,"gt","","",219],[10,"ge","","",219],[10,"cmp","","",219],[10,"fmt","","",219],[10,"len","","Returns the number of elements in the map.",219],[10,"is_empty","","",219],[10,"clear","","Clears the map, removing all values.",219],[10,"find","","Returns a reference to the value corresponding to the key.",219],[10,"contains_key","","",219],[10,"find_mut","","Returns a mutable reference to the value corresponding to the key.",219],[10,"swap","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",219],[10,"pop","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",219],[10,"insert","","",219],[10,"remove","","",219],[10,"default","","",219],[10,"new","","Creates an empty `TrieMap`.",219],[10,"each_reverse","","Visits all key-value pairs in reverse order. Aborts traversal when `f` returns `false`.\nReturns `true` if `f` returns `true` for all elements.",219],[10,"keys","","Gets an iterator visiting all keys in ascending order by the keys.\nThe iterator's element type is `uint`.",219],[10,"values","","Gets an iterator visiting all values in ascending order by the keys.\nThe iterator's element type is `&'r T`.",219],[10,"iter","","Gets an iterator over the key-value pairs in the map, ordered by keys.",219],[10,"mut_iter","","Deprecated: use `iter_mut`.",219],[10,"iter_mut","","Gets an iterator over the key-value pairs in the map, with the\nability to mutate the values.",219],[10,"lower_bound","","Gets an iterator pointing to the first key-value pair whose key is not less than `key`.\nIf all keys in the map are less than `key` an empty iterator is returned.",219],[10,"upper_bound","","Gets an iterator pointing to the first key-value pair whose key is greater than `key`.\nIf all keys in the map are not greater than `key` an empty iterator is returned.",219],[10,"mut_lower_bound","","Deprecated: use `lower_bound_mut`.",219],[10,"lower_bound_mut","","Gets an iterator pointing to the first key-value pair whose key is not less than `key`.\nIf all keys in the map are less than `key` an empty iterator is returned.",219],[10,"mut_upper_bound","","Deprecated: use `upper_bound_mut`.",219],[10,"upper_bound_mut","","Gets an iterator pointing to the first key-value pair whose key is greater than `key`.\nIf all keys in the map are not greater than `key` an empty iterator is returned.",219],[10,"from_iter","","",219],[10,"extend","","",219],[10,"hash","","",219],[10,"index","","",219],[10,"cmp","","",220],[10,"partial_cmp","","",220],[10,"lt","","",220],[10,"le","","",220],[10,"gt","","",220],[10,"ge","","",220],[10,"lt","","",220],[10,"le","","",220],[10,"gt","","",220],[10,"ge","","",220],[10,"assert_receiver_is_total_eq","","",220],[10,"eq","","",220],[10,"ne","","",220],[10,"ne","","",220],[10,"hash","","",220],[10,"clone","","",220],[10,"clone_from","","",220],[10,"fmt","","",220],[10,"len","","Returns the number of elements in the set.",220],[10,"is_empty","","",220],[10,"clear","","Clears the set, removing all values.",220],[10,"contains","","",220],[10,"is_disjoint","","",220],[10,"is_subset","","",220],[10,"is_superset","","",220],[10,"is_superset","","",220],[10,"insert","","",220],[10,"remove","","",220],[10,"default","","",220],[10,"new","","Creates an empty TrieSet.",220],[10,"each_reverse","","Visits all values in reverse order. Aborts traversal when `f` returns `false`.\nReturns `true` if `f` returns `true` for all elements.",220],[10,"iter","","Gets an iterator over the values in the set, in sorted order.",220],[10,"lower_bound","","Gets an iterator pointing to the first value that is not less than `val`.\nIf all values in the set are less than `val` an empty iterator is returned.",220],[10,"upper_bound","","Gets an iterator pointing to the first value that key is greater than `val`.\nIf all values in the set are less than or equal to `val` an empty iterator is returned.",220],[10,"from_iter","","",220],[10,"extend","","",220],[10,"clone","","",221],[10,"clone_from","","",221],[10,"next","","",222],[10,"size_hint","","",222],[10,"size_hint","","",222],[10,"chain","","",222],[10,"zip","","",222],[10,"map","","",222],[10,"filter","","",222],[10,"filter_map","","",222],[10,"enumerate","","",222],[10,"peekable","","",222],[10,"skip_while","","",222],[10,"take_while","","",222],[10,"skip","","",222],[10,"take","","",222],[10,"scan","","",222],[10,"flat_map","","",222],[10,"fuse","","",222],[10,"inspect","","",222],[10,"by_ref","","",222],[10,"advance","","",222],[10,"collect","","",222],[10,"nth","","",222],[10,"last","","",222],[10,"fold","","",222],[10,"count","","",222],[10,"all","","",222],[10,"any","","",222],[10,"find","","",222],[10,"position","","",222],[10,"max_by","","",222],[10,"min_by","","",222],[10,"next","","",223],[10,"size_hint","","",223],[10,"size_hint","","",223],[10,"chain","","",223],[10,"zip","","",223],[10,"map","","",223],[10,"filter","","",223],[10,"filter_map","","",223],[10,"enumerate","","",223],[10,"peekable","","",223],[10,"skip_while","","",223],[10,"take_while","","",223],[10,"skip","","",223],[10,"take","","",223],[10,"scan","","",223],[10,"flat_map","","",223],[10,"fuse","","",223],[10,"inspect","","",223],[10,"by_ref","","",223],[10,"advance","","",223],[10,"collect","","",223],[10,"nth","","",223],[10,"last","","",223],[10,"fold","","",223],[10,"count","","",223],[10,"all","","",223],[10,"any","","",223],[10,"find","","",223],[10,"position","","",223],[10,"max_by","","",223],[10,"min_by","","",223],[10,"next","","",224],[10,"size_hint","","",224],[10,"size_hint","","",224],[10,"chain","","",224],[10,"zip","","",224],[10,"map","","",224],[10,"filter","","",224],[10,"filter_map","","",224],[10,"enumerate","","",224],[10,"peekable","","",224],[10,"skip_while","","",224],[10,"take_while","","",224],[10,"skip","","",224],[10,"take","","",224],[10,"scan","","",224],[10,"flat_map","","",224],[10,"fuse","","",224],[10,"inspect","","",224],[10,"by_ref","","",224],[10,"advance","","",224],[10,"collect","","",224],[10,"nth","","",224],[10,"last","","",224],[10,"fold","","",224],[10,"count","","",224],[10,"all","","",224],[10,"any","","",224],[10,"find","","",224],[10,"position","","",224],[10,"max_by","","",224],[10,"min_by","","",224],[10,"new","collections::slice","Creates an `ElementSwaps` iterator for a sequence of `length` elements.",225],[10,"next","","",225],[10,"size_hint","","",225],[10,"size_hint","","",225],[10,"chain","","",225],[10,"zip","","",225],[10,"map","","",225],[10,"filter","","",225],[10,"filter_map","","",225],[10,"enumerate","","",225],[10,"peekable","","",225],[10,"skip_while","","",225],[10,"take_while","","",225],[10,"skip","","",225],[10,"take","","",225],[10,"scan","","",225],[10,"flat_map","","",225],[10,"fuse","","",225],[10,"inspect","","",225],[10,"by_ref","","",225],[10,"advance","","",225],[10,"collect","","",225],[10,"nth","","",225],[10,"last","","",225],[10,"fold","","",225],[10,"count","","",225],[10,"all","","",225],[10,"any","","",225],[10,"find","","",225],[10,"position","","",225],[10,"max_by","","",225],[10,"min_by","","",225],[10,"next","","",226],[10,"size_hint","","",226],[10,"size_hint","","",226],[10,"chain","","",226],[10,"zip","","",226],[10,"map","","",226],[10,"filter","","",226],[10,"filter_map","","",226],[10,"enumerate","","",226],[10,"peekable","","",226],[10,"skip_while","","",226],[10,"take_while","","",226],[10,"skip","","",226],[10,"take","","",226],[10,"scan","","",226],[10,"flat_map","","",226],[10,"fuse","","",226],[10,"inspect","","",226],[10,"by_ref","","",226],[10,"advance","","",226],[10,"collect","","",226],[10,"nth","","",226],[10,"last","","",226],[10,"fold","","",226],[10,"count","","",226],[10,"all","","",226],[10,"any","","",226],[10,"find","","",226],[10,"position","","",226],[10,"max_by","","",226],[10,"min_by","","",226],[10,"concat","collections::vec","",44],[10,"connect","","",44],[10,"clone","collections::str","",227],[10,"clone_from","","",227],[10,"clone","","",228],[10,"clone_from","","",228],[10,"next","","",228],[10,"size_hint","","",228],[10,"size_hint","","",228],[10,"chain","","",228],[10,"zip","","",228],[10,"map","","",228],[10,"filter","","",228],[10,"filter_map","","",228],[10,"enumerate","","",228],[10,"peekable","","",228],[10,"skip_while","","",228],[10,"take_while","","",228],[10,"skip","","",228],[10,"take","","",228],[10,"scan","","",228],[10,"flat_map","","",228],[10,"fuse","","",228],[10,"inspect","","",228],[10,"by_ref","","",228],[10,"advance","","",228],[10,"collect","","",228],[10,"nth","","",228],[10,"last","","",228],[10,"fold","","",228],[10,"count","","",228],[10,"all","","",228],[10,"any","","",228],[10,"find","","",228],[10,"position","","",228],[10,"max_by","","",228],[10,"min_by","","",228],[10,"clone","","",229],[10,"clone_from","","",229],[10,"clone","","",230],[10,"clone_from","","",230],[10,"next","","",230],[10,"size_hint","","",230],[10,"chain","","",230],[10,"zip","","",230],[10,"map","","",230],[10,"filter","","",230],[10,"filter_map","","",230],[10,"enumerate","","",230],[10,"peekable","","",230],[10,"skip_while","","",230],[10,"take_while","","",230],[10,"skip","","",230],[10,"take","","",230],[10,"scan","","",230],[10,"flat_map","","",230],[10,"fuse","","",230],[10,"inspect","","",230],[10,"by_ref","","",230],[10,"advance","","",230],[10,"collect","","",230],[10,"nth","","",230],[10,"last","","",230],[10,"fold","","",230],[10,"count","","",230],[10,"all","","",230],[10,"any","","",230],[10,"find","","",230],[10,"position","","",230],[10,"max_by","","",230],[10,"min_by","","",230],[10,"is_owned","","Returns `true` if this `MaybeOwned` wraps an owned string.",231],[10,"is_slice","","Returns `true` if this `MaybeOwned` wraps a borrowed string.",231],[10,"into_maybe_owned","collections::string","# Example",43],[10,"into_maybe_owned","collections::str","# Example",231],[10,"eq","","",231],[10,"ne","","",231],[10,"assert_receiver_is_total_eq","","",231],[10,"partial_cmp","","",231],[10,"lt","","",231],[10,"le","","",231],[10,"gt","","",231],[10,"ge","","",231],[10,"cmp","","",231],[10,"equiv","","",231],[10,"as_slice","","",231],[10,"into_string","","",231],[10,"into_owned","","",231],[10,"escape_default","","",231],[10,"escape_unicode","","",231],[10,"replace","","",231],[10,"to_owned","","",231],[10,"to_utf16","","",231],[10,"repeat","","",231],[10,"lev_distance","","",231],[10,"nfd_chars","","",231],[10,"nfkd_chars","","",231],[10,"nfc_chars","","",231],[10,"nfkc_chars","","",231],[10,"len","","",231],[10,"is_empty","","",231],[10,"clone","","",231],[10,"clone_from","","",231],[10,"default","","",231],[10,"hash","","",231],[10,"fmt","","",231],[10,"cmp","collections::string","",43],[10,"assert_receiver_is_total_eq","","",43],[10,"partial_cmp","","",43],[10,"lt","","",43],[10,"le","","",43],[10,"gt","","",43],[10,"ge","","",43],[10,"lt","","",43],[10,"le","","",43],[10,"gt","","",43],[10,"ge","","",43],[10,"eq","","",43],[10,"ne","","",43],[10,"ne","","",43],[10,"clone","","",43],[10,"clone_from","","",43],[10,"new","","Creates a new string buffer initialized with the empty string.",43],[10,"with_capacity","","Creates a new string buffer with the given capacity.\nThe string will be able to hold exactly `capacity` bytes without\nreallocating. If `capacity` is 0, the string will not allocate.",43],[10,"from_str","","Creates a new string buffer from the given string.",43],[10,"from_raw_parts","","Deprecated. Replaced by `string::raw::from_parts`",43],[10,"from_owned_str","","Deprecated.",43],[10,"from_utf8","","Returns the vector as a string buffer, if possible, taking care not to\ncopy it.",43],[10,"from_utf8_lossy","","Converts a vector of bytes to a new UTF-8 string.\nAny invalid UTF-8 sequences are replaced with U+FFFD REPLACEMENT CHARACTER.",43],[10,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",43],[10,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",43],[10,"from_chars","","Convert a vector of `char`s to a `String`.",43],[10,"into_bytes","","Return the underlying byte buffer, encoded as UTF-8.",43],[10,"append","","Pushes the given `String` onto this buffer then returns `self` so that it can be\nused again.",43],[10,"from_char","","Creates a string buffer by repeating a character `length` times.",43],[10,"from_byte","","Converts a byte to a UTF-8 string.",43],[10,"push_str","","Pushes the given string onto this string buffer.",43],[10,"grow","","Pushes `ch` onto the given string `count` times.",43],[10,"byte_capacity","","Returns the number of bytes that this string buffer can hold without reallocating.",43],[10,"reserve_additional","","Reserves capacity for at least `extra` additional bytes in this string buffer.",43],[10,"reserve","","Reserves capacity for at least `capacity` bytes in this string buffer.",43],[10,"reserve_exact","","Reserves capacity for exactly `capacity` bytes in this string buffer.",43],[10,"shrink_to_fit","","Shrinks the capacity of this string buffer to match its length.",43],[10,"push_char","","Adds the given character to the end of the string.",43],[10,"push_bytes","","Pushes the given bytes onto this string buffer.\nThis is unsafe because it does not check\nto ensure that the resulting string will be valid UTF-8.",43],[10,"as_bytes","","Works with the underlying buffer as a byte slice.",43],[10,"as_mut_bytes","","Works with the underlying buffer as a mutable byte slice.",43],[10,"truncate","","Shortens a string to the specified length.",43],[10,"push_byte","","Appends a byte to this string buffer.",43],[10,"pop_byte","","Removes the last byte from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",43],[10,"pop_char","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",43],[10,"shift_byte","","Removes the first byte from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",43],[10,"shift_char","","Removes the first character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",43],[10,"as_mut_vec","","Views the string buffer as a mutable sequence of bytes.",43],[10,"len","","",43],[10,"is_empty","","",43],[10,"clear","","",43],[10,"from_iter","","",43],[10,"extend","","",43],[10,"as_slice","","",43],[10,"into_string","","",43],[10,"into_owned","","",43],[10,"escape_default","","",43],[10,"escape_unicode","","",43],[10,"replace","","",43],[10,"to_owned","","",43],[10,"to_utf16","","",43],[10,"repeat","","",43],[10,"lev_distance","","",43],[10,"nfd_chars","","",43],[10,"nfkd_chars","","",43],[10,"nfc_chars","","",43],[10,"nfkc_chars","","",43],[10,"default","","",43],[10,"fmt","","",43],[10,"hash","","",43],[10,"equiv","","",43],[10,"add","","",43],[10,"new","collections::vec","Constructs a new, empty `Vec`.",44],[10,"with_capacity","","Constructs a new, empty `Vec` with the specified capacity.",44],[10,"from_fn","","Creates and initializes a `Vec`.",44],[10,"from_raw_parts","","Creates a `Vec<T>` directly from the raw constituents.",44],[10,"partition","","Consumes the `Vec`, partitioning it based on a predicate.",44],[10,"append","","Deprecated, call `extend` instead.",44],[10,"from_slice","","Deprecated, call `to_vec()` instead",44],[10,"from_elem","","Constructs a `Vec` with copies of a value.",44],[10,"push_all","","Appends all elements in a slice to the `Vec`.",44],[10,"grow","","Grows the `Vec` in-place.",44],[10,"grow_set","","Sets the value of a vector element at a given index, growing the vector\nas needed.",44],[10,"partitioned","","Partitions a vector based on a predicate.",44],[10,"clone","","",44],[10,"clone_from","","",44],[10,"clone_from","","",44],[10,"index","","",44],[10,"as_slice_","","",44],[10,"slice_from_","","",44],[10,"slice_to_","","",44],[10,"slice_","","",44],[10,"as_mut_slice_","","",44],[10,"slice_from_mut_","","",44],[10,"slice_to_mut_","","",44],[10,"slice_mut_","","",44],[10,"from_iter","","",44],[10,"extend","","",44],[10,"eq","","",44],[10,"ne","","",44],[10,"partial_cmp","","",44],[10,"lt","","",44],[10,"le","","",44],[10,"gt","","",44],[10,"ge","","",44],[10,"assert_receiver_is_total_eq","","",44],[10,"equiv","","",44],[10,"cmp","","",44],[10,"len","","",44],[10,"is_empty","","",44],[10,"to_vec","","",44],[10,"into_vec","","",44],[10,"to_owned","","",44],[10,"into_owned","","",44],[10,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",44],[10,"reserve_additional","","Reserves capacity for at least `n` additional elements in the given\nvector.",44],[10,"reserve","","Reserves capacity for at least `n` elements in the given vector.",44],[10,"reserve_exact","","Reserves capacity for exactly `capacity` elements in the given vector.",44],[10,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",44],[10,"append_one","","Deprecated, call `push` instead",44],[10,"truncate","","Shorten a vector, dropping excess elements.",44],[10,"as_mut_slice","","Returns a mutable slice of the elements of `self`.",44],[10,"move_iter","","Deprecated: use `into_iter`.",44],[10,"into_iter","","Creates a consuming iterator, that is, one that moves each\nvalue out of the vector (from start to end). The vector cannot\nbe used after calling this.",44],[10,"set_len","","Sets the length of a vector.",44],[10,"get","","Returns a reference to the value at index `index`.",44],[10,"get_mut","","Returns a mutable reference to the value at index `index`.",44],[10,"iter","","Returns an iterator over references to the elements of the vector in\norder.",44],[10,"mut_iter","","Deprecated: use `iter_mut`.",44],[10,"iter_mut","","Returns an iterator over mutable references to the elements of the\nvector in order.",44],[10,"sort_by","","Sorts the vector, in place, using `compare` to compare elements.",44],[10,"slice","","Returns a slice of self spanning the interval [`start`, `end`).",44],[10,"tail","","Returns a slice containing all but the first element of the vector.",44],[10,"tailn","","Returns all but the first `n' elements of a vector.",44],[10,"last","","Returns a reference to the last element of a vector, or `None` if it is\nempty.",44],[10,"mut_last","","Deprecated: use `last_mut`.",44],[10,"last_mut","","Returns a mutable reference to the last element of a vector, or `None`\nif it is empty.",44],[10,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element. This does not preserve ordering, but is O(1).",44],[10,"unshift","","Prepends an element to the vector.",44],[10,"shift","","Removes the first element from a vector and returns it, or `None` if\nthe vector is empty.",44],[10,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",44],[10,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.\nReturns `None` if `i` is out of bounds.",44],[10,"push_all_move","","Takes ownership of the vector `other`, moving all elements into\nthe current vector. This does not copy any elements, and it is\nillegal to use the `other` vector after calling this method\n(because it is moved here).",44],[10,"mut_slice","","Deprecated: use `slice_mut`.",44],[10,"slice_mut","","Returns a mutable slice of `self` between `start` and `end`.",44],[10,"mut_slice_from","","Deprecated: use \"slice_from_mut\".",44],[10,"slice_from_mut","","Returns a mutable slice of `self` from `start` to the end of the `Vec`.",44],[10,"mut_slice_to","","Deprecated: use `slice_to_mut`.",44],[10,"slice_to_mut","","Returns a mutable slice of `self` from the start of the `Vec` to `end`.",44],[10,"mut_split_at","","Deprecated: use `split_at_mut`.",44],[10,"split_at_mut","","Returns a pair of mutable slices that divides the `Vec` at an index.",44],[10,"reverse","","Reverses the order of elements in a vector, in place.",44],[10,"slice_from","","Returns a slice of `self` from `start` to the end of the vec.",44],[10,"slice_to","","Returns a slice of self from the start of the vec to `end`.",44],[10,"init","","Returns a slice containing all but the last element of the vector.",44],[10,"as_ptr","","Returns an unsafe pointer to the vector's buffer.",44],[10,"as_mut_ptr","","Returns a mutable unsafe pointer to the vector's buffer.",44],[10,"retain","","Retains only the elements specified by the predicate.",44],[10,"grow_fn","","Expands a vector in place, initializing the new elements to the result of a function.",44],[10,"sort","","Sorts the vector in place.",44],[10,"clear","","",44],[10,"contains","","Returns true if a vector contains an element equal to the given value.",44],[10,"dedup","","Removes consecutive repeated elements in the vector.",44],[10,"as_slice","","Returns a slice into `self`.",44],[10,"add","","",44],[10,"drop","","",44],[10,"default","","",44],[10,"fmt","","",44],[10,"push","","Appends an element to the back of a collection.",44],[10,"pop","","",44],[10,"unwrap","","Drops all items that have not yet been moved and returns the empty vector.",232],[10,"next","","",232],[10,"size_hint","","",232],[10,"size_hint","","",232],[10,"chain","","",232],[10,"zip","","",232],[10,"map","","",232],[10,"filter","","",232],[10,"filter_map","","",232],[10,"enumerate","","",232],[10,"peekable","","",232],[10,"skip_while","","",232],[10,"take_while","","",232],[10,"skip","","",232],[10,"take","","",232],[10,"scan","","",232],[10,"flat_map","","",232],[10,"fuse","","",232],[10,"inspect","","",232],[10,"by_ref","","",232],[10,"advance","","",232],[10,"collect","","",232],[10,"nth","","",232],[10,"last","","",232],[10,"fold","","",232],[10,"count","","",232],[10,"all","","",232],[10,"any","","",232],[10,"find","","",232],[10,"position","","",232],[10,"max_by","","",232],[10,"min_by","","",232],[10,"next_back","","",232],[10,"rev","","",232],[10,"rposition","","",232],[10,"len","","",232],[10,"drop","","",232],[10,"drop","","",233],[10,"map_in_place","","Converts a `Vec<T>` to a `Vec<U>` where `T` and `U` have the same\nnon-zero size and the same minimal alignment.",44],[10,"new","collections::hash::sip","Creates a `SipState` that is keyed off the provided keys.",234],[10,"new_with_keys","","Creates a `SipState` that is keyed off the provided keys.",234],[10,"reset","","Resets the state to its initial state.",234],[10,"result","","Returns the computed hash.",234],[10,"write","","",234],[10,"clone","","",234],[10,"clone_from","","",234],[10,"default","","",234],[10,"clone","","",235],[10,"clone_from","","",235],[10,"new","","Creates a `Sip`.",235],[10,"new_with_keys","","Creates a `Sip` that is keyed off the provided keys.",235],[10,"hash","","",235],[10,"default","","",235],[10,"hash","collections::vec","",44],[10,"hash","alloc::boxed","",236],[10,"hash","alloc::rc","",237],[10,"hash","core::option","",27],[10,"hash","core::intrinsics","",69],[10,"hash","core::result","",118],[1,"Bitv","std::collections","The bitvector type."],[1,"BitvSet","","An implementation of a set using a bit vector as an underlying\nrepresentation for holding unsigned numerical elements."],[1,"BTree","",""],[1,"DList","","A doubly-linked list."],[1,"EnumSet","","A specialized `Set` implementation to use enum types."],[1,"PriorityQueue","","A priority queue implemented with a binary heap."],[1,"RingBuf","","`RingBuf` is a circular buffer that implements `Deque`."],[1,"SmallIntMap","","A map optimized for small integer keys."],[1,"TreeMap","","This is implemented as an AA tree, which is a simplified variation of\na red-black tree where red (horizontal) nodes can only be added\nas a right child. The time complexity is the same, and re-balancing\noperations are more frequent but also cheaper."],[1,"TreeSet","","An implementation of the `Set` trait on top of the `TreeMap` container. The\nonly requirement is that the type of the elements contained ascribes to the\n`Ord` trait."],[1,"TrieMap","","A map implemented as a radix trie."],[1,"TrieSet","","A set implemented as a radix trie."],[0,"bitv","","Collections implemented with bit vectors."],[1,"Bitv","std::collections::bitv","The bitvector type."],[3,"from_bytes","","Transforms a byte-vector into a `Bitv`. Each byte becomes eight bits,\nwith the most significant bits of each byte coming first. Each\nbit becomes `true` if equal to 1 or `false` if equal to 0."],[3,"from_fn","","Creates a `Bitv` of the specified length where the value at each\nindex is `f(index)`."],[1,"Bits","","An iterator for `Bitv`."],[1,"BitvSet","","An implementation of a set using a bit vector as an underlying\nrepresentation for holding unsigned numerical elements."],[1,"BitPositions","","An iterator for `BitvSet`."],[1,"TwoBitPositions","","An iterator combining two `BitvSet` iterators."],[0,"btree","std::collections","Starting implementation of a B-tree for Rust.\nStructure inspired by Github user davidhalperin's gist."],[1,"BTree","std::collections::btree",""],[0,"dlist","std::collections","A doubly-linked list with owned nodes."],[1,"DList","std::collections::dlist","A doubly-linked list."],[1,"Items","","An iterator over references to the items of a `DList`."],[1,"MutItems","","An iterator over mutable references to the items of a `DList`."],[1,"MoveItems","","An iterator over mutable references to the items of a `DList`."],[6,"ListInsertion","","Allows mutating a `DList` while iterating."],[9,"insert_next","","Inserts `elt` just after to the element most recently returned by\n`.next()`",238],[9,"peek_next","","Provides a reference to the next element, without changing the iterator",238],[0,"enum_set","std::collections","A structure for holding a set of enum variants."],[1,"EnumSet","std::collections::enum_set","A specialized `Set` implementation to use enum types."],[6,"CLike","","An interface for casting C-like enum to uint and back."],[9,"to_uint","","Converts a C-like enum to a `uint`.",239],[9,"from_uint","","Converts a `uint` to a C-like enum.",239],[1,"Items","","An iterator over an EnumSet"],[0,"priority_queue","std::collections","A priority queue implemented with a binary heap."],[1,"PriorityQueue","std::collections::priority_queue","A priority queue implemented with a binary heap."],[1,"Items","","`PriorityQueue` iterator."],[0,"ringbuf","std::collections","This crate implements a double-ended queue with `O(1)` amortized inserts and removals from both\nends of the container. It also has `O(1)` indexing like a vector. The contained elements are\nnot required to be copyable, and the queue will be sendable if the contained type is sendable.\nIts interface `Deque` is defined in `collections`."],[1,"RingBuf","std::collections::ringbuf","`RingBuf` is a circular buffer that implements `Deque`."],[1,"Items","","`RingBuf` iterator."],[1,"MutItems","","`RingBuf` mutable iterator."],[0,"smallintmap","std::collections","A simple map based on a vector for small integer keys. Space requirements\nare O(highest integer key)."],[1,"SmallIntMap","std::collections::smallintmap","A map optimized for small integer keys."],[1,"Entries","","Forward iterator over a map."],[1,"MutEntries","","Forward iterator over the key-value pairs of a map, with the\nvalues being mutable."],[4,"Keys","",""],[4,"Values","",""],[0,"treemap","std::collections","Maps are collections of unique keys with corresponding values, and sets are\njust unique keys without a corresponding value. The `Map` and `Set` traits in\n`std::container` define the basic interface."],[1,"TreeMap","std::collections::treemap","This is implemented as an AA tree, which is a simplified variation of\na red-black tree where red (horizontal) nodes can only be added\nas a right child. The time complexity is the same, and re-balancing\noperations are more frequent but also cheaper."],[1,"Entries","","Lazy forward iterator over a map"],[1,"RevEntries","","Lazy backward iterator over a map"],[1,"MutEntries","","Lazy forward iterator over a map that allows for the mutation of\nthe values."],[1,"RevMutEntries","","Lazy backward iterator over a map"],[4,"Keys","",""],[4,"Values","",""],[1,"MoveEntries","","Lazy forward iterator over a map that consumes the map while iterating"],[1,"TreeSet","","An implementation of the `Set` trait on top of the `TreeMap` container. The\nonly requirement is that the type of the elements contained ascribes to the\n`Ord` trait."],[1,"SetItems","","A lazy forward iterator over a set."],[1,"RevSetItems","","A lazy backward iterator over a set."],[4,"MoveSetItems","",""],[1,"DifferenceItems","","A lazy iterator producing elements in the set difference (in-order)."],[1,"SymDifferenceItems","","A lazy iterator producing elements in the set symmetric difference (in-order)."],[1,"IntersectionItems","","A lazy iterator producing elements in the set intersection (in-order)."],[1,"UnionItems","","A lazy iterator producing elements in the set union (in-order)."],[0,"trie","std::collections","Maps are collections of unique keys with corresponding values, and sets are\njust unique keys without a corresponding value. The `Map` and `Set` traits in\n`std::container` define the basic interface."],[1,"TrieMap","std::collections::trie","A map implemented as a radix trie."],[1,"TrieSet","","A set implemented as a radix trie."],[1,"Entries","","A forward iterator over a map."],[1,"MutEntries","","A forward iterator over the key-value pairs of a map, with the\nvalues being mutable."],[4,"Keys","",""],[4,"Values","",""],[1,"SetItems","","A forward iterator over a set."],[0,"hash","std","Generic hashing support."],[1,"RandomSipHasher","std::hash","`RandomSipHasher` computes the SipHash algorithm from a stream of bytes\ninitialized with random keys."],[10,"clone","","",240],[10,"new","","Construct a new `RandomSipHasher` that is initialized with random keys.",240],[10,"hash","","",240],[10,"default","","",240],[6,"Hash","","A hashable type. The `S` type parameter is an abstract hash state that is\nused by the `Hash` to compute the hash. It defaults to\n`std::hash::sip::SipState`."],[9,"hash","","Computes the hash of a value.",241],[6,"Hasher","","A trait that computes a hash for a value. The main users of this trait are\ncontainers like `HashMap`, which need a generic way hash multiple types."],[9,"hash","","Compute the hash of a value.",242],[6,"Writer","",""],[9,"write","","",243],[3,"hash","","Hashes a value using the SipHash algorithm."],[0,"sip","","An implementation of SipHash 2-4."],[1,"SipState","std::hash::sip","`SipState` computes a SipHash 2-4 hash over a stream of bytes."],[1,"SipHasher","","`SipHasher` computes the SipHash algorithm from a stream of bytes."],[3,"hash","","Hashes a value using the SipHash algorithm."],[3,"hash_with_keys","","Hashes a value with the SipHash algorithm with the provided keys."],[0,"task","std","Task creation"],[1,"SiblingSpawner","std::task","The default task spawner, which spawns siblings to the current task."],[1,"TaskBuilder","","The task builder type."],[3,"spawn","","Creates and executes a new child task"],[3,"try","","Execute a function in a newly-spawned task and return either the return\nvalue of the function or an error if the task failed."],[3,"try_future","","Execute a function in another task and return a future representing the\ntask's result."],[3,"with_task_name","","Read the name of the current task."],[3,"name","","Read the name of the current task."],[3,"deschedule","","Yield control to the task scheduler."],[3,"failing","","True if the running task is currently failing (e.g. will return `true` inside a\ndestructor that is run while unwinding the stack after a call to `fail!()`)."],[6,"Spawner","","A means of spawning a task"],[9,"spawn","","Spawn a task, given low-level task options.",244],[10,"spawn","","",245],[10,"new","","Generate the base configuration for spawning a task, off of which more\nconfiguration methods can be chained.",246],[10,"named","","Name the task-to-be. Currently the name is used for identification\nonly in failure messages.",246],[10,"stack_size","","Set the size of the stack for the new task.",246],[10,"stdout","","Redirect task-local stdout.",246],[10,"stderr","","Redirect task-local stderr.",246],[10,"spawner","","Set the spawning mechanism for the task.",246],[10,"with_wrapper","","Add a wrapper to the body of the spawned task.",246],[10,"spawn","","Creates and executes a new child task.",246],[10,"try_future","","Execute a proc in a newly-spawned task and return a future representing\nthe task's result. The task has the properties and behavior\nspecified by the `TaskBuilder`.",246],[10,"try","","Execute a function in a newly-spawnedtask and block until the task\ncompletes or fails. Equivalent to `.try_future(f).unwrap()`.",246],[0,"sync","std","Useful synchronization primitives"],[1,"Future","std::sync","A type encapsulating the result of a computation which may not be complete"],[1,"TaskPool","","A task pool used to execute functions in parallel."],[10,"get","","Get the value of the future.",247],[10,"unwrap","","Gets the value from this future, forcing evaluation.",247],[10,"get_ref","","Executes the future's closure and then returns a reference\nto the result.  The reference lasts as long as\nthe future.",247],[10,"from_value","","Create a future from a value.",247],[10,"from_fn","","Create a future from a function.",247],[10,"from_receiver","","Create a future from a port",247],[10,"spawn","","Create a future from a unique closure.",247],[10,"drop","","",248],[10,"new","","Spawns a new task pool with `n_tasks` tasks. The provided\n`init_fn_factory` returns a function which, given the index of the\ntask, should return local data to be kept around in that task.",248],[10,"execute","","Executes the function `f` on a task in the pool. The function\nreceives a reference to the local data returned by the `init_fn`.",248],[0,"atomic","","Atomic types"],[10,"new","sync::atomic","Create a new `AtomicOption`",249],[10,"empty","","Create a new `AtomicOption` that doesn't contain a value",249],[10,"swap","","Store a value, returning the old value",249],[10,"take","","Remove the value, leaving the `AtomicOption` empty.",249],[10,"fill","","Replace an empty value with a non-empty value.",249],[10,"is_empty","","Returns `true` if the `AtomicOption` is empty.",249],[10,"drop","","",249],[10,"new","sync::mpsc_intrusive","",250],[10,"push","","",250],[10,"pop","","You'll note that the other MPSC queue in std::sync is non-intrusive and\nreturns a `PopResult` here to indicate when the queue is inconsistent.\nAn \"inconsistent state\" in the other queue means that a pusher has\npushed, but it hasn't finished linking the rest of the chain.",250],[10,"new","","",251],[10,"next","","",251],[10,"pop","sync::spsc_queue","Attempts to pop the value from the head of the queue, returning `None`\nif the queue is empty.",252],[10,"peek","","Attempts to peek at the head of the queue, returning `None` if the queue\nis empty.",252],[10,"push","","Pushes a new value onto the queue.",253],[10,"new","","Creates a new queue.",254],[10,"push","","Pushes a new value onto this queue. Note that to use this function\nsafely, it must be externally guaranteed that there is only one pusher.",254],[10,"pop","","Attempts to pop a value from this queue. Remember that to use this type\nsafely you must ensure that there is only one popper at a time.",254],[10,"peek","","Attempts to peek at the head of the queue, returning `None` if the queue\nhas no data currently",254],[10,"drop","","",254],[10,"new","sync::mpsc_queue","Creates a new queue that is safe to share among multiple producers and\none consumer.",255],[10,"push","","Pushes a new value onto this queue.",255],[10,"pop","","Pops some data from this queue.",255],[10,"casual_pop","","Attempts to pop data from this queue, but doesn't attempt too hard. This\nwill canonicalize inconsistent states to a `None` value.",255],[10,"drop","","",255],[10,"with_capacity","sync::mpmc_bounded_queue","",256],[10,"push","","",256],[10,"pop","","",256],[10,"clone","","",256],[10,"clone_from","","",256],[10,"fmt","sync::deque","",257],[10,"eq","","",257],[10,"ne","","",257],[10,"ne","","",257],[10,"new","","Allocates a new buffer pool which in turn can be used to allocate new\ndeques.",258],[10,"deque","","Allocates a new work-stealing deque which will send/receiving memory to\nand from this buffer pool.",258],[10,"clone","","",258],[10,"clone_from","","",258],[10,"push","","Pushes data onto the front of this work queue.",259],[10,"pop","","Pops data off the front of the work queue, returning `None` on an empty\nqueue.",259],[10,"pool","","Gets access to the buffer pool that this worker is attached to. This can\nbe used to create more deques which share the same buffer pool as this\ndeque.",259],[10,"steal","","Steals work off the end of the queue (opposite of the worker's end)",260],[10,"pool","","Gets access to the buffer pool that this stealer is attached to. This\ncan be used to create more deques which share the same buffer pool as\nthis deque.",260],[10,"clone","","",260],[10,"clone_from","","",260],[10,"drop","","",261],[10,"drop","","",262],[10,"acquire","sync::raw","",263],[10,"release","","",263],[10,"access","","",263],[10,"drop","","",264],[10,"access_cond","","",263],[10,"wait","","Atomically drop the associated lock, and block until a signal is sent.",265],[10,"wait_on","","As wait(), but can specify which of multiple condition variables to\nwait on. Only a signal_on() or broadcast_on() with the same condvar_id\nwill wake this thread.",265],[10,"signal","","Wake up a blocked task. Returns false if there was no blocked task.",265],[10,"signal_on","","As signal, but with a specified condvar_id. See wait_on.",265],[10,"broadcast","","Wake up all blocked tasks. Returns the number of tasks woken.",265],[10,"broadcast_on","","As broadcast, but with a specified condvar_id. See wait_on.",265],[10,"new","","Create a new semaphore with the specified count.",266],[10,"acquire","","Acquire a resource represented by the semaphore. Blocks if necessary\nuntil resource(s) become available.",266],[10,"release","","Release a held resource represented by the semaphore. Wakes a blocked\ncontending task, if any exist. Won't block the caller.",266],[10,"access","","Acquire a resource of this semaphore, returning an RAII guard which will\nrelease the resource when dropped.",266],[10,"new","","Create a new mutex, with one associated condvar.",267],[10,"new_with_condvars","","Create a new mutex, with a specified number of associated condvars. This\nwill allow calling wait_on/signal_on/broadcast_on with condvar IDs\nbetween 0 and num_condvars-1. (If num_condvars is 0, lock_cond will be\nallowed but any operations on the condvar will fail.)",267],[10,"lock","","Acquires ownership of this mutex, returning an RAII guard which will\nunlock the mutex when dropped. The associated condition variable can\nalso be accessed through the returned guard.",267],[10,"new","","Create a new rwlock, with one associated condvar.",268],[10,"new_with_condvars","","Create a new rwlock, with a specified number of associated condvars.\nSimilar to mutex_with_condvars.",268],[10,"read","","Acquires a read-lock, returning an RAII guard that will unlock the lock\nwhen dropped. Calls to 'read' from other tasks may run concurrently with\nthis one.",268],[10,"write","","Acquire a write-lock, returning an RAII guard that will unlock the lock\nwhen dropped. No calls to 'read' or 'write' from other tasks will run\nconcurrently with this one.",268],[10,"downgrade","","Consumes this write lock and converts it into a read lock.",269],[10,"drop","","",269],[10,"drop","","",270],[10,"fmt","sync::mutex","",271],[10,"eq","","",271],[10,"ne","","",271],[10,"ne","","",271],[10,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",272],[10,"lock","","Acquires this lock, see `Mutex::lock`",272],[10,"destroy","","Deallocates resources associated with this static mutex.",272],[10,"new","","Creates a new mutex in an unlocked state ready for use.",273],[10,"try_lock","","Attempts to acquire this lock.",273],[10,"lock","","Acquires a mutex, blocking the current task until it is able to do so.",273],[10,"drop","","",274],[10,"drop","","",273],[10,"doit","sync::one","Perform an initialization routine once and only once. The given closure\nwill be executed if this is the first time `doit` has been called, and\notherwise the routine will *not* be invoked.",275],[10,"send","sync::comm::duplex","",276],[10,"send_opt","","",276],[10,"recv","","",276],[10,"try_recv","","",276],[10,"recv_opt","","",276],[10,"new","sync::comm::oneshot","",277],[10,"send","","",277],[10,"sent","","",277],[10,"recv","","",277],[10,"try_recv","","",277],[10,"upgrade","","",277],[10,"drop_chan","","",277],[10,"drop_port","","",277],[10,"can_recv","","",277],[10,"start_selection","","",277],[10,"abort_selection","","",277],[10,"drop","","",277],[10,"new","sync::comm::select","Creates a new selection structure. This set is initially empty and\n`wait` will fail!() if called.",278],[10,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",278],[10,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",278],[10,"id","","Retrieve the id of this handle.",279],[10,"recv","","Receive a value on the underlying receiver. Has the same semantics as\n`Receiver.recv`",279],[10,"recv_opt","","Block to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv_opt`",279],[10,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",279],[10,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",279],[10,"drop","","",278],[10,"drop","","",279],[10,"next","","",280],[10,"size_hint","","",280],[10,"chain","","",280],[10,"zip","","",280],[10,"map","","",280],[10,"filter","","",280],[10,"filter_map","","",280],[10,"enumerate","","",280],[10,"peekable","","",280],[10,"skip_while","","",280],[10,"take_while","","",280],[10,"skip","","",280],[10,"take","","",280],[10,"scan","","",280],[10,"flat_map","","",280],[10,"fuse","","",280],[10,"inspect","","",280],[10,"by_ref","","",280],[10,"advance","","",280],[10,"collect","","",280],[10,"nth","","",280],[10,"last","","",280],[10,"fold","","",280],[10,"count","","",280],[10,"all","","",280],[10,"any","","",280],[10,"find","","",280],[10,"position","","",280],[10,"max_by","","",280],[10,"min_by","","",280],[10,"new","sync::comm::shared","",281],[10,"postinit_lock","","",281],[10,"inherit_blocker","","",281],[10,"send","","",281],[10,"recv","","",281],[10,"try_recv","","",281],[10,"clone_chan","","",281],[10,"drop_chan","","",281],[10,"drop_port","","",281],[10,"can_recv","","",281],[10,"start_selection","","",281],[10,"abort_selection","","",281],[10,"drop","","",281],[10,"new","sync::comm::stream","",282],[10,"send","","",282],[10,"upgrade","","",282],[10,"recv","","",282],[10,"try_recv","","",282],[10,"drop_chan","","",282],[10,"drop_port","","",282],[10,"can_recv","","",282],[10,"start_selection","","",282],[10,"abort_selection","","",282],[10,"drop","","",282],[10,"fmt","sync::comm::sync","",283],[10,"new","","",284],[10,"send","","",284],[10,"try_send","","",284],[10,"recv","","",284],[10,"try_recv","","",284],[10,"clone_chan","","",284],[10,"drop_chan","","",284],[10,"drop_port","","",284],[10,"can_recv","","",284],[10,"start_selection","","",284],[10,"abort_selection","","",284],[10,"drop","","",284],[10,"fmt","sync::comm","",285],[10,"clone","","",285],[10,"clone_from","","",285],[10,"eq","","",285],[10,"ne","","",285],[10,"ne","","",285],[10,"fmt","","",286],[10,"clone","","",286],[10,"clone_from","","",286],[10,"eq","","",286],[10,"ne","","",286],[10,"ne","","",286],[10,"send","","Sends a value along this channel to be received by the corresponding\nreceiver.",287],[10,"send_opt","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",287],[10,"clone","","",287],[10,"clone_from","","",287],[10,"drop","","",287],[10,"send","","Sends a value on this synchronous channel.",288],[10,"send_opt","","Send a value on a channel, returning it back if the receiver\ndisconnected",288],[10,"try_send","","Attempts to send a value on this channel without blocking.",288],[10,"clone","","",288],[10,"clone_from","","",288],[10,"drop","","",288],[10,"recv","","Blocks waiting for a value on this receiver",289],[10,"try_recv","","Attempts to return a pending value on this receiver without blocking",289],[10,"recv_opt","","Attempt to wait for a value on this receiver, but does not fail if the\ncorresponding channel has hung up.",289],[10,"iter","","Returns an iterator which will block waiting for messages, but never\n`fail!`. It will return `None` when the channel has hung up.",289],[10,"next","","",290],[10,"size_hint","","",290],[10,"chain","","",290],[10,"zip","","",290],[10,"map","","",290],[10,"filter","","",290],[10,"filter_map","","",290],[10,"enumerate","","",290],[10,"peekable","","",290],[10,"skip_while","","",290],[10,"take_while","","",290],[10,"skip","","",290],[10,"take","","",290],[10,"scan","","",290],[10,"flat_map","","",290],[10,"fuse","","",290],[10,"inspect","","",290],[10,"by_ref","","",290],[10,"advance","","",290],[10,"collect","","",290],[10,"nth","","",290],[10,"last","","",290],[10,"fold","","",290],[10,"count","","",290],[10,"all","","",290],[10,"any","","",290],[10,"find","","",290],[10,"position","","",290],[10,"max_by","","",290],[10,"min_by","","",290],[10,"drop","","",289],[10,"drop","sync::lock","",291],[10,"wait","","Atomically exit the associated lock and block until a signal is sent.",292],[10,"wait_on","","Atomically exit the associated lock and block on a specified condvar\nuntil a signal is sent on that same condvar.",292],[10,"signal","","Wake up a blocked task. Returns false if there was no blocked task.",292],[10,"signal_on","","Wake up a blocked task on a specified condvar (as\nsync::cond.signal_on). Returns false if there was no blocked task.",292],[10,"broadcast","","Wake up all blocked tasks. Returns the number of tasks woken.",292],[10,"broadcast_on","","Wake up all blocked tasks on a specified condvar (as\nsync::cond.broadcast_on). Returns the number of tasks woken.",292],[10,"new","","Creates a new mutex to protect the user-supplied data.",293],[10,"new_with_condvars","","Create a new mutex, with a specified number of associated condvars.",293],[10,"lock","","Access the underlying mutable data with mutual exclusion from other\ntasks. The returned value is an RAII guard which will unlock the mutex\nwhen dropped. All concurrent tasks attempting to lock the mutex will\nblock while the returned value is still alive.",293],[10,"deref","","",294],[10,"deref_mut","","",294],[10,"new","","Create a reader/writer lock with the supplied data.",295],[10,"new_with_condvars","","Create a reader/writer lock with the supplied data and a specified number\nof condvars (as sync::RWLock::new_with_condvars).",295],[10,"write","","Access the underlying data mutably. Locks the rwlock in write mode;\nother readers and writers will block.",295],[10,"read","","Access the underlying data immutably. May run concurrently with other\nreading tasks.",295],[10,"downgrade","","Consumes this write lock token, returning a new read lock token.",296],[10,"deref","","",297],[10,"deref","","",296],[10,"deref_mut","","",296],[10,"new","","Create a new barrier that can block a given number of tasks.",298],[10,"wait","","Block the current task until a certain number of tasks is waiting.",298],[1,"AtomicOption","std::sync::atomic","An atomic, nullable unique pointer"],[1,"AtomicPtr","","An unsafe atomic pointer. Only supports basic atomic operations"],[1,"AtomicBool","","An atomic boolean type."],[2,"Ordering","","Atomic memory orderings"],[12,"Relaxed","","No ordering constraints, only atomic operations",299],[12,"Release","","When coupled with a store, all previous writes become visible\nto another thread that performs a load with `Acquire` ordering\non the same value",299],[12,"Acquire","","When coupled with a load, all subsequent loads will see data\nwritten before a store with `Release` ordering on the same value\nin another thread",299],[12,"AcqRel","","When coupled with a load, uses `Acquire` ordering, and with a store\n`Release` ordering",299],[12,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all\nsequentially consistent operations in the same order.",299],[3,"fence","","An atomic fence."],[5,"INIT_ATOMIC_UINT","",""],[5,"INIT_ATOMIC_BOOL","",""],[5,"INIT_ATOMIC_INT","",""],[1,"AtomicInt","","A signed atomic integer type, supporting basic atomic arithmetic operations"],[1,"AtomicUint","","An unsigned atomic integer type, supporting basic atomic arithmetic operations"],[0,"deque","std::sync","A (mostly) lock-free concurrent work-stealing deque"],[1,"Worker","std::sync::deque","Worker half of the work-stealing deque. This worker has exclusive access to\none side of the deque, and uses `push` and `pop` method to manipulate it."],[1,"Stealer","","The stealing half of the work-stealing deque. Stealers have access to the\nopposite end of the deque from the worker, and they only have access to the\n`steal` method."],[2,"Stolen","","When stealing some data, this is an enumeration of the possible outcomes."],[12,"Empty","","The deque was empty at the time of stealing",257],[12,"Abort","","The stealer lost the race for stealing data, and a retry may return more\ndata.",257],[12,"Data","","The stealer has successfully stolen some data.",257],[1,"BufferPool","","The allocation pool for buffers used by work-stealing deques. Right now this\nstructure is used for reclamation of memory after it is no longer in use by\ndeques."],[0,"mpmc_bounded_queue","std::sync",""],[1,"Queue","std::sync::mpmc_bounded_queue",""],[0,"mpsc_queue","std::sync","A mostly lock-free multi-producer, single consumer queue."],[2,"PopResult","std::sync::mpsc_queue","A result of the `pop` function."],[12,"Data","","Some data has been popped",300],[12,"Empty","","The queue is empty",300],[12,"Inconsistent","","The queue is in an inconsistent state. Popping data should succeed, but\nsome pushers have yet to make enough progress in order allow a pop to\nsucceed. It is recommended that a pop() occur \"in the near future\" in\norder to see if the sender has made progress or not",300],[1,"Queue","","The multi-producer single-consumer structure. This is not cloneable, but it\nmay be safely shared so long as it is guaranteed that there is only one\npopper at a time (many pushers are allowed)."],[0,"spsc_queue","std::sync","A single-producer single-consumer concurrent queue"],[1,"Queue","std::sync::spsc_queue","The single-producer single-consumer queue. This structure is not cloneable,\nbut it can be safely shared in an Arc if it is guaranteed that there\nis only one popper and one pusher touching the queue at any one point in\ntime."],[1,"Consumer","","A safe abstraction for the consumer in a single-producer single-consumer\nqueue."],[1,"Producer","","A safe abstraction for the producer in a single-producer single-consumer\nqueue."],[3,"queue","","Creates a new queue with a consumer-producer pair."],[10,"new","alloc::arc","Creates an atomically reference counted wrapper.",301],[10,"downgrade","","Downgrades a strong pointer to a weak pointer.",301],[10,"make_unique","","Acquires a mutable pointer to the inner contents by guaranteeing that\nthe reference count is one (no sharing is possible).",301],[10,"default","alloc::boxed","",236],[10,"clone","","Returns a copy of the owned box.",236],[10,"clone_from","","Performs copy-assignment from `source` by reusing the existing allocation.",236],[10,"clone_from","","",236],[10,"eq","","",236],[10,"ne","","",236],[10,"ne","","",236],[10,"partial_cmp","","",236],[10,"lt","","",236],[10,"le","","",236],[10,"ge","","",236],[10,"gt","","",236],[10,"lt","","",236],[10,"le","","",236],[10,"gt","","",236],[10,"ge","","",236],[10,"cmp","","",236],[10,"assert_receiver_is_total_eq","","",236],[10,"downcast","","",236],[10,"move","","",236],[10,"fmt","","",236],[10,"fmt","","",236],[10,"clone","alloc::arc","Duplicate an atomically reference counted wrapper.",301],[10,"clone_from","","",301],[10,"deref","","",301],[10,"drop","","",301],[10,"upgrade","","Attempts to upgrade this weak reference to a strong reference.",302],[10,"clone","","",302],[10,"clone_from","","",302],[10,"drop","","",302],[10,"new","alloc::rc","Constructs a new reference-counted pointer.",237],[10,"downgrade","","Downgrades the reference-counted pointer to a weak reference.",237],[10,"make_unique","","Acquires a mutable pointer to the inner contents by guaranteeing that\nthe reference count is one (no sharing is possible).",237],[10,"deref","","Borrows the value contained in the reference-counted pointer.",237],[10,"drop","","",237],[10,"clone","","",237],[10,"clone_from","","",237],[10,"default","","",237],[10,"eq","","",237],[10,"ne","","",237],[10,"ne","","",237],[10,"assert_receiver_is_total_eq","","",237],[10,"partial_cmp","","",237],[10,"lt","","",237],[10,"le","","",237],[10,"gt","","",237],[10,"ge","","",237],[10,"lt","","",237],[10,"le","","",237],[10,"gt","","",237],[10,"ge","","",237],[10,"cmp","","",237],[10,"fmt","","",237],[10,"upgrade","","Upgrades a weak reference to a strong reference.",303],[10,"drop","","",303],[10,"clone","","",303],[10,"clone_from","","",303],[1,"Arc","std::sync","An atomically reference counted wrapper for shared state."],[1,"Weak","","A weak pointer to an `Arc`."],[1,"Mutex","","A wrapper type which provides synchronized access to the underlying data, of\ntype `T`. A mutex always provides exclusive access, and concurrent requests\nwill block while the mutex is already locked."],[1,"MutexGuard","","An guard which is created by locking a mutex. Through this guard the\nunderlying data can be accessed."],[11,"cond","","Inner condition variable connected to the locked mutex that this guard\nwas created from. This can be used for atomic-unlock-and-deschedule.",294],[1,"Condvar","","A condition variable, a mechanism for unlock-and-descheduling and\nsignaling, for use with the lock types."],[1,"Barrier","","A barrier enables multiple tasks to synchronize the beginning\nof some computation."],[1,"RWLock","","A dual-mode reader-writer lock. The data can be accessed mutably or\nimmutably, and immutably-accessing tasks may run concurrently."],[1,"RWLockReadGuard","","A guard which is created by locking an rwlock in read mode. Through this\nguard the underlying data can be accessed."],[1,"RWLockWriteGuard","","A guard which is created by locking an rwlock in write mode. Through this\nguard the underlying data can be accessed."],[11,"cond","","Inner condition variable that can be used to sleep on the write mode of\nthis rwlock.",296],[1,"Semaphore","","A counting, blocking, bounded-waiting semaphore."],[1,"SemaphoreGuard","","An RAII guard used to represent an acquired resource to a semaphore. When\ndropped, this value will release the resource back to the semaphore."],[1,"Once","","A synchronization primitive which can be used to run a one-time global\ninitialization. Useful for one-time initialization for FFI or related\nfunctionality. This type can only be constructed with the `ONCE_INIT`\nvalue."],[5,"ONCE_INIT","",""],[0,"atomics","","Atomic types"],[1,"AtomicOption","std::sync::atomics","An atomic, nullable unique pointer"],[1,"AtomicPtr","","An unsafe atomic pointer. Only supports basic atomic operations"],[1,"AtomicBool","","An atomic boolean type."],[2,"Ordering","","Atomic memory orderings"],[12,"Relaxed","","No ordering constraints, only atomic operations",299],[12,"Release","","When coupled with a store, all previous writes become visible\nto another thread that performs a load with `Acquire` ordering\non the same value",299],[12,"Acquire","","When coupled with a load, all subsequent loads will see data\nwritten before a store with `Release` ordering on the same value\nin another thread",299],[12,"AcqRel","","When coupled with a load, uses `Acquire` ordering, and with a store\n`Release` ordering",299],[12,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all\nsequentially consistent operations in the same order.",299],[3,"fence","","An atomic fence."],[5,"INIT_ATOMIC_UINT","",""],[5,"INIT_ATOMIC_BOOL","",""],[5,"INIT_ATOMIC_INT","",""],[1,"AtomicInt","","A signed atomic integer type, supporting basic atomic arithmetic operations"],[1,"AtomicUint","","An unsigned atomic integer type, supporting basic atomic arithmetic operations"],[0,"c_vec","std","Library to interface with chunks of memory allocated in C."],[1,"CVec","std::c_vec","The type representing a foreign chunk of memory"],[10,"drop","","",304],[10,"new","","Create a `CVec` from a raw pointer to a buffer with a given length.",304],[10,"new_with_dtor","","Create a `CVec` from a foreign buffer, with a given length,\nand a function to run upon destruction.",304],[10,"as_mut_slice","","View the stored data as a mutable slice.",304],[10,"get","","Retrieves an element at a given index, returning `None` if the requested\nindex is greater than the length of the vector.",304],[10,"get_mut","","Retrieves a mutable element at a given index, returning `None` if the\nrequested index is greater than the length of the vector.",304],[10,"unwrap","","Unwrap the pointer without running the destructor",304],[10,"as_slice","","View the stored data as a slice.",304],[10,"len","","",304],[0,"dynamic_lib","std","Dynamic library facilities."],[1,"DynamicLibrary","std::dynamic_lib",""],[0,"dl","",""],[2,"Rtld","std::dynamic_lib::dl",""],[12,"Lazy","","",305],[12,"Now","","",305],[12,"Global","","",305],[12,"Local","","",305],[3,"open_external","",""],[3,"open_internal","",""],[3,"check_for_errors_in","",""],[3,"symbol","",""],[3,"close","",""],[10,"drop","std::dynamic_lib","",306],[10,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",306],[10,"prepend_search_path","","Prepends a path to this process's search path for dynamic libraries",306],[10,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",306],[10,"envvar","","Returns the environment variable for this process's dynamic library\nsearch path",306],[10,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",306],[10,"symbol","","Access the value at the symbol of the dynamic library",306],[0,"os","std","Higher-level interfaces to libc::* functions and operating system services."],[1,"Pipe","std::os","A low-level OS in-memory pipe."],[11,"reader","","A file descriptor representing the reading end of the pipe. Data written\non the `out` file descriptor can be read from this file descriptor.",307],[11,"writer","","A file descriptor representing the write end of the pipe. Data written\nto this file descriptor can be read from the `input` file descriptor.",307],[1,"MemoryMap","","A memory mapped file or chunk of memory. This is a very system-specific\ninterface to the OS's memory mapping facilities (`mmap` on POSIX,\n`VirtualAlloc`/`CreateFileMapping` on Windows). It makes no attempt at\nabstracting platform differences, besides in error values returned. Consider\nyourself warned."],[2,"MemoryMapKind","","Type of memory map"],[12,"MapFile","","Virtual memory map. Usually used to change the permissions of a given\nchunk of memory.  Corresponds to `VirtualAlloc` on Windows.",308],[12,"MapVirtual","","Virtual memory map. Usually used to change the permissions of a given\nchunk of memory, or for allocation. Corresponds to `VirtualAlloc` on\nWindows.",308],[2,"MapOption","","Options the memory map is created with"],[12,"MapReadable","","The memory should be readable",309],[12,"MapWritable","","The memory should be writable",309],[12,"MapExecutable","","The memory should be executable",309],[12,"MapAddr","","Create a map for a specific address range. Corresponds to `MAP_FIXED` on\nPOSIX.",309],[12,"MapFd","","Create a memory mapping for a file with a given fd.",309],[12,"MapOffset","","When using `MapFd`, the start of the map is `uint` bytes from the start\nof the file.",309],[12,"MapNonStandardFlags","","On POSIX, this can be used to specify the default flags passed to\n`mmap`. By default it uses `MAP_PRIVATE` and, if not using `MapFd`,\n`MAP_ANON`. This will override both of those. This is platform-specific\n(the exact values used) and ignored on Windows.",309],[2,"MapError","","Possible errors when creating a map."],[12,"ErrFdNotAvail","","## The following are POSIX-specific",310],[12,"ErrInvalidFd","","fd was not valid",310],[12,"ErrUnaligned","","Either the address given by `MapAddr` or offset given by `MapOffset` was\nnot a multiple of `MemoryMap::granularity` (unaligned to page size).",310],[12,"ErrNoMapSupport","","With `MapFd`, the fd does not support mapping.",310],[12,"ErrNoMem","","If using `MapAddr`, the address + `min_len` was outside of the process's\naddress space. If using `MapFd`, the target of the fd didn't have enough\nresources to fulfill the request.",310],[12,"ErrZeroLength","","A zero-length map was requested. This is invalid according to\n[POSIX](http://pubs.opengroup.org/onlinepubs/9699919799/functions/mmap.html).\nNot all platforms obey this, but this wrapper does.",310],[12,"ErrUnknown","","Unrecognized error. The inner value is the unrecognized errno.",310],[12,"ErrUnsupProt","","## The following are Windows-specific",310],[12,"ErrUnsupOffset","","When using `MapFd`, `MapOffset` was given (Windows does not support this\nat all)",310],[12,"ErrAlreadyExists","","When using `MapFd`, there was already a mapping to the file.",310],[12,"ErrVirtualAlloc","","Unrecognized error from `VirtualAlloc`. The inner value is the return\nvalue of GetLastError.",310],[12,"ErrCreateFileMappingW","","Unrecognized error from `CreateFileMapping`. The inner value is the\nreturn value of `GetLastError`.",310],[12,"ErrMapViewOfFile","","Unrecognized error from `MapViewOfFile`. The inner value is the return\nvalue of `GetLastError`.",310],[3,"num_cpus","","Get the number of cores available"],[3,"getcwd","","Returns the current working directory as a Path."],[3,"env","","Returns a vector of (variable, value) pairs, for all the environment\nvariables of the current process."],[3,"env_as_bytes","","Returns a vector of (variable, value) byte-vector pairs for all the\nenvironment variables of the current process."],[3,"getenv","","Fetches the environment variable `n` from the current process, returning\nNone if the variable isn't set."],[3,"getenv_as_bytes","","Fetches the environment variable `n` byte vector from the current process,\nreturning None if the variable isn't set."],[3,"setenv","","Sets the environment variable `n` to the value `v` for the currently running\nprocess."],[3,"unsetenv","","Remove a variable from the environment entirely."],[3,"split_paths","","Parses input according to platform conventions for the `PATH`\nenvironment variable."],[3,"join_paths","","Joins a collection of `Path`s appropriately for the `PATH`\nenvironment variable."],[3,"pipe","","Creates a new low-level OS in-memory pipe."],[3,"dll_filename","","Returns the proper dll filename for the given basename of a file\nas a String."],[3,"self_exe_name","","Optionally returns the filesystem path to the current executable which is\nrunning but with the executable name."],[3,"self_exe_path","","Optionally returns the filesystem path to the current executable which is\nrunning."],[3,"homedir","","Optionally returns the path to the current user's home directory if known."],[3,"tmpdir","","Returns the path to a temporary directory."],[3,"make_absolute","","\nConvert a relative path to an absolute path"],[3,"change_dir","","Changes the current working directory to the specified path, returning\nwhether the change was completed successfully or not."],[3,"errno","","Returns the platform-specific value of errno"],[3,"error_string","","Return the string corresponding to an `errno()` value of `errnum`.\n# Example\n```rust\nuse std::os;"],[3,"last_os_error","","Get a string representing the platform-dependent last error"],[3,"set_exit_status","","Sets the process exit code"],[3,"get_exit_status","","Fetches the process's current exit code. This defaults to 0 and can change\nby calling `set_exit_status`."],[3,"args","","Returns the arguments which this program was started with (normally passed\nvia the command line)."],[3,"args_as_bytes","","Returns the arguments which this program was started with (normally passed\nvia the command line) as byte vectors."],[3,"page_size","","Returns the page size of the current architecture in bytes."],[0,"consts","",""],[5,"ARCH","std::os::consts",""],[5,"FAMILY","",""],[5,"SYSNAME","","A string describing the specific operating system in use: in this\ncase, `linux`."],[5,"DLL_PREFIX","","Specifies the filename prefix used for shared libraries on this\nplatform: in this case, `lib`."],[5,"DLL_SUFFIX","","Specifies the filename suffix used for shared libraries on this\nplatform: in this case, `.so`."],[5,"DLL_EXTENSION","","Specifies the file extension used for shared libraries on this\nplatform that goes after the dot: in this case, `so`."],[5,"EXE_SUFFIX","","Specifies the filename suffix used for executable binaries on this\nplatform: in this case, the empty string."],[5,"EXE_EXTENSION","","Specifies the file extension, if any, used for executable binaries\non this platform: in this case, the empty string."],[5,"TMPBUF_SZ","std::os",""],[10,"fmt","","",310],[10,"new","","Create a new mapping with the given `options`, at least `min_len` bytes\nlong. `min_len` must be greater than zero; see the note on\n`ErrZeroLength`.",311],[10,"granularity","","Granularity that the offset or address must be for `MapOffset` and\n`MapAddr` respectively.",311],[10,"drop","","Unmap the mapping. Fails the task if `munmap` fails.",311],[10,"data","","Returns the pointer to the memory created or modified by this map.",311],[10,"len","","Returns the number of bytes this map applies to.",311],[10,"kind","","Returns the type of mapping this represents.",311],[0,"io","std","I/O, including files, networking, timers, and processes"],[1,"TempDir","std::io","A wrapper for a path to temporary directory implementing automatic\nscope-based deletion."],[1,"MemReader","","Reads from an owned byte vector"],[1,"BufReader","","Reads from a fixed-size byte slice"],[1,"MemWriter","","Writes to an owned, growable byte vector"],[1,"BufWriter","","Writes to a fixed-size byte slice"],[1,"BufferedReader","","Wraps a Reader and buffers input from it"],[1,"BufferedWriter","","Wraps a Writer and buffers output to it"],[1,"BufferedStream","","Wraps a Stream and buffers input and output to and from it."],[1,"LineBufferedWriter","","Wraps a Writer and buffers output to it, flushing whenever a newline (`0x0a`,\n`'\\n'`) is detected."],[1,"ChanReader","","Allows reading from a rx."],[1,"ChanWriter","","Allows writing to a tx."],[1,"IoError","","The type passed to I/O condition handlers to indicate error"],[11,"kind","","An enumeration which can be matched against for determining the flavor\nof error.",312],[11,"desc","","A human-readable description about the error",312],[11,"detail","","Detailed information about this error, not always available",312],[1,"RefReader","","A `RefReader` is a struct implementing `Reader` which contains a reference\nto another reader. This is often useful when composing streams."],[1,"RefWriter","","A `RefWriter` is a struct implementing `Writer` which contains a reference\nto another writer. This is often useful when composing streams."],[1,"Lines","","An iterator that reads a line on each iteration,\nuntil `.read_line()` encounters `EndOfFile`."],[1,"Chars","","An iterator that reads a utf8-encoded character on each iteration,\nuntil `.read_char()` encounters `EndOfFile`."],[1,"IncomingConnections","","An infinite iterator over incoming connection attempts.\nCalling `next` will block the task until a connection is attempted."],[1,"FileStat","","A structure used to describe metadata information about a file. This\nstructure is created through the `stat` method on a `Path`."],[11,"size","","The size of the file, in bytes",313],[11,"kind","","The kind of file this path points to (directory, file, pipe, etc.)",313],[11,"perm","","The file permissions currently on the file",313],[11,"created","","The time that the file was created at, in platform-dependent\nmilliseconds",313],[11,"modified","","The time that this file was last modified, in platform-dependent\nmilliseconds",313],[11,"accessed","","The time that this file was last accessed, in platform-dependent\nmilliseconds",313],[11,"unstable","","Information returned by stat() which is not guaranteed to be\nplatform-independent. This information may be useful on some platforms,\nbut it may have different meanings or no meaning at all on other\nplatforms.",313],[1,"UnstableFileStat","","This structure represents all of the possible information which can be\nreturned from a `stat` syscall which is not contained in the `FileStat`\nstructure. This information is not necessarily platform independent, and may\nhave different meanings or no meaning at all on some platforms."],[11,"device","","The ID of the device containing the file.",314],[11,"inode","","The file serial number.",314],[11,"rdev","","The device ID.",314],[11,"nlink","","The number of hard links to this file.",314],[11,"uid","","The user ID of the file.",314],[11,"gid","","The group ID of the file.",314],[11,"blksize","","The optimal block size for I/O.",314],[11,"blocks","","The blocks allocated for this file.",314],[11,"flags","","User-defined flags for the file.",314],[11,"gen","","The file generation number.",314],[1,"FilePermission","","A set of permissions for a file or directory is represented\nby a set of flags which are or'd together."],[2,"IoErrorKind","","A list specifying general categories of I/O error."],[12,"OtherIoError","","Any I/O error not part of this list.",315],[12,"EndOfFile","","The operation could not complete because end of file was reached.",315],[12,"FileNotFound","","The file was not found.",315],[12,"PermissionDenied","","The file permissions disallowed access to this file.",315],[12,"ConnectionFailed","","A network connection failed for some reason not specified in this list.",315],[12,"Closed","","The network operation failed because the network connection was closed.",315],[12,"ConnectionRefused","","The connection was refused by the remote server.",315],[12,"ConnectionReset","","The connection was reset by the remote server.",315],[12,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",315],[12,"NotConnected","","The network operation failed because it was not connected yet.",315],[12,"BrokenPipe","","The operation failed because a pipe was closed.",315],[12,"PathAlreadyExists","","A file already existed with that name.",315],[12,"PathDoesntExist","","No file exists at that location.",315],[12,"MismatchedFileTypeForOperation","","The path did not specify the type of file that this operation required. For example,\nattempting to copy a directory with the `fs::copy()` operation will fail with this error.",315],[12,"ResourceUnavailable","","The operation temporarily failed (for example, because a signal was received), and retrying\nmay succeed.",315],[12,"IoUnavailable","","No I/O functionality is available for this task.",315],[12,"InvalidInput","","A parameter was incorrect in a way that caused an I/O error not part of this list.",315],[12,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",315],[12,"ShortWrite","","This write operation failed to write all of its data.",315],[12,"NoProgress","","The Reader returned 0 bytes from `read()` too many times.",315],[2,"SeekStyle","","When seeking, the resulting cursor is offset from a base by the offset given\nto the `seek` function. The base used is specified by this enumeration."],[12,"SeekSet","","Seek from the beginning of the stream",316],[12,"SeekEnd","","Seek from the end of the stream",316],[12,"SeekCur","","Seek from the current position",316],[2,"FileMode","","A mode specifies how a file should be opened or created. These modes are\npassed to `File::open_mode` and are used to control where the file is\npositioned when it is initially opened."],[12,"Open","","Opens a file positioned at the beginning.",317],[12,"Append","","Opens a file positioned at EOF.",317],[12,"Truncate","","Opens a file, truncating it if it already exists.",317],[2,"FileAccess","","Access permissions with which the file should be opened. `File`s\nopened with `Read` will return an error if written to."],[12,"Read","","Read-only access, requests to write will result in an error",318],[12,"Write","","Write-only access, requests to read will result in an error",318],[12,"ReadWrite","","Read-write access, no requests are denied by default",318],[2,"FileType","","Different kinds of files which can be identified by a call to stat"],[12,"TypeFile","","This is a normal file, corresponding to `S_IFREG`",319],[12,"TypeDirectory","","This file is a directory, corresponding to `S_IFDIR`",319],[12,"TypeNamedPipe","","This file is a named pipe, corresponding to `S_IFIFO`",319],[12,"TypeBlockSpecial","","This file is a block device, corresponding to `S_IFBLK`",319],[12,"TypeSymlink","","This file is a symbolic link to another file, corresponding to `S_IFLNK`",319],[12,"TypeUnknown","","The type of this file is not recognized as one of the other categories",319],[3,"standard_error","","Creates a standard error for a commonly used flavor of error. The `detail`\nfield of the returned error will always be `None`."],[0,"test","","Various utility functions useful for writing I/O tests"],[3,"next_test_port","std::io::test","Get a port number, starting at 9600, for use in tests"],[3,"next_test_unix","","Get a temporary path which could be the location of a unix socket"],[3,"next_test_ip4","","Get a unique IPv4 localhost:port pair starting at 9600"],[3,"next_test_ip6","","Get a unique IPv6 localhost:port pair starting at 9600"],[3,"raise_fd_limit","","Raises the file descriptor limit when running tests if necessary"],[10,"with_capacity","std::io","Creates a new `BufferedReader` with the specified buffer capacity",320],[10,"new","","Creates a new `BufferedReader` with a default buffer capacity",320],[10,"get_ref","","Gets a reference to the underlying reader.",320],[10,"unwrap","","Unwraps this `BufferedReader`, returning the underlying reader.",320],[10,"fill_buf","","",320],[10,"consume","","",320],[10,"read","","",320],[10,"with_capacity","","Creates a new `BufferedWriter` with the specified buffer capacity",321],[10,"new","","Creates a new `BufferedWriter` with a default buffer capacity",321],[10,"get_ref","","Gets a reference to the underlying writer.",321],[10,"unwrap","","Unwraps this `BufferedWriter`, returning the underlying writer.",321],[10,"write","","",321],[10,"flush","","",321],[10,"drop","","",321],[10,"new","","Creates a new `LineBufferedWriter`",322],[10,"get_ref","","Gets a reference to the underlying writer.",322],[10,"unwrap","","Unwraps this `LineBufferedWriter`, returning the underlying writer.",322],[10,"write","","",322],[10,"flush","","",322],[10,"with_capacities","","Creates a new buffered stream with explicitly listed capacities for the\nreader/writer buffer.",323],[10,"new","","Creates a new buffered stream with the default reader/writer buffer\ncapacities.",323],[10,"get_ref","","Gets a reference to the underlying stream.",323],[10,"unwrap","","Unwraps this `BufferedStream`, returning the underlying stream.",323],[10,"fill_buf","","",323],[10,"consume","","",323],[10,"read","","",323],[10,"write","","",323],[10,"flush","","",323],[10,"new","","Wraps a `Port` in a `ChanReader` structure",324],[10,"read","","",324],[10,"new","","Wraps a channel in a `ChanWriter` structure",325],[10,"clone","","",325],[10,"write","","",325],[10,"clone","","",326],[10,"new","","Create a new `MemWriter`.",326],[10,"with_capacity","","Create a new `MemWriter`, allocating at least `n` bytes for\nthe internal buffer.",326],[10,"get_ref","","Acquires an immutable reference to the underlying buffer of this\n`MemWriter`.",326],[10,"unwrap","","Unwraps this `MemWriter`, returning the underlying buffer",326],[10,"write","","",326],[10,"new","","Creates a new `MemReader` which will read the buffer given. The buffer\ncan be re-acquired through `unwrap`",327],[10,"eof","","Tests whether this reader has read all bytes in its buffer.",327],[10,"get_ref","","Acquires an immutable reference to the underlying buffer of this\n`MemReader`.",327],[10,"unwrap","","Unwraps this `MemReader`, returning the underlying buffer",327],[10,"read","","",327],[10,"tell","","",327],[10,"seek","","",327],[10,"fill_buf","","",327],[10,"consume","","",327],[10,"new","","Creates a new `BufWriter` which will wrap the specified buffer. The\nwriter initially starts at position 0.",328],[10,"write","","",328],[10,"tell","","",328],[10,"seek","","",328],[10,"new","","Creates a new buffered reader which will read the specified buffer",329],[10,"eof","","Tests whether this reader has read all bytes in its buffer.",329],[10,"read","","",329],[10,"tell","","",329],[10,"seek","","",329],[10,"fill_buf","","",329],[10,"consume","","",329],[10,"new_in","","Attempts to make a temporary directory inside of `tmpdir` whose name\nwill have the suffix `suffix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",330],[10,"new","","Attempts to make a temporary directory inside of `os::tmpdir()` whose\nname will have the suffix `suffix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",330],[10,"unwrap","","Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper.\nThis discards the wrapper so that the automatic deletion of the\ntemporary directory is prevented.",330],[10,"path","","Access the wrapped `std::path::Path` to the temporary directory.",330],[10,"close","","Close and remove the temporary directory",330],[10,"drop","","",330],[0,"extensions","","Utility mixins that apply to all Readers and Writers"],[1,"Bytes","std::io::extensions","An iterator that reads a single byte on each iteration,\nuntil `.read_byte()` returns `EndOfFile`."],[3,"u64_to_le_bytes","","Converts an 8-bit to 64-bit unsigned value to a little-endian byte\nrepresentation of the given size. If the size is not big enough to\nrepresent the value, then the high-order bytes are truncated."],[3,"u64_to_be_bytes","","Converts an 8-bit to 64-bit unsigned value to a big-endian byte\nrepresentation of the given size. If the size is not big enough to\nrepresent the value, then the high-order bytes are truncated."],[3,"u64_from_be_bytes","","Extracts an 8-bit to 64-bit unsigned big-endian value from the given byte\nbuffer and returns it as a 64-bit value."],[10,"new","","Constructs a new byte iterator from the given Reader instance.",331],[10,"next","","",331],[0,"fs","std::io","Synchronous File I/O"],[1,"File","std::io::fs","Unconstrained file access type that exposes read and write operations"],[1,"Directories","","An iterator which walks over a directory"],[3,"unlink","","Unlink a file from the underlying filesystem."],[3,"stat","","Given a path, query the file system to get information about a file,\ndirectory, etc. This function will traverse symlinks to query\ninformation about the destination file."],[3,"lstat","","Perform the same operation as the `stat` function, except that this\nfunction does not traverse through symlinks. This will return\ninformation about the symlink file instead of the file that it points\nto."],[3,"rename","","Rename a file or directory to a new name."],[3,"copy","","Copies the contents of one file to another. This function will also\ncopy the permission bits of the original file to the destination file."],[3,"chmod","","Changes the permission mode bits found on a file or a directory. This\nfunction takes a mask from the `io` module"],[3,"chown","","Change the user and group owners of a file at the specified path."],[3,"link","","Creates a new hard link on the filesystem. The `dst` path will be a\nlink pointing to the `src` path. Note that systems often require these\ntwo paths to both be located on the same filesystem."],[3,"symlink","","Creates a new symbolic link on the filesystem. The `dst` path will be a\nsymlink pointing to the `src` path."],[3,"readlink","","Reads a symlink, returning the file that the symlink points to."],[3,"mkdir","","Create a new, empty directory at the provided path"],[3,"rmdir","","Remove an existing, empty directory"],[3,"readdir","","Retrieve a vector containing all entries within a provided directory"],[3,"walk_dir","","Returns an iterator which will recursively walk the directory structure\nrooted at `path`. The path given will not be iterated over, and this will\nperform iteration in some top-down order.  The contents of unreadable\nsubdirectories are ignored."],[3,"mkdir_recursive","","Recursively create a directory and all of its parent components if they\nare missing."],[3,"rmdir_recursive","","Removes a directory at this path, after removing all its contents. Use\ncarefully!"],[3,"change_file_times","","Changes the timestamps for a file's last modification and access time.\nThe file at the path specified will have its last access time set to\n`atime` and its modification time set to `mtime`. The times specified should\nbe in milliseconds."],[6,"PathExtensions","","Utility methods for paths."],[9,"stat","","Get information on the file, directory, etc at this path.",332],[9,"lstat","","Get information on the file, directory, etc at this path, not following\nsymlinks.",332],[9,"exists","","Boolean value indicator whether the underlying file exists on the local\nfilesystem. Returns false in exactly the cases where `fs::stat` fails.",332],[9,"is_file","","Whether the underlying implementation (be it a file path, or something\nelse) points at a \"regular file\" on the FS. Will return false for paths\nto non-existent locations or directories or other non-regular files\n(named pipes, etc). Follows links when making this determination.",332],[9,"is_dir","","Whether the underlying implementation (be it a file path, or something\nelse) is pointing at a directory in the underlying FS. Will return\nfalse for paths to non-existent locations or if the item is not a\ndirectory (eg files, named pipes, etc). Follows links when making this\ndetermination.",332],[10,"open_mode","","Open a file at `path` in the mode specified by the `mode` and `access`\narguments",333],[10,"open","","Attempts to open a file in read-only mode. This function is equivalent to\n`File::open_mode(path, Open, Read)`, and will raise all of the same\nerrors that `File::open_mode` does.",333],[10,"create","","Attempts to create a file in write-only mode. This function is\nequivalent to `File::open_mode(path, Truncate, Write)`, and will\nraise all of the same errors that `File::open_mode` does.",333],[10,"path","","Returns the original path which was used to open this file.",333],[10,"fsync","","Synchronizes all modifications to this file to its permanent storage\ndevice. This will flush any internal buffers necessary to perform this\noperation.",333],[10,"datasync","","This function is similar to `fsync`, except that it may not synchronize\nfile metadata to the filesystem. This is intended for use case which\nmust synchronize content, but don't need the metadata on disk. The goal\nof this method is to reduce disk operations.",333],[10,"truncate","","Either truncates or extends the underlying file, updating the size of\nthis file to become `size`. This is equivalent to unix's `truncate`\nfunction.",333],[10,"eof","","Returns true if the stream has reached the end of the file.",333],[10,"stat","","Queries information about the underlying file.",333],[10,"next","","",334],[10,"read","","",333],[10,"write","","",333],[10,"tell","","",333],[10,"seek","","",333],[0,"net","std::io","Networking I/O"],[0,"addrinfo","std::io::net","Synchronous DNS Resolution"],[1,"Hint","std::io::net::addrinfo","This structure is used to provide hints when fetching addresses for a\nremote host to control how the lookup is performed."],[11,"family","","",335],[11,"socktype","","",335],[11,"protocol","","",335],[11,"flags","","",335],[1,"Info","",""],[11,"address","","",336],[11,"family","","",336],[11,"socktype","","",336],[11,"protocol","","",336],[11,"flags","","",336],[2,"SocketType","","Hints to the types of sockets that are desired when looking up hosts"],[12,"Stream","","",337],[12,"Datagram","","",337],[12,"Raw","","",337],[2,"Flag","","Flags which can be or'd into the `flags` field of a `Hint`. These are used\nto manipulate how a query is performed."],[12,"AddrConfig","","",338],[12,"All","","",338],[12,"CanonName","","",338],[12,"NumericHost","","",338],[12,"NumericServ","","",338],[12,"Passive","","",338],[12,"V4Mapped","","",338],[2,"Protocol","","A transport protocol associated with either a hint or a return value of\n`lookup`"],[12,"TCP","","",339],[12,"UDP","","",339],[3,"get_host_addresses","","Easy name resolution. Given a hostname, returns the list of IP addresses for\nthat hostname."],[0,"tcp","std::io::net","TCP network connections"],[1,"TcpStream","std::io::net::tcp","A structure which represents a TCP stream between a local socket and a\nremote socket."],[1,"TcpListener","","A structure representing a socket server. This listener is used to create a\n`TcpAcceptor` which can be used to accept sockets on a local port."],[1,"TcpAcceptor","","The accepting half of a TCP socket server. This structure is created through\na `TcpListener`'s `listen` method, and this object can be used to accept new\n`TcpStream` instances."],[10,"connect","","Open a TCP connection to a remote host by hostname or IP address.",340],[10,"connect_timeout","","Creates a TCP connection to a remote socket address, timing out after\nthe specified duration.",340],[10,"peer_name","","Returns the socket address of the remote peer of this TCP connection.",340],[10,"socket_name","","Returns the socket address of the local half of this TCP connection.",340],[10,"set_nodelay","","Sets the nodelay flag on this connection to the boolean specified",340],[10,"set_keepalive","","Sets the keepalive timeout to the timeout specified.",340],[10,"close_read","","Closes the reading half of this connection.",340],[10,"close_write","","Closes the writing half of this connection.",340],[10,"set_timeout","","Sets a timeout, in milliseconds, for blocking operations on this stream.",340],[10,"set_read_timeout","","Sets the timeout for read operations on this stream.",340],[10,"set_write_timeout","","Sets the timeout for write operations on this stream.",340],[10,"clone","","Creates a new handle to this TCP stream, allowing for simultaneous reads\nand writes of this connection.",340],[10,"read","","",340],[10,"write","","",340],[10,"bind","","Creates a new `TcpListener` which will be bound to the specified IP\nand port. This listener is not ready for accepting connections,\n`listen` must be called on it before that's possible.",341],[10,"socket_name","","Returns the local socket address of this listener.",341],[10,"listen","","",341],[10,"set_timeout","","Prevents blocking on all future accepts after `ms` milliseconds have\nelapsed.",342],[10,"close_accept","","Closes the accepting capabilities of this acceptor.",342],[10,"accept","","",342],[10,"clone","","Creates a new handle to this TCP acceptor, allowing for simultaneous\naccepts.",342],[0,"udp","std::io::net","UDP (User Datagram Protocol) network connections."],[1,"UdpSocket","std::io::net::udp","A User Datagram Protocol socket."],[1,"UdpStream","","A type that allows convenient usage of a UDP stream connected to one\naddress via the `Reader` and `Writer` traits."],[10,"bind","","Creates a UDP socket from the given socket address.",343],[10,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",343],[10,"recvfrom","","",343],[10,"send_to","","Sends data on the socket to the given address. Returns nothing on\nsuccess.",343],[10,"sendto","","",343],[10,"connect","","Creates a `UdpStream`, which allows use of the `Reader` and `Writer`\ntraits to receive and send data from the same address. This transfers\nownership of the socket to the stream.",343],[10,"socket_name","","Returns the socket address that this socket was created from.",343],[10,"join_multicast","","Joins a multicast IP address (becomes a member of it)",343],[10,"leave_multicast","","Leaves a multicast IP address (drops membership from it)",343],[10,"set_multicast_loop","","Set the multicast loop flag to the specified value",343],[10,"set_multicast_ttl","","Sets the multicast TTL",343],[10,"set_ttl","","Sets this socket's TTL",343],[10,"set_broadcast","","Sets the broadcast flag on or off",343],[10,"set_broadast","","Sets the broadcast flag on or off",343],[10,"set_timeout","","Sets the read/write timeout for this socket.",343],[10,"set_read_timeout","","Sets the read timeout for this socket.",343],[10,"set_write_timeout","","Sets the write timeout for this socket.",343],[10,"clone","","Creates a new handle to this UDP socket, allowing for simultaneous\nreads and writes of the socket.",343],[10,"as_socket","","Allows access to the underlying UDP socket owned by this stream. This\nis useful to, for example, use the socket to send data to hosts other\nthan the one that this stream is connected to.",344],[10,"disconnect","","Consumes this UDP stream and returns out the underlying socket.",344],[10,"read","","",344],[10,"write","","",344],[0,"ip","std::io::net","Internet Protocol (IP) addresses."],[1,"SocketAddr","std::io::net::ip",""],[11,"ip","","",345],[11,"port","","",345],[2,"IpAddr","",""],[12,"Ipv4Addr","","",346],[12,"Ipv6Addr","","",346],[4,"Port","",""],[10,"hash","","",346],[10,"clone","","",346],[10,"eq","","",346],[10,"ne","","",346],[10,"fmt","","",346],[10,"hash","","",345],[10,"clone","","",345],[10,"eq","","",345],[10,"ne","","",345],[10,"fmt","","",345],[10,"from_str","","",346],[10,"from_str","","",345],[0,"pipe","std::io::net","Named pipes"],[1,"UnixStream","std::io::net::pipe","A stream which communicates over a named pipe."],[1,"UnixListener","","A value that can listen for incoming named pipe connection requests."],[1,"UnixAcceptor","","A value that can accept named pipe connections, returned from `listen()`."],[10,"connect","","Connect to a pipe named by `path`. This will attempt to open a\nconnection to the underlying socket.",347],[10,"connect_timeout","","Connect to a pipe named by `path`, timing out if the specified number of\nmilliseconds.",347],[10,"close_read","","Closes the reading half of this connection.",347],[10,"close_write","","Closes the writing half of this connection.",347],[10,"set_timeout","","Sets the read/write timeout for this socket.",347],[10,"set_read_timeout","","Sets the read timeout for this socket.",347],[10,"set_write_timeout","","Sets the write timeout for this socket.",347],[10,"clone","","",347],[10,"read","","",347],[10,"write","","",347],[10,"bind","","Creates a new listener, ready to receive incoming connections on the\nspecified socket. The server will be named by `path`.",348],[10,"listen","","",348],[10,"set_timeout","","Sets a timeout for this acceptor, after which accept() will no longer\nblock indefinitely.",349],[10,"close_accept","","Closes the accepting capabilities of this acceptor.",349],[10,"accept","","",349],[10,"clone","","Creates a new handle to this unix acceptor, allowing for simultaneous\naccepts.",349],[0,"pipe","std::io","Synchronous, in-memory pipes."],[1,"PipeStream","std::io::pipe","A synchronous, in-memory pipe."],[1,"PipePair","",""],[11,"reader","","",350],[11,"writer","","",350],[10,"open","","Consumes a file descriptor to return a pipe stream that will have\nsynchronous, but non-blocking reads/writes. This is useful if the file\ndescriptor is acquired via means other than the standard methods.",351],[10,"pair","","Creates a pair of in-memory OS pipes for a unidirectional communication\nstream.",351],[10,"clone","","",351],[10,"read","","",351],[10,"write","","",351],[0,"process","std::io","Bindings for executing child processes"],[1,"Process","std::io::process","Representation of a running or exited child process."],[11,"stdin","","Handle to the child's stdin, if the `stdin` field of this process's\n`ProcessConfig` was `CreatePipe`. By default, this handle is `Some`.",352],[11,"stdout","","Handle to the child's stdout, if the `stdout` field of this process's\n`ProcessConfig` was `CreatePipe`. By default, this handle is `Some`.",352],[11,"stderr","","Handle to the child's stderr, if the `stderr` field of this process's\n`ProcessConfig` was `CreatePipe`. By default, this handle is `Some`.",352],[11,"extra_io","","Extra I/O handles as configured by the original `ProcessConfig` when\nthis process was created. This is by default empty.",352],[1,"Command","","The `Command` type acts as a process builder, providing fine-grained control\nover how a new process should be spawned. A default configuration can be\ngenerated using `Command::new(program)`, where `program` gives a path to the\nprogram to be executed. Additional builder methods allow the configuration\nto be changed (for example, by adding arguments) prior to spawning:"],[1,"ProcessOutput","","The output of a finished process."],[11,"status","","The status (exit code) of the process.",353],[11,"output","","The data that the process wrote to stdout.",353],[11,"error","","The data that the process wrote to stderr.",353],[2,"StdioContainer","","Describes what to do with a standard io stream for a child process."],[12,"Ignored","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",354],[12,"InheritFd","","The specified file descriptor is inherited for the stream which it is\nspecified for. Ownership of the file descriptor is *not* taken, so the\ncaller must clean it up.",354],[12,"CreatePipe","","Creates a pipe for the specified file descriptor which will be created\nwhen the process is spawned.",354],[2,"ProcessExit","","Describes the result of a process after it has terminated.\nNote that Windows have no signals, so the result is usually ExitStatus."],[12,"ExitStatus","","Normal termination with an exit status.",355],[12,"ExitSignal","","Termination by signal, with the signal number.",355],[4,"EnvMap","","A HashMap representation of environment variables."],[5,"PleaseExitSignal","","Signal a process to exit, without forcibly killing it. Corresponds to\nSIGTERM on unix platforms."],[5,"MustDieSignal","","Signal a process to exit immediately, forcibly killing it. Corresponds to\nSIGKILL on unix platforms."],[10,"clone","","",356],[10,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",356],[10,"arg","","Add an argument to pass to the program.",356],[10,"args","","Add multiple arguments to pass to the program.",356],[10,"env","","Inserts or updates an environment variable mapping.",356],[10,"env_remove","","Removes an environment variable mapping.",356],[10,"env_set_all","","Sets the entire environment map for the child process.",356],[10,"cwd","","Set the working directory for the child process.",356],[10,"stdin","","Configuration for the child process's stdin handle (file descriptor 0).\nDefaults to `CreatePipe(true, false)` so the input can be written to.",356],[10,"stdout","","Configuration for the child process's stdout handle (file descriptor 1).\nDefaults to `CreatePipe(false, true)` so the output can be collected.",356],[10,"stderr","","Configuration for the child process's stderr handle (file descriptor 2).\nDefaults to `CreatePipe(false, true)` so the output can be collected.",356],[10,"extra_io","","Attaches a stream/file descriptor/pipe to the child process. Inherited\nfile descriptors are numbered consecutively, starting at 3; the first\nthree file descriptors (stdin/stdout/stderr) are configured with the\n`stdin`, `stdout`, and `stderr` methods.",356],[10,"uid","","Sets the child process's user id. This translates to a `setuid` call in\nthe child process. Setting this value on windows will cause the spawn to\nfail. Failure in the `setuid` call on unix will also cause the spawn to\nfail.",356],[10,"gid","","Similar to `uid`, but sets the group id of the child process. This has\nthe same semantics as the `uid` field.",356],[10,"detached","","Sets the child process to be spawned in a detached state. On unix, this\nmeans that the child is the leader of a new process group.",356],[10,"spawn","","Executes the command as a child process, which is returned.",356],[10,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",356],[10,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",356],[10,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",356],[10,"clone","","",353],[10,"eq","","",353],[10,"ne","","",353],[10,"clone","","",354],[10,"clone","","",355],[10,"eq","","",355],[10,"ne","","",355],[10,"fmt","","Format a ProcessExit enum, to nicely present the information.",355],[10,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",355],[10,"matches_exit_status","","Checks whether this ProcessExit matches the given exit status.\nTermination by signal will never match an exit code.",355],[10,"kill","","Sends `signal` to another process in the system identified by `id`.",352],[10,"id","","Returns the process id of this child process",352],[10,"signal","","Sends the specified signal to the child process, returning whether the\nsignal could be delivered or not.",352],[10,"signal_exit","","Sends a signal to this child requesting that it exits. This is\nequivalent to sending a SIGTERM on unix platforms.",352],[10,"signal_kill","","Sends a signal to this child forcing it to exit. This is equivalent to\nsending a SIGKILL on unix platforms.",352],[10,"wait","","Wait for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",352],[10,"set_timeout","","Sets a timeout, in milliseconds, for future calls to wait().",352],[10,"wait_with_output","","Simultaneously wait for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning a `ProcessOutput`\ninstance.",352],[10,"forget","","Forgets this process, allowing it to outlive the parent",352],[10,"drop","","",352],[0,"signal","std::io","Signal handling"],[1,"Listener","std::io::signal","Listener provides a receiver to listen for registered signals."],[11,"rx","","Clients of Listener can `recv()` on this receiver. This is exposed to\nallow selection over it as well as manipulation of the receiver\ndirectly.",357],[2,"Signum","","Signals that can be sent and received"],[12,"Break","","Equivalent to SIGBREAK, delivered when the user presses Ctrl-Break.",358],[12,"HangUp","","Equivalent to SIGHUP, delivered when the user closes the terminal\nwindow. On delivery of HangUp, the program is given approximately\n10 seconds to perform any cleanup. After that, Windows will\nunconditionally terminate it.",358],[12,"Interrupt","","Equivalent to SIGINT, delivered when the user presses Ctrl-c.",358],[12,"Quit","","Equivalent to SIGQUIT, delivered when the user presses Ctrl-\\.",358],[12,"StopTemporarily","","Equivalent to SIGTSTP, delivered when the user presses Ctrl-z.",358],[12,"User1","","Equivalent to SIGUSR1.",358],[12,"User2","","Equivalent to SIGUSR2.",358],[12,"WindowSizeChange","","Equivalent to SIGWINCH, delivered when the console has been resized.\nWindowSizeChange may not be delivered in a timely manner; size change\nwill only be detected when the cursor is being moved.",358],[10,"fmt","","",358],[10,"hash","","",358],[10,"eq","","",358],[10,"ne","","",358],[10,"new","","Creates a new listener for signals. Once created, signals are bound via\nthe `register` method (otherwise nothing will ever be received)",357],[10,"register","","Listen for a signal, returning true when successfully registered for\nsignum. Signals can be received using `recv()`.",357],[10,"unregister","","Unregisters a signal. If this listener currently had a handler\nregistered for the signal, then it will stop receiving any more\nnotification about the signal. If the signal has already been received,\nit may still be returned by `recv`.",357],[0,"stdio","std::io","Non-blocking access to stdin, stdout, and stderr."],[1,"StdReader","std::io::stdio","Representation of a reader of a standard input stream"],[1,"StdWriter","","Representation of a writer to a standard output stream"],[3,"stdin","","Creates a new non-blocking handle to the stdin of the current process."],[3,"stdin_raw","","Creates a new non-blocking handle to the stdin of the current process."],[3,"stdout","","Creates a line-buffered handle to the stdout of the current process."],[3,"stdout_raw","","Creates an unbuffered handle to the stdout of the current process"],[3,"stderr","","Creates a line-buffered handle to the stderr of the current process."],[3,"stderr_raw","","Creates an unbuffered handle to the stderr of the current process"],[3,"set_stdout","","Resets the task-local stdout handle to the specified writer"],[3,"set_stderr","","Resets the task-local stderr handle to the specified writer"],[3,"flush","","Flushes the local task's stdout handle."],[3,"print","","Prints a string to the stdout of the current process. No newline is emitted\nafter the string is printed."],[3,"println","","Prints a string to the stdout of the current process. A literal\n`\\n` character is printed to the console after the string."],[3,"print_args","","Similar to `print`, but takes a `fmt::Arguments` structure to be compatible\nwith the `format_args!` macro."],[3,"println_args","","Similar to `println`, but takes a `fmt::Arguments` structure to be\ncompatible with the `format_args!` macro."],[10,"isatty","","Returns whether this stream is attached to a TTY instance or not.",359],[10,"read","","",359],[10,"winsize","","Gets the size of this output window, if possible. This is typically used\nwhen the writer is attached to something like a terminal, this is used\nto fetch the dimensions of the terminal.",360],[10,"set_raw","","Controls whether this output stream is a \"raw stream\" or simply a normal\nstream.",360],[10,"isatty","","Returns whether this stream is attached to a TTY instance or not.",360],[10,"write","","",360],[0,"timer","std::io","Synchronous Timers"],[1,"Timer","std::io::timer","A synchronous timer object"],[3,"sleep","","Sleep the current task for the specified duration."],[10,"new","","Creates a new timer which can be used to put the current task to sleep\nfor a number of milliseconds, or to possibly create channels which will\nget notified after an amount of time has passed.",361],[10,"sleep","","Blocks the current task for the specified duration.",361],[10,"oneshot","","Creates a oneshot receiver which will have a notification sent when\nthe specified duration has elapsed.",361],[10,"periodic","","Creates a receiver which will have a continuous stream of notifications\nbeing sent each time the specified duration has elapsed.",361],[0,"util","std::io","Utility implementations of Reader and Writer"],[1,"LimitReader","std::io::util","Wraps a `Reader`, limiting the number of bytes that can be read from it."],[1,"NullWriter","","A `Writer` which ignores bytes written to it, like /dev/null."],[1,"ZeroReader","","A `Reader` which returns an infinite stream of 0 bytes, like /dev/zero."],[1,"NullReader","","A `Reader` which is always at EOF, like /dev/null."],[1,"MultiWriter","","A `Writer` which multiplexes writes to a set of `Writer`s."],[1,"ChainedReader","","A `Reader` which chains input from multiple `Reader`s, reading each to\ncompletion before moving onto the next."],[1,"TeeReader","","A `Reader` which forwards input from another `Reader`, passing it along to\na `Writer` as well. Similar to the `tee(1)` command."],[1,"IterReader","","An adaptor converting an `Iterator<u8>` to a `Reader`."],[3,"copy","","Copies all data from a `Reader` to a `Writer`."],[10,"new","","Creates a new `LimitReader`",362],[10,"unwrap","","Consumes the `LimitReader`, returning the underlying `Reader`.",362],[10,"limit","","Returns the number of bytes that can be read before the `LimitReader`\nwill return EOF.",362],[10,"read","","",362],[10,"fill_buf","","",362],[10,"consume","","",362],[10,"write","","",363],[10,"read","","",364],[10,"fill_buf","","",364],[10,"consume","","",364],[10,"read","","",365],[10,"fill_buf","","",365],[10,"consume","","",365],[10,"new","","Creates a new `MultiWriter`",366],[10,"write","","",366],[10,"flush","","",366],[10,"new","","Creates a new `ChainedReader`",367],[10,"read","","",367],[10,"new","","Creates a new `TeeReader`",368],[10,"unwrap","","Consumes the `TeeReader`, returning the underlying `Reader` and\n`Writer`.",368],[10,"read","","",368],[10,"new","","Creates a new `IterReader` which will read from the specified\n`Iterator`.",369],[10,"read","","",369],[4,"IoResult","std::io","A convenient typedef of the return value of any I/O action."],[5,"UserRead","",""],[5,"UserWrite","",""],[5,"UserExecute","",""],[5,"GroupRead","",""],[5,"GroupWrite","",""],[5,"GroupExecute","",""],[5,"OtherRead","",""],[5,"OtherWrite","",""],[5,"OtherExecute","",""],[5,"UserRWX","",""],[5,"GroupRWX","",""],[5,"OtherRWX","",""],[5,"UserFile","","Permissions for user owned files, equivalent to 0644 on\nunix-like systems."],[5,"UserDir","","Permissions for user owned directories, equivalent to 0755 on\nunix-like systems."],[5,"UserExec","","Permissions for user owned executables, equivalent to 0755\non unix-like systems."],[5,"AllPermissions","","All possible permissions enabled."],[6,"UpdateIoError","","A trait that lets you add a `detail` to an IoError easily"],[9,"update_err","","Returns an IoError with updated description and detail",370],[9,"update_detail","","Returns an IoError with updated detail",370],[9,"update_desc","","Returns an IoError with update description",370],[6,"Reader","","A trait for objects which are byte-oriented streams. Readers are defined by\none method, `read`. This function will block until data is available,\nfilling in the provided buffer with any data read."],[9,"read","","Read bytes, up to the length of `buf` and place them in `buf`.\nReturns the number of bytes read. The number of bytes read may\nbe less than the number requested, even 0. Returns `Err` on EOF.",371],[10,"read_at_least","","Reads at least `min` bytes and places them in `buf`.\nReturns the number of bytes read.",371],[10,"read_byte","","Reads a single byte. Returns `Err` on EOF.",371],[10,"push","","Reads up to `len` bytes and appends them to a vector.\nReturns the number of bytes read. The number of bytes read may be\nless than the number requested, even 0. Returns Err on EOF.",371],[10,"push_at_least","","Reads at least `min` bytes, but no more than `len`, and appends them to\na vector.\nReturns the number of bytes read.",371],[10,"read_exact","","Reads exactly `len` bytes and gives you back a new vector of length\n`len`",371],[10,"read_to_end","","Reads all remaining bytes from the stream.",371],[10,"read_to_string","","Reads all of the remaining bytes of this stream, interpreting them as a\nUTF-8 encoded stream. The corresponding string is returned.",371],[10,"bytes","","Create an iterator that reads a single byte on\neach iteration, until EOF.",371],[10,"read_le_uint_n","","Reads `n` little-endian unsigned integer bytes.",371],[10,"read_le_int_n","","Reads `n` little-endian signed integer bytes.",371],[10,"read_be_uint_n","","Reads `n` big-endian unsigned integer bytes.",371],[10,"read_be_int_n","","Reads `n` big-endian signed integer bytes.",371],[10,"read_le_uint","","Reads a little-endian unsigned integer.",371],[10,"read_le_int","","Reads a little-endian integer.",371],[10,"read_be_uint","","Reads a big-endian unsigned integer.",371],[10,"read_be_int","","Reads a big-endian integer.",371],[10,"read_be_u64","","Reads a big-endian `u64`.",371],[10,"read_be_u32","","Reads a big-endian `u32`.",371],[10,"read_be_u16","","Reads a big-endian `u16`.",371],[10,"read_be_i64","","Reads a big-endian `i64`.",371],[10,"read_be_i32","","Reads a big-endian `i32`.",371],[10,"read_be_i16","","Reads a big-endian `i16`.",371],[10,"read_be_f64","","Reads a big-endian `f64`.",371],[10,"read_be_f32","","Reads a big-endian `f32`.",371],[10,"read_le_u64","","Reads a little-endian `u64`.",371],[10,"read_le_u32","","Reads a little-endian `u32`.",371],[10,"read_le_u16","","Reads a little-endian `u16`.",371],[10,"read_le_i64","","Reads a little-endian `i64`.",371],[10,"read_le_i32","","Reads a little-endian `i32`.",371],[10,"read_le_i16","","Reads a little-endian `i16`.",371],[10,"read_le_f64","","Reads a little-endian `f64`.",371],[10,"read_le_f32","","Reads a little-endian `f32`.",371],[10,"read_u8","","Read a u8.",371],[10,"read_i8","","Read an i8.",371],[10,"by_ref","","Creates a wrapper around a mutable reference to the reader.",371],[6,"Writer","","A trait for objects which are byte-oriented streams. Writers are defined by\none method, `write`. This function will block until the provided buffer of\nbytes has been entirely written, and it will return any failures which occur."],[9,"write","","Write the entirety of a given buffer",372],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",372],[10,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",372],[10,"write_str","","Write a rust string into this sink.",372],[10,"write_line","","Writes a string into this sink, and then writes a literal newline (`\\n`)\nbyte afterwards. Note that the writing of the newline is *not* atomic in\nthe sense that the call to `write` is invoked twice (once with the\nstring and once with a newline character).",372],[10,"write_char","","Write a single char, encoded as UTF-8.",372],[10,"write_int","","Write the result of passing n through `int::to_str_bytes`.",372],[10,"write_uint","","Write the result of passing n through `uint::to_str_bytes`.",372],[10,"write_le_uint","","Write a little-endian uint (number of bytes depends on system).",372],[10,"write_le_int","","Write a little-endian int (number of bytes depends on system).",372],[10,"write_be_uint","","Write a big-endian uint (number of bytes depends on system).",372],[10,"write_be_int","","Write a big-endian int (number of bytes depends on system).",372],[10,"write_be_u64","","Write a big-endian u64 (8 bytes).",372],[10,"write_be_u32","","Write a big-endian u32 (4 bytes).",372],[10,"write_be_u16","","Write a big-endian u16 (2 bytes).",372],[10,"write_be_i64","","Write a big-endian i64 (8 bytes).",372],[10,"write_be_i32","","Write a big-endian i32 (4 bytes).",372],[10,"write_be_i16","","Write a big-endian i16 (2 bytes).",372],[10,"write_be_f64","","Write a big-endian IEEE754 double-precision floating-point (8 bytes).",372],[10,"write_be_f32","","Write a big-endian IEEE754 single-precision floating-point (4 bytes).",372],[10,"write_le_u64","","Write a little-endian u64 (8 bytes).",372],[10,"write_le_u32","","Write a little-endian u32 (4 bytes).",372],[10,"write_le_u16","","Write a little-endian u16 (2 bytes).",372],[10,"write_le_i64","","Write a little-endian i64 (8 bytes).",372],[10,"write_le_i32","","Write a little-endian i32 (4 bytes).",372],[10,"write_le_i16","","Write a little-endian i16 (2 bytes).",372],[10,"write_le_f64","","Write a little-endian IEEE754 double-precision floating-point\n(8 bytes).",372],[10,"write_le_f32","","Write a little-endian IEEE754 single-precision floating-point\n(4 bytes).",372],[10,"write_u8","","Write a u8 (1 byte).",372],[10,"write_i8","","Write an i8 (1 byte).",372],[10,"by_ref","","Creates a wrapper around a mutable reference to the writer.",372],[6,"Stream","","A Stream is a readable and a writable object. Data written is typically\nreceived by the object which reads receive data from."],[6,"Buffer","","A Buffer is a type of reader which has some form of internal buffering to\nallow certain kinds of reading operations to be more optimized than others.\nThis type extends the `Reader` trait with a few methods that are not\npossible to reasonably implement with purely a read interface."],[9,"fill_buf","","Fills the internal buffer of this object, returning the buffer contents.\nNote that none of the contents will be \"read\" in the sense that later\ncalling `read` may return the same contents.",373],[9,"consume","","Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to `read`.",373],[10,"read_line","","Reads the next line of input, interpreted as a sequence of UTF-8\nencoded Unicode codepoints. If a newline is encountered, then the\nnewline is contained in the returned string.",373],[10,"lines","","Create an iterator that reads a line on each iteration until EOF.",373],[10,"read_until","","Reads a sequence of bytes leading up to a specified delimiter. Once the\nspecified byte is encountered, reading ceases and the bytes up to and\nincluding the delimiter are returned.",373],[10,"read_char","","Reads the next utf8-encoded character from the underlying stream.",373],[10,"chars","","Create an iterator that reads a utf8-encoded character on each iteration\nuntil EOF.",373],[6,"Seek","","An object implementing `Seek` internally has some form of cursor which can\nbe moved within a stream of bytes. The stream typically has a fixed size,\nallowing seeking relative to either end."],[9,"tell","","Return position of file cursor in the stream",374],[9,"seek","","Seek to an offset in a stream",374],[6,"Listener","","A listener is a value that can consume itself to start listening for\nconnections."],[9,"listen","","Spin up the listener and start queuing incoming connections",375],[6,"Acceptor","","An acceptor is a value that presents incoming connections"],[9,"accept","","Wait for and accept an incoming connection",376],[10,"incoming","","Create an iterator over incoming connection attempts.",376],[10,"clone","","",312],[10,"eq","","",312],[10,"ne","","",312],[10,"from_errno","","Convert an `errno` value into an `IoError`.",312],[10,"last_error","","Retrieve the last error to occur as a (detailed) IoError.",312],[10,"fmt","","",312],[10,"fmt","","",315],[10,"clone","","",315],[10,"eq","","",315],[10,"ne","","",315],[10,"update_err","","",377],[10,"update_detail","","",377],[10,"update_desc","","",377],[10,"read","alloc::boxed","",236],[10,"read","std::io","",378],[10,"fill_buf","","",378],[10,"consume","","",378],[10,"write","alloc::boxed","",236],[10,"flush","","",236],[10,"write","std::io","",379],[10,"flush","","",379],[10,"next","","",380],[10,"next","","",381],[10,"next","","",382],[10,"hash","","",319],[10,"fmt","","",319],[10,"eq","","",319],[10,"ne","","",319],[10,"hash","","",313],[10,"hash","","",314],[10,"hash","","",383],[10,"cmp","","",383],[10,"partial_cmp","","",383],[10,"lt","","",383],[10,"le","","",383],[10,"gt","","",383],[10,"ge","","",383],[10,"clone","","",383],[10,"eq","","",383],[10,"ne","","",383],[10,"empty","","Returns an empty set of flags.",383],[10,"all","","Returns the set containing all flags.",383],[10,"bits","","Returns the raw value of the flags currently stored.",383],[10,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",383],[10,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",383],[10,"is_empty","","Returns `true` if no flags are currently stored.",383],[10,"is_all","","Returns `true` if all flags are currently set.",383],[10,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",383],[10,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",383],[10,"insert","","Inserts the specified flags in-place.",383],[10,"remove","","Removes the specified flags in-place.",383],[10,"bitor","","Returns the union of the two sets of flags.",383],[10,"bitand","","Returns the intersection between the two sets of flags.",383],[10,"sub","","Returns the set difference of the two sets of flags.",383],[10,"not","","Returns the complement of this set of flags.",383],[10,"default","","",383],[10,"fmt","","",383],[0,"path","std","Cross-platform path support"],[1,"Display","std::path","Helper struct for printing paths with format!()"],[0,"posix","","POSIX file path handling"],[1,"Path","std::path::posix","Represents a POSIX file path"],[3,"is_sep_byte","","Returns whether the given byte is a path separator"],[3,"is_sep","","Returns whether the given char is a path separator"],[4,"Components","","Iterator that yields successive components of a Path as &[u8]"],[4,"StrComponents","","Iterator that yields successive components of a Path as Option<&str>"],[5,"SEP","","The standard path separator character"],[5,"SEP_BYTE","","The standard path separator byte"],[10,"clone","","",384],[10,"eq","","",384],[10,"partial_cmp","","",384],[10,"cmp","","",384],[10,"from_str","","",384],[10,"to_c_str","","",384],[10,"to_c_str_unchecked","","",384],[10,"hash","","",384],[10,"container_as_bytes","","",384],[10,"container_into_owned_bytes","","",384],[10,"new_unchecked","","",384],[10,"set_filename_unchecked","","",384],[10,"push_unchecked","","",384],[10,"as_vec","","",384],[10,"into_vec","","",384],[10,"dirname","","",384],[10,"filename","","",384],[10,"pop","","",384],[10,"root_path","","",384],[10,"is_absolute","","",384],[10,"is_ancestor_of","","",384],[10,"path_relative_from","","",384],[10,"ends_with_path","","",384],[10,"new","","Returns a new Path from a byte vector or string",384],[10,"new_opt","","Returns a new Path from a byte vector or string, if possible",384],[10,"components","","Returns an iterator that yields each component of the path in turn.\nDoes not distinguish between absolute and relative paths, e.g.\n/a/b/c and a/b/c yield the same set of components.\nA path of \"/\" yields no components. A path of \".\" yields one component.",384],[10,"str_components","","Returns an iterator that yields each component of the path as Option<&str>.\nSee components() for details.",384],[0,"windows","std::path","Windows file path handling"],[1,"Path","std::path::windows","Represents a Windows path"],[2,"PathPrefix","","Prefix types for Path"],[12,"VerbatimPrefix","","Prefix `\\\\?\\`, uint is the length of the following component",385],[12,"VerbatimUNCPrefix","","Prefix `\\\\?\\UNC\\`, uints are the lengths of the UNC components",385],[12,"VerbatimDiskPrefix","","Prefix `\\\\?\\C:\\` (for any alphabetic character)",385],[12,"DeviceNSPrefix","","Prefix `\\\\.\\`, uint is the length of the following component",385],[12,"UNCPrefix","","UNC prefix `\\\\server\\share`, uints are the lengths of the server/share",385],[12,"DiskPrefix","","Prefix `C:` for any alphabetic character",385],[3,"is_vol_relative","","Returns whether the path is considered \"volume-relative\", which means a path\nthat looks like \"\\foo\". Paths of this form are relative to the current volume,\nbut absolute within that volume."],[3,"is_cwd_relative","","Returns whether the path is considered \"cwd-relative\", which means a path\nwith a volume prefix that is not absolute. This look like \"C:foo.txt\". Paths\nof this form are relative to the cwd on the given volume."],[3,"prefix","","Returns the PathPrefix for this Path"],[3,"is_verbatim","","Returns whether the Path's prefix is a verbatim prefix, i.e. `\\\\?\\`"],[3,"make_non_verbatim","","Returns the non-verbatim equivalent of the input path, if possible.\nIf the input path is a device namespace path, None is returned.\nIf the input path is not verbatim, it is returned as-is.\nIf the input path is verbatim, but the same path can be expressed as\nnon-verbatim, the non-verbatim version is returned.\nOtherwise, None is returned."],[3,"is_sep","","Returns whether the given char is a path separator.\nAllows both the primary separator '\\' and the alternative separator '/'."],[3,"is_sep_verbatim","","Returns whether the given char is a path separator.\nOnly allows the primary separator '\\'; use is_sep to allow '/'."],[3,"is_sep_byte","","Returns whether the given byte is a path separator.\nAllows both the primary separator '\\' and the alternative separator '/'."],[3,"is_sep_byte_verbatim","","Returns whether the given byte is a path separator.\nOnly allows the primary separator '\\'; use is_sep_byte to allow '/'."],[4,"StrComponents","","Iterator that yields successive components of a Path as &str"],[4,"Components","","Iterator that yields successive components of a Path as &[u8]"],[5,"SEP","","The standard path separator character"],[5,"SEP_BYTE","","The standard path separator byte"],[5,"SEP2","","The alternative path separator character"],[5,"SEP2_BYTE","","The alternative path separator character"],[10,"clone","","",386],[10,"eq","","",386],[10,"partial_cmp","","",386],[10,"cmp","","",386],[10,"from_str","","",386],[10,"to_c_str","","",386],[10,"to_c_str_unchecked","","",386],[10,"hash","","",386],[10,"container_as_bytes","","",386],[10,"container_into_owned_bytes","","",386],[10,"container_as_str","","",386],[10,"is_str","","",386],[10,"new_unchecked","","See `GenericPathUnsafe::from_vec_unchecked`.",386],[10,"set_filename_unchecked","","See `GenericPathUnsafe::set_filename_unchecked`.",386],[10,"push_unchecked","","See `GenericPathUnsafe::push_unchecked`.",386],[10,"new_opt","","",386],[10,"as_str","","See `GenericPath::as_str` for info.\nAlways returns a `Some` value.",386],[10,"as_vec","","",386],[10,"into_vec","","",386],[10,"dirname","","",386],[10,"dirname_str","","See `GenericPath::dirname_str` for info.\nAlways returns a `Some` value.",386],[10,"filename","","",386],[10,"filename_str","","See `GenericPath::filename_str` for info.\nAlways returns a `Some` value if `filename` returns a `Some` value.",386],[10,"filestem_str","","See `GenericPath::filestem_str` for info.\nAlways returns a `Some` value if `filestem` returns a `Some` value.",386],[10,"extension_str","","",386],[10,"dir_path","","",386],[10,"pop","","",386],[10,"root_path","","",386],[10,"is_absolute","","See `GenericPath::is_absolute` for info.",386],[10,"is_relative","","",386],[10,"is_ancestor_of","","",386],[10,"path_relative_from","","",386],[10,"ends_with_path","","",386],[10,"new","","Returns a new `Path` from a `BytesContainer`.",386],[10,"new_opt","","Returns a new `Some(Path)` from a `BytesContainer`.",386],[10,"str_components","","Returns an iterator that yields each component of the path in turn as a Option<&str>.\nEvery component is guaranteed to be Some.\nDoes not yield the path prefix (including server/share components in UNC paths).\nDoes not distinguish between volume-relative and relative paths, e.g.\n\\a\\b\\c and a\\b\\c.\nDoes not distinguish between absolute and cwd-relative paths, e.g.\nC:\\foo and C:foo.",386],[10,"components","","Returns an iterator that yields each component of the path in turn as a &[u8].\nSee str_components() for details.",386],[10,"clone","","",385],[10,"eq","","",385],[10,"ne","","",385],[6,"GenericPath","std::path","A trait that represents the generic operations available on paths"],[10,"new","","Creates a new Path from a byte vector or string.\nThe resulting Path will always be normalized.",387],[10,"new_opt","","Creates a new Path from a byte vector or string, if possible.\nThe resulting Path will always be normalized.",387],[10,"as_str","","Returns the path as a string, if possible.\nIf the path is not representable in utf-8, this returns None.",387],[9,"as_vec","","Returns the path as a byte vector",387],[9,"into_vec","","Converts the Path into an owned byte vector",387],[10,"display","","Returns an object that implements `Show` for printing paths",387],[10,"filename_display","","Returns an object that implements `Show` for printing filenames",387],[9,"dirname","","Returns the directory component of `self`, as a byte vector (with no trailing separator).\nIf `self` has no directory component, returns ['.'].",387],[10,"dirname_str","","Returns the directory component of `self`, as a string, if possible.\nSee `dirname` for details.",387],[9,"filename","","Returns the file component of `self`, as a byte vector.\nIf `self` represents the root of the file hierarchy, returns None.\nIf `self` is \".\" or \"..\", returns None.",387],[10,"filename_str","","Returns the file component of `self`, as a string, if possible.\nSee `filename` for details.",387],[10,"filestem","","Returns the stem of the filename of `self`, as a byte vector.\nThe stem is the portion of the filename just before the last '.'.\nIf there is no '.', the entire filename is returned.",387],[10,"filestem_str","","Returns the stem of the filename of `self`, as a string, if possible.\nSee `filestem` for details.",387],[10,"extension","","Returns the extension of the filename of `self`, as an optional byte vector.\nThe extension is the portion of the filename just after the last '.'.\nIf there is no extension, None is returned.\nIf the filename ends in '.', the empty vector is returned.",387],[10,"extension_str","","Returns the extension of the filename of `self`, as a string, if possible.\nSee `extension` for details.",387],[10,"set_filename","","Replaces the filename portion of the path with the given byte vector or string.\nIf the replacement name is [], this is equivalent to popping the path.",387],[10,"set_extension","","Replaces the extension with the given byte vector or string.\nIf there is no extension in `self`, this adds one.\nIf the argument is [] or \"\", this removes the extension.\nIf `self` has no filename, this is a no-op.",387],[10,"with_filename","","Returns a new Path constructed by replacing the filename with the given\nbyte vector or string.\nSee `set_filename` for details.",387],[10,"with_extension","","Returns a new Path constructed by setting the extension to the given\nbyte vector or string.\nSee `set_extension` for details.",387],[10,"dir_path","","Returns the directory component of `self`, as a Path.\nIf `self` represents the root of the filesystem hierarchy, returns `self`.",387],[9,"root_path","","Returns a Path that represents the filesystem root that `self` is rooted in.",387],[10,"push","","Pushes a path (as a byte vector or string) onto `self`.\nIf the argument represents an absolute path, it replaces `self`.",387],[10,"push_many","","Pushes multiple paths (as byte vectors or strings) onto `self`.\nSee `push` for details.",387],[9,"pop","","Removes the last path component from the receiver.\nReturns `true` if the receiver was modified, or `false` if it already\nrepresented the root of the file hierarchy.",387],[10,"join","","Returns a new Path constructed by joining `self` with the given path\n(as a byte vector or string).\nIf the given path is absolute, the new Path will represent just that.",387],[10,"join_many","","Returns a new Path constructed by joining `self` with the given paths\n(as byte vectors or strings).\nSee `join` for details.",387],[9,"is_absolute","","Returns whether `self` represents an absolute path.\nAn absolute path is defined as one that, when joined to another path, will\nyield back the same absolute path.",387],[10,"is_relative","","Returns whether `self` represents a relative path.\nTypically this is the inverse of `is_absolute`.\nBut for Windows paths, it also means the path is not volume-relative or\nrelative to the current working directory.",387],[9,"is_ancestor_of","","Returns whether `self` is equal to, or is an ancestor of, the given path.\nIf both paths are relative, they are compared as though they are relative\nto the same parent path.",387],[9,"path_relative_from","","Returns the Path that, were it joined to `base`, would yield `self`.\nIf no such path exists, None is returned.\nIf `self` is absolute and `base` is relative, or on Windows if both\npaths refer to separate drives, an absolute path is returned.",387],[9,"ends_with_path","","Returns whether the relative path `child` is a suffix of `self`.",387],[6,"BytesContainer","","A trait that represents something bytes-like (e.g. a &[u8] or a &str)"],[9,"container_as_bytes","","Returns a &[u8] representing the receiver",388],[10,"container_into_owned_bytes","","Consumes the receiver and converts it into Vec<u8>",388],[10,"container_as_str","","Returns the receiver interpreted as a utf-8 string, if possible",388],[10,"is_str","","Returns whether .container_as_str() is guaranteed to not fail",388],[6,"GenericPathUnsafe","","A trait that represents the unsafe operations on GenericPaths"],[9,"new_unchecked","","Creates a new Path without checking for null bytes.\nThe resulting Path will always be normalized.",389],[9,"set_filename_unchecked","","Replaces the filename portion of the path without checking for null\nbytes.\nSee `set_filename` for details.",389],[9,"push_unchecked","","Pushes a path onto `self` without checking for null bytes.\nSee `push` for details.",389],[10,"fmt","","",390],[10,"as_maybe_owned","","Returns the path as a possibly-owned string.",390],[10,"container_as_bytes","collections::string","",43],[10,"container_as_str","","",43],[10,"is_str","","",43],[10,"container_as_bytes","collections::vec","",44],[10,"container_into_owned_bytes","","",44],[10,"container_as_bytes","rustrt::c_str","",391],[10,"container_as_bytes","collections::str","",231],[10,"container_as_str","","",231],[10,"is_str","","",231],[0,"fmt","std","Utilities for formatting and printing strings"],[3,"format","std::fmt","The format function takes a precompiled format string and a list of\narguments, to return the resulting formatted string."],[10,"write","core::fmt","",160],[1,"Formatter","std::fmt","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits."],[11,"flags","","Flags for formatting (packed version of rt::Flag)",160],[11,"fill","","Character used as 'fill' whenever there is alignment",160],[11,"align","","Boolean indication of whether the output should be left-aligned",160],[11,"width","","Optionally specified integer width that the output should be",160],[11,"precision","","Optionally specified precision for numeric types",160],[4,"Result","",""],[6,"FormatWriter","","A collection of methods that are required to format a message into a stream."],[9,"write","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",392],[9,"write_fmt","","Glue for usage of the `write!` macro with implementers of this trait.",392],[0,"rt","","This is an internal module used by the ifmt! runtime. These structures are\nemitted to static arrays to precompile format strings ahead of time."],[2,"Alignment","std::fmt::rt","Possible alignments that can be requested as part of a formatting directive."],[12,"AlignLeft","","Indication that contents should be left-aligned.",158],[12,"AlignRight","","Indication that contents should be right-aligned.",158],[12,"AlignCenter","","Indication that contents should be center-aligned.",158],[12,"AlignUnknown","","No alignment was requested.",158],[2,"Flag","","Flags which can be passed to formatting via a directive."],[12,"FlagSignPlus","","A flag which enables number formatting to always print the sign of a\nnumber.",393],[12,"FlagSignMinus","","Currently not a used flag",393],[12,"FlagAlternate","","Indicates that the \"alternate formatting\" for a type should be used.",393],[12,"FlagSignAwareZeroPad","","Indicates that padding should be done with a `0` character as well as\nbeing aware of the sign to be printed.",393],[6,"Show","std::fmt","When a format is not otherwise specified, types are formatted by ascribing\nto this trait. There is not an explicit way of selecting this trait to be\nused for formatting, it is only if no other format is specified."],[9,"fmt","","Formats the value using the given formatter.",394],[6,"Bool","","Format trait for the `b` character"],[9,"fmt","","Formats the value using the given formatter.",395],[6,"Char","","Format trait for the `c` character"],[9,"fmt","","Formats the value using the given formatter.",396],[6,"Signed","","Format trait for the `i` and `d` characters"],[9,"fmt","","Formats the value using the given formatter.",397],[6,"Unsigned","","Format trait for the `u` character"],[9,"fmt","","Formats the value using the given formatter.",398],[6,"Octal","","Format trait for the `o` character"],[9,"fmt","","Formats the value using the given formatter.",399],[6,"Binary","","Format trait for the `t` character"],[9,"fmt","","Formats the value using the given formatter.",400],[6,"LowerHex","","Format trait for the `x` character"],[9,"fmt","","Formats the value using the given formatter.",401],[6,"UpperHex","","Format trait for the `X` character"],[9,"fmt","","Formats the value using the given formatter.",402],[6,"String","","Format trait for the `s` character"],[9,"fmt","","Formats the value using the given formatter.",403],[6,"Pointer","","Format trait for the `p` character"],[9,"fmt","","Formats the value using the given formatter.",404],[6,"Float","","Format trait for the `f` character"],[9,"fmt","","Formats the value using the given formatter.",405],[6,"LowerExp","","Format trait for the `e` character"],[9,"fmt","","Formats the value using the given formatter.",406],[6,"UpperExp","","Format trait for the `E` character"],[9,"fmt","","Formats the value using the given formatter.",407],[2,"FormatError","","The error type which is returned from formatting a message into a stream."],[12,"WriteError","","A generic write error occurred during formatting, no other information\nis transmitted via this variant.",408],[1,"Argument","","This struct represents the generic \"argument\" which is taken by the Xprintf\nfamily of functions. It contains a function to format the given value. At\ncompile time it is ensured that the function and the value have the correct\ntypes, and then this struct is used to canonicalize arguments to one type."],[1,"Arguments","","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification."],[3,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided."],[3,"radix","","Constructs a radix formatter in the range of `2..36`."],[1,"Radix","","A radix with in the range of `2..36`."],[1,"RadixFmt","","A helper type for formatting radixes."],[0,"rt","std","Runtime services, including the task scheduler and I/O dispatcher"],[3,"default_sched_threads","std::rt","Get's the number of scheduler threads requested by the environment\neither `RUST_THREADS` or `num_cpus`."],[3,"min_stack","",""],[3,"running_on_valgrind","","Dynamically inquire about whether we're running under V.\nYou should usually not use this unless your test definitely\ncan't run correctly un-altered. Valgrind is there to help\nyou notice weirdness in normal, un-doctored code paths!"],[3,"init","","One-time runtime initialization."],[3,"cleanup","","One-time runtime cleanup."],[0,"backtrace","","Simple backtrace functionality (to print on failure)"],[3,"write","std::rt::backtrace",""],[3,"log_enabled","",""],[0,"heap","std::rt",""],[3,"allocate","std::rt::heap","Returns a pointer to `size` bytes of memory."],[3,"reallocate","","Extends or shrinks the allocation referenced by `ptr` to `size` bytes of\nmemory."],[3,"reallocate_inplace","","Extends or shrinks the allocation referenced by `ptr` to `size` bytes of\nmemory in-place."],[3,"deallocate","","Deallocates the memory referenced by `ptr`."],[3,"usable_size","","Returns the usable size of an allocation created with the specified the\n`size` and `align`."],[3,"stats_print","","Prints implementation-defined allocator statistics."],[5,"EMPTY","",""],[0,"libc_heap","std::rt","The global (exchange) heap."],[3,"malloc_raw","std::rt::libc_heap","A wrapper around libc::malloc, aborting on out-of-memory."],[3,"realloc_raw","","A wrapper around libc::realloc, aborting on out-of-memory."],[0,"task","std::rt","Language-level runtime services that should reasonably expected\nto be available 'everywhere'. Local heaps, GC, unwinding,\nlocal storage, and logging. Even a 'freestanding' Rust would likely want\nto implement this."],[10,"new","rustrt::task","Creates a new uninitialized task.",409],[10,"run","","Consumes ownership of a task, runs some code, and returns the task back.",409],[10,"destroy","","Destroy all associated resources of this task.",409],[10,"is_destroyed","","Queries whether this can be destroyed or not.",409],[10,"put_runtime","","Inserts a runtime object into this task, transferring ownership to the\ntask. It is illegal to replace a previous runtime object in this task\nwith this argument.",409],[10,"take_runtime","","Removes the runtime from this task, transferring ownership to the\ncaller.",409],[10,"maybe_take_runtime","","Attempts to extract the runtime as a specific type. If the runtime does\nnot have the provided type, then the runtime is not removed. If the\nruntime does have the specified type, then it is removed and returned\n(transfer of ownership).",409],[10,"spawn_sibling","","Spawns a sibling to this task. The newly spawned task is configured with\nthe `opts` structure and will run `f` as the body of its code.",409],[10,"deschedule","","Deschedules the current task, invoking `f` `amt` times. It is not\nrecommended to use this function directly, but rather communication\nprimitives in `std::comm` should be used.",409],[10,"reawaken","","Wakes up a previously blocked task, optionally specifying whether the\ncurrent task can accept a change in scheduling. This function can only\nbe called on tasks that were previously blocked in `deschedule`.",409],[10,"yield_now","","Yields control of this task to another task. This function will\neventually return, but possibly not immediately. This is used as an\nopportunity to allow other tasks a chance to run.",409],[10,"maybe_yield","","Similar to `yield_now`, except that this function may immediately return\nwithout yielding (depending on what the runtime decides to do).",409],[10,"local_io","","Acquires a handle to the I/O factory that this task contains, normally\nstored in the task's runtime. This factory may not always be available,\nwhich is why the return type is `Option`",409],[10,"stack_bounds","","Returns the stack bounds for this task in (lo, hi) format. The stack\nbounds may not be known for all tasks, so the return value may be\n`None`.",409],[10,"can_block","","Returns whether it is legal for this task to block the OS thread that it\nis running on.",409],[10,"drop","","Consume this task, flagging it as a candidate for destruction.",409],[10,"drop","rustrt::local_ptr","",410],[10,"deref","","",410],[10,"deref_mut","","",410],[10,"write","rustrt::util","",411],[10,"write_fmt","","",411],[10,"drop","rustrt::bookkeeping","",412],[10,"clone","rustrt::c_str","Clone this CString into a new, uniquely owned CString. For safety\nreasons, this is always a deep clone with the memory allocated\nwith C's allocator API, rather than the usual shallow clone.",391],[10,"clone_from","","",391],[10,"eq","","",391],[10,"ne","","",391],[10,"partial_cmp","","",391],[10,"lt","","",391],[10,"le","","",391],[10,"gt","","",391],[10,"ge","","",391],[10,"assert_receiver_is_total_eq","","",391],[10,"hash","","",391],[10,"new","","Create a C String from a pointer, with memory managed by C's allocator\n API, so avoid calling it with a pointer to memory managed by Rust's\n allocator API, as the behaviour would not be well defined.",391],[10,"as_ptr","","Return a pointer to the NUL-terminated string data.",391],[10,"as_mut_ptr","","Return a mutable pointer to the NUL-terminated string data.",391],[10,"with_ref","","Calls a closure with a reference to the underlying `*libc::c_char`.",391],[10,"with_mut_ref","","Calls a closure with a mutable reference to the underlying `*libc::c_char`.",391],[10,"is_null","","Returns true if the CString is a null.",391],[10,"is_not_null","","Returns true if the CString is not null.",391],[10,"owns_buffer","","Returns whether or not the `CString` owns the buffer.",391],[10,"as_bytes","","Converts the CString into a `&[u8]` without copying.\nIncludes the terminating NUL byte.",391],[10,"as_bytes_no_nul","","Converts the CString into a `&[u8]` without copying.\nDoes not include the terminating NUL byte.",391],[10,"as_str","","Converts the CString into a `&str` without copying.\nReturns None if the CString is not UTF-8.",391],[10,"iter","","Return a CString iterator.",391],[10,"unwrap","","Unwraps the wrapped `*libc::c_char` from the `CString` wrapper.",391],[10,"drop","","",391],[10,"len","","Return the number of bytes in the CString (not including the NUL terminator).",391],[10,"is_empty","","",391],[10,"fmt","","",391],[10,"to_c_str","collections::string","",43],[10,"to_c_str_unchecked","","",43],[10,"with_c_str","","",43],[10,"with_c_str_unchecked","","",43],[10,"with_c_str","","",43],[10,"with_c_str_unchecked","","",43],[10,"next","rustrt::c_str","",413],[10,"size_hint","","",413],[10,"chain","","",413],[10,"zip","","",413],[10,"map","","",413],[10,"filter","","",413],[10,"filter_map","","",413],[10,"enumerate","","",413],[10,"peekable","","",413],[10,"skip_while","","",413],[10,"take_while","","",413],[10,"skip","","",413],[10,"take","","",413],[10,"scan","","",413],[10,"flat_map","","",413],[10,"fuse","","",413],[10,"inspect","","",413],[10,"by_ref","","",413],[10,"advance","","",413],[10,"collect","","",413],[10,"nth","","",413],[10,"last","","",413],[10,"fold","","",413],[10,"count","","",413],[10,"all","","",413],[10,"any","","",413],[10,"find","","",413],[10,"position","","",413],[10,"max_by","","",413],[10,"min_by","","",413],[10,"new","rustrt::exclusive","Creates a new `Exclusive` which will protect the data provided.",414],[10,"lock","","Acquires this lock, returning a guard which the data is accessed through\nand from which that lock will be unlocked.",414],[10,"signal","","",415],[10,"wait","","",415],[10,"deref","","",415],[10,"deref_mut","","",415],[10,"put","rustrt::task","",409],[10,"take","","",409],[10,"try_take","","",409],[10,"exists","","",409],[10,"borrow","","",409],[10,"unsafe_take","","",409],[10,"unsafe_borrow","","",409],[10,"try_unsafe_borrow","","",409],[10,"replace","rustrt::local_data","Replaces a value in task local data.",416],[10,"get","","Borrows a value from TLD.",416],[10,"deref","","",417],[10,"fmt","","",417],[10,"eq","","",417],[10,"ne","","",417],[10,"ne","","",417],[10,"assert_receiver_is_total_eq","","",417],[10,"partial_cmp","","",417],[10,"lt","","",417],[10,"le","","",417],[10,"gt","","",417],[10,"ge","","",417],[10,"lt","","",417],[10,"le","","",417],[10,"gt","","",417],[10,"ge","","",417],[10,"cmp","","",417],[10,"drop","","",417],[10,"drop","","",418],[10,"new","rustrt::local_heap","",419],[10,"alloc","","",419],[10,"realloc","","",419],[10,"free","","",419],[10,"immortalize","","Immortalize all pending allocations, forcing them to live forever.",419],[10,"drop","","",419],[10,"drop","","",420],[10,"new","rustrt::mutex","Creates a new mutex.",421],[10,"lock","","Acquires this lock. This assumes that the current thread does not\nalready hold the lock.",421],[10,"trylock","","Attempts to acquire the lock. The value returned is `Some` if\nthe attempt succeeded.",421],[10,"lock_noguard","","Acquire the lock without creating a `LockGuard`.",421],[10,"trylock_noguard","","Attempts to acquire the lock without creating a\n`LockGuard`. The value returned is whether the lock was\nacquired or not.",421],[10,"unlock_noguard","","Unlocks the lock. This assumes that the current thread already holds the\nlock.",421],[10,"wait_noguard","","Block on the internal condition variable.",421],[10,"signal_noguard","","Signals a thread in `wait` to wake up",421],[10,"destroy","","This function is especially unsafe because there are no guarantees made\nthat no other thread is currently holding the lock or waiting on the\ncondition variable contained inside.",421],[10,"new","","Creates a new mutex.",422],[10,"lock","","Acquires this lock. This assumes that the current thread does not\nalready hold the lock.",422],[10,"trylock","","Attempts to acquire the lock. The value returned is `Some` if\nthe attempt succeeded.",422],[10,"lock_noguard","","Acquire the lock without creating a `LockGuard`.",422],[10,"trylock_noguard","","Attempts to acquire the lock without creating a\n`LockGuard`. The value returned is whether the lock was\nacquired or not.",422],[10,"unlock_noguard","","Unlocks the lock. This assumes that the current thread already holds the\nlock.",422],[10,"wait_noguard","","Block on the internal condition variable.",422],[10,"signal_noguard","","Signals a thread in `wait` to wake up",422],[10,"drop","","",422],[10,"wait","","Block on the internal condition variable.",423],[10,"signal","","Signals a thread in `wait` to wake up.",423],[10,"drop","","",423],[10,"new","rustrt::mutex::imp","",424],[10,"lock","","",424],[10,"unlock","","",424],[10,"signal","","",424],[10,"wait","","",424],[10,"trylock","","",424],[10,"destroy","","",424],[10,"drop","rustrt::rtio","",425],[10,"borrow","","Returns the local I/O: either the local scheduler's I/O services or\nthe native I/O services.",425],[10,"maybe_raise","","",425],[10,"new","","",425],[10,"get","","Returns the underlying I/O factory as a trait reference.",425],[10,"assert_receiver_is_total_eq","","",426],[10,"eq","","",426],[10,"ne","","",426],[10,"ne","","",426],[10,"fmt","","",426],[10,"assert_receiver_is_total_eq","","",427],[10,"eq","","",427],[10,"ne","","",427],[10,"ne","","",427],[10,"eq","rustrt::task","",428],[10,"ne","","",428],[10,"ne","","",428],[10,"drop","","",409],[10,"new","","",429],[10,"next","","",430],[10,"size_hint","","",430],[10,"chain","","",430],[10,"zip","","",430],[10,"map","","",430],[10,"filter","","",430],[10,"filter_map","","",430],[10,"enumerate","","",430],[10,"peekable","","",430],[10,"skip_while","","",430],[10,"take_while","","",430],[10,"skip","","",430],[10,"take","","",430],[10,"scan","","",430],[10,"flat_map","","",430],[10,"fuse","","",430],[10,"inspect","","",430],[10,"by_ref","","",430],[10,"advance","","",430],[10,"collect","","",430],[10,"nth","","",430],[10,"last","","",430],[10,"fold","","",430],[10,"count","","",430],[10,"all","","",430],[10,"any","","",430],[10,"find","","",430],[10,"position","","",430],[10,"max_by","","",430],[10,"min_by","","",430],[10,"wake","","Returns Some if the task was successfully woken; None if already killed.",431],[10,"reawaken","","Reawakens this task if ownership is acquired. If finer-grained control\nis desired, use `wake` instead.",431],[10,"trash","","",431],[10,"block","","Create a blocked task, unless the task was already killed.",431],[10,"make_selectable","","Converts one blocked task handle to a list of many handles to the same.",431],[10,"cast_to_uint","","Convert to an unsafe uint value. Useful for storing in a pipe's state\nflag.",431],[10,"cast_from_uint","","Convert from an unsafe uint value. Useful for retrieving a pipe's state\nflag.",431],[10,"new","","",432],[10,"start","rustrt::thread","Starts execution of a new OS thread.",433],[10,"start_stack","","Performs the same functionality as `start`, but specifies an explicit\nstack size for the new thread.",433],[10,"spawn","","This will spawn a new thread, but it will not wait for the thread to\nfinish, nor is it possible to wait for the thread to finish.",433],[10,"spawn_stack","","Performs the same functionality as `spawn`, but explicitly specifies a\nstack size for the new thread.",433],[10,"yield_now","","Relinquishes the CPU slot that this OS-thread is currently using,\nallowing another thread to run for awhile.",433],[10,"join","","Wait for this thread to finish, returning the result of the thread's\ncalculation.",433],[10,"drop","","",433],[10,"new","rustrt::unwind","",434],[10,"unwinding","","",434],[1,"Task","std::rt::task","State associated with Rust tasks."],[11,"heap","","",409],[11,"gc","","",409],[11,"storage","","",409],[11,"unwinder","","",409],[11,"death","","",409],[11,"name","","",409],[1,"TaskOpts","",""],[11,"on_exit","","Invoke this procedure with the result of the task when it finishes.",429],[11,"name","","A name for the task-to-be, for identification in failure messages",429],[11,"stack_size","","The size of the stack for the spawned task",429],[4,"Result","",""],[1,"GarbageCollector","",""],[1,"LocalStorage","",""],[2,"BlockedTask","","A handle to a blocked task. Usually this means having the Box<Task>\npointer by ownership, but if the task is killable, a killer can steal it\nat any time."],[12,"Owned","","",431],[12,"Shared","","",431],[1,"Death","","Per-task state related to task death, killing, failure, etc."],[11,"on_exit","","",432],[1,"BlockedTasks","",""],[0,"local","std::rt",""],[6,"Local","std::rt::local","Encapsulates some task-local data."],[9,"put","","",435],[9,"take","","",435],[9,"try_take","","",435],[9,"exists","","",435],[9,"borrow","","",435],[9,"unsafe_take","","",435],[9,"unsafe_borrow","","",435],[9,"try_unsafe_borrow","","",435],[0,"mutex","std::rt","A native mutex and condition variable type."],[1,"StaticNativeMutex","std::rt::mutex","A native mutex suitable for storing in statics (that is, it has\nthe `destroy` method rather than a destructor)."],[1,"NativeMutex","","A native mutex with a destructor for clean-up."],[1,"LockGuard","","Automatically unlocks the mutex that it was created from on\ndestruction."],[5,"NATIVE_MUTEX_INIT","",""],[0,"exclusive","std::rt",""],[1,"Exclusive","std::rt::exclusive","An OS mutex over some data."],[1,"ExclusiveGuard","","An RAII guard returned via `lock`"],[0,"stack","std::rt","Rust stack-limit management"],[5,"RED_ZONE","std::rt::stack",""],[3,"record_os_managed_stack_bounds","",""],[3,"record_rust_managed_stack_bounds","",""],[3,"record_sp_limit","","Records the current limit of the stack as specified by `end`."],[3,"get_sp_limit","","The counterpart of the function above, this function will fetch the current\nstack limit stored in TLS."],[0,"args","std::rt","Global storage for command line arguments"],[3,"init","std::rt::args","One-time global initialization."],[3,"cleanup","","One-time global cleanup."],[3,"take","","Take the global arguments from global storage."],[3,"put","","Give the global arguments to global storage."],[3,"clone","","Make a clone of the global arguments."],[0,"rtio","std::rt","The EventLoop and internal synchronous I/O interface."],[6,"EventLoop","std::rt::rtio",""],[9,"run","","",436],[9,"callback","","",436],[9,"pausable_idle_callback","","",436],[9,"remote_callback","","",436],[9,"io","","The asynchronous I/O services. Not all event loops may provide one.",436],[9,"has_active_io","","",436],[6,"Callback","",""],[9,"call","","",437],[6,"RemoteCallback","",""],[9,"fire","","Trigger the remote callback. Note that the number of times the\ncallback is run is not guaranteed. All that is guaranteed is\nthat, after calling 'fire', the callback will be called at\nleast once, but multiple callbacks may be coalesced and\ncallbacks may be called more often requested. Destruction also\ntriggers the callback.",438],[2,"CloseBehavior","","Description of what to do when a file handle is closed"],[12,"DontClose","","Do not close this handle when the object is destroyed",439],[12,"CloseSynchronously","","Synchronously close the handle, meaning that the task will block when\nthe handle is destroyed until it has been fully closed.",439],[12,"CloseAsynchronously","","Asynchronously closes a handle, meaning that the task will *not* block\nwhen the handle is destroyed, but the handle will still get deallocated\nand cleaned up (but this will happen asynchronously on the local event\nloop).",439],[1,"ProcessConfig","","Data needed to spawn a process. Serializes the `std::io::process::Command`\nbuilder."],[11,"program","","Path to the program to run.",440],[11,"args","","Arguments to pass to the program (doesn't include the program itself).",440],[11,"env","","Optional environment to specify for the program. If this is None, then\nit will inherit the current process's environment.",440],[11,"cwd","","Optional working directory for the new process. If this is None, then\nthe current directory of the running process is inherited.",440],[11,"stdin","","Configuration for the child process's stdin handle (file descriptor 0).\nThis field defaults to `CreatePipe(true, false)` so the input can be\nwritten to.",440],[11,"stdout","","Configuration for the child process's stdout handle (file descriptor 1).\nThis field defaults to `CreatePipe(false, true)` so the output can be\ncollected.",440],[11,"stderr","","Configuration for the child process's stdout handle (file descriptor 2).\nThis field defaults to `CreatePipe(false, true)` so the output can be\ncollected.",440],[11,"extra_io","","Any number of streams/file descriptors/pipes may be attached to this\nprocess. This list enumerates the file descriptors and such for the\nprocess to be spawned, and the file descriptors inherited will start at\n3 and go to the length of this array. The first three file descriptors\n(stdin/stdout/stderr) are configured with the `stdin`, `stdout`, and\n`stderr` fields.",440],[11,"uid","","Sets the child process's user id. This translates to a `setuid` call in\nthe child process. Setting this value on windows will cause the spawn to\nfail. Failure in the `setuid` call on unix will also cause the spawn to\nfail.",440],[11,"gid","","Similar to `uid`, but sets the group id of the child process. This has\nthe same semantics as the `uid` field.",440],[11,"detach","","If true, the child process is spawned in a detached state. On unix, this\nmeans that the child is the leader of a new process group.",440],[1,"LocalIo","",""],[6,"IoFactory","",""],[9,"tcp_connect","","",441],[9,"tcp_bind","","",441],[9,"udp_bind","","",441],[9,"unix_bind","","",441],[9,"unix_connect","","",441],[9,"get_host_addresses","","",441],[9,"fs_from_raw_fd","","",441],[9,"fs_open","","",441],[9,"fs_unlink","","",441],[9,"fs_stat","","",441],[9,"fs_mkdir","","",441],[9,"fs_chmod","","",441],[9,"fs_rmdir","","",441],[9,"fs_rename","","",441],[9,"fs_readdir","","",441],[9,"fs_lstat","","",441],[9,"fs_chown","","",441],[9,"fs_readlink","","",441],[9,"fs_symlink","","",441],[9,"fs_link","","",441],[9,"fs_utime","","",441],[9,"timer_init","","",441],[9,"spawn","","",441],[9,"kill","","",441],[9,"pipe_open","","",441],[9,"tty_open","","",441],[9,"signal","","",441],[6,"RtioTcpListener","",""],[9,"listen","","",442],[6,"RtioTcpAcceptor","",""],[9,"accept","","",443],[9,"accept_simultaneously","","",443],[9,"dont_accept_simultaneously","","",443],[9,"set_timeout","","",443],[9,"clone","","",443],[9,"close_accept","","",443],[6,"RtioTcpStream","",""],[9,"read","","",444],[9,"write","","",444],[9,"peer_name","","",444],[9,"control_congestion","","",444],[9,"nodelay","","",444],[9,"keepalive","","",444],[9,"letdie","","",444],[9,"clone","","",444],[9,"close_write","","",444],[9,"close_read","","",444],[9,"set_timeout","","",444],[9,"set_read_timeout","","",444],[9,"set_write_timeout","","",444],[6,"RtioSocket","",""],[9,"socket_name","","",445],[6,"RtioUdpSocket","",""],[9,"recv_from","","",446],[9,"send_to","","",446],[9,"join_multicast","","",446],[9,"leave_multicast","","",446],[9,"loop_multicast_locally","","",446],[9,"dont_loop_multicast_locally","","",446],[9,"multicast_time_to_live","","",446],[9,"time_to_live","","",446],[9,"hear_broadcasts","","",446],[9,"ignore_broadcasts","","",446],[9,"clone","","",446],[9,"set_timeout","","",446],[9,"set_read_timeout","","",446],[9,"set_write_timeout","","",446],[6,"RtioTimer","",""],[9,"sleep","","",447],[9,"oneshot","","",447],[9,"period","","",447],[6,"RtioFileStream","",""],[9,"read","","",448],[9,"write","","",448],[9,"pread","","",448],[9,"pwrite","","",448],[9,"seek","","",448],[9,"tell","","",448],[9,"fsync","","",448],[9,"datasync","","",448],[9,"truncate","","",448],[9,"fstat","","",448],[6,"RtioProcess","",""],[9,"id","","",449],[9,"kill","","",449],[9,"wait","","",449],[9,"set_timeout","","",449],[6,"RtioPipe","",""],[9,"read","","",450],[9,"write","","",450],[9,"clone","","",450],[9,"close_write","","",450],[9,"close_read","","",450],[9,"set_timeout","","",450],[9,"set_read_timeout","","",450],[9,"set_write_timeout","","",450],[6,"RtioUnixListener","",""],[9,"listen","","",451],[6,"RtioUnixAcceptor","",""],[9,"accept","","",452],[9,"set_timeout","","",452],[9,"clone","","",452],[9,"close_accept","","",452],[6,"RtioTTY","",""],[9,"read","","",453],[9,"write","","",453],[9,"set_raw","","",453],[9,"get_winsize","","",453],[9,"isatty","","",453],[6,"PausableIdleCallback","",""],[9,"pause","","",454],[9,"resume","","",454],[6,"RtioSignal","",""],[1,"IoError","",""],[11,"code","","",455],[11,"extra","","",455],[11,"detail","","",455],[4,"IoResult","",""],[2,"IpAddr","",""],[12,"Ipv4Addr","","",426],[12,"Ipv6Addr","","",426],[1,"SocketAddr","",""],[11,"ip","","",427],[11,"port","","",427],[2,"StdioContainer","",""],[12,"Ignored","","",456],[12,"InheritFd","","",456],[12,"CreatePipe","","",456],[2,"ProcessExit","",""],[12,"ExitStatus","","",457],[12,"ExitSignal","","",457],[2,"FileMode","",""],[12,"Open","","",458],[12,"Append","","",458],[12,"Truncate","","",458],[2,"FileAccess","",""],[12,"Read","","",459],[12,"Write","","",459],[12,"ReadWrite","","",459],[1,"FileStat","",""],[11,"size","","",460],[11,"kind","","",460],[11,"perm","","",460],[11,"created","","",460],[11,"modified","","",460],[11,"accessed","","",460],[11,"device","","",460],[11,"inode","","",460],[11,"rdev","","",460],[11,"nlink","","",460],[11,"uid","","",460],[11,"gid","","",460],[11,"blksize","","",460],[11,"blocks","","",460],[11,"flags","","",460],[11,"gen","","",460],[2,"SeekStyle","",""],[12,"SeekSet","","",461],[12,"SeekEnd","","",461],[12,"SeekCur","","",461],[1,"AddrinfoHint","",""],[11,"family","","",462],[11,"socktype","","",462],[11,"protocol","","",462],[11,"flags","","",462],[1,"AddrinfoInfo","",""],[11,"address","","",463],[11,"family","","",463],[11,"socktype","","",463],[11,"protocol","","",463],[11,"flags","","",463],[0,"thread","std::rt","Native os-thread management"],[1,"Thread","std::rt::thread","This struct represents a native thread's state. This is used to join on an\nexisting thread created in the join-able state."],[1,"Stdio","std::rt",""],[5,"Stdout","",""],[5,"Stderr","",""],[3,"begin_unwind","","This is the entry point of unwinding for fail!() and assert!()."],[3,"begin_unwind_fmt","","The entry point for unwinding with a formatted message."],[0,"bookkeeping","","Task bookkeeping"],[1,"Token","std::rt::bookkeeping",""],[3,"increment","","Increment the number of live tasks, returning a token which will decrement\nthe count when dropped."],[3,"decrement","",""],[3,"wait_for_other_tasks","","Waits for all other native tasks in the system to exit. This is only used by\nthe entry points of native programs"],[3,"at_exit","std::rt","Enqueues a procedure to run when the runtime is cleaned up"],[0,"unwind","","Implementation of Rust stack unwinding"],[1,"Unwinder","std::rt::unwind",""],[4,"Callback","",""],[3,"try","","Invoke a closure, capturing the cause of failure if one occurs."],[3,"rust_begin_unwind","",""],[3,"begin_unwind_fmt","","The entry point for unwinding with a formatted message."],[3,"begin_unwind","","This is the entry point of unwinding for fail!() and assert!()."],[3,"register","","Register a callback to be invoked when a task unwinds."],[5,"DEFAULT_ERROR_CODE","std::rt",""],[6,"Runtime","","The interface to the current runtime."],[9,"yield_now","","",464],[9,"maybe_yield","","",464],[9,"deschedule","","",464],[9,"reawaken","","",464],[9,"spawn_sibling","","",464],[9,"local_io","","",464],[9,"stack_bounds","","The (low, high) edges of the current stack.",464],[9,"can_block","","",464],[9,"wrap","","",464],[10,"write","","",411],[0,"any","std","Traits for dynamic typing of any `'static` type (through runtime reflection)"],[2,"Void","std::any","A type with no inhabitants"],[6,"Any","","The `Any` trait is implemented by all `'static` types, and can be used for\ndynamic typing"],[6,"AnyRefExt","","Extension methods for a referenced `Any` trait object"],[9,"is","","Returns true if the boxed type is the same as `T`",465],[9,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",465],[9,"as_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",465],[6,"AnyMutRefExt","","Extension methods for a mutable referenced `Any` trait object"],[9,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",466],[9,"as_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",466],[0,"bool","std","The boolean type"],[16,"bool","std::bool","The boolean type"],[0,"cell","std","Shareable mutable containers."],[1,"Cell","std::cell","A mutable memory location that admits only `Copy` data."],[1,"RefCell","","A mutable memory location with dynamically checked borrow rules"],[1,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box."],[3,"clone_ref","","Copy a `Ref`."],[1,"RefMut","","Wraps a mutable borrowed reference to a value in a `RefCell` box."],[1,"UnsafeCell","","The core primitive for interior mutability in Rust."],[11,"value","","Wrapped value",89],[0,"clone","std","The `Clone` trait for types that cannot be 'implicitly copied'"],[6,"Clone","std::clone","A common trait for cloning an object."],[9,"clone","","Returns a copy of the value. The contents of owned pointers\nare copied to maintain uniqueness, while the contents of\nmanaged pointers are not copied.",467],[9,"clone_from","","Perform copy-assignment from `source`.",467],[0,"cmp","std","Defines the `PartialOrd` and `PartialEq` comparison traits."],[6,"PartialEq","std::cmp","Trait for values that can be compared for equality and inequality."],[9,"eq","","This method tests for `self` and `other` values to be equal, and is used by `==`.",468],[9,"ne","","This method tests for `!=`.",468],[6,"Eq","","Trait for equality comparisons which are [equivalence relation]"],[2,"Ordering","","An ordering is, e.g, a result of a comparison between two values."],[12,"Less","","An ordering where a compared value is less [than another].",80],[12,"Equal","","An ordering where a compared value is equal [to another].",80],[12,"Greater","","An ordering where a compared value is greater [than another].",80],[6,"Ord","","Trait for types that form a [total order]"],[9,"cmp","","This method returns an ordering between `self` and `other` values.",469],[3,"lexical_ordering","","Combine orderings, lexically."],[6,"PartialOrd","","Trait for values that can be compared for a sort-order."],[9,"partial_cmp","","This method returns an ordering between `self` and `other` values\nif one exists.",470],[9,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",470],[9,"le","","This method tests less than or equal to (`<=`).",470],[9,"gt","","This method tests greater than (`>`).",470],[9,"ge","","This method tests greater than or equal to (`>=`).",470],[6,"Equiv","","The equivalence relation. Two values may be equivalent even if they are\nof different types. The most common use case for this relation is\ncontainer types; e.g. it is often desirable to be able to use `&str`\nvalues to look up entries in a container with `String` keys."],[9,"equiv","","Implement this function to decide equivalent values.",471],[3,"min","","Compare and return the minimum of two values."],[3,"max","","Compare and return the maximum of two values."],[0,"default","std","The `Default` trait for types which may have meaningful default values"],[6,"Default","std::default","A trait that types which have a useful default value should implement."],[9,"default","","Return the \"default value\" for a type.",472],[0,"finally","std","The Finally trait provides a method, `finally` on\nstack closures that emulates Java-style try/finally blocks."],[6,"Finally","std::finally","A trait for executing a destructor unconditionally after a block of code,\nregardless of whether the blocked fails."],[9,"finally","","Executes this object, unconditionally running `dtor` after this block of\ncode has run.",473],[3,"try_finally","","The most general form of the `finally` functions. The function\n`try_fn` will be invoked first; whether or not it fails, the\nfunction `finally_fn` will be invoked next. The two parameters\n`mutate` and `drop` are used to thread state through the two\nclosures. `mutate` is used for any shared, mutable state that both\nclosures require access to; `drop` is used for any state that the\n`try_fn` requires ownership of."],[0,"intrinsics","std","rustc compiler intrinsics."],[4,"GlueFn","std::intrinsics",""],[1,"TyDesc","",""],[11,"size","","",474],[11,"align","","",474],[11,"drop_glue","","",474],[11,"visit_glue","","",474],[11,"name","","",474],[2,"Opaque","",""],[4,"Disr","",""],[6,"TyVisitor","",""],[9,"visit_bot","","",475],[9,"visit_nil","","",475],[9,"visit_bool","","",475],[9,"visit_int","","",475],[9,"visit_i8","","",475],[9,"visit_i16","","",475],[9,"visit_i32","","",475],[9,"visit_i64","","",475],[9,"visit_uint","","",475],[9,"visit_u8","","",475],[9,"visit_u16","","",475],[9,"visit_u32","","",475],[9,"visit_u64","","",475],[9,"visit_f32","","",475],[9,"visit_f64","","",475],[9,"visit_char","","",475],[9,"visit_estr_slice","","",475],[9,"visit_box","","",475],[9,"visit_uniq","","",475],[9,"visit_ptr","","",475],[9,"visit_rptr","","",475],[9,"visit_evec_slice","","",475],[9,"visit_evec_fixed","","",475],[9,"visit_enter_rec","","",475],[9,"visit_rec_field","","",475],[9,"visit_leave_rec","","",475],[9,"visit_enter_class","","",475],[9,"visit_class_field","","",475],[9,"visit_leave_class","","",475],[9,"visit_enter_tup","","",475],[9,"visit_tup_field","","",475],[9,"visit_leave_tup","","",475],[9,"visit_enter_enum","","",475],[9,"visit_enter_enum_variant","","",475],[9,"visit_enum_variant_field","","",475],[9,"visit_leave_enum_variant","","",475],[9,"visit_leave_enum","","",475],[9,"visit_enter_fn","","",475],[9,"visit_fn_input","","",475],[9,"visit_fn_output","","",475],[9,"visit_leave_fn","","",475],[9,"visit_trait","","",475],[9,"visit_param","","",475],[9,"visit_self","","",475],[3,"atomic_cxchg","",""],[3,"atomic_cxchg_acq","",""],[3,"atomic_cxchg_rel","",""],[3,"atomic_cxchg_acqrel","",""],[3,"atomic_cxchg_relaxed","",""],[3,"atomic_load","",""],[3,"atomic_load_acq","",""],[3,"atomic_load_relaxed","",""],[3,"atomic_store","",""],[3,"atomic_store_rel","",""],[3,"atomic_store_relaxed","",""],[3,"atomic_xchg","",""],[3,"atomic_xchg_acq","",""],[3,"atomic_xchg_rel","",""],[3,"atomic_xchg_acqrel","",""],[3,"atomic_xchg_relaxed","",""],[3,"atomic_xadd","",""],[3,"atomic_xadd_acq","",""],[3,"atomic_xadd_rel","",""],[3,"atomic_xadd_acqrel","",""],[3,"atomic_xadd_relaxed","",""],[3,"atomic_xsub","",""],[3,"atomic_xsub_acq","",""],[3,"atomic_xsub_rel","",""],[3,"atomic_xsub_acqrel","",""],[3,"atomic_xsub_relaxed","",""],[3,"atomic_and","",""],[3,"atomic_and_acq","",""],[3,"atomic_and_rel","",""],[3,"atomic_and_acqrel","",""],[3,"atomic_and_relaxed","",""],[3,"atomic_nand","",""],[3,"atomic_nand_acq","",""],[3,"atomic_nand_rel","",""],[3,"atomic_nand_acqrel","",""],[3,"atomic_nand_relaxed","",""],[3,"atomic_or","",""],[3,"atomic_or_acq","",""],[3,"atomic_or_rel","",""],[3,"atomic_or_acqrel","",""],[3,"atomic_or_relaxed","",""],[3,"atomic_xor","",""],[3,"atomic_xor_acq","",""],[3,"atomic_xor_rel","",""],[3,"atomic_xor_acqrel","",""],[3,"atomic_xor_relaxed","",""],[3,"atomic_max","",""],[3,"atomic_max_acq","",""],[3,"atomic_max_rel","",""],[3,"atomic_max_acqrel","",""],[3,"atomic_max_relaxed","",""],[3,"atomic_min","",""],[3,"atomic_min_acq","",""],[3,"atomic_min_rel","",""],[3,"atomic_min_acqrel","",""],[3,"atomic_min_relaxed","",""],[3,"atomic_umin","",""],[3,"atomic_umin_acq","",""],[3,"atomic_umin_rel","",""],[3,"atomic_umin_acqrel","",""],[3,"atomic_umin_relaxed","",""],[3,"atomic_umax","",""],[3,"atomic_umax_acq","",""],[3,"atomic_umax_rel","",""],[3,"atomic_umax_acqrel","",""],[3,"atomic_umax_relaxed","",""],[3,"atomic_fence","",""],[3,"atomic_fence_acq","",""],[3,"atomic_fence_rel","",""],[3,"atomic_fence_acqrel","",""],[3,"abort","",""],[3,"breakpoint","",""],[3,"size_of","",""],[3,"move_val_init","",""],[3,"min_align_of","",""],[3,"pref_align_of","",""],[3,"get_tydesc","",""],[3,"type_id","",""],[3,"init","",""],[3,"uninit","",""],[3,"forget","",""],[3,"transmute","",""],[3,"return_address","",""],[3,"needs_drop","",""],[3,"owns_managed","",""],[3,"visit_tydesc","",""],[3,"offset","",""],[3,"copy_nonoverlapping_memory","",""],[3,"copy_memory","",""],[3,"set_memory","",""],[3,"volatile_copy_nonoverlapping_memory","",""],[3,"volatile_copy_memory","",""],[3,"volatile_set_memory","",""],[3,"volatile_load","",""],[3,"volatile_store","",""],[3,"sqrtf32","",""],[3,"sqrtf64","",""],[3,"powif32","",""],[3,"powif64","",""],[3,"sinf32","",""],[3,"sinf64","",""],[3,"cosf32","",""],[3,"cosf64","",""],[3,"powf32","",""],[3,"powf64","",""],[3,"expf32","",""],[3,"expf64","",""],[3,"exp2f32","",""],[3,"exp2f64","",""],[3,"logf32","",""],[3,"logf64","",""],[3,"log10f32","",""],[3,"log10f64","",""],[3,"log2f32","",""],[3,"log2f64","",""],[3,"fmaf32","",""],[3,"fmaf64","",""],[3,"fabsf32","",""],[3,"fabsf64","",""],[3,"copysignf32","",""],[3,"copysignf64","",""],[3,"floorf32","",""],[3,"floorf64","",""],[3,"ceilf32","",""],[3,"ceilf64","",""],[3,"truncf32","",""],[3,"truncf64","",""],[3,"rintf32","",""],[3,"rintf64","",""],[3,"nearbyintf32","",""],[3,"nearbyintf64","",""],[3,"roundf32","",""],[3,"roundf64","",""],[3,"ctpop8","",""],[3,"ctpop16","",""],[3,"ctpop32","",""],[3,"ctpop64","",""],[3,"ctlz8","",""],[3,"ctlz16","",""],[3,"ctlz32","",""],[3,"ctlz64","",""],[3,"cttz8","",""],[3,"cttz16","",""],[3,"cttz32","",""],[3,"cttz64","",""],[3,"bswap16","",""],[3,"bswap32","",""],[3,"bswap64","",""],[3,"i8_add_with_overflow","",""],[3,"i16_add_with_overflow","",""],[3,"i32_add_with_overflow","",""],[3,"i64_add_with_overflow","",""],[3,"u8_add_with_overflow","",""],[3,"u16_add_with_overflow","",""],[3,"u32_add_with_overflow","",""],[3,"u64_add_with_overflow","",""],[3,"i8_sub_with_overflow","",""],[3,"i16_sub_with_overflow","",""],[3,"i32_sub_with_overflow","",""],[3,"i64_sub_with_overflow","",""],[3,"u8_sub_with_overflow","",""],[3,"u16_sub_with_overflow","",""],[3,"u32_sub_with_overflow","",""],[3,"u64_sub_with_overflow","",""],[3,"i8_mul_with_overflow","",""],[3,"i16_mul_with_overflow","",""],[3,"i32_mul_with_overflow","",""],[3,"i64_mul_with_overflow","",""],[3,"u8_mul_with_overflow","",""],[3,"u16_mul_with_overflow","",""],[3,"u32_mul_with_overflow","",""],[3,"u64_mul_with_overflow","",""],[1,"TypeId","","`TypeId` represents a globally unique identifier for a type"],[0,"iter","std","Composable external iterators"],[6,"FromIterator","std::iter","Conversion from an `Iterator`"],[9,"from_iter","","Build a container with elements from an external iterator.",476],[6,"Extendable","","A type growable from an `Iterator` implementation"],[9,"extend","","Extend a container with the elements yielded by an iterator",477],[6,"Iterator","","An interface for dealing with \"external iterators\". These types of iterators\ncan be resumed at any time as all state is stored internally as opposed to\nbeing located on the call stack."],[9,"next","","Advance the iterator and return the next value. Return `None` when the end is reached.",478],[9,"size_hint","","Returns a lower and upper bound on the remaining length of the iterator.",478],[9,"chain","","Chain this iterator with another, returning a new iterator which will\nfinish iterating over the current iterator, and then it will iterate\nover the other specified iterator.",478],[9,"zip","","Creates an iterator which iterates over both this and the specified\niterators simultaneously, yielding the two elements as pairs. When\neither iterator returns None, all further invocations of next() will\nreturn None.",478],[9,"map","","Creates a new iterator which will apply the specified function to each\nelement returned by the first, yielding the mapped element instead.",478],[9,"filter","","Creates an iterator which applies the predicate to each element returned\nby this iterator. Only elements which have the predicate evaluate to\n`true` will be yielded.",478],[9,"filter_map","","Creates an iterator which both filters and maps elements.\nIf the specified function returns None, the element is skipped.\nOtherwise the option is unwrapped and the new value is yielded.",478],[9,"enumerate","","Creates an iterator which yields a pair of the value returned by this\niterator plus the current index of iteration.",478],[9,"peekable","","Creates an iterator that has a `.peek()` method\nthat returns an optional reference to the next element.",478],[9,"skip_while","","Creates an iterator which invokes the predicate on elements until it\nreturns false. Once the predicate returns false, all further elements are\nyielded.",478],[9,"take_while","","Creates an iterator which yields elements so long as the predicate\nreturns true. After the predicate returns false for the first time, no\nfurther elements will be yielded.",478],[9,"skip","","Creates an iterator which skips the first `n` elements of this iterator,\nand then it yields all further items.",478],[9,"take","","Creates an iterator which yields the first `n` elements of this\niterator, and then it will always return None.",478],[9,"scan","","Creates a new iterator which behaves in a similar fashion to fold.\nThere is a state which is passed between each iteration and can be\nmutated as necessary. The yielded values from the closure are yielded\nfrom the Scan instance when not None.",478],[9,"flat_map","","Creates an iterator that maps each element to an iterator,\nand yields the elements of the produced iterators",478],[9,"fuse","","Creates an iterator that yields `None` forever after the underlying\niterator yields `None`. Random-access iterator behavior is not\naffected, only single and double-ended iterator behavior.",478],[9,"inspect","","Creates an iterator that calls a function with a reference to each\nelement before yielding it. This is often useful for debugging an\niterator pipeline.",478],[9,"by_ref","","Creates a wrapper around a mutable reference to the iterator.",478],[9,"advance","","Apply a function to each element, or stop iterating if the\nfunction returns `false`.",478],[9,"collect","","Loops through the entire iterator, collecting all of the elements into\na container implementing `FromIterator`.",478],[9,"nth","","Loops through `n` iterations, returning the `n`th element of the\niterator.",478],[9,"last","","Loops through the entire iterator, returning the last element of the\niterator.",478],[9,"fold","","Performs a fold operation over the entire iterator, returning the\neventual state at the end of the iteration.",478],[9,"count","","Counts the number of elements in this iterator.",478],[9,"all","","Tests whether the predicate holds true for all elements in the iterator.",478],[9,"any","","Tests whether any element of an iterator satisfies the specified\npredicate.",478],[9,"find","","Return the first element satisfying the specified predicate",478],[9,"position","","Return the index of the first element satisfying the specified predicate",478],[9,"max_by","","Return the element that gives the maximum value from the\nspecified function.",478],[9,"min_by","","Return the element that gives the minimum value from the\nspecified function.",478],[6,"DoubleEndedIterator","","A range iterator able to yield elements from both ends"],[9,"next_back","","Yield an element from the end of the range, returning `None` if the range is empty.",479],[9,"rev","","Change the direction of the iterator",479],[6,"MutableDoubleEndedIterator","","A double-ended iterator yielding mutable references"],[9,"reverse_","","Use an iterator to reverse a container in-place",480],[6,"RandomAccessIterator","","An object implementing random access indexing by `uint`"],[9,"indexable","","Return the number of indexable elements. At most `std::uint::MAX`\nelements are indexable, even if the iterator represents a longer range.",481],[9,"idx","","Return an element at an index, or `None` if the index is out of bounds",481],[6,"ExactSize","","An iterator that knows its exact length"],[9,"rposition","","Return the index of the last element satisfying the specified predicate",482],[9,"len","","Return the exact length of the iterator.",482],[1,"Rev","","An double-ended iterator with the direction inverted"],[1,"ByRef","","A mutable reference to an iterator"],[6,"AdditiveIterator","","A trait for iterators over elements which can be added together"],[9,"sum","","Iterates over the entire iterator, summing up all the elements",483],[6,"MultiplicativeIterator","","A trait for iterators over elements whose elements can be multiplied\ntogether."],[9,"product","","Iterates over the entire iterator, multiplying all the elements",484],[6,"OrdIterator","","A trait for iterators over elements which can be compared to one another.\nThe type of each element must ascribe to the `PartialOrd` trait."],[9,"max","","Consumes the entire iterator to return the maximum element.",485],[9,"min","","Consumes the entire iterator to return the minimum element.",485],[9,"min_max","","`min_max` finds the minimum and maximum elements in the iterator.",485],[2,"MinMaxResult","","`MinMaxResult` is an enum returned by `min_max`. See `OrdIterator::min_max` for more detail."],[12,"NoElements","","Empty iterator",97],[12,"OneElement","","Iterator with one element, so the minimum and maximum are the same",97],[12,"MinMax","","More than one element in the iterator, the first element is not larger than the second",97],[6,"CloneableIterator","","A trait for iterators that are cloneable."],[9,"cycle","","Repeats an iterator endlessly",486],[1,"Cycle","","An iterator that repeats endlessly"],[1,"Chain","","An iterator which strings two iterators together"],[1,"Zip","","An iterator which iterates two other iterators simultaneously"],[1,"Map","","An iterator which maps the values of `iter` with `f`"],[1,"Filter","","An iterator which filters the elements of `iter` with `predicate`"],[1,"FilterMap","","An iterator which uses `f` to both filter and map elements from `iter`"],[1,"Enumerate","","An iterator which yields the current count and the element during iteration"],[1,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next element."],[1,"SkipWhile","","An iterator which rejects elements while `predicate` is true"],[1,"TakeWhile","","An iterator which only accepts elements while `predicate` is true"],[1,"Skip","","An iterator which skips over `n` elements of `iter`."],[1,"Take","","An iterator which only iterates over the first `n` iterations of `iter`."],[1,"Scan","","An iterator to maintain state while iterating another iterator"],[11,"state","","The current internal state to be passed to the closure next.",107],[1,"FlatMap","","An iterator that maps each element to an iterator,\nand yields the elements of the produced iterators\n"],[1,"Fuse","","An iterator that yields `None` forever after the underlying iterator\nyields `None` once."],[1,"Inspect","","An iterator that calls a function with a reference to each\nelement before yielding it."],[1,"Unfold","","An iterator which just modifies the contained state throughout iteration."],[11,"state","","Internal state that will be yielded on the next iteration",110],[1,"Counter","","An infinite iterator starting at `start` and advancing by `step` with each\niteration"],[3,"count","","Creates a new counter with the specified start/step"],[1,"Range","","An iterator over the range [start, stop)"],[3,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive))."],[1,"RangeInclusive","","An iterator over the range [start, stop]"],[3,"range_inclusive","","Return an iterator over the range [start, stop]"],[1,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping."],[3,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping."],[1,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping."],[3,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping."],[1,"Repeat","","An iterator that repeats an element endlessly"],[4,"Iterate","",""],[3,"iterate","","Creates a new iterator that produces an infinite sequence of\nrepeated applications of the given function `f`."],[0,"order","","Functions for lexicographical ordering of sequences."],[3,"equals","std::iter::order","Compare `a` and `b` for equality using `Eq`"],[3,"cmp","","Order `a` and `b` lexicographically using `Ord`"],[3,"partial_cmp","","Order `a` and `b` lexicographically using `PartialOrd`"],[3,"eq","","Compare `a` and `b` for equality (Using partial equality, `PartialEq`)"],[3,"ne","","Compare `a` and `b` for nonequality (Using partial equality, `PartialEq`)"],[3,"lt","","Return `a` < `b` lexicographically (Using partial order, `PartialOrd`)"],[3,"le","","Return `a` <= `b` lexicographically (Using partial order, `PartialOrd`)"],[3,"gt","","Return `a` > `b` lexicographically (Using partial order, `PartialOrd`)"],[3,"ge","","Return `a` >= `b` lexicographically (Using partial order, `PartialOrd`)"],[0,"kinds","std","Primitive traits representing basic 'kinds' of types"],[6,"Send","std::kinds","Types able to be transferred across task boundaries."],[6,"Sized","","Types with a constant size known at compile-time."],[6,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`)."],[6,"Sync","","Types that can be safely shared between tasks when aliased."],[0,"marker","","Marker types are special types that are used with unsafe code to\ninform the compiler of special constraints. Marker types should\nonly be needed when you are creating an abstraction that is\nimplemented using unsafe code. In that case, you may want to embed\nsome of the marker types below into your type."],[1,"CovariantType","std::kinds::marker","A marker type whose type parameter `T` is considered to be\ncovariant with respect to the type itself. This is (typically)\nused to indicate that an instance of the type `T` is being stored\ninto memory and read from, even though that may not be apparent."],[1,"ContravariantType","","A marker type whose type parameter `T` is considered to be\ncontravariant with respect to the type itself. This is (typically)\nused to indicate that an instance of the type `T` will be consumed\n(but not read from), even though that may not be apparent."],[1,"InvariantType","","A marker type whose type parameter `T` is considered to be\ninvariant with respect to the type itself. This is (typically)\nused to indicate that instances of the type `T` may be read or\nwritten, even though that may not be apparent."],[1,"CovariantLifetime","","As `CovariantType`, but for lifetime parameters. Using\n`CovariantLifetime<'a>` indicates that it is ok to substitute\na *longer* lifetime for `'a` than the one you originally\nstarted with (e.g., you could convert any lifetime `'foo` to\n`'static`). You almost certainly want `ContravariantLifetime`\ninstead, or possibly `InvariantLifetime`. The only case where\nit would be appropriate is that you have a (type-casted, and\nhence hidden from the type system) function pointer with a\nsignature like `fn(&'a T)` (and no other uses of `'a`). In\nthis case, it is ok to substitute a larger lifetime for `'a`\n(e.g., `fn(&'static T)`), because the function is only\nbecoming more selective in terms of what it accepts as\nargument."],[1,"ContravariantLifetime","","As `ContravariantType`, but for lifetime parameters. Using\n`ContravariantLifetime<'a>` indicates that it is ok to\nsubstitute a *shorter* lifetime for `'a` than the one you\noriginally started with (e.g., you could convert `'static` to\nany lifetime `'foo`). This is appropriate for cases where you\nhave an unsafe pointer that is actually a pointer into some\nmemory with lifetime `'a`, and thus you want to limit the\nlifetime of your data structure to `'a`. An example of where\nthis is used is the iterator for vectors."],[1,"InvariantLifetime","","As `InvariantType`, but for lifetime parameters. Using\n`InvariantLifetime<'a>` indicates that it is not ok to\nsubstitute any other lifetime for `'a` besides its original\nvalue. This is appropriate for cases where you have an unsafe\npointer that is actually a pointer into memory with lifetime `'a`,\nand this pointer is itself stored in an inherently mutable\nlocation (such as a `Cell`)."],[1,"NoSend","","A type which is considered \"not sendable\", meaning that it cannot\nbe safely sent between tasks, even if it is owned. This is\ntypically embedded in other types, such as `Gc`, to ensure that\ntheir instances remain thread-local."],[1,"NoCopy","","A type which is considered \"not POD\", meaning that it is not\nimplicitly copyable. This is typically embedded in other types to\nensure that they are never copied, even if they lack a destructor."],[1,"NoSync","","A type which is considered \"not sync\", meaning that\nits contents are not threadsafe, hence they cannot be\nshared between tasks."],[1,"Managed","","A type which is considered managed by the GC. This is typically\nembedded in other types."],[6,"Sync","std::kinds","Types that can be safely shared between tasks when aliased."],[0,"mem","std","Basic functions for dealing with memory"],[3,"size_of","std::mem","Returns the size of a type in bytes."],[3,"size_of_val","","Returns the size of the type that `_val` points to in bytes."],[3,"nonzero_size_of","","Deprecated, this function will be removed soon"],[3,"nonzero_size_of_val","","Deprecated, this function will be removed soon"],[3,"min_align_of","","Returns the ABI-required minimum alignment of a type"],[3,"min_align_of_val","","Returns the ABI-required minimum alignment of the type of the value that\n`_val` points to"],[3,"align_of","","Returns the alignment in memory for a type."],[3,"align_of_val","","Returns the alignment of the type of the value that `_val` points to."],[3,"pref_align_of","","Deprecated, this function has been renamed to align_of"],[3,"pref_align_of_val","","Deprecated, this function has been renamed to align_of_val"],[3,"zeroed","","Create a value initialized to zero."],[3,"init","","Deprecated, use zeroed() instead"],[3,"uninitialized","","Create an uninitialized value."],[3,"uninit","","Deprecated, use `uninitialized` instead."],[3,"overwrite","","Unsafely overwrite a memory location with the given value without destroying\nthe old value."],[3,"move_val_init","","Deprecated, use `overwrite` instead"],[3,"to_le16","","Convert an u16 to little endian from the target's endianness."],[3,"to_le32","","Convert an u32 to little endian from the target's endianness."],[3,"to_le64","","Convert an u64 to little endian from the target's endianness."],[3,"to_be16","","Convert an u16 to big endian from the target's endianness."],[3,"to_be32","","Convert an u32 to big endian from the target's endianness."],[3,"to_be64","","Convert an u64 to big endian from the target's endianness."],[3,"from_le16","","Convert an u16 from little endian to the target's endianness."],[3,"from_le32","","Convert an u32 from little endian to the target's endianness."],[3,"from_le64","","Convert an u64 from little endian to the target's endianness."],[3,"from_be16","","Convert an u16 from big endian to the target's endianness."],[3,"from_be32","","Convert an u32 from big endian to the target's endianness."],[3,"from_be64","","Convert an u64 from big endian to the target's endianness."],[3,"swap","","Swap the values at two mutable locations of the same type, without\ndeinitialising or copying either one."],[3,"replace","","Replace the value at a mutable location with a new one, returning the old\nvalue, without deinitialising or copying either one."],[3,"drop","","Disposes of a value."],[3,"transmute_copy","","Interprets `src` as `&U`, and then reads `src` without moving the contained\nvalue."],[3,"copy_lifetime","","Transforms lifetime of the second pointer to match the first."],[3,"copy_mut_lifetime","","Transforms lifetime of the second mutable pointer to match the first."],[3,"transmute","",""],[3,"forget","",""],[0,"ops","std","\nOverloadable operators"],[6,"Drop","std::ops","\nThe `Drop` trait is used to run some code when a value goes out of scope. This\nis sometimes called a 'destructor'."],[9,"drop","","The `drop` method, called when the value goes out of scope.",487],[6,"Add","","\nThe `Add` trait is used to specify the functionality of `+`."],[9,"add","","The method for the `+` operator",488],[6,"Sub","","\nThe `Sub` trait is used to specify the functionality of `-`."],[9,"sub","","The method for the `-` operator",489],[6,"Mul","","\nThe `Mul` trait is used to specify the functionality of `*`."],[9,"mul","","The method for the `*` operator",490],[6,"Div","","\nThe `Div` trait is used to specify the functionality of `/`."],[9,"div","","The method for the `/` operator",491],[6,"Rem","","\nThe `Rem` trait is used to specify the functionality of `%`."],[9,"rem","","The method for the `%` operator",492],[6,"Neg","","\nThe `Neg` trait is used to specify the functionality of unary `-`."],[9,"neg","","The method for the unary `-` operator",493],[6,"Not","","\nThe `Not` trait is used to specify the functionality of unary `!`."],[9,"not","","The method for the unary `!` operator",494],[6,"BitAnd","","\nThe `BitAnd` trait is used to specify the functionality of `&`."],[9,"bitand","","The method for the `&` operator",495],[6,"BitOr","","\nThe `BitOr` trait is used to specify the functionality of `|`."],[9,"bitor","","The method for the `|` operator",496],[6,"BitXor","","\nThe `BitXor` trait is used to specify the functionality of `^`."],[9,"bitxor","","The method for the `^` operator",497],[6,"Shl","","\nThe `Shl` trait is used to specify the functionality of `<<`."],[9,"shl","","The method for the `<<` operator",498],[6,"Shr","","\nThe `Shr` trait is used to specify the functionality of `>>`."],[9,"shr","","The method for the `>>` operator",499],[6,"Index","","\nThe `Index` trait is used to specify the functionality of indexing operations\nlike `arr[idx]` when used in an immutable context."],[9,"index","","The method for the indexing (`Foo[Bar]`) operation",500],[6,"IndexMut","","\nThe `IndexMut` trait is used to specify the functionality of indexing\noperations like `arr[idx]`, when used in a mutable context."],[9,"index_mut","","The method for the indexing (`Foo[Bar]`) operation",501],[6,"Slice","","\nThe `Slice` trait is used to specify the functionality of slicing operations\nlike `arr[from..to]` when used in an immutable context."],[9,"as_slice_","","The method for the slicing operation foo[]",502],[9,"slice_from_","","The method for the slicing operation foo[from..]",502],[9,"slice_to_","","The method for the slicing operation foo[..to]",502],[9,"slice_","","The method for the slicing operation foo[from..to]",502],[6,"SliceMut","","\nThe `SliceMut` trait is used to specify the functionality of slicing\noperations like `arr[from..to]`, when used in a mutable context."],[9,"as_mut_slice_","","The method for the slicing operation foo[]",503],[9,"slice_from_mut_","","The method for the slicing operation foo[from..]",503],[9,"slice_to_mut_","","The method for the slicing operation foo[..to]",503],[9,"slice_mut_","","The method for the slicing operation foo[from..to]",503],[6,"Deref","","\nThe `Deref` trait is used to specify the functionality of dereferencing\noperations like `*v`."],[9,"deref","","The method called to dereference a value",504],[6,"DerefMut","","\nThe `DerefMut` trait is used to specify the functionality of dereferencing\nmutably like `*v = 1;`"],[9,"deref_mut","","The method called to mutably dereference a value",505],[6,"Fn","","A version of the call operator that takes an immutable receiver."],[9,"call","","This is called when the call operator is used.",506],[6,"FnMut","","A version of the call operator that takes a mutable receiver."],[9,"call_mut","","This is called when the call operator is used.",507],[6,"FnOnce","","A version of the call operator that takes a by-value receiver."],[9,"call_once","","This is called when the call operator is used.",508],[0,"ptr","std","Operations on unsafe pointers, `*const T`, and `*mut T`."],[3,"null","std::ptr","Create a null pointer."],[3,"mut_null","","Deprecated: use `null_mut`."],[3,"null_mut","","Create an unsafe mutable null pointer."],[3,"zero_memory","","Zeroes out `count * size_of::<T>` bytes of memory at `dst`"],[3,"swap","","Swap the values at two mutable locations of the same type, without\ndeinitialising either. They may overlap."],[3,"replace","","Replace the value at a mutable location with a new one, returning the old\nvalue, without deinitialising either."],[3,"read","","Reads the value from `*src` and returns it."],[3,"read_and_zero","","Reads the value from `*src` and nulls it out.\nThis currently prevents destructors from executing."],[3,"write","","Unsafely overwrite a memory location with the given value without destroying\nthe old value."],[3,"array_each_with_len","","Given a *const *const T (pointer to an array of pointers),\niterate through each *const T, up to the provided `len`,\npassing to the provided callback function"],[3,"array_each","","Given a null-pointer-terminated *const *const T (pointer to\nan array of pointers), iterate through each *const T,\npassing to the provided callback function"],[3,"buf_len","","Return the offset of the first null pointer in `buf`."],[3,"position","","Return the first offset `i` such that `f(buf[i]) == true`."],[6,"RawPtr","","Methods on raw pointers"],[9,"null","","Returns the null pointer.",509],[9,"is_null","","Returns true if the pointer is equal to the null pointer.",509],[9,"is_not_null","","Returns true if the pointer is not equal to the null pointer.",509],[9,"to_uint","","Returns the value of this pointer (ie, the address it points to)",509],[9,"as_ref","","Returns `None` if the pointer is null, or else returns a reference to the\nvalue wrapped in `Some`.",509],[9,"to_option","","A synonym for `as_ref`, except with incorrect lifetime semantics",509],[9,"offset","","Calculates the offset from a pointer. The offset *must* be in-bounds of\nthe object, or one-byte-past-the-end.  `count` is in units of T; e.g. a\n`count` of 3 represents a pointer offset of `3 * sizeof::<T>()` bytes.",509],[6,"RawMutPtr","","Methods on mutable raw pointers"],[9,"as_mut","","Returns `None` if the pointer is null, or else returns a mutable reference\nto the value wrapped in `Some`. As with `as_ref`, this is unsafe because\nit cannot verify the validity of the returned pointer.",510],[3,"copy_nonoverlapping_memory","",""],[3,"copy_memory","",""],[3,"set_memory","",""],[0,"raw","std","Contains struct definitions for the layout of compiler built-in types."],[1,"Box","std::raw","The representation of a Rust managed box"],[11,"ref_count","","",511],[11,"drop_glue","","",511],[11,"prev","","",511],[11,"next","","",511],[11,"data","","",511],[1,"Slice","","The representation of a Rust slice"],[11,"data","","",512],[11,"len","","",512],[1,"Closure","","The representation of a Rust closure"],[11,"code","","",513],[11,"env","","",513],[1,"Procedure","","The representation of a Rust procedure (`proc()`)"],[11,"code","","",514],[11,"env","","",514],[1,"TraitObject","","The representation of a Rust trait object."],[11,"data","","",515],[11,"vtable","","",515],[6,"Repr","","This trait is meant to map equivalences between raw structs and their\ncorresponding rust values."],[9,"repr","","This function \"unwraps\" a rust value (without consuming it) into its raw\nstruct representation. This can be used to read/write different values\nfor the struct. This is a safe method because by default it does not\nenable write-access to the fields of the return value in safe code.",516],[0,"simd","std","SIMD vectors."],[1,"i8x16","std::simd",""],[1,"i16x8","",""],[1,"i32x4","",""],[1,"i64x2","",""],[1,"u8x16","",""],[1,"u16x8","",""],[1,"u32x4","",""],[1,"u64x2","",""],[1,"f32x4","",""],[1,"f64x2","",""],[0,"tuple","std","Operations on tuples"],[6,"Tuple1","std::tuple",""],[9,"val0","","",517],[9,"ref0","","",517],[9,"mut0","","",517],[6,"Tuple2","",""],[9,"val0","","",518],[9,"ref0","","",518],[9,"mut0","","",518],[9,"val1","","",518],[9,"ref1","","",518],[9,"mut1","","",518],[6,"Tuple3","",""],[9,"val0","","",519],[9,"ref0","","",519],[9,"mut0","","",519],[9,"val1","","",519],[9,"ref1","","",519],[9,"mut1","","",519],[9,"val2","","",519],[9,"ref2","","",519],[9,"mut2","","",519],[6,"Tuple4","",""],[9,"val0","","",520],[9,"ref0","","",520],[9,"mut0","","",520],[9,"val1","","",520],[9,"ref1","","",520],[9,"mut1","","",520],[9,"val2","","",520],[9,"ref2","","",520],[9,"mut2","","",520],[9,"val3","","",520],[9,"ref3","","",520],[9,"mut3","","",520],[6,"Tuple5","",""],[9,"val0","","",521],[9,"ref0","","",521],[9,"mut0","","",521],[9,"val1","","",521],[9,"ref1","","",521],[9,"mut1","","",521],[9,"val2","","",521],[9,"ref2","","",521],[9,"mut2","","",521],[9,"val3","","",521],[9,"ref3","","",521],[9,"mut3","","",521],[9,"val4","","",521],[9,"ref4","","",521],[9,"mut4","","",521],[6,"Tuple6","",""],[9,"val0","","",522],[9,"ref0","","",522],[9,"mut0","","",522],[9,"val1","","",522],[9,"ref1","","",522],[9,"mut1","","",522],[9,"val2","","",522],[9,"ref2","","",522],[9,"mut2","","",522],[9,"val3","","",522],[9,"ref3","","",522],[9,"mut3","","",522],[9,"val4","","",522],[9,"ref4","","",522],[9,"mut4","","",522],[9,"val5","","",522],[9,"ref5","","",522],[9,"mut5","","",522],[6,"Tuple7","",""],[9,"val0","","",523],[9,"ref0","","",523],[9,"mut0","","",523],[9,"val1","","",523],[9,"ref1","","",523],[9,"mut1","","",523],[9,"val2","","",523],[9,"ref2","","",523],[9,"mut2","","",523],[9,"val3","","",523],[9,"ref3","","",523],[9,"mut3","","",523],[9,"val4","","",523],[9,"ref4","","",523],[9,"mut4","","",523],[9,"val5","","",523],[9,"ref5","","",523],[9,"mut5","","",523],[9,"val6","","",523],[9,"ref6","","",523],[9,"mut6","","",523],[6,"Tuple8","",""],[9,"val0","","",524],[9,"ref0","","",524],[9,"mut0","","",524],[9,"val1","","",524],[9,"ref1","","",524],[9,"mut1","","",524],[9,"val2","","",524],[9,"ref2","","",524],[9,"mut2","","",524],[9,"val3","","",524],[9,"ref3","","",524],[9,"mut3","","",524],[9,"val4","","",524],[9,"ref4","","",524],[9,"mut4","","",524],[9,"val5","","",524],[9,"ref5","","",524],[9,"mut5","","",524],[9,"val6","","",524],[9,"ref6","","",524],[9,"mut6","","",524],[9,"val7","","",524],[9,"ref7","","",524],[9,"mut7","","",524],[6,"Tuple9","",""],[9,"val0","","",525],[9,"ref0","","",525],[9,"mut0","","",525],[9,"val1","","",525],[9,"ref1","","",525],[9,"mut1","","",525],[9,"val2","","",525],[9,"ref2","","",525],[9,"mut2","","",525],[9,"val3","","",525],[9,"ref3","","",525],[9,"mut3","","",525],[9,"val4","","",525],[9,"ref4","","",525],[9,"mut4","","",525],[9,"val5","","",525],[9,"ref5","","",525],[9,"mut5","","",525],[9,"val6","","",525],[9,"ref6","","",525],[9,"mut6","","",525],[9,"val7","","",525],[9,"ref7","","",525],[9,"mut7","","",525],[9,"val8","","",525],[9,"ref8","","",525],[9,"mut8","","",525],[6,"Tuple10","",""],[9,"val0","","",526],[9,"ref0","","",526],[9,"mut0","","",526],[9,"val1","","",526],[9,"ref1","","",526],[9,"mut1","","",526],[9,"val2","","",526],[9,"ref2","","",526],[9,"mut2","","",526],[9,"val3","","",526],[9,"ref3","","",526],[9,"mut3","","",526],[9,"val4","","",526],[9,"ref4","","",526],[9,"mut4","","",526],[9,"val5","","",526],[9,"ref5","","",526],[9,"mut5","","",526],[9,"val6","","",526],[9,"ref6","","",526],[9,"mut6","","",526],[9,"val7","","",526],[9,"ref7","","",526],[9,"mut7","","",526],[9,"val8","","",526],[9,"ref8","","",526],[9,"mut8","","",526],[9,"val9","","",526],[9,"ref9","","",526],[9,"mut9","","",526],[6,"Tuple11","",""],[9,"val0","","",527],[9,"ref0","","",527],[9,"mut0","","",527],[9,"val1","","",527],[9,"ref1","","",527],[9,"mut1","","",527],[9,"val2","","",527],[9,"ref2","","",527],[9,"mut2","","",527],[9,"val3","","",527],[9,"ref3","","",527],[9,"mut3","","",527],[9,"val4","","",527],[9,"ref4","","",527],[9,"mut4","","",527],[9,"val5","","",527],[9,"ref5","","",527],[9,"mut5","","",527],[9,"val6","","",527],[9,"ref6","","",527],[9,"mut6","","",527],[9,"val7","","",527],[9,"ref7","","",527],[9,"mut7","","",527],[9,"val8","","",527],[9,"ref8","","",527],[9,"mut8","","",527],[9,"val9","","",527],[9,"ref9","","",527],[9,"mut9","","",527],[9,"val10","","",527],[9,"ref10","","",527],[9,"mut10","","",527],[6,"Tuple12","",""],[9,"val0","","",528],[9,"ref0","","",528],[9,"mut0","","",528],[9,"val1","","",528],[9,"ref1","","",528],[9,"mut1","","",528],[9,"val2","","",528],[9,"ref2","","",528],[9,"mut2","","",528],[9,"val3","","",528],[9,"ref3","","",528],[9,"mut3","","",528],[9,"val4","","",528],[9,"ref4","","",528],[9,"mut4","","",528],[9,"val5","","",528],[9,"ref5","","",528],[9,"mut5","","",528],[9,"val6","","",528],[9,"ref6","","",528],[9,"mut6","","",528],[9,"val7","","",528],[9,"ref7","","",528],[9,"mut7","","",528],[9,"val8","","",528],[9,"ref8","","",528],[9,"mut8","","",528],[9,"val9","","",528],[9,"ref9","","",528],[9,"mut9","","",528],[9,"val10","","",528],[9,"ref10","","",528],[9,"mut10","","",528],[9,"val11","","",528],[9,"ref11","","",528],[9,"mut11","","",528],[0,"unit","","The `()` type, sometimes called \"unit\" or \"nil\"."],[16,"tuple","","Operations on tuples"],[0,"unit","std","The `()` type, sometimes called \"unit\" or \"nil\"."],[16,"unit","std::unit","The `()` type, sometimes called \"unit\" or \"nil\"."],[0,"ty","std","Deprecated module in favor of `std::cell`"],[1,"UnsafeCell","std::ty","The core primitive for interior mutability in Rust."],[11,"value","","Wrapped value",89],[0,"result","std","Error handling with the `Result` type"],[2,"Result","std::result","`Result` is a type that represents either success (`Ok`) or failure (`Err`)."],[12,"Ok","","Contains the success value",118],[12,"Err","","Contains the error value",118],[1,"Item","","A `Result` iterator that yields either one or zero elements"],[3,"collect","","Deprecated: use `Iterator::collect`."],[3,"fold","","Perform a fold operation over the result values from an iterator."],[3,"fold_","","Deprecated."],[0,"option","std","Optional values"],[2,"Option","std::option","The `Option` type."],[12,"None","","No value",27],[12,"Some","","Some value `T`",27],[1,"Item","","An `Option` iterator that yields either one or zero elements"],[3,"collect","","Deprecated: use `Iterator::collect` instead."],[0,"boxed","std","A unique pointer type."],[5,"HEAP","std::boxed",""],[1,"Box","","A type that represents a uniquely-owned value."],[6,"BoxAny","","Extension methods for an owning `Any` trait object."],[9,"downcast","","Returns the boxed value if it is of type `T`, or\n`Err(Self)` if it isn't.",529],[9,"move","","Deprecated; this method has been renamed to `downcast`.",529],[0,"owned","std","A unique pointer type."],[5,"HEAP","std::owned",""],[1,"Box","","A type that represents a uniquely-owned value."],[6,"BoxAny","","Extension methods for an owning `Any` trait object."],[9,"downcast","","Returns the boxed value if it is of type `T`, or\n`Err(Self)` if it isn't.",529],[9,"move","","Deprecated; this method has been renamed to `downcast`.",529],[0,"rc","std","Task-local reference-counted boxes (the `Rc` type)."],[1,"Rc","std::rc","An immutable reference-counted pointer type."],[3,"is_unique","","Returns true if the `Rc` currently has unique ownership."],[3,"try_unwrap","","Unwraps the contained value if the `Rc` has unique ownership."],[3,"get_mut","","Returns a mutable reference to the contained value if the `Rc` has\nunique ownership."],[1,"Weak","","A weak reference to a reference-counted pointer."],[0,"slice","std","Utilities for slice manipulation"],[6,"VectorVector","std::slice",""],[9,"concat_vec","","Flattens a vector of vectors of `T` into a single `Vec<T>`.",530],[9,"connect_vec","","Concatenate a vector of vectors, placing a given separator between each.",530],[1,"ElementSwaps","","An iterator that yields the element swaps needed to produce\na sequence of all possible permutations for an indexed sequence of\nelements. Each permutation is only a single swap apart."],[1,"Permutations","","An iterator that uses `ElementSwaps` to iterate through\nall possible permutations of a vector."],[6,"CloneableVector","","Extension methods for vector slices with cloneable elements"],[9,"to_vec","","Copies `self` into a new `Vec`.",531],[9,"to_owned","","Deprecated. Use `to_vec`.",531],[9,"into_vec","","Converts `self` into an owned vector, not making a copy if possible.",531],[9,"into_owned","","Deprecated. Use `into_vec`",531],[6,"ImmutableCloneableVector","","Extension methods for vectors containing `Clone` elements."],[9,"partitioned","","Partitions the vector into two vectors `(a, b)`, where all\nelements of `a` satisfy `f` and all elements of `b` do not.",532],[9,"permutations","","Creates an iterator that yields every possible permutation of the\nvector in succession.",532],[6,"MutableSliceAllocating","","Extension methods for vectors such that their elements are\nmutable."],[9,"sort_by","","Sorts the slice, in place, using `compare` to compare\nelements.",533],[9,"move_from","","Consumes `src` and moves as many elements as it can into `self`\nfrom the range [start,end).",533],[6,"MutableOrdSlice","","Methods for mutable vectors with orderable elements, such as\nin-place sorting."],[9,"sort","","Sorts the slice, in place.",534],[9,"next_permutation","","Mutates the slice to the next lexicographic permutation.",534],[9,"prev_permutation","","Mutates the slice to the previous lexicographic permutation.",534],[0,"raw","","Unsafe operations"],[3,"shift_ptr","std::slice::raw","Returns a pointer to first element in slice and adjusts\nslice so it no longer contains that element. Returns None\nif the slice is empty. O(1)."],[3,"mut_buf_as_slice","","Form a slice from a pointer and length (as a number of units,\nnot bytes)."],[3,"pop_ptr","","Returns a pointer to last element in slice and adjusts\nslice so it no longer contains that element. Returns None\nif the slice is empty. O(1)."],[3,"buf_as_slice","","Form a slice from a pointer and length (as a number of units,\nnot bytes)."],[3,"ref_slice","std::slice","Converts a pointer to A into a slice of length 1 (without copying)."],[6,"ImmutableSlice","","Extension methods for immutable slices."],[9,"slice","","Returns a subslice spanning the interval [`start`, `end`).",535],[9,"slice_from","","Returns a subslice from `start` to the end of the slice.",535],[9,"slice_to","","Returns a subslice from the start of the slice to `end`.",535],[9,"split_at","","Divides one slice into two at an index.",535],[9,"iter","","Returns an iterator over the vector",535],[9,"split","","Returns an iterator over the subslices of the vector which are\nseparated by elements that match `pred`.  The matched element\nis not contained in the subslices.",535],[9,"splitn","","Returns an iterator over the subslices of the vector which are\nseparated by elements that match `pred`, limited to splitting\nat most `n` times.  The matched element is not contained in\nthe subslices.",535],[9,"rsplitn","","Returns an iterator over the subslices of the vector which are\nseparated by elements that match `pred` limited to splitting\nat most `n` times. This starts at the end of the vector and\nworks backwards.  The matched element is not contained in the\nsubslices.",535],[9,"windows","","Returns an iterator over all contiguous windows of length\n`size`. The windows overlap. If the vector is shorter than\n`size`, the iterator returns no values.",535],[9,"chunks","","\nReturns an iterator over `size` elements of the vector at a\ntime. The chunks do not overlap. If `size` does not divide the\nlength of the vector, then the last chunk will not have length\n`size`.",535],[9,"get","","Returns the element of a vector at the given index, or `None` if the\nindex is out of bounds",535],[9,"head","","Returns the first element of a vector, or `None` if it is empty",535],[9,"tail","","Returns all but the first element of a vector",535],[9,"tailn","","Returns all but the first `n' elements of a vector",535],[9,"init","","Returns all but the last element of a vector",535],[9,"initn","","Returns all but the last `n' elements of a vector",535],[9,"last","","Returns the last element of a vector, or `None` if it is empty.",535],[9,"unsafe_ref","","Returns a pointer to the element at the given index, without doing\nbounds checking.",535],[9,"unsafe_get","","Returns a pointer to the element at the given index, without doing\nbounds checking.",535],[9,"as_ptr","","Returns an unsafe pointer to the vector's buffer",535],[9,"bsearch","","Binary search a sorted vector with a comparator function.",535],[9,"binary_search","","Binary search a sorted vector with a comparator function.",535],[9,"shift_ref","","Returns an immutable reference to the first element in this slice\nand adjusts the slice in place so that it no longer contains\nthat element. O(1).",535],[9,"pop_ref","","Returns an immutable reference to the last element in this slice\nand adjusts the slice in place so that it no longer contains\nthat element. O(1).",535],[1,"Chunks","","An iterator over a vector in (non-overlapping) chunks (`size`\nelements at a time)."],[0,"bytes","","Operations on `[u8]`."],[6,"MutableByteVector","std::slice::bytes","A trait for operations on mutable `[u8]`s."],[9,"set_memory","","Sets all bytes of the receiver to the given value.",536],[3,"copy_memory","","Copies data from `src` to `dst`"],[6,"MutableCloneableSlice","std::slice","Trait for &[T] where T is Cloneable"],[9,"copy_from","","Copies as many elements from `src` as it can into `self` (the\nshorter of `self.len()` and `src.len()`). Returns the number\nof elements copied.",537],[9,"clone_from_slice","","Copies as many elements from `src` as it can into `self` (the\nshorter of `self.len()` and `src.len()`). Returns the number\nof elements copied.",537],[1,"MutItems","","Mutable slice iterator"],[6,"MutableSlice","","Extension methods for vectors such that their elements are\nmutable."],[9,"get_mut","","Returns a mutable reference to the element at the given index,\nor `None` if the index is out of bounds",538],[9,"as_mut_slice","","Work with `self` as a mut slice.\nPrimarily intended for getting a &mut [T] from a [T, ..N].",538],[9,"mut_slice","","Deprecated: use `slice_mut`.",538],[9,"slice_mut","","Returns a mutable subslice spanning the interval [`start`, `end`).",538],[9,"mut_slice_from","","Deprecated: use `slice_from_mut`.",538],[9,"slice_from_mut","","Returns a mutable subslice from `start` to the end of the slice.",538],[9,"mut_slice_to","","Deprecated: use `slice_to_mut`.",538],[9,"slice_to_mut","","Returns a mutable subslice from the start of the slice to `end`.",538],[9,"mut_iter","","Deprecated: use `iter_mut`.",538],[9,"iter_mut","","Returns an iterator that allows modifying each value",538],[9,"mut_last","","Deprecated: use `last_mut`.",538],[9,"last_mut","","Returns a mutable pointer to the last item in the vector.",538],[9,"mut_split","","Deprecated: use `split_mut`.",538],[9,"split_mut","","Returns an iterator over the mutable subslices of the vector\nwhich are separated by elements that match `pred`.  The\nmatched element is not contained in the subslices.",538],[9,"mut_chunks","","Deprecated: use `chunks_mut`.",538],[9,"chunks_mut","","Returns an iterator over `chunk_size` elements of the vector at a time.\nThe chunks are mutable and do not overlap. If `chunk_size` does\nnot divide the length of the vector, then the last chunk will not\nhave length `chunk_size`.",538],[9,"mut_shift_ref","","Returns a mutable reference to the first element in this slice\nand adjusts the slice in place so that it no longer contains\nthat element. O(1).",538],[9,"mut_pop_ref","","Returns a mutable reference to the last element in this slice\nand adjusts the slice in place so that it no longer contains\nthat element. O(1).",538],[9,"swap","","Swaps two elements in a vector.",538],[9,"mut_split_at","","Deprecated: use `split_at_mut`.",538],[9,"split_at_mut","","Divides one `&mut` into two at an index.",538],[9,"reverse","","Reverse the order of elements in a vector, in place.",538],[9,"unsafe_mut_ref","","Deprecated: use `unsafe_mut`.",538],[9,"unsafe_mut","","Returns an unsafe mutable pointer to the element in index",538],[9,"as_mut_ptr","","Return an unsafe mutable pointer to the vector's buffer.",538],[9,"unsafe_set","","Unsafely sets the element in index to the value.",538],[9,"init_elem","","Unchecked vector index assignment.  Does not drop the\nold value and hence is only suitable when the vector\nis newly allocated.",538],[9,"copy_memory","","Copies raw bytes from `src` to `self`.",538],[1,"Splits","","An iterator over the slices of a vector separated by elements that\nmatch a predicate function."],[1,"MutSplits","","An iterator over the subslices of the vector which are separated\nby elements that match `pred`."],[1,"MutChunks","","An iterator over a vector in (non-overlapping) mutable chunks (`size`  elements at a time). When\nthe vector len is not evenly divided by the chunk size, the last slice of the iteration will be\nthe remainder."],[6,"ImmutablePartialEqSlice","","Extension methods for vectors contain `PartialEq` elements."],[9,"position_elem","","Find the first index containing a matching value",539],[9,"rposition_elem","","Find the last index containing a matching value",539],[9,"contains","","Return true if a vector contains an element with the given value",539],[9,"starts_with","","Returns true if `needle` is a prefix of the vector.",539],[9,"ends_with","","Returns true if `needle` is a suffix of the vector.",539],[6,"ImmutableOrdSlice","","Extension methods for vectors containing `Ord` elements."],[9,"bsearch_elem","","Binary search a sorted vector for a given element.",540],[9,"binary_search_elem","","Binary search a sorted vector for a given element.",540],[1,"Items","","Immutable slice iterator"],[6,"Slice","","Any vector that can be represented as a slice."],[9,"as_slice","","Work with `self` as a slice.",541],[3,"mut_ref_slice","","Converts a pointer to A into a slice of length 1 (without copying)."],[16,"slice","","Utilities for slice manipulation"],[0,"str","std","Unicode string manipulation (`str` type)"],[3,"from_utf8_owned","std::str","Deprecated. Replaced by `String::from_utf8`."],[3,"from_byte","","Deprecated. Replaced by `String::from_byte`."],[3,"from_char","","Deprecated. Use `String::from_char` or `char::to_string()` instead."],[3,"from_chars","","Deprecated. Replaced by `String::from_chars`."],[6,"StrVector","","Methods for vectors of strings."],[9,"concat","","Concatenates a vector of strings.",542],[9,"connect","","Concatenates a vector of strings, placing a given separator between each.",542],[1,"Decompositions","","External iterator for a string's decomposition's characters.\nUse with the `std::iter` module."],[1,"Recompositions","","External iterator for a string's recomposition's characters.\nUse with the `std::iter` module."],[3,"replace","","Replaces all occurrences of one string with another."],[3,"from_utf16","","Deprecated. Use `String::from_utf16`."],[3,"from_utf16_lossy","","Deprecated. Use `String::from_utf16_lossy`."],[3,"from_utf8_lossy","","Deprecated. Use `String::from_utf8_lossy`."],[2,"MaybeOwned","","A string type that can hold either a `String` or a `&str`.\nThis can be useful as an optimization when an allocation is sometimes\nneeded but not always."],[12,"Slice","","A borrowed string.",231],[12,"Owned","","An owned string.",231],[4,"SendStr","",""],[6,"IntoMaybeOwned","","Trait for moving into a `MaybeOwned`."],[9,"into_maybe_owned","","Moves `self` into a `MaybeOwned`.",543],[0,"raw","","Unsafe string operations."],[3,"from_buf_len","std::str::raw","Deprecated. Replaced by `string::raw::from_buf_len`"],[3,"from_c_str","","Deprecated. Use `string::raw::from_buf`"],[3,"from_utf8_owned","","Deprecated. Replaced by `string::raw::from_utf8`"],[3,"from_byte","","Deprecated. Use `string::raw::from_utf8`"],[3,"c_str_to_static_slice","","Form a slice from a C string. Unsafe because the caller must ensure the\nC string has the static lifetime, or else the return value may be\ninvalidated later."],[3,"from_utf8","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8."],[3,"slice_bytes","","Takes a bytewise (not UTF-8) slice from a string."],[3,"slice_unchecked","","Takes a bytewise (not UTF-8) slice from a string."],[6,"StrAllocating","std::str","Any string that can be represented as a slice."],[9,"into_string","","Converts `self` into a `String`, not making a copy if possible.",544],[9,"into_owned","","",544],[9,"escape_default","","Escapes each char in `s` with `char::escape_default`.",544],[9,"escape_unicode","","Escapes each char in `s` with `char::escape_unicode`.",544],[9,"replace","","Replaces all occurrences of one string with another.",544],[9,"to_owned","","",544],[9,"to_utf16","","Converts to a vector of `u16` encoded as UTF-16.",544],[9,"repeat","","Given a string, makes a new string with repeated copies of it.",544],[9,"lev_distance","","Returns the Levenshtein Distance between two strings.",544],[9,"nfd_chars","","Returns an iterator over the string in Unicode Normalization Form D\n(canonical decomposition).",544],[9,"nfkd_chars","","Returns an iterator over the string in Unicode Normalization Form KD\n(compatibility decomposition).",544],[9,"nfc_chars","","An Iterator over the string in Unicode Normalization Form C\n(canonical decomposition followed by canonical composition).",544],[9,"nfkc_chars","","An Iterator over the string in Unicode Normalization Form KC\n(compatibility decomposition followed by canonical composition).",544],[3,"truncate_utf16_at_nul","","Return a slice of `v` ending at (and not including) the first NUL\n(0)."],[2,"Utf16Item","","The possibilities for values decoded from a `u16` stream."],[12,"ScalarValue","","A valid codepoint.",150],[12,"LoneSurrogate","","An invalid surrogate without its pair.",150],[6,"UnicodeStrSlice","","Methods for Unicode string slices"],[9,"graphemes","","Returns an iterator over the\n[grapheme clusters](http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries)\nof the string.",545],[9,"grapheme_indices","","Returns an iterator over the grapheme clusters of self and their byte offsets.\nSee `graphemes()` method for more information.",545],[9,"words","","An iterator over the words of a string (subsequences separated\nby any sequence of whitespace). Sequences of whitespace are\ncollapsed, so empty \"words\" are not included.",545],[9,"is_whitespace","","Returns true if the string contains only whitespace.",545],[9,"is_alphanumeric","","Returns true if the string contains only alphanumeric code\npoints.",545],[9,"width","","Returns a string's displayed width in columns, treating control\ncharacters as zero-width.",545],[9,"trim","","Returns a string with leading and trailing whitespace removed.",545],[9,"trim_left","","Returns a string with leading whitespace removed.",545],[9,"trim_right","","Returns a string with trailing whitespace removed.",545],[10,"clone","unicode::tables::grapheme","",546],[10,"clone_from","","",546],[10,"clone","unicode::u_str","",547],[10,"clone_from","","",547],[10,"next","","",547],[10,"size_hint","","",547],[10,"size_hint","","",547],[10,"chain","","",547],[10,"zip","","",547],[10,"map","","",547],[10,"filter","","",547],[10,"filter_map","","",547],[10,"enumerate","","",547],[10,"peekable","","",547],[10,"skip_while","","",547],[10,"take_while","","",547],[10,"skip","","",547],[10,"take","","",547],[10,"scan","","",547],[10,"flat_map","","",547],[10,"fuse","","",547],[10,"inspect","","",547],[10,"by_ref","","",547],[10,"advance","","",547],[10,"collect","","",547],[10,"nth","","",547],[10,"last","","",547],[10,"fold","","",547],[10,"count","","",547],[10,"all","","",547],[10,"any","","",547],[10,"find","","",547],[10,"position","","",547],[10,"max_by","","",547],[10,"min_by","","",547],[10,"next_back","","",547],[10,"rev","","",547],[10,"clone","","",548],[10,"clone_from","","",548],[10,"assert_receiver_is_total_eq","","",549],[10,"eq","","",549],[10,"ne","","",549],[10,"ne","","",549],[10,"size_hint","","",548],[10,"next","","",548],[10,"size_hint","","",548],[10,"chain","","",548],[10,"zip","","",548],[10,"map","","",548],[10,"filter","","",548],[10,"filter_map","","",548],[10,"enumerate","","",548],[10,"peekable","","",548],[10,"skip_while","","",548],[10,"take_while","","",548],[10,"skip","","",548],[10,"take","","",548],[10,"scan","","",548],[10,"flat_map","","",548],[10,"fuse","","",548],[10,"inspect","","",548],[10,"by_ref","","",548],[10,"advance","","",548],[10,"collect","","",548],[10,"nth","","",548],[10,"last","","",548],[10,"fold","","",548],[10,"count","","",548],[10,"all","","",548],[10,"any","","",548],[10,"find","","",548],[10,"position","","",548],[10,"max_by","","",548],[10,"min_by","","",548],[10,"next_back","","",548],[10,"rev","","",548],[4,"Words","std::str",""],[6,"CharEq","","Something that can be used to compare against a character"],[9,"matches","","Determine if the splitter should split at the given character",550],[9,"only_ascii","","Indicate if this is only concerned about ASCII characters,\nwhich can allow for a faster implementation.",550],[3,"utf16_items","","Create an iterator over the UTF-16 encoded codepoints in `v`,\nreturning invalid surrogates as `LoneSurrogate`s."],[6,"Str","","Any string that can be represented as a slice"],[9,"as_slice","","Work with `self` as a slice.",551],[4,"AnyLines","",""],[1,"CharSplits","","An iterator over the substrings of a string, separated by `sep`."],[6,"StrSlice","","Methods for string slices"],[9,"contains","","Returns true if one string contains another",552],[9,"contains_char","","Returns true if a string contains a char.",552],[9,"chars","","An iterator over the characters of `self`. Note, this iterates\nover Unicode code-points, not Unicode graphemes.",552],[9,"bytes","","An iterator over the bytes of `self`",552],[9,"char_indices","","An iterator over the characters of `self` and their byte offsets.",552],[9,"split","","An iterator over substrings of `self`, separated by characters\nmatched by `sep`.",552],[9,"splitn","","An iterator over substrings of `self`, separated by characters\nmatched by `sep`, restricted to splitting at most `count`\ntimes.",552],[9,"split_terminator","","An iterator over substrings of `self`, separated by characters\nmatched by `sep`.",552],[9,"rsplitn","","An iterator over substrings of `self`, separated by characters\nmatched by `sep`, starting from the end of the string.\nRestricted to splitting at most `count` times.",552],[9,"match_indices","","An iterator over the start and end indices of the disjoint\nmatches of `sep` within `self`.",552],[9,"split_str","","An iterator over the substrings of `self` separated by `sep`.",552],[9,"lines","","An iterator over the lines of a string (subsequences separated\nby `\\n`). This does not include the empty string after a\ntrailing `\\n`.",552],[9,"lines_any","","An iterator over the lines of a string, separated by either\n`\\n` or `\\r\\n`. As with `.lines()`, this does not include an\nempty trailing line.",552],[9,"char_len","","Returns the number of Unicode code points (`char`) that a\nstring holds.",552],[9,"slice","","Returns a slice of the given string from the byte range\n[`begin`..`end`).",552],[9,"slice_from","","Returns a slice of the string from `begin` to its end.",552],[9,"slice_to","","Returns a slice of the string from the beginning to byte\n`end`.",552],[9,"slice_chars","","Returns a slice of the string from the character range\n[`begin`..`end`).",552],[9,"starts_with","","Returns true if `needle` is a prefix of the string.",552],[9,"ends_with","","Returns true if `needle` is a suffix of the string.",552],[9,"trim_chars","","Returns a string with characters that match `to_trim` removed.",552],[9,"trim_left_chars","","Returns a string with leading `chars_to_trim` removed.",552],[9,"trim_right_chars","","Returns a string with trailing `chars_to_trim` removed.",552],[9,"is_char_boundary","","Check that `index`-th byte lies at the start and/or end of a\nUTF-8 code point sequence.",552],[9,"char_range_at","","Pluck a character out of a string and return the index of the next\ncharacter.",552],[9,"char_range_at_reverse","","Given a byte position and a str, return the previous char and its position.",552],[9,"char_at","","Plucks the character starting at the `i`th byte of a string.",552],[9,"char_at_reverse","","Plucks the character ending at the `i`th byte of a string.",552],[9,"as_bytes","","Work with the byte buffer of a string as a byte slice.",552],[9,"find","","Returns the byte index of the first character of `self` that\nmatches `search`.",552],[9,"rfind","","Returns the byte index of the last character of `self` that\nmatches `search`.",552],[9,"find_str","","Returns the byte index of the first matching substring",552],[9,"slice_shift_char","","Retrieves the first character from a string slice and returns\nit. This does not allocate a new string; instead, it returns a\nslice that point one character beyond the character that was\nshifted. If the string does not contain any characters,\na tuple of None and an empty string is returned instead.",552],[9,"subslice_offset","","Returns the byte offset of an inner slice relative to an enclosing outer slice.",552],[9,"as_ptr","","Return an unsafe pointer to the strings buffer.",552],[9,"utf16_units","","Return an iterator of `u16` over the string encoded as UTF-16.",552],[3,"eq_slice","","Bytewise slice equality\nNOTE: This function is (ab)used in rustc::middle::trans::_match\nto compare &[u8] byte slices that are not necessarily valid UTF-8."],[1,"CharRange","","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string."],[11,"ch","","Current `char`",553],[11,"next","","Index of the first byte of the next `char`",553],[1,"StrSplits","","An iterator over the substrings of a string separated by a given\nsearch string"],[3,"from_utf8","","Converts a vector to a string slice without performing any allocations."],[1,"MatchIndices","","An iterator over the start and end indices of the matches of a\nsubstring within a larger string"],[1,"Utf16Items","","An iterator that decodes UTF-16 encoded codepoints from a vector\nof `u16`s."],[3,"is_utf16","","Determines if a vector of `u16` contains valid UTF-16"],[3,"is_utf8","","Determines if a vector of bytes contains valid UTF-8."],[1,"GraphemeIndices","","External iterator for grapheme clusters and byte offsets."],[1,"CharSplitsN","","An iterator over the substrings of a string, separated by `sep`,\nsplitting at most `count` times."],[1,"CharOffsets","","External iterator for a string's characters and their byte offsets.\nUse with the `std::iter` module."],[1,"Graphemes","","External iterator for a string's\n[grapheme clusters](http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries)."],[4,"Bytes","",""],[3,"utf8_char_width","","Given a first byte, determine how many bytes are in this UTF-8 character"],[1,"Chars","","Iterator for the char (representing *Unicode Scalar Values*) of a string"],[16,"str","","Unicode string manipulation (`str` type)"],[0,"string","std","An owned, growable string that enforces that its contents are valid UTF-8."],[1,"String","std::string","A growable string stored as a UTF-8 encoded buffer."],[0,"raw","","Unsafe operations"],[3,"from_parts","std::string::raw","Creates a new `String` from a length, capacity, and pointer."],[3,"from_buf_len","","Creates a `String` from a `*const u8` buffer of the given length."],[3,"from_buf","","Creates a `String` from a null-terminated `*const u8` buffer."],[3,"from_utf8","","Converts a vector of bytes to a new `String` without checking if\nit contains valid UTF-8. This is unsafe because it assumes that\nthe UTF-8-ness of the vector has already been validated."],[0,"vec","std","A growable list type, written `Vec<T>` but pronounced 'vector.'"],[1,"Vec","std::vec","An owned, growable vector."],[1,"MoveItems","","An iterator that moves out of a vector."],[3,"unzip","","Converts an iterator of pairs into a pair of vectors."],[0,"raw","","Unsafe vector operations."],[3,"from_buf","std::vec::raw","Constructs a vector from an unsafe pointer to a buffer."],[0,"c_str","std","C-string manipulation and management"],[1,"CString","std::c_str","The representation of a C String."],[6,"ToCStr","","A generic trait for converting a value to a CString."],[9,"to_c_str","","Copy the receiver into a CString.",554],[9,"to_c_str_unchecked","","Unsafe variant of `to_c_str()` that doesn't check for nulls.",554],[9,"with_c_str","","Work with a temporary CString constructed from the receiver.\nThe provided `*libc::c_char` will be freed immediately upon return.",554],[9,"with_c_str_unchecked","","Unsafe variant of `with_c_str()` that doesn't check for nulls.",554],[1,"CChars","","External iterator for a CString's bytes."],[3,"from_c_multistring","","Parses a C \"multistring\", eg windows env values or\nthe req->ptr result in a uv_fs_readdir() call."],[0,"local_data","std","Task local data management"],[4,"Key","std::local_data",""],[2,"KeyValue","",""],[12,"KeyValueKey","","",416],[4,"Map","",""],[1,"Ref","","A RAII immutable reference to a task-local value."],[0,"char","std","Character manipulation (`char` type, Unicode Scalar Value)"],[3,"decompose_canonical","std::char","Compute canonical Unicode decomposition for character"],[3,"is_XID_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property"],[3,"is_digit","","Indicates whether the `char` is numeric (Nd, Nl, or No)"],[3,"is_whitespace","","\nIndicates whether a `char` is whitespace"],[3,"to_uppercase","","Convert a char to its uppercase equivalent"],[3,"escape_default","","\nReturns a 'default' ASCII and C++11-like literal escape of a `char`"],[3,"is_XID_start","","Returns whether the specified `char` satisfies the 'XID_Start' Unicode property"],[3,"is_digit_radix","","\nChecks if a `char` parses as a numeric digit in the given radix"],[5,"MAX","",""],[6,"Char","","Basic `char` manipulations."],[9,"is_digit_radix","","Checks if a `char` parses as a numeric digit in the given radix.",555],[9,"to_digit","","Converts a character to the corresponding digit.",555],[9,"from_digit","","Converts a number to the character representing it.",555],[9,"escape_unicode","","Returns the hexadecimal Unicode escape of a character.",555],[9,"escape_default","","Returns a 'default' ASCII and C++11-like literal escape of a\ncharacter.",555],[9,"len_utf8_bytes","","Returns the amount of bytes this character would need if encoded in\nUTF-8.",555],[9,"encode_utf8","","Encodes this character as UTF-8 into the provided byte buffer,\nand then returns the number of bytes written.",555],[9,"encode_utf16","","Encodes this character as UTF-16 into the provided `u16` buffer,\nand then returns the number of `u16`s written.",555],[3,"is_alphabetic","","Returns whether the specified `char` is considered a Unicode alphabetic\ncode point"],[3,"canonical_combining_class","",""],[3,"is_control","","\nIndicates whether a `char` is a control code point"],[6,"UnicodeChar","","Useful functions for Unicode characters."],[9,"is_alphabetic","","Returns whether the specified character is considered a Unicode\nalphabetic code point.",556],[9,"is_XID_start","","Returns whether the specified character satisfies the 'XID_Start'\nUnicode property.",556],[9,"is_XID_continue","","Returns whether the specified `char` satisfies the 'XID_Continue'\nUnicode property.",556],[9,"is_lowercase","","Indicates whether a character is in lowercase.",556],[9,"is_uppercase","","Indicates whether a character is in uppercase.",556],[9,"is_whitespace","","Indicates whether a character is whitespace.",556],[9,"is_alphanumeric","","Indicates whether a character is alphanumeric.",556],[9,"is_control","","Indicates whether a character is a control code point.",556],[9,"is_digit","","Indicates whether the character is numeric (Nd, Nl, or No).",556],[9,"to_lowercase","","Converts a character to its lowercase equivalent.",556],[9,"to_uppercase","","Converts a character to its uppercase equivalent.",556],[9,"width","","Returns this character's displayed width in columns, or `None` if it is a\ncontrol character other than `'\\x00'`.",556],[3,"from_u32","","Converts from `u32` to a `char`"],[3,"width","","Returns this character's displayed width in columns, or `None` if it is a\ncontrol character other than `'\\x00'`."],[3,"is_lowercase","","\nIndicates whether a `char` is in lower case"],[3,"from_digit","","\nConverts a number to the character representing it"],[3,"compose","",""],[3,"is_uppercase","","\nIndicates whether a `char` is in upper case"],[3,"to_digit","","\nConverts a `char` to the corresponding digit"],[3,"escape_unicode","","\nReturns the hexadecimal Unicode escape of a `char`"],[3,"len_utf8_bytes","","Returns the amount of bytes this `char` would need if encoded in UTF-8"],[3,"to_lowercase","","Convert a char to its lowercase equivalent"],[3,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character"],[3,"is_alphanumeric","","\nIndicates whether a `char` is alphanumeric"],[0,"comm","std","Communication primitives for concurrent tasks"],[1,"Receiver","std::comm","The receiving-half of Rust's channel type. This half can only be owned by\none task"],[1,"Messages","","An iterator over messages on a receiver, this iterator will block\nwhenever `next` is called, waiting for a new message, and `None` will be\nreturned when the corresponding channel has hung up."],[1,"Sender","","The sending-half of Rust's asynchronous channel type. This half can only be\nowned by one task, but it can be cloned to send to other tasks."],[1,"SyncSender","","The sending-half of Rust's synchronous channel type. This half can only be\nowned by one task, but it can be cloned to send to other tasks."],[2,"TryRecvError","","This enumeration is the list of the possible reasons that try_recv could not\nreturn data when called."],[12,"Empty","","This channel is currently empty, but the sender(s) have not yet\ndisconnected, so data may yet become available.",285],[12,"Disconnected","","This channel's sending half has become disconnected, and there will\nnever be any more data received on this channel",285],[2,"TrySendError","","This enumeration is the list of the possible error outcomes for the\n`SyncSender::try_send` method."],[12,"Full","","The data could not be sent on the channel because it would require that\nthe callee block to send the data.",286],[12,"RecvDisconnected","","This channel's receiving half has disconnected, so the data could not be\nsent. The data is returned back to the callee in this case.",286],[3,"channel","","Creates a new asynchronous channel, returning the sender/receiver halves."],[3,"sync_channel","","Creates a new synchronous, bounded channel."],[1,"Handle","","A handle to a receiver which is currently a member of a `Select` set of\nreceivers.  This handle is used to keep the receiver in the set as well as\ninteract with the underlying receiver."],[1,"DuplexStream","","An extension of `pipes::stream` that allows both sending and receiving."],[3,"duplex","","Creates a bidirectional stream."],[1,"Select","","The \"receiver set\" of the select interface. This structure is used to manage\na set of receivers which are being selected over."],[15,"fail!","std","The entry point for failure of rust tasks."],[15,"assert!","","Ensure that a boolean expression is `true` at runtime."],[15,"assert_eq!","","Asserts that two expressions are equal to each other, testing equality in\nboth directions."],[15,"debug_assert!","","Ensure that a boolean expression is `true` at runtime."],[15,"debug_assert_eq!","","Asserts that two expressions are equal to each other, testing equality in\nboth directions."],[15,"unreachable!","","A utility macro for indicating unreachable code. It will fail if\nexecuted. This is occasionally useful to put after loops that never\nterminate normally, but instead directly return from a function."],[15,"unimplemented!","","A standardised placeholder for marking unfinished code. It fails with the\nmessage `\"not yet implemented\"` when executed."],[15,"format!","","Use the syntax described in `std::fmt` to create a value of type `String`.\nSee `std::fmt` for more information."],[15,"write!","","Use the `format!` syntax to write data into a buffer of type `&mut Writer`.\nSee `std::fmt` for more information."],[15,"writeln!","","Equivalent to the `write!` macro, except that a newline is appended after\nthe message is written."],[15,"print!","","Equivalent to the `println!` macro except that a newline is not printed at\nthe end of the message."],[15,"println!","","Macro for printing to a task's stdout handle."],[15,"local_data_key!","","Declare a task-local key with a specific type."],[15,"try!","","Helper macro for unwrapping `Result` values while returning early with an\nerror if the value of the expression is `Err`. For more information, see\n`std::io`."],[15,"vec!","","Create a `std::vec::Vec` containing the arguments."],[15,"select!","","A macro to select an event from a number of receivers."],[15,"format_args!","","The core macro for formatted string creation & output."],[15,"env!","","Inspect an environment variable at compile time."],[15,"option_env!","","Optionally inspect an environment variable at compile time."],[15,"bytes!","","Concatenate literals into a static byte slice."],[15,"concat_idents!","","Concatenate identifiers into one identifier."],[15,"concat!","","Concatenates literals into a static string slice."],[15,"line!","","A macro which expands to the line number on which it was invoked."],[15,"col!","","A macro which expands to the column number on which it was invoked."],[15,"file!","","A macro which expands to the file name from which it was invoked."],[15,"stringify!","","A macro which stringifies its argument."],[15,"include_str!","","Includes a utf8-encoded file as a string."],[15,"include_bin!","","Includes a file as a byte slice."],[15,"module_path!","","Expands to a string that represents the current module path."],[15,"cfg!","","Boolean evaluation of configuration flags."],[15,"bitflags!","","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs."],[16,"int","",""],[16,"i8","",""],[16,"i16","",""],[16,"i32","",""],[16,"i64","",""],[16,"uint","",""],[16,"u8","",""],[16,"u16","",""],[16,"u32","",""],[16,"u64","",""],[16,"f32","",""],[16,"f64","",""],[16,"bool","",""],[16,"tuple","",""],[16,"unit","",""],[16,"slice","",""],[16,"str","",""],[10,"write","std::io","",377],[10,"flush","","",377],[10,"read","","",377],[10,"tell","","",377],[10,"seek","","",377],[10,"listen","","",377],[10,"accept","","",377],[10,"stat","std::path::posix","",384],[10,"lstat","","",384],[10,"exists","","",384],[10,"is_file","","",384],[10,"is_dir","","",384]],"paths":[[1,"OsRng"],[1,"ReaderRng"],[1,"StdRng"],[1,"TaskRng"],[6,"Rand"],[6,"Rng"],[6,"SeedableRng"],[1,"Range"],[1,"Gamma"],[1,"GammaSmallShape"],[1,"GammaLargeShape"],[1,"ChiSquared"],[1,"FisherF"],[1,"StudentT"],[1,"StandardNormal"],[1,"Normal"],[1,"LogNormal"],[1,"Exp1"],[1,"Exp"],[1,"RandSample"],[1,"WeightedChoice"],[1,"IsaacRng"],[1,"Isaac64Rng"],[1,"ReseedingRng"],[1,"ReseedWithDefault"],[1,"Open01"],[1,"Closed01"],[2,"Option"],[1,"Generator"],[1,"AsciiGenerator"],[1,"XorShiftRng"],[6,"SampleRange"],[6,"Sample"],[6,"IndependentSample"],[1,"Weighted"],[6,"Reseeder"],[6,"AsciiCast"],[6,"OwnedAsciiCast"],[6,"AsciiStr"],[6,"IntoBytes"],[6,"OwnedAsciiExt"],[6,"AsciiExt"],[1,"Ascii"],[1,"String"],[1,"Vec"],[1,"Gc"],[1,"Duration"],[6,"FromStr"],[2,"ExponentFormat"],[2,"SignificantDigits"],[2,"SignFormat"],[6,"NumStrConv"],[6,"FloatMath"],[6,"ToStrRadix"],[6,"FromStrRadix"],[6,"Zero"],[6,"One"],[6,"Signed"],[6,"Bounded"],[6,"Int"],[6,"Saturating"],[6,"CheckedAdd"],[6,"CheckedSub"],[6,"CheckedMul"],[6,"CheckedDiv"],[6,"FromPrimitive"],[6,"NumCast"],[6,"ToPrimitive"],[2,"FPCategory"],[1,"TypeId"],[1,"CovariantType"],[1,"ContravariantType"],[1,"InvariantType"],[1,"CovariantLifetime"],[1,"ContravariantLifetime"],[1,"InvariantLifetime"],[1,"NoSend"],[1,"NoCopy"],[1,"NoSync"],[1,"Managed"],[2,"Ordering"],[1,"AtomicBool"],[1,"AtomicInt"],[1,"AtomicUint"],[1,"AtomicPtr"],[1,"Cell"],[1,"RefCell"],[1,"Ref"],[1,"RefMut"],[1,"UnsafeCell"],[1,"Finallyalizer"],[1,"Enumerate"],[1,"Inspect"],[1,"Rev"],[1,"Map"],[1,"Zip"],[1,"ByRef"],[2,"MinMaxResult"],[1,"Cycle"],[1,"Chain"],[1,"Filter"],[1,"FilterMap"],[1,"Peekable"],[1,"SkipWhile"],[1,"TakeWhile"],[1,"Skip"],[1,"Take"],[1,"Scan"],[1,"FlatMap"],[1,"Fuse"],[1,"Unfold"],[1,"Counter"],[1,"Range"],[1,"RangeInclusive"],[1,"RangeStep"],[1,"RangeStepInclusive"],[1,"Repeat"],[1,"Item"],[2,"Result"],[1,"Item"],[1,"i8x16"],[1,"i16x8"],[1,"i32x4"],[1,"i64x2"],[1,"u8x16"],[1,"u16x8"],[1,"u32x4"],[1,"u64x2"],[1,"f32x4"],[1,"f64x2"],[1,"Items"],[1,"MutItems"],[1,"Splits"],[1,"MutSplits"],[1,"SplitsN"],[1,"Windows"],[1,"Chunks"],[1,"MutChunks"],[2,"BinarySearchResult"],[1,"Chars"],[1,"CharOffsets"],[1,"CharSplits"],[1,"CharSplitsN"],[1,"NaiveSearcher"],[1,"TwoWaySearcher"],[2,"Searcher"],[1,"MatchIndices"],[1,"StrSplits"],[1,"Utf16CodeUnits"],[1,"Utf16Items"],[2,"Utf16Item"],[1,"Binary"],[1,"Octal"],[1,"Decimal"],[1,"LowerHex"],[1,"UpperHex"],[1,"Radix"],[1,"RadixFmt"],[2,"Alignment"],[1,"Arguments"],[1,"Formatter"],[6,"Float"],[6,"ToString"],[6,"IntoStr"],[1,"HashMap"],[1,"Entries"],[1,"MutEntries"],[1,"MoveEntries"],[1,"HashSet"],[1,"LruCache"],[6,"Collection"],[6,"Mutable"],[6,"Map"],[6,"MutableMap"],[6,"Set"],[6,"MutableSet"],[6,"Deque"],[6,"MutableSeq"],[1,"Bitv"],[1,"Bits"],[1,"BitvSet"],[1,"BitPositions"],[1,"TwoBitPositions"],[1,"BTree"],[2,"Node"],[1,"Leaf"],[1,"Branch"],[1,"LeafElt"],[1,"BranchElt"],[1,"Items"],[1,"MoveItems"],[1,"Rawlink"],[1,"DList"],[1,"MutItems"],[1,"EnumSet"],[1,"Items"],[1,"PriorityQueue"],[1,"Items"],[1,"RingBuf"],[1,"Items"],[1,"MutItems"],[1,"SmallIntMap"],[1,"Entries"],[1,"MutEntries"],[1,"TreeMap"],[1,"Entries"],[1,"RevEntries"],[1,"MutEntries"],[1,"RevMutEntries"],[1,"MoveEntries"],[1,"SetItems"],[1,"RevSetItems"],[1,"TreeSet"],[1,"DifferenceItems"],[1,"SymDifferenceItems"],[1,"IntersectionItems"],[1,"UnionItems"],[1,"TreeNode"],[2,"Child"],[1,"TrieMap"],[1,"TrieSet"],[1,"TrieNode"],[1,"Entries"],[1,"MutEntries"],[1,"SetItems"],[1,"ElementSwaps"],[1,"Permutations"],[2,"DecompositionType"],[1,"Decompositions"],[2,"RecompositionState"],[1,"Recompositions"],[2,"MaybeOwned"],[1,"MoveItems"],[1,"PartialVec"],[1,"SipState"],[1,"SipHasher"],[1,"Box"],[1,"Rc"],[6,"ListInsertion"],[6,"CLike"],[1,"RandomSipHasher"],[6,"Hash"],[6,"Hasher"],[6,"Writer"],[6,"Spawner"],[1,"SiblingSpawner"],[1,"TaskBuilder"],[1,"Future"],[1,"TaskPool"],[1,"AtomicOption"],[1,"Queue"],[1,"Node"],[1,"Consumer"],[1,"Producer"],[1,"Queue"],[1,"Queue"],[1,"Queue"],[2,"Stolen"],[1,"BufferPool"],[1,"Worker"],[1,"Stealer"],[1,"Deque"],[1,"Buffer"],[1,"Sem"],[1,"SemGuard"],[1,"Condvar"],[1,"Semaphore"],[1,"Mutex"],[1,"RWLock"],[1,"RWLockWriteGuard"],[1,"RWLockReadGuard"],[2,"Flavor"],[1,"StaticMutex"],[1,"Mutex"],[1,"Guard"],[1,"Once"],[1,"DuplexStream"],[1,"Packet"],[1,"Select"],[1,"Handle"],[1,"Packets"],[1,"Packet"],[1,"Packet"],[2,"Failure"],[1,"Packet"],[2,"TryRecvError"],[2,"TrySendError"],[1,"Sender"],[1,"SyncSender"],[1,"Receiver"],[1,"Messages"],[1,"PoisonOnFail"],[1,"Condvar"],[1,"Mutex"],[1,"MutexGuard"],[1,"RWLock"],[1,"RWLockWriteGuard"],[1,"RWLockReadGuard"],[1,"Barrier"],[2,"Ordering"],[2,"PopResult"],[1,"Arc"],[1,"Weak"],[1,"Weak"],[1,"CVec"],[2,"Rtld"],[1,"DynamicLibrary"],[1,"Pipe"],[2,"MemoryMapKind"],[2,"MapOption"],[2,"MapError"],[1,"MemoryMap"],[1,"IoError"],[1,"FileStat"],[1,"UnstableFileStat"],[2,"IoErrorKind"],[2,"SeekStyle"],[2,"FileMode"],[2,"FileAccess"],[2,"FileType"],[1,"BufferedReader"],[1,"BufferedWriter"],[1,"LineBufferedWriter"],[1,"BufferedStream"],[1,"ChanReader"],[1,"ChanWriter"],[1,"MemWriter"],[1,"MemReader"],[1,"BufWriter"],[1,"BufReader"],[1,"TempDir"],[1,"Bytes"],[6,"PathExtensions"],[1,"File"],[1,"Directories"],[1,"Hint"],[1,"Info"],[2,"SocketType"],[2,"Flag"],[2,"Protocol"],[1,"TcpStream"],[1,"TcpListener"],[1,"TcpAcceptor"],[1,"UdpSocket"],[1,"UdpStream"],[1,"SocketAddr"],[2,"IpAddr"],[1,"UnixStream"],[1,"UnixListener"],[1,"UnixAcceptor"],[1,"PipePair"],[1,"PipeStream"],[1,"Process"],[1,"ProcessOutput"],[2,"StdioContainer"],[2,"ProcessExit"],[1,"Command"],[1,"Listener"],[2,"Signum"],[1,"StdReader"],[1,"StdWriter"],[1,"Timer"],[1,"LimitReader"],[1,"NullWriter"],[1,"ZeroReader"],[1,"NullReader"],[1,"MultiWriter"],[1,"ChainedReader"],[1,"TeeReader"],[1,"IterReader"],[6,"UpdateIoError"],[6,"Reader"],[6,"Writer"],[6,"Buffer"],[6,"Seek"],[6,"Listener"],[6,"Acceptor"],[4,"IoResult"],[1,"RefReader"],[1,"RefWriter"],[1,"Lines"],[1,"Chars"],[1,"IncomingConnections"],[1,"FilePermission"],[1,"Path"],[2,"PathPrefix"],[1,"Path"],[6,"GenericPath"],[6,"BytesContainer"],[6,"GenericPathUnsafe"],[1,"Display"],[1,"CString"],[6,"FormatWriter"],[2,"Flag"],[6,"Show"],[6,"Bool"],[6,"Char"],[6,"Signed"],[6,"Unsigned"],[6,"Octal"],[6,"Binary"],[6,"LowerHex"],[6,"UpperHex"],[6,"String"],[6,"Pointer"],[6,"Float"],[6,"LowerExp"],[6,"UpperExp"],[2,"FormatError"],[1,"Task"],[1,"Borrowed"],[1,"Stdio"],[1,"Token"],[1,"CChars"],[1,"Exclusive"],[1,"ExclusiveGuard"],[2,"KeyValue"],[1,"Ref"],[1,"TLDValue"],[1,"LocalHeap"],[1,"MemoryRegion"],[1,"StaticNativeMutex"],[1,"NativeMutex"],[1,"LockGuard"],[1,"Mutex"],[1,"LocalIo"],[2,"IpAddr"],[1,"SocketAddr"],[2,"TaskState"],[1,"TaskOpts"],[1,"BlockedTasks"],[2,"BlockedTask"],[1,"Death"],[1,"Thread"],[1,"Unwinder"],[6,"Local"],[6,"EventLoop"],[6,"Callback"],[6,"RemoteCallback"],[2,"CloseBehavior"],[1,"ProcessConfig"],[6,"IoFactory"],[6,"RtioTcpListener"],[6,"RtioTcpAcceptor"],[6,"RtioTcpStream"],[6,"RtioSocket"],[6,"RtioUdpSocket"],[6,"RtioTimer"],[6,"RtioFileStream"],[6,"RtioProcess"],[6,"RtioPipe"],[6,"RtioUnixListener"],[6,"RtioUnixAcceptor"],[6,"RtioTTY"],[6,"PausableIdleCallback"],[1,"IoError"],[2,"StdioContainer"],[2,"ProcessExit"],[2,"FileMode"],[2,"FileAccess"],[1,"FileStat"],[2,"SeekStyle"],[1,"AddrinfoHint"],[1,"AddrinfoInfo"],[6,"Runtime"],[6,"AnyRefExt"],[6,"AnyMutRefExt"],[6,"Clone"],[6,"PartialEq"],[6,"Ord"],[6,"PartialOrd"],[6,"Equiv"],[6,"Default"],[6,"Finally"],[1,"TyDesc"],[6,"TyVisitor"],[6,"FromIterator"],[6,"Extendable"],[6,"Iterator"],[6,"DoubleEndedIterator"],[6,"MutableDoubleEndedIterator"],[6,"RandomAccessIterator"],[6,"ExactSize"],[6,"AdditiveIterator"],[6,"MultiplicativeIterator"],[6,"OrdIterator"],[6,"CloneableIterator"],[6,"Drop"],[6,"Add"],[6,"Sub"],[6,"Mul"],[6,"Div"],[6,"Rem"],[6,"Neg"],[6,"Not"],[6,"BitAnd"],[6,"BitOr"],[6,"BitXor"],[6,"Shl"],[6,"Shr"],[6,"Index"],[6,"IndexMut"],[6,"Slice"],[6,"SliceMut"],[6,"Deref"],[6,"DerefMut"],[6,"Fn"],[6,"FnMut"],[6,"FnOnce"],[6,"RawPtr"],[6,"RawMutPtr"],[1,"Box"],[1,"Slice"],[1,"Closure"],[1,"Procedure"],[1,"TraitObject"],[6,"Repr"],[6,"Tuple1"],[6,"Tuple2"],[6,"Tuple3"],[6,"Tuple4"],[6,"Tuple5"],[6,"Tuple6"],[6,"Tuple7"],[6,"Tuple8"],[6,"Tuple9"],[6,"Tuple10"],[6,"Tuple11"],[6,"Tuple12"],[6,"BoxAny"],[6,"VectorVector"],[6,"CloneableVector"],[6,"ImmutableCloneableVector"],[6,"MutableSliceAllocating"],[6,"MutableOrdSlice"],[6,"ImmutableSlice"],[6,"MutableByteVector"],[6,"MutableCloneableSlice"],[6,"MutableSlice"],[6,"ImmutablePartialEqSlice"],[6,"ImmutableOrdSlice"],[6,"Slice"],[6,"StrVector"],[6,"IntoMaybeOwned"],[6,"StrAllocating"],[6,"UnicodeStrSlice"],[2,"GraphemeCat"],[1,"GraphemeIndices"],[1,"Graphemes"],[2,"GraphemeState"],[6,"CharEq"],[6,"Str"],[6,"StrSlice"],[1,"CharRange"],[6,"ToCStr"],[6,"Char"],[6,"UnicodeChar"]]};

searchIndex['libc'] = {"items":[[0,"","libc","Bindings for the C standard library and other platform libraries"],[2,"Nullable","","A wrapper for a nullable pointer. Don't use this except for interacting\nwith libc. Basically Option, but without the dependence on libstd."],[12,"Null","","",0],[12,"NotNull","","",0],[0,"types","",""],[0,"common","libc::types",""],[0,"c95","libc::types::common",""],[2,"c_void","libc::types::common::c95","Type used to construct void pointers for use with C."],[12,"__variant1","","",1],[12,"__variant2","","",1],[2,"FILE","",""],[2,"fpos_t","",""],[0,"c99","libc::types::common",""],[4,"int8_t","libc::types::common::c99",""],[4,"int16_t","",""],[4,"int32_t","",""],[4,"int64_t","",""],[4,"uint8_t","",""],[4,"uint16_t","",""],[4,"uint32_t","",""],[4,"uint64_t","",""],[0,"posix88","libc::types::common",""],[2,"DIR","libc::types::common::posix88",""],[2,"dirent_t","",""],[0,"os","libc::types",""],[0,"common","libc::types::os",""],[0,"posix01","libc::types::os::common",""],[1,"glob_t","libc::types::os::common::posix01",""],[11,"gl_pathc","","",2],[11,"gl_pathv","","",2],[11,"gl_offs","","",2],[11,"__unused1","","",2],[11,"__unused2","","",2],[11,"__unused3","","",2],[11,"__unused4","","",2],[11,"__unused5","","",2],[1,"timeval","",""],[11,"tv_sec","","",3],[11,"tv_usec","","",3],[1,"timespec","",""],[11,"tv_sec","","",4],[11,"tv_nsec","","",4],[2,"timezone","",""],[4,"pthread_t","",""],[4,"sighandler_t","",""],[0,"bsd44","libc::types::os::common",""],[1,"sockaddr","libc::types::os::common::bsd44",""],[11,"sa_family","","",5],[11,"sa_data","","",5],[1,"sockaddr_storage","",""],[11,"ss_family","","",6],[11,"__ss_align","","",6],[11,"__ss_pad2","","",6],[1,"sockaddr_in","",""],[11,"sin_family","","",7],[11,"sin_port","","",7],[11,"sin_addr","","",7],[11,"sin_zero","","",7],[1,"in_addr","",""],[11,"s_addr","","",8],[1,"sockaddr_in6","",""],[11,"sin6_family","","",9],[11,"sin6_port","","",9],[11,"sin6_flowinfo","","",9],[11,"sin6_addr","","",9],[11,"sin6_scope_id","","",9],[1,"in6_addr","",""],[11,"s6_addr","","",10],[1,"ip_mreq","",""],[11,"imr_multiaddr","","",11],[11,"imr_interface","","",11],[1,"ip6_mreq","",""],[11,"ipv6mr_multiaddr","","",12],[11,"ipv6mr_interface","","",12],[1,"addrinfo","",""],[11,"ai_flags","","",13],[11,"ai_family","","",13],[11,"ai_socktype","","",13],[11,"ai_protocol","","",13],[11,"ai_addrlen","","",13],[11,"ai_addr","","",13],[11,"ai_canonname","","",13],[11,"ai_next","","",13],[1,"sockaddr_un","",""],[11,"sun_family","","",14],[11,"sun_path","","",14],[1,"ifaddrs","",""],[11,"ifa_next","","",15],[11,"ifa_name","","",15],[11,"ifa_flags","","",15],[11,"ifa_addr","","",15],[11,"ifa_netmask","","",15],[11,"ifa_ifu","","",15],[11,"ifa_data","","",15],[4,"socklen_t","",""],[4,"sa_family_t","",""],[4,"in_port_t","",""],[4,"in_addr_t","",""],[0,"arch","libc::types::os",""],[0,"c95","libc::types::os::arch",""],[4,"c_char","libc::types::os::arch::c95",""],[4,"c_schar","",""],[4,"c_uchar","",""],[4,"c_short","",""],[4,"c_ushort","",""],[4,"c_int","",""],[4,"c_uint","",""],[4,"c_long","",""],[4,"c_ulong","",""],[4,"c_float","",""],[4,"c_double","",""],[4,"size_t","",""],[4,"ptrdiff_t","",""],[4,"clock_t","",""],[4,"time_t","",""],[4,"suseconds_t","",""],[4,"wchar_t","",""],[0,"c99","libc::types::os::arch",""],[4,"c_longlong","libc::types::os::arch::c99",""],[4,"c_ulonglong","",""],[4,"intptr_t","",""],[4,"uintptr_t","",""],[0,"posix88","libc::types::os::arch",""],[4,"off_t","libc::types::os::arch::posix88",""],[4,"dev_t","",""],[4,"ino_t","",""],[4,"pid_t","",""],[4,"uid_t","",""],[4,"gid_t","",""],[4,"useconds_t","",""],[4,"mode_t","",""],[4,"ssize_t","",""],[0,"posix01","libc::types::os::arch",""],[1,"stat","libc::types::os::arch::posix01",""],[11,"st_dev","","",16],[11,"st_ino","","",16],[11,"st_nlink","","",16],[11,"st_mode","","",16],[11,"st_uid","","",16],[11,"st_gid","","",16],[11,"__pad0","","",16],[11,"st_rdev","","",16],[11,"st_size","","",16],[11,"st_blksize","","",16],[11,"st_blocks","","",16],[11,"st_atime","","",16],[11,"st_atime_nsec","","",16],[11,"st_mtime","","",16],[11,"st_mtime_nsec","","",16],[11,"st_ctime","","",16],[11,"st_ctime_nsec","","",16],[11,"__unused","","",16],[1,"utimbuf","",""],[11,"actime","","",17],[11,"modtime","","",17],[1,"pthread_attr_t","",""],[11,"__size","","",18],[4,"nlink_t","",""],[4,"blksize_t","",""],[4,"blkcnt_t","",""],[0,"extra","libc::types::os::arch",""],[1,"sockaddr_ll","libc::types::os::arch::extra",""],[11,"sll_family","","",19],[11,"sll_protocol","","",19],[11,"sll_ifindex","","",19],[11,"sll_hatype","","",19],[11,"sll_pkttype","","",19],[11,"sll_halen","","",19],[11,"sll_addr","","",19],[0,"consts","libc",""],[0,"os","libc::consts",""],[0,"c95","libc::consts::os",""],[5,"EXIT_FAILURE","libc::consts::os::c95",""],[5,"EXIT_SUCCESS","",""],[5,"RAND_MAX","",""],[5,"EOF","",""],[5,"SEEK_SET","",""],[5,"SEEK_CUR","",""],[5,"SEEK_END","",""],[5,"_IOFBF","",""],[5,"_IONBF","",""],[5,"_IOLBF","",""],[5,"BUFSIZ","",""],[5,"FOPEN_MAX","",""],[5,"FILENAME_MAX","",""],[5,"L_tmpnam","",""],[5,"TMP_MAX","",""],[0,"posix88","libc::consts::os",""],[5,"O_RDONLY","libc::consts::os::posix88",""],[5,"O_WRONLY","",""],[5,"O_RDWR","",""],[5,"O_APPEND","",""],[5,"O_CREAT","",""],[5,"O_EXCL","",""],[5,"O_TRUNC","",""],[5,"S_IFIFO","",""],[5,"S_IFCHR","",""],[5,"S_IFBLK","",""],[5,"S_IFDIR","",""],[5,"S_IFREG","",""],[5,"S_IFLNK","",""],[5,"S_IFMT","",""],[5,"S_IEXEC","",""],[5,"S_IWRITE","",""],[5,"S_IREAD","",""],[5,"S_IRWXU","",""],[5,"S_IXUSR","",""],[5,"S_IWUSR","",""],[5,"S_IRUSR","",""],[5,"F_OK","",""],[5,"R_OK","",""],[5,"W_OK","",""],[5,"X_OK","",""],[5,"STDIN_FILENO","",""],[5,"STDOUT_FILENO","",""],[5,"STDERR_FILENO","",""],[5,"F_LOCK","",""],[5,"F_TEST","",""],[5,"F_TLOCK","",""],[5,"F_ULOCK","",""],[5,"SIGHUP","",""],[5,"SIGINT","",""],[5,"SIGQUIT","",""],[5,"SIGILL","",""],[5,"SIGABRT","",""],[5,"SIGFPE","",""],[5,"SIGKILL","",""],[5,"SIGSEGV","",""],[5,"SIGPIPE","",""],[5,"SIGALRM","",""],[5,"SIGTERM","",""],[5,"PROT_NONE","",""],[5,"PROT_READ","",""],[5,"PROT_WRITE","",""],[5,"PROT_EXEC","",""],[5,"MAP_FILE","",""],[5,"MAP_SHARED","",""],[5,"MAP_PRIVATE","",""],[5,"MAP_FIXED","",""],[5,"MAP_ANON","",""],[5,"MAP_FAILED","",""],[5,"MCL_CURRENT","",""],[5,"MCL_FUTURE","",""],[5,"MS_ASYNC","",""],[5,"MS_INVALIDATE","",""],[5,"MS_SYNC","",""],[5,"EPERM","",""],[5,"ENOENT","",""],[5,"ESRCH","",""],[5,"EINTR","",""],[5,"EIO","",""],[5,"ENXIO","",""],[5,"E2BIG","",""],[5,"ENOEXEC","",""],[5,"EBADF","",""],[5,"ECHILD","",""],[5,"EAGAIN","",""],[5,"ENOMEM","",""],[5,"EACCES","",""],[5,"EFAULT","",""],[5,"ENOTBLK","",""],[5,"EBUSY","",""],[5,"EEXIST","",""],[5,"EXDEV","",""],[5,"ENODEV","",""],[5,"ENOTDIR","",""],[5,"EISDIR","",""],[5,"EINVAL","",""],[5,"ENFILE","",""],[5,"EMFILE","",""],[5,"ENOTTY","",""],[5,"ETXTBSY","",""],[5,"EFBIG","",""],[5,"ENOSPC","",""],[5,"ESPIPE","",""],[5,"EROFS","",""],[5,"EMLINK","",""],[5,"EPIPE","",""],[5,"EDOM","",""],[5,"ERANGE","",""],[5,"EDEADLK","",""],[5,"ENAMETOOLONG","",""],[5,"ENOLCK","",""],[5,"ENOSYS","",""],[5,"ENOTEMPTY","",""],[5,"ELOOP","",""],[5,"EWOULDBLOCK","",""],[5,"ENOMSG","",""],[5,"EIDRM","",""],[5,"ECHRNG","",""],[5,"EL2NSYNC","",""],[5,"EL3HLT","",""],[5,"EL3RST","",""],[5,"ELNRNG","",""],[5,"EUNATCH","",""],[5,"ENOCSI","",""],[5,"EL2HLT","",""],[5,"EBADE","",""],[5,"EBADR","",""],[5,"EXFULL","",""],[5,"ENOANO","",""],[5,"EBADRQC","",""],[5,"EBADSLT","",""],[5,"EDEADLOCK","",""],[5,"EBFONT","",""],[5,"ENOSTR","",""],[5,"ENODATA","",""],[5,"ETIME","",""],[5,"ENOSR","",""],[5,"ENONET","",""],[5,"ENOPKG","",""],[5,"EREMOTE","",""],[5,"ENOLINK","",""],[5,"EADV","",""],[5,"ESRMNT","",""],[5,"ECOMM","",""],[5,"EPROTO","",""],[5,"EMULTIHOP","",""],[5,"EDOTDOT","",""],[5,"EBADMSG","",""],[5,"EOVERFLOW","",""],[5,"ENOTUNIQ","",""],[5,"EBADFD","",""],[5,"EREMCHG","",""],[5,"ELIBACC","",""],[5,"ELIBBAD","",""],[5,"ELIBSCN","",""],[5,"ELIBMAX","",""],[5,"ELIBEXEC","",""],[5,"EILSEQ","",""],[5,"ERESTART","",""],[5,"ESTRPIPE","",""],[5,"EUSERS","",""],[5,"ENOTSOCK","",""],[5,"EDESTADDRREQ","",""],[5,"EMSGSIZE","",""],[5,"EPROTOTYPE","",""],[5,"ENOPROTOOPT","",""],[5,"EPROTONOSUPPORT","",""],[5,"ESOCKTNOSUPPORT","",""],[5,"EOPNOTSUPP","",""],[5,"EPFNOSUPPORT","",""],[5,"EAFNOSUPPORT","",""],[5,"EADDRINUSE","",""],[5,"EADDRNOTAVAIL","",""],[5,"ENETDOWN","",""],[5,"ENETUNREACH","",""],[5,"ENETRESET","",""],[5,"ECONNABORTED","",""],[5,"ECONNRESET","",""],[5,"ENOBUFS","",""],[5,"EISCONN","",""],[5,"ENOTCONN","",""],[5,"ESHUTDOWN","",""],[5,"ETOOMANYREFS","",""],[5,"ETIMEDOUT","",""],[5,"ECONNREFUSED","",""],[5,"EHOSTDOWN","",""],[5,"EHOSTUNREACH","",""],[5,"EALREADY","",""],[5,"EINPROGRESS","",""],[5,"ESTALE","",""],[5,"EUCLEAN","",""],[5,"ENOTNAM","",""],[5,"ENAVAIL","",""],[5,"EISNAM","",""],[5,"EREMOTEIO","",""],[5,"EDQUOT","",""],[5,"ENOMEDIUM","",""],[5,"EMEDIUMTYPE","",""],[5,"ECANCELED","",""],[5,"ENOKEY","",""],[5,"EKEYEXPIRED","",""],[5,"EKEYREVOKED","",""],[5,"EKEYREJECTED","",""],[5,"EOWNERDEAD","",""],[5,"ENOTRECOVERABLE","",""],[5,"ERFKILL","",""],[5,"EHWPOISON","",""],[0,"posix01","libc::consts::os",""],[5,"F_DUPFD","libc::consts::os::posix01",""],[5,"F_GETFD","",""],[5,"F_SETFD","",""],[5,"F_GETFL","",""],[5,"F_SETFL","",""],[5,"SIGTRAP","",""],[5,"SIGPIPE","",""],[5,"SIG_IGN","",""],[5,"GLOB_ERR","",""],[5,"GLOB_MARK","",""],[5,"GLOB_NOSORT","",""],[5,"GLOB_DOOFFS","",""],[5,"GLOB_NOCHECK","",""],[5,"GLOB_APPEND","",""],[5,"GLOB_NOESCAPE","",""],[5,"GLOB_NOSPACE","",""],[5,"GLOB_ABORTED","",""],[5,"GLOB_NOMATCH","",""],[5,"POSIX_MADV_NORMAL","",""],[5,"POSIX_MADV_RANDOM","",""],[5,"POSIX_MADV_SEQUENTIAL","",""],[5,"POSIX_MADV_WILLNEED","",""],[5,"POSIX_MADV_DONTNEED","",""],[5,"_SC_MQ_PRIO_MAX","",""],[5,"_SC_IOV_MAX","",""],[5,"_SC_GETGR_R_SIZE_MAX","",""],[5,"_SC_GETPW_R_SIZE_MAX","",""],[5,"_SC_LOGIN_NAME_MAX","",""],[5,"_SC_TTY_NAME_MAX","",""],[5,"_SC_THREADS","",""],[5,"_SC_THREAD_SAFE_FUNCTIONS","",""],[5,"_SC_THREAD_DESTRUCTOR_ITERATIONS","",""],[5,"_SC_THREAD_KEYS_MAX","",""],[5,"_SC_THREAD_STACK_MIN","",""],[5,"_SC_THREAD_THREADS_MAX","",""],[5,"_SC_THREAD_ATTR_STACKADDR","",""],[5,"_SC_THREAD_ATTR_STACKSIZE","",""],[5,"_SC_THREAD_PRIORITY_SCHEDULING","",""],[5,"_SC_THREAD_PRIO_INHERIT","",""],[5,"_SC_THREAD_PRIO_PROTECT","",""],[5,"_SC_THREAD_PROCESS_SHARED","",""],[5,"_SC_ATEXIT_MAX","",""],[5,"_SC_XOPEN_VERSION","",""],[5,"_SC_XOPEN_XCU_VERSION","",""],[5,"_SC_XOPEN_UNIX","",""],[5,"_SC_XOPEN_CRYPT","",""],[5,"_SC_XOPEN_ENH_I18N","",""],[5,"_SC_XOPEN_SHM","",""],[5,"_SC_XOPEN_LEGACY","",""],[5,"_SC_XOPEN_REALTIME","",""],[5,"_SC_XOPEN_REALTIME_THREADS","",""],[5,"PTHREAD_CREATE_JOINABLE","",""],[5,"PTHREAD_CREATE_DETACHED","",""],[5,"PTHREAD_STACK_MIN","",""],[5,"CLOCK_REALTIME","",""],[5,"CLOCK_MONOTONIC","",""],[0,"bsd44","libc::consts::os",""],[5,"MADV_NORMAL","libc::consts::os::bsd44",""],[5,"MADV_RANDOM","",""],[5,"MADV_SEQUENTIAL","",""],[5,"MADV_WILLNEED","",""],[5,"MADV_DONTNEED","",""],[5,"MADV_REMOVE","",""],[5,"MADV_DONTFORK","",""],[5,"MADV_DOFORK","",""],[5,"MADV_MERGEABLE","",""],[5,"MADV_UNMERGEABLE","",""],[5,"MADV_HWPOISON","",""],[5,"IFF_LOOPBACK","",""],[5,"AF_UNIX","",""],[5,"AF_INET","",""],[5,"AF_INET6","",""],[5,"SOCK_STREAM","",""],[5,"SOCK_DGRAM","",""],[5,"SOCK_RAW","",""],[5,"IPPROTO_TCP","",""],[5,"IPPROTO_IP","",""],[5,"IPPROTO_IPV6","",""],[5,"IP_MULTICAST_TTL","",""],[5,"IP_MULTICAST_LOOP","",""],[5,"IP_TTL","",""],[5,"IP_HDRINCL","",""],[5,"IP_ADD_MEMBERSHIP","",""],[5,"IP_DROP_MEMBERSHIP","",""],[5,"IPV6_ADD_MEMBERSHIP","",""],[5,"IPV6_DROP_MEMBERSHIP","",""],[5,"TCP_NODELAY","",""],[5,"SOL_SOCKET","",""],[5,"SO_KEEPALIVE","",""],[5,"SO_BROADCAST","",""],[5,"SO_REUSEADDR","",""],[5,"SO_ERROR","",""],[5,"SHUT_RD","",""],[5,"SHUT_WR","",""],[5,"SHUT_RDWR","",""],[0,"extra","libc::consts::os",""],[5,"AF_PACKET","libc::consts::os::extra",""],[5,"IPPROTO_RAW","",""],[5,"O_RSYNC","",""],[5,"O_DSYNC","",""],[5,"O_NONBLOCK","",""],[5,"O_SYNC","",""],[5,"PROT_GROWSDOWN","",""],[5,"PROT_GROWSUP","",""],[5,"MAP_TYPE","",""],[5,"MAP_ANONYMOUS","",""],[5,"MAP_32BIT","",""],[5,"MAP_GROWSDOWN","",""],[5,"MAP_DENYWRITE","",""],[5,"MAP_EXECUTABLE","",""],[5,"MAP_LOCKED","",""],[5,"MAP_NONRESERVE","",""],[5,"MAP_POPULATE","",""],[5,"MAP_NONBLOCK","",""],[5,"MAP_STACK","",""],[0,"sysconf","libc::consts::os",""],[5,"_SC_ARG_MAX","libc::consts::os::sysconf",""],[5,"_SC_CHILD_MAX","",""],[5,"_SC_CLK_TCK","",""],[5,"_SC_NGROUPS_MAX","",""],[5,"_SC_OPEN_MAX","",""],[5,"_SC_STREAM_MAX","",""],[5,"_SC_TZNAME_MAX","",""],[5,"_SC_JOB_CONTROL","",""],[5,"_SC_SAVED_IDS","",""],[5,"_SC_REALTIME_SIGNALS","",""],[5,"_SC_PRIORITY_SCHEDULING","",""],[5,"_SC_TIMERS","",""],[5,"_SC_ASYNCHRONOUS_IO","",""],[5,"_SC_PRIORITIZED_IO","",""],[5,"_SC_SYNCHRONIZED_IO","",""],[5,"_SC_FSYNC","",""],[5,"_SC_MAPPED_FILES","",""],[5,"_SC_MEMLOCK","",""],[5,"_SC_MEMLOCK_RANGE","",""],[5,"_SC_MEMORY_PROTECTION","",""],[5,"_SC_MESSAGE_PASSING","",""],[5,"_SC_SEMAPHORES","",""],[5,"_SC_SHARED_MEMORY_OBJECTS","",""],[5,"_SC_AIO_LISTIO_MAX","",""],[5,"_SC_AIO_MAX","",""],[5,"_SC_AIO_PRIO_DELTA_MAX","",""],[5,"_SC_DELAYTIMER_MAX","",""],[5,"_SC_MQ_OPEN_MAX","",""],[5,"_SC_VERSION","",""],[5,"_SC_PAGESIZE","",""],[5,"_SC_RTSIG_MAX","",""],[5,"_SC_SEM_NSEMS_MAX","",""],[5,"_SC_SEM_VALUE_MAX","",""],[5,"_SC_SIGQUEUE_MAX","",""],[5,"_SC_TIMER_MAX","",""],[5,"_SC_BC_BASE_MAX","",""],[5,"_SC_BC_DIM_MAX","",""],[5,"_SC_BC_SCALE_MAX","",""],[5,"_SC_BC_STRING_MAX","",""],[5,"_SC_COLL_WEIGHTS_MAX","",""],[5,"_SC_EXPR_NEST_MAX","",""],[5,"_SC_LINE_MAX","",""],[5,"_SC_RE_DUP_MAX","",""],[5,"_SC_2_VERSION","",""],[5,"_SC_2_C_BIND","",""],[5,"_SC_2_C_DEV","",""],[5,"_SC_2_FORT_DEV","",""],[5,"_SC_2_FORT_RUN","",""],[5,"_SC_2_SW_DEV","",""],[5,"_SC_2_LOCALEDEF","",""],[5,"_SC_2_CHAR_TERM","",""],[5,"_SC_2_C_VERSION","",""],[5,"_SC_2_UPE","",""],[5,"_SC_XBS5_ILP32_OFF32","",""],[5,"_SC_XBS5_ILP32_OFFBIG","",""],[5,"_SC_XBS5_LPBIG_OFFBIG","",""],[0,"funcs","libc",""],[0,"c95","libc::funcs",""],[0,"ctype","libc::funcs::c95",""],[13,"isalnum","libc::funcs::c95::ctype",""],[13,"isalpha","",""],[13,"iscntrl","",""],[13,"isdigit","",""],[13,"isgraph","",""],[13,"islower","",""],[13,"isprint","",""],[13,"ispunct","",""],[13,"isspace","",""],[13,"isupper","",""],[13,"isxdigit","",""],[13,"tolower","",""],[13,"toupper","",""],[0,"stdio","libc::funcs::c95",""],[13,"fopen","libc::funcs::c95::stdio",""],[13,"freopen","",""],[13,"fflush","",""],[13,"fclose","",""],[13,"remove","",""],[13,"rename","",""],[13,"tmpfile","",""],[13,"setvbuf","",""],[13,"setbuf","",""],[13,"fgetc","",""],[13,"fgets","",""],[13,"fputc","",""],[13,"fputs","",""],[13,"puts","",""],[13,"ungetc","",""],[13,"fread","",""],[13,"fwrite","",""],[13,"fseek","",""],[13,"ftell","",""],[13,"rewind","",""],[13,"fgetpos","",""],[13,"fsetpos","",""],[13,"feof","",""],[13,"ferror","",""],[13,"perror","",""],[0,"stdlib","libc::funcs::c95",""],[13,"abs","libc::funcs::c95::stdlib",""],[13,"labs","",""],[13,"atof","",""],[13,"atoi","",""],[13,"strtod","",""],[13,"strtol","",""],[13,"strtoul","",""],[13,"calloc","",""],[13,"malloc","",""],[13,"realloc","",""],[13,"free","",""],[13,"exit","",""],[13,"_exit","",""],[13,"system","",""],[13,"getenv","",""],[13,"rand","",""],[13,"srand","",""],[0,"string","libc::funcs::c95",""],[13,"strcpy","libc::funcs::c95::string",""],[13,"strncpy","",""],[13,"strcat","",""],[13,"strncat","",""],[13,"strcmp","",""],[13,"strncmp","",""],[13,"strcoll","",""],[13,"strchr","",""],[13,"strrchr","",""],[13,"strspn","",""],[13,"strcspn","",""],[13,"strpbrk","",""],[13,"strstr","",""],[13,"strlen","",""],[13,"strerror","",""],[13,"strtok","",""],[13,"strxfrm","",""],[13,"wcslen","",""],[13,"memcmp","",""],[13,"memchr","",""],[0,"posix88","libc::funcs",""],[0,"stat_","libc::funcs::posix88",""],[13,"chmod","libc::funcs::posix88::stat_",""],[13,"fchmod","",""],[13,"fstat","",""],[13,"mkdir","",""],[13,"mkfifo","",""],[13,"stat","",""],[0,"stdio","libc::funcs::posix88",""],[13,"popen","libc::funcs::posix88::stdio",""],[13,"pclose","",""],[13,"fdopen","",""],[13,"fileno","",""],[0,"fcntl","libc::funcs::posix88",""],[13,"open","libc::funcs::posix88::fcntl",""],[13,"creat","",""],[13,"fcntl","",""],[0,"dirent","libc::funcs::posix88",""],[13,"opendir","libc::funcs::posix88::dirent",""],[13,"readdir_r","",""],[13,"closedir","",""],[13,"rewinddir","",""],[13,"seekdir","",""],[13,"telldir","",""],[0,"unistd","libc::funcs::posix88",""],[13,"access","libc::funcs::posix88::unistd",""],[13,"alarm","",""],[13,"chdir","",""],[13,"chown","",""],[13,"close","",""],[13,"dup","",""],[13,"dup2","",""],[13,"execv","",""],[13,"execve","",""],[13,"execvp","",""],[13,"fork","",""],[13,"fpathconf","",""],[13,"getcwd","",""],[13,"getegid","",""],[13,"geteuid","",""],[13,"getgid","",""],[13,"getgroups","",""],[13,"getlogin","",""],[13,"getopt","",""],[13,"getpgrp","",""],[13,"getpid","",""],[13,"getppid","",""],[13,"getuid","",""],[13,"isatty","",""],[13,"link","",""],[13,"lseek","",""],[13,"pathconf","",""],[13,"pause","",""],[13,"pipe","",""],[13,"read","",""],[13,"rmdir","",""],[13,"setgid","",""],[13,"setpgid","",""],[13,"setsid","",""],[13,"setuid","",""],[13,"sleep","",""],[13,"usleep","",""],[13,"nanosleep","",""],[13,"sysconf","",""],[13,"tcgetpgrp","",""],[13,"ttyname","",""],[13,"unlink","",""],[13,"write","",""],[13,"pread","",""],[13,"pwrite","",""],[13,"utime","",""],[5,"_PC_NAME_MAX","",""],[0,"signal","libc::funcs::posix88",""],[13,"kill","libc::funcs::posix88::signal",""],[0,"mman","libc::funcs::posix88",""],[13,"mlock","libc::funcs::posix88::mman",""],[13,"munlock","",""],[13,"mlockall","",""],[13,"munlockall","",""],[13,"mmap","",""],[13,"munmap","",""],[13,"mprotect","",""],[13,"msync","",""],[13,"shm_open","",""],[13,"shm_unlink","",""],[0,"net","libc::funcs::posix88",""],[13,"if_nametoindex","libc::funcs::posix88::net",""],[0,"posix01","libc::funcs",""],[0,"stat_","libc::funcs::posix01",""],[13,"lstat","libc::funcs::posix01::stat_",""],[0,"unistd","libc::funcs::posix01",""],[13,"readlink","libc::funcs::posix01::unistd",""],[13,"fsync","",""],[13,"fdatasync","",""],[13,"setenv","",""],[13,"unsetenv","",""],[13,"putenv","",""],[13,"symlink","",""],[13,"ftruncate","",""],[0,"signal","libc::funcs::posix01",""],[13,"signal","libc::funcs::posix01::signal",""],[0,"glob","libc::funcs::posix01",""],[13,"glob","libc::funcs::posix01::glob",""],[13,"globfree","",""],[0,"mman","libc::funcs::posix01",""],[13,"posix_madvise","libc::funcs::posix01::mman",""],[0,"bsd43","libc::funcs",""],[13,"socket","libc::funcs::bsd43",""],[13,"connect","",""],[13,"bind","",""],[13,"listen","",""],[13,"accept","",""],[13,"getpeername","",""],[13,"getsockname","",""],[13,"setsockopt","",""],[13,"recv","",""],[13,"send","",""],[13,"recvfrom","",""],[13,"sendto","",""],[13,"getifaddrs","",""],[13,"freeifaddrs","",""],[13,"shutdown","",""],[0,"bsd44","libc::funcs",""],[13,"getdtablesize","libc::funcs::bsd44",""],[13,"ioctl","",""],[13,"madvise","",""],[13,"mincore","",""]],"paths":[[2,"Nullable"],[2,"c_void"],[1,"glob_t"],[1,"timeval"],[1,"timespec"],[1,"sockaddr"],[1,"sockaddr_storage"],[1,"sockaddr_in"],[1,"in_addr"],[1,"sockaddr_in6"],[1,"in6_addr"],[1,"ip_mreq"],[1,"ip6_mreq"],[1,"addrinfo"],[1,"sockaddr_un"],[1,"ifaddrs"],[1,"stat"],[1,"utimbuf"],[1,"pthread_attr_t"],[1,"sockaddr_ll"]]};

initSearch(searchIndex);
